/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    /**
     * ECsgoGCMsg enum.
     * @exports ECsgoGCMsg
     * @enum {string}
     * @property {number} k_EMsgGCCStrike15_v2_Base=9100 k_EMsgGCCStrike15_v2_Base value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingStart=9101 k_EMsgGCCStrike15_v2_MatchmakingStart value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingStop=9102 k_EMsgGCCStrike15_v2_MatchmakingStop value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing=9103 k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate=9104 k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve=9105 k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse=9106 k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve=9107 k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats=9108 k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello=9109 k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello=9110 k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd=9111 k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon=9112 k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick=9113 k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm=9114 k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats=9115 k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate=9116 k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate=9117 k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty=9118 k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty value
     * @property {number} k_EMsgGCCStrike15_v2_ClientReportPlayer=9119 k_EMsgGCCStrike15_v2_ClientReportPlayer value
     * @property {number} k_EMsgGCCStrike15_v2_ClientReportServer=9120 k_EMsgGCCStrike15_v2_ClientReportServer value
     * @property {number} k_EMsgGCCStrike15_v2_ClientCommendPlayer=9121 k_EMsgGCCStrike15_v2_ClientCommendPlayer value
     * @property {number} k_EMsgGCCStrike15_v2_ClientReportResponse=9122 k_EMsgGCCStrike15_v2_ClientReportResponse value
     * @property {number} k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery=9123 k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery value
     * @property {number} k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse=9124 k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse value
     * @property {number} k_EMsgGCCStrike15_v2_WatchInfoUsers=9126 k_EMsgGCCStrike15_v2_WatchInfoUsers value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile=9127 k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile value
     * @property {number} k_EMsgGCCStrike15_v2_PlayersProfile=9128 k_EMsgGCCStrike15_v2_PlayersProfile value
     * @property {number} k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate=9131 k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment=9132 k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment value
     * @property {number} k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus=9133 k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus value
     * @property {number} k_EMsgGCCStrike15_v2_GC2ClientTextMsg=9134 k_EMsgGCCStrike15_v2_GC2ClientTextMsg value
     * @property {number} k_EMsgGCCStrike15_v2_Client2GCTextMsg=9135 k_EMsgGCCStrike15_v2_Client2GCTextMsg value
     * @property {number} k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops=9136 k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops value
     * @property {number} k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification=9137 k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2=9138 k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 value
     * @property {number} k_EMsgGCCStrike15_v2_MatchList=9139 k_EMsgGCCStrike15_v2_MatchList value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames=9140 k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames=9141 k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames value
     * @property {number} k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate=9142 k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo=9144 k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo value
     * @property {number} k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification=9145 k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames=9146 k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo=9147 k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo value
     * @property {number} k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest=9148 k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest value
     * @property {number} k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse=9149 k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse value
     * @property {number} k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo=9150 k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo value
     * @property {number} k_EMsgGCToGCReloadVersions=9151 k_EMsgGCToGCReloadVersions value
     * @property {number} k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote=9152 k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote value
     * @property {number} k_EMsgGCCStrike15_v2_Server2GCClientValidate=9153 k_EMsgGCCStrike15_v2_Server2GCClientValidate value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser=9154 k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser value
     * @property {number} k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure=9155 k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure value
     * @property {number} k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest=9156 k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest value
     * @property {number} k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse=9157 k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse value
     * @property {number} k_EMsgGCCStrike15_v2_AccountPrivacySettings=9158 k_EMsgGCCStrike15_v2_AccountPrivacySettings value
     * @property {number} k_EMsgGCCStrike15_v2_SetMyActivityInfo=9159 k_EMsgGCCStrike15_v2_SetMyActivityInfo value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions=9160 k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions value
     * @property {number} k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions=9161 k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions value
     * @property {number} k_EMsgGCCStrike15_v2_DraftSummary=9162 k_EMsgGCCStrike15_v2_DraftSummary value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData=9163 k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestJoinServerData=9164 k_EMsgGCCStrike15_v2_ClientRequestJoinServerData value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestNewMission=9165 k_EMsgGCCStrike15_v2_ClientRequestNewMission value
     * @property {number} k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded=9166 k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded value
     * @property {number} k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo=9167 k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo value
     * @property {number} k_EMsgGC_GlobalGame_Subscribe=9168 k_EMsgGC_GlobalGame_Subscribe value
     * @property {number} k_EMsgGC_GlobalGame_Unsubscribe=9169 k_EMsgGC_GlobalGame_Unsubscribe value
     * @property {number} k_EMsgGC_GlobalGame_Play=9170 k_EMsgGC_GlobalGame_Play value
     * @property {number} k_EMsgGCCStrike15_v2_AcknowledgePenalty=9171 k_EMsgGCCStrike15_v2_AcknowledgePenalty value
     * @property {number} k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin=9172 k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin value
     * @property {number} k_EMsgGCCStrike15_v2_GC2ClientGlobalStats=9173 k_EMsgGCCStrike15_v2_GC2ClientGlobalStats value
     * @property {number} k_EMsgGCCStrike15_v2_Client2GCStreamUnlock=9174 k_EMsgGCCStrike15_v2_Client2GCStreamUnlock value
     * @property {number} k_EMsgGCCStrike15_v2_FantasyRequestClientData=9175 k_EMsgGCCStrike15_v2_FantasyRequestClientData value
     * @property {number} k_EMsgGCCStrike15_v2_FantasyUpdateClientData=9176 k_EMsgGCCStrike15_v2_FantasyUpdateClientData value
     * @property {number} k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket=9177 k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket value
     * @property {number} k_EMsgGCCStrike15_v2_ClientToGCRequestTicket=9178 k_EMsgGCCStrike15_v2_ClientToGCRequestTicket value
     * @property {number} k_EMsgGCCStrike15_v2_ClientToGCRequestElevate=9179 k_EMsgGCCStrike15_v2_ClientToGCRequestElevate value
     * @property {number} k_EMsgGCCStrike15_v2_GlobalChat=9180 k_EMsgGCCStrike15_v2_GlobalChat value
     * @property {number} k_EMsgGCCStrike15_v2_GlobalChat_Subscribe=9181 k_EMsgGCCStrike15_v2_GlobalChat_Subscribe value
     * @property {number} k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe=9182 k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe value
     * @property {number} k_EMsgGCCStrike15_v2_ClientAuthKeyCode=9183 k_EMsgGCCStrike15_v2_ClientAuthKeyCode value
     * @property {number} k_EMsgGCCStrike15_v2_GotvSyncPacket=9184 k_EMsgGCCStrike15_v2_GotvSyncPacket value
     * @property {number} k_EMsgGCCStrike15_v2_ClientPlayerDecalSign=9185 k_EMsgGCCStrike15_v2_ClientPlayerDecalSign value
     * @property {number} k_EMsgGCCStrike15_v2_ClientLogonFatalError=9187 k_EMsgGCCStrike15_v2_ClientLogonFatalError value
     * @property {number} k_EMsgGCCStrike15_v2_ClientPollState=9188 k_EMsgGCCStrike15_v2_ClientPollState value
     * @property {number} k_EMsgGCCStrike15_v2_Party_Register=9189 k_EMsgGCCStrike15_v2_Party_Register value
     * @property {number} k_EMsgGCCStrike15_v2_Party_Unregister=9190 k_EMsgGCCStrike15_v2_Party_Unregister value
     * @property {number} k_EMsgGCCStrike15_v2_Party_Search=9191 k_EMsgGCCStrike15_v2_Party_Search value
     * @property {number} k_EMsgGCCStrike15_v2_Party_Invite=9192 k_EMsgGCCStrike15_v2_Party_Invite value
     * @property {number} k_EMsgGCCStrike15_v2_Account_RequestCoPlays=9193 k_EMsgGCCStrike15_v2_Account_RequestCoPlays value
     * @property {number} k_EMsgGCCStrike15_v2_ClientGCRankUpdate=9194 k_EMsgGCCStrike15_v2_ClientGCRankUpdate value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestOffers=9195 k_EMsgGCCStrike15_v2_ClientRequestOffers value
     * @property {number} k_EMsgGCCStrike15_v2_ClientAccountBalance=9196 k_EMsgGCCStrike15_v2_ClientAccountBalance value
     * @property {number} k_EMsgGCCStrike15_v2_ClientPartyJoinRelay=9197 k_EMsgGCCStrike15_v2_ClientPartyJoinRelay value
     * @property {number} k_EMsgGCCStrike15_v2_ClientPartyWarning=9198 k_EMsgGCCStrike15_v2_ClientPartyWarning value
     * @property {number} k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial=9199 k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial value
     * @property {number} k_EMsgGCCStrike15_v2_SetEventFavorite=9200 k_EMsgGCCStrike15_v2_SetEventFavorite value
     * @property {number} k_EMsgGCCStrike15_v2_GetEventFavorites_Request=9201 k_EMsgGCCStrike15_v2_GetEventFavorites_Request value
     * @property {number} k_EMsgGCCStrike15_v2_GetEventFavorites_Response=9203 k_EMsgGCCStrike15_v2_GetEventFavorites_Response value
     * @property {number} k_EMsgGCCStrike15_v2_ClientRequestSouvenir=9204 k_EMsgGCCStrike15_v2_ClientRequestSouvenir value
     */
    $root.ECsgoGCMsg = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[9100] = "k_EMsgGCCStrike15_v2_Base"] = 9100;
        values[valuesById[9101] = "k_EMsgGCCStrike15_v2_MatchmakingStart"] = 9101;
        values[valuesById[9102] = "k_EMsgGCCStrike15_v2_MatchmakingStop"] = 9102;
        values[valuesById[9103] = "k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing"] = 9103;
        values[valuesById[9104] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate"] = 9104;
        values[valuesById[9105] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve"] = 9105;
        values[valuesById[9106] = "k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse"] = 9106;
        values[valuesById[9107] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve"] = 9107;
        values[valuesById[9108] = "k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats"] = 9108;
        values[valuesById[9109] = "k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello"] = 9109;
        values[valuesById[9110] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello"] = 9110;
        values[valuesById[9111] = "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd"] = 9111;
        values[valuesById[9112] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon"] = 9112;
        values[valuesById[9113] = "k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick"] = 9113;
        values[valuesById[9114] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm"] = 9114;
        values[valuesById[9115] = "k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats"] = 9115;
        values[valuesById[9116] = "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate"] = 9116;
        values[valuesById[9117] = "k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate"] = 9117;
        values[valuesById[9118] = "k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty"] = 9118;
        values[valuesById[9119] = "k_EMsgGCCStrike15_v2_ClientReportPlayer"] = 9119;
        values[valuesById[9120] = "k_EMsgGCCStrike15_v2_ClientReportServer"] = 9120;
        values[valuesById[9121] = "k_EMsgGCCStrike15_v2_ClientCommendPlayer"] = 9121;
        values[valuesById[9122] = "k_EMsgGCCStrike15_v2_ClientReportResponse"] = 9122;
        values[valuesById[9123] = "k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery"] = 9123;
        values[valuesById[9124] = "k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse"] = 9124;
        values[valuesById[9126] = "k_EMsgGCCStrike15_v2_WatchInfoUsers"] = 9126;
        values[valuesById[9127] = "k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile"] = 9127;
        values[valuesById[9128] = "k_EMsgGCCStrike15_v2_PlayersProfile"] = 9128;
        values[valuesById[9131] = "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate"] = 9131;
        values[valuesById[9132] = "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment"] = 9132;
        values[valuesById[9133] = "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus"] = 9133;
        values[valuesById[9134] = "k_EMsgGCCStrike15_v2_GC2ClientTextMsg"] = 9134;
        values[valuesById[9135] = "k_EMsgGCCStrike15_v2_Client2GCTextMsg"] = 9135;
        values[valuesById[9136] = "k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops"] = 9136;
        values[valuesById[9137] = "k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification"] = 9137;
        values[valuesById[9138] = "k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2"] = 9138;
        values[valuesById[9139] = "k_EMsgGCCStrike15_v2_MatchList"] = 9139;
        values[valuesById[9140] = "k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames"] = 9140;
        values[valuesById[9141] = "k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames"] = 9141;
        values[valuesById[9142] = "k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate"] = 9142;
        values[valuesById[9144] = "k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo"] = 9144;
        values[valuesById[9145] = "k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification"] = 9145;
        values[valuesById[9146] = "k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames"] = 9146;
        values[valuesById[9147] = "k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo"] = 9147;
        values[valuesById[9148] = "k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest"] = 9148;
        values[valuesById[9149] = "k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse"] = 9149;
        values[valuesById[9150] = "k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo"] = 9150;
        values[valuesById[9151] = "k_EMsgGCToGCReloadVersions"] = 9151;
        values[valuesById[9152] = "k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote"] = 9152;
        values[valuesById[9153] = "k_EMsgGCCStrike15_v2_Server2GCClientValidate"] = 9153;
        values[valuesById[9154] = "k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser"] = 9154;
        values[valuesById[9155] = "k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure"] = 9155;
        values[valuesById[9156] = "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest"] = 9156;
        values[valuesById[9157] = "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse"] = 9157;
        values[valuesById[9158] = "k_EMsgGCCStrike15_v2_AccountPrivacySettings"] = 9158;
        values[valuesById[9159] = "k_EMsgGCCStrike15_v2_SetMyActivityInfo"] = 9159;
        values[valuesById[9160] = "k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions"] = 9160;
        values[valuesById[9161] = "k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions"] = 9161;
        values[valuesById[9162] = "k_EMsgGCCStrike15_v2_DraftSummary"] = 9162;
        values[valuesById[9163] = "k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData"] = 9163;
        values[valuesById[9164] = "k_EMsgGCCStrike15_v2_ClientRequestJoinServerData"] = 9164;
        values[valuesById[9165] = "k_EMsgGCCStrike15_v2_ClientRequestNewMission"] = 9165;
        values[valuesById[9166] = "k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded"] = 9166;
        values[valuesById[9167] = "k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo"] = 9167;
        values[valuesById[9168] = "k_EMsgGC_GlobalGame_Subscribe"] = 9168;
        values[valuesById[9169] = "k_EMsgGC_GlobalGame_Unsubscribe"] = 9169;
        values[valuesById[9170] = "k_EMsgGC_GlobalGame_Play"] = 9170;
        values[valuesById[9171] = "k_EMsgGCCStrike15_v2_AcknowledgePenalty"] = 9171;
        values[valuesById[9172] = "k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin"] = 9172;
        values[valuesById[9173] = "k_EMsgGCCStrike15_v2_GC2ClientGlobalStats"] = 9173;
        values[valuesById[9174] = "k_EMsgGCCStrike15_v2_Client2GCStreamUnlock"] = 9174;
        values[valuesById[9175] = "k_EMsgGCCStrike15_v2_FantasyRequestClientData"] = 9175;
        values[valuesById[9176] = "k_EMsgGCCStrike15_v2_FantasyUpdateClientData"] = 9176;
        values[valuesById[9177] = "k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket"] = 9177;
        values[valuesById[9178] = "k_EMsgGCCStrike15_v2_ClientToGCRequestTicket"] = 9178;
        values[valuesById[9179] = "k_EMsgGCCStrike15_v2_ClientToGCRequestElevate"] = 9179;
        values[valuesById[9180] = "k_EMsgGCCStrike15_v2_GlobalChat"] = 9180;
        values[valuesById[9181] = "k_EMsgGCCStrike15_v2_GlobalChat_Subscribe"] = 9181;
        values[valuesById[9182] = "k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe"] = 9182;
        values[valuesById[9183] = "k_EMsgGCCStrike15_v2_ClientAuthKeyCode"] = 9183;
        values[valuesById[9184] = "k_EMsgGCCStrike15_v2_GotvSyncPacket"] = 9184;
        values[valuesById[9185] = "k_EMsgGCCStrike15_v2_ClientPlayerDecalSign"] = 9185;
        values[valuesById[9187] = "k_EMsgGCCStrike15_v2_ClientLogonFatalError"] = 9187;
        values[valuesById[9188] = "k_EMsgGCCStrike15_v2_ClientPollState"] = 9188;
        values[valuesById[9189] = "k_EMsgGCCStrike15_v2_Party_Register"] = 9189;
        values[valuesById[9190] = "k_EMsgGCCStrike15_v2_Party_Unregister"] = 9190;
        values[valuesById[9191] = "k_EMsgGCCStrike15_v2_Party_Search"] = 9191;
        values[valuesById[9192] = "k_EMsgGCCStrike15_v2_Party_Invite"] = 9192;
        values[valuesById[9193] = "k_EMsgGCCStrike15_v2_Account_RequestCoPlays"] = 9193;
        values[valuesById[9194] = "k_EMsgGCCStrike15_v2_ClientGCRankUpdate"] = 9194;
        values[valuesById[9195] = "k_EMsgGCCStrike15_v2_ClientRequestOffers"] = 9195;
        values[valuesById[9196] = "k_EMsgGCCStrike15_v2_ClientAccountBalance"] = 9196;
        values[valuesById[9197] = "k_EMsgGCCStrike15_v2_ClientPartyJoinRelay"] = 9197;
        values[valuesById[9198] = "k_EMsgGCCStrike15_v2_ClientPartyWarning"] = 9198;
        values[valuesById[9199] = "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial"] = 9199;
        values[valuesById[9200] = "k_EMsgGCCStrike15_v2_SetEventFavorite"] = 9200;
        values[valuesById[9201] = "k_EMsgGCCStrike15_v2_GetEventFavorites_Request"] = 9201;
        values[valuesById[9203] = "k_EMsgGCCStrike15_v2_GetEventFavorites_Response"] = 9203;
        values[valuesById[9204] = "k_EMsgGCCStrike15_v2_ClientRequestSouvenir"] = 9204;
        return values;
    })();
    
    /**
     * ECsgoSteamUserStat enum.
     * @exports ECsgoSteamUserStat
     * @enum {string}
     * @property {number} k_ECsgoSteamUserStat_XpEarnedGames=1 k_ECsgoSteamUserStat_XpEarnedGames value
     * @property {number} k_ECsgoSteamUserStat_MatchWinsCompetitive=2 k_ECsgoSteamUserStat_MatchWinsCompetitive value
     * @property {number} k_ECsgoSteamUserStat_SurvivedDangerZone=3 k_ECsgoSteamUserStat_SurvivedDangerZone value
     */
    $root.ECsgoSteamUserStat = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "k_ECsgoSteamUserStat_XpEarnedGames"] = 1;
        values[valuesById[2] = "k_ECsgoSteamUserStat_MatchWinsCompetitive"] = 2;
        values[valuesById[3] = "k_ECsgoSteamUserStat_SurvivedDangerZone"] = 3;
        return values;
    })();
    
    $root.GameServerPing = (function() {
    
        /**
         * Properties of a GameServerPing.
         * @exports IGameServerPing
         * @interface IGameServerPing
         * @property {number|null} [ping] GameServerPing ping
         * @property {number|null} [ip] GameServerPing ip
         * @property {number|null} [instances] GameServerPing instances
         */
    
        /**
         * Constructs a new GameServerPing.
         * @exports GameServerPing
         * @classdesc Represents a GameServerPing.
         * @implements IGameServerPing
         * @constructor
         * @param {IGameServerPing=} [properties] Properties to set
         */
        function GameServerPing(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GameServerPing ping.
         * @member {number} ping
         * @memberof GameServerPing
         * @instance
         */
        GameServerPing.prototype.ping = 0;
    
        /**
         * GameServerPing ip.
         * @member {number} ip
         * @memberof GameServerPing
         * @instance
         */
        GameServerPing.prototype.ip = 0;
    
        /**
         * GameServerPing instances.
         * @member {number} instances
         * @memberof GameServerPing
         * @instance
         */
        GameServerPing.prototype.instances = 0;
    
        /**
         * Creates a new GameServerPing instance using the specified properties.
         * @function create
         * @memberof GameServerPing
         * @static
         * @param {IGameServerPing=} [properties] Properties to set
         * @returns {GameServerPing} GameServerPing instance
         */
        GameServerPing.create = function create(properties) {
            return new GameServerPing(properties);
        };
    
        /**
         * Encodes the specified GameServerPing message. Does not implicitly {@link GameServerPing.verify|verify} messages.
         * @function encode
         * @memberof GameServerPing
         * @static
         * @param {IGameServerPing} message GameServerPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameServerPing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ping != null && message.hasOwnProperty("ping"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ping);
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ip);
            if (message.instances != null && message.hasOwnProperty("instances"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.instances);
            return writer;
        };
    
        /**
         * Encodes the specified GameServerPing message, length delimited. Does not implicitly {@link GameServerPing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GameServerPing
         * @static
         * @param {IGameServerPing} message GameServerPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameServerPing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GameServerPing message from the specified reader or buffer.
         * @function decode
         * @memberof GameServerPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GameServerPing} GameServerPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameServerPing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GameServerPing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.ping = reader.int32();
                    break;
                case 3:
                    message.ip = reader.uint32();
                    break;
                case 5:
                    message.instances = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GameServerPing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GameServerPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GameServerPing} GameServerPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameServerPing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GameServerPing message.
         * @function verify
         * @memberof GameServerPing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameServerPing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ping != null && message.hasOwnProperty("ping"))
                if (!$util.isInteger(message.ping))
                    return "ping: integer expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            if (message.instances != null && message.hasOwnProperty("instances"))
                if (!$util.isInteger(message.instances))
                    return "instances: integer expected";
            return null;
        };
    
        /**
         * Creates a GameServerPing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GameServerPing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GameServerPing} GameServerPing
         */
        GameServerPing.fromObject = function fromObject(object) {
            if (object instanceof $root.GameServerPing)
                return object;
            var message = new $root.GameServerPing();
            if (object.ping != null)
                message.ping = object.ping | 0;
            if (object.ip != null)
                message.ip = object.ip >>> 0;
            if (object.instances != null)
                message.instances = object.instances >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a GameServerPing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GameServerPing
         * @static
         * @param {GameServerPing} message GameServerPing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameServerPing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ping = 0;
                object.ip = 0;
                object.instances = 0;
            }
            if (message.ping != null && message.hasOwnProperty("ping"))
                object.ping = message.ping;
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.instances != null && message.hasOwnProperty("instances"))
                object.instances = message.instances;
            return object;
        };
    
        /**
         * Converts this GameServerPing to JSON.
         * @function toJSON
         * @memberof GameServerPing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameServerPing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GameServerPing;
    })();
    
    $root.DataCenterPing = (function() {
    
        /**
         * Properties of a DataCenterPing.
         * @exports IDataCenterPing
         * @interface IDataCenterPing
         * @property {number|null} [data_center_id] DataCenterPing data_center_id
         * @property {number|null} [ping] DataCenterPing ping
         */
    
        /**
         * Constructs a new DataCenterPing.
         * @exports DataCenterPing
         * @classdesc Represents a DataCenterPing.
         * @implements IDataCenterPing
         * @constructor
         * @param {IDataCenterPing=} [properties] Properties to set
         */
        function DataCenterPing(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * DataCenterPing data_center_id.
         * @member {number} data_center_id
         * @memberof DataCenterPing
         * @instance
         */
        DataCenterPing.prototype.data_center_id = 0;
    
        /**
         * DataCenterPing ping.
         * @member {number} ping
         * @memberof DataCenterPing
         * @instance
         */
        DataCenterPing.prototype.ping = 0;
    
        /**
         * Creates a new DataCenterPing instance using the specified properties.
         * @function create
         * @memberof DataCenterPing
         * @static
         * @param {IDataCenterPing=} [properties] Properties to set
         * @returns {DataCenterPing} DataCenterPing instance
         */
        DataCenterPing.create = function create(properties) {
            return new DataCenterPing(properties);
        };
    
        /**
         * Encodes the specified DataCenterPing message. Does not implicitly {@link DataCenterPing.verify|verify} messages.
         * @function encode
         * @memberof DataCenterPing
         * @static
         * @param {IDataCenterPing} message DataCenterPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DataCenterPing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.data_center_id);
            if (message.ping != null && message.hasOwnProperty("ping"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.ping);
            return writer;
        };
    
        /**
         * Encodes the specified DataCenterPing message, length delimited. Does not implicitly {@link DataCenterPing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DataCenterPing
         * @static
         * @param {IDataCenterPing} message DataCenterPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DataCenterPing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a DataCenterPing message from the specified reader or buffer.
         * @function decode
         * @memberof DataCenterPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DataCenterPing} DataCenterPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DataCenterPing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DataCenterPing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.data_center_id = reader.fixed32();
                    break;
                case 2:
                    message.ping = reader.sint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a DataCenterPing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DataCenterPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DataCenterPing} DataCenterPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DataCenterPing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a DataCenterPing message.
         * @function verify
         * @memberof DataCenterPing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DataCenterPing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                if (!$util.isInteger(message.data_center_id))
                    return "data_center_id: integer expected";
            if (message.ping != null && message.hasOwnProperty("ping"))
                if (!$util.isInteger(message.ping))
                    return "ping: integer expected";
            return null;
        };
    
        /**
         * Creates a DataCenterPing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DataCenterPing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DataCenterPing} DataCenterPing
         */
        DataCenterPing.fromObject = function fromObject(object) {
            if (object instanceof $root.DataCenterPing)
                return object;
            var message = new $root.DataCenterPing();
            if (object.data_center_id != null)
                message.data_center_id = object.data_center_id >>> 0;
            if (object.ping != null)
                message.ping = object.ping | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a DataCenterPing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DataCenterPing
         * @static
         * @param {DataCenterPing} message DataCenterPing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DataCenterPing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.data_center_id = 0;
                object.ping = 0;
            }
            if (message.data_center_id != null && message.hasOwnProperty("data_center_id"))
                object.data_center_id = message.data_center_id;
            if (message.ping != null && message.hasOwnProperty("ping"))
                object.ping = message.ping;
            return object;
        };
    
        /**
         * Converts this DataCenterPing to JSON.
         * @function toJSON
         * @memberof DataCenterPing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DataCenterPing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return DataCenterPing;
    })();
    
    $root.DetailedSearchStatistic = (function() {
    
        /**
         * Properties of a DetailedSearchStatistic.
         * @exports IDetailedSearchStatistic
         * @interface IDetailedSearchStatistic
         * @property {number|null} [game_type] DetailedSearchStatistic game_type
         * @property {number|null} [search_time_avg] DetailedSearchStatistic search_time_avg
         * @property {number|null} [players_searching] DetailedSearchStatistic players_searching
         */
    
        /**
         * Constructs a new DetailedSearchStatistic.
         * @exports DetailedSearchStatistic
         * @classdesc Represents a DetailedSearchStatistic.
         * @implements IDetailedSearchStatistic
         * @constructor
         * @param {IDetailedSearchStatistic=} [properties] Properties to set
         */
        function DetailedSearchStatistic(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * DetailedSearchStatistic game_type.
         * @member {number} game_type
         * @memberof DetailedSearchStatistic
         * @instance
         */
        DetailedSearchStatistic.prototype.game_type = 0;
    
        /**
         * DetailedSearchStatistic search_time_avg.
         * @member {number} search_time_avg
         * @memberof DetailedSearchStatistic
         * @instance
         */
        DetailedSearchStatistic.prototype.search_time_avg = 0;
    
        /**
         * DetailedSearchStatistic players_searching.
         * @member {number} players_searching
         * @memberof DetailedSearchStatistic
         * @instance
         */
        DetailedSearchStatistic.prototype.players_searching = 0;
    
        /**
         * Creates a new DetailedSearchStatistic instance using the specified properties.
         * @function create
         * @memberof DetailedSearchStatistic
         * @static
         * @param {IDetailedSearchStatistic=} [properties] Properties to set
         * @returns {DetailedSearchStatistic} DetailedSearchStatistic instance
         */
        DetailedSearchStatistic.create = function create(properties) {
            return new DetailedSearchStatistic(properties);
        };
    
        /**
         * Encodes the specified DetailedSearchStatistic message. Does not implicitly {@link DetailedSearchStatistic.verify|verify} messages.
         * @function encode
         * @memberof DetailedSearchStatistic
         * @static
         * @param {IDetailedSearchStatistic} message DetailedSearchStatistic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DetailedSearchStatistic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.game_type);
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.search_time_avg);
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.players_searching);
            return writer;
        };
    
        /**
         * Encodes the specified DetailedSearchStatistic message, length delimited. Does not implicitly {@link DetailedSearchStatistic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DetailedSearchStatistic
         * @static
         * @param {IDetailedSearchStatistic} message DetailedSearchStatistic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DetailedSearchStatistic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a DetailedSearchStatistic message from the specified reader or buffer.
         * @function decode
         * @memberof DetailedSearchStatistic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DetailedSearchStatistic} DetailedSearchStatistic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DetailedSearchStatistic.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DetailedSearchStatistic();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.game_type = reader.uint32();
                    break;
                case 2:
                    message.search_time_avg = reader.uint32();
                    break;
                case 4:
                    message.players_searching = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a DetailedSearchStatistic message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DetailedSearchStatistic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DetailedSearchStatistic} DetailedSearchStatistic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DetailedSearchStatistic.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a DetailedSearchStatistic message.
         * @function verify
         * @memberof DetailedSearchStatistic
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DetailedSearchStatistic.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                if (!$util.isInteger(message.search_time_avg))
                    return "search_time_avg: integer expected";
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                if (!$util.isInteger(message.players_searching))
                    return "players_searching: integer expected";
            return null;
        };
    
        /**
         * Creates a DetailedSearchStatistic message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DetailedSearchStatistic
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DetailedSearchStatistic} DetailedSearchStatistic
         */
        DetailedSearchStatistic.fromObject = function fromObject(object) {
            if (object instanceof $root.DetailedSearchStatistic)
                return object;
            var message = new $root.DetailedSearchStatistic();
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.search_time_avg != null)
                message.search_time_avg = object.search_time_avg >>> 0;
            if (object.players_searching != null)
                message.players_searching = object.players_searching >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a DetailedSearchStatistic message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DetailedSearchStatistic
         * @static
         * @param {DetailedSearchStatistic} message DetailedSearchStatistic
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DetailedSearchStatistic.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.game_type = 0;
                object.search_time_avg = 0;
                object.players_searching = 0;
            }
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                object.search_time_avg = message.search_time_avg;
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                object.players_searching = message.players_searching;
            return object;
        };
    
        /**
         * Converts this DetailedSearchStatistic to JSON.
         * @function toJSON
         * @memberof DetailedSearchStatistic
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DetailedSearchStatistic.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return DetailedSearchStatistic;
    })();
    
    $root.TournamentPlayer = (function() {
    
        /**
         * Properties of a TournamentPlayer.
         * @exports ITournamentPlayer
         * @interface ITournamentPlayer
         * @property {number|null} [account_id] TournamentPlayer account_id
         * @property {string|null} [player_nick] TournamentPlayer player_nick
         * @property {string|null} [player_name] TournamentPlayer player_name
         * @property {number|null} [player_dob] TournamentPlayer player_dob
         * @property {string|null} [player_flag] TournamentPlayer player_flag
         * @property {string|null} [player_location] TournamentPlayer player_location
         * @property {string|null} [player_desc] TournamentPlayer player_desc
         */
    
        /**
         * Constructs a new TournamentPlayer.
         * @exports TournamentPlayer
         * @classdesc Represents a TournamentPlayer.
         * @implements ITournamentPlayer
         * @constructor
         * @param {ITournamentPlayer=} [properties] Properties to set
         */
        function TournamentPlayer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * TournamentPlayer account_id.
         * @member {number} account_id
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.account_id = 0;
    
        /**
         * TournamentPlayer player_nick.
         * @member {string} player_nick
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_nick = "";
    
        /**
         * TournamentPlayer player_name.
         * @member {string} player_name
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_name = "";
    
        /**
         * TournamentPlayer player_dob.
         * @member {number} player_dob
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_dob = 0;
    
        /**
         * TournamentPlayer player_flag.
         * @member {string} player_flag
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_flag = "";
    
        /**
         * TournamentPlayer player_location.
         * @member {string} player_location
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_location = "";
    
        /**
         * TournamentPlayer player_desc.
         * @member {string} player_desc
         * @memberof TournamentPlayer
         * @instance
         */
        TournamentPlayer.prototype.player_desc = "";
    
        /**
         * Creates a new TournamentPlayer instance using the specified properties.
         * @function create
         * @memberof TournamentPlayer
         * @static
         * @param {ITournamentPlayer=} [properties] Properties to set
         * @returns {TournamentPlayer} TournamentPlayer instance
         */
        TournamentPlayer.create = function create(properties) {
            return new TournamentPlayer(properties);
        };
    
        /**
         * Encodes the specified TournamentPlayer message. Does not implicitly {@link TournamentPlayer.verify|verify} messages.
         * @function encode
         * @memberof TournamentPlayer
         * @static
         * @param {ITournamentPlayer} message TournamentPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentPlayer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.player_nick != null && message.hasOwnProperty("player_nick"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.player_nick);
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.player_name);
            if (message.player_dob != null && message.hasOwnProperty("player_dob"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.player_dob);
            if (message.player_flag != null && message.hasOwnProperty("player_flag"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.player_flag);
            if (message.player_location != null && message.hasOwnProperty("player_location"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.player_location);
            if (message.player_desc != null && message.hasOwnProperty("player_desc"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.player_desc);
            return writer;
        };
    
        /**
         * Encodes the specified TournamentPlayer message, length delimited. Does not implicitly {@link TournamentPlayer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TournamentPlayer
         * @static
         * @param {ITournamentPlayer} message TournamentPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a TournamentPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof TournamentPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TournamentPlayer} TournamentPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentPlayer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TournamentPlayer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.player_nick = reader.string();
                    break;
                case 3:
                    message.player_name = reader.string();
                    break;
                case 4:
                    message.player_dob = reader.uint32();
                    break;
                case 5:
                    message.player_flag = reader.string();
                    break;
                case 6:
                    message.player_location = reader.string();
                    break;
                case 7:
                    message.player_desc = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a TournamentPlayer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TournamentPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TournamentPlayer} TournamentPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a TournamentPlayer message.
         * @function verify
         * @memberof TournamentPlayer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TournamentPlayer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.player_nick != null && message.hasOwnProperty("player_nick"))
                if (!$util.isString(message.player_nick))
                    return "player_nick: string expected";
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                if (!$util.isString(message.player_name))
                    return "player_name: string expected";
            if (message.player_dob != null && message.hasOwnProperty("player_dob"))
                if (!$util.isInteger(message.player_dob))
                    return "player_dob: integer expected";
            if (message.player_flag != null && message.hasOwnProperty("player_flag"))
                if (!$util.isString(message.player_flag))
                    return "player_flag: string expected";
            if (message.player_location != null && message.hasOwnProperty("player_location"))
                if (!$util.isString(message.player_location))
                    return "player_location: string expected";
            if (message.player_desc != null && message.hasOwnProperty("player_desc"))
                if (!$util.isString(message.player_desc))
                    return "player_desc: string expected";
            return null;
        };
    
        /**
         * Creates a TournamentPlayer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TournamentPlayer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TournamentPlayer} TournamentPlayer
         */
        TournamentPlayer.fromObject = function fromObject(object) {
            if (object instanceof $root.TournamentPlayer)
                return object;
            var message = new $root.TournamentPlayer();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.player_nick != null)
                message.player_nick = String(object.player_nick);
            if (object.player_name != null)
                message.player_name = String(object.player_name);
            if (object.player_dob != null)
                message.player_dob = object.player_dob >>> 0;
            if (object.player_flag != null)
                message.player_flag = String(object.player_flag);
            if (object.player_location != null)
                message.player_location = String(object.player_location);
            if (object.player_desc != null)
                message.player_desc = String(object.player_desc);
            return message;
        };
    
        /**
         * Creates a plain object from a TournamentPlayer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TournamentPlayer
         * @static
         * @param {TournamentPlayer} message TournamentPlayer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TournamentPlayer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.player_nick = "";
                object.player_name = "";
                object.player_dob = 0;
                object.player_flag = "";
                object.player_location = "";
                object.player_desc = "";
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.player_nick != null && message.hasOwnProperty("player_nick"))
                object.player_nick = message.player_nick;
            if (message.player_name != null && message.hasOwnProperty("player_name"))
                object.player_name = message.player_name;
            if (message.player_dob != null && message.hasOwnProperty("player_dob"))
                object.player_dob = message.player_dob;
            if (message.player_flag != null && message.hasOwnProperty("player_flag"))
                object.player_flag = message.player_flag;
            if (message.player_location != null && message.hasOwnProperty("player_location"))
                object.player_location = message.player_location;
            if (message.player_desc != null && message.hasOwnProperty("player_desc"))
                object.player_desc = message.player_desc;
            return object;
        };
    
        /**
         * Converts this TournamentPlayer to JSON.
         * @function toJSON
         * @memberof TournamentPlayer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TournamentPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return TournamentPlayer;
    })();
    
    $root.TournamentTeam = (function() {
    
        /**
         * Properties of a TournamentTeam.
         * @exports ITournamentTeam
         * @interface ITournamentTeam
         * @property {number|null} [team_id] TournamentTeam team_id
         * @property {string|null} [team_tag] TournamentTeam team_tag
         * @property {string|null} [team_flag] TournamentTeam team_flag
         * @property {string|null} [team_name] TournamentTeam team_name
         * @property {Array.<ITournamentPlayer>|null} [players] TournamentTeam players
         */
    
        /**
         * Constructs a new TournamentTeam.
         * @exports TournamentTeam
         * @classdesc Represents a TournamentTeam.
         * @implements ITournamentTeam
         * @constructor
         * @param {ITournamentTeam=} [properties] Properties to set
         */
        function TournamentTeam(properties) {
            this.players = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * TournamentTeam team_id.
         * @member {number} team_id
         * @memberof TournamentTeam
         * @instance
         */
        TournamentTeam.prototype.team_id = 0;
    
        /**
         * TournamentTeam team_tag.
         * @member {string} team_tag
         * @memberof TournamentTeam
         * @instance
         */
        TournamentTeam.prototype.team_tag = "";
    
        /**
         * TournamentTeam team_flag.
         * @member {string} team_flag
         * @memberof TournamentTeam
         * @instance
         */
        TournamentTeam.prototype.team_flag = "";
    
        /**
         * TournamentTeam team_name.
         * @member {string} team_name
         * @memberof TournamentTeam
         * @instance
         */
        TournamentTeam.prototype.team_name = "";
    
        /**
         * TournamentTeam players.
         * @member {Array.<ITournamentPlayer>} players
         * @memberof TournamentTeam
         * @instance
         */
        TournamentTeam.prototype.players = $util.emptyArray;
    
        /**
         * Creates a new TournamentTeam instance using the specified properties.
         * @function create
         * @memberof TournamentTeam
         * @static
         * @param {ITournamentTeam=} [properties] Properties to set
         * @returns {TournamentTeam} TournamentTeam instance
         */
        TournamentTeam.create = function create(properties) {
            return new TournamentTeam(properties);
        };
    
        /**
         * Encodes the specified TournamentTeam message. Does not implicitly {@link TournamentTeam.verify|verify} messages.
         * @function encode
         * @memberof TournamentTeam
         * @static
         * @param {ITournamentTeam} message TournamentTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentTeam.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.team_id);
            if (message.team_tag != null && message.hasOwnProperty("team_tag"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.team_tag);
            if (message.team_flag != null && message.hasOwnProperty("team_flag"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.team_flag);
            if (message.team_name != null && message.hasOwnProperty("team_name"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.team_name);
            if (message.players != null && message.players.length)
                for (var i = 0; i < message.players.length; ++i)
                    $root.TournamentPlayer.encode(message.players[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified TournamentTeam message, length delimited. Does not implicitly {@link TournamentTeam.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TournamentTeam
         * @static
         * @param {ITournamentTeam} message TournamentTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentTeam.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a TournamentTeam message from the specified reader or buffer.
         * @function decode
         * @memberof TournamentTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TournamentTeam} TournamentTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentTeam.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TournamentTeam();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.team_id = reader.int32();
                    break;
                case 2:
                    message.team_tag = reader.string();
                    break;
                case 3:
                    message.team_flag = reader.string();
                    break;
                case 4:
                    message.team_name = reader.string();
                    break;
                case 5:
                    if (!(message.players && message.players.length))
                        message.players = [];
                    message.players.push($root.TournamentPlayer.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a TournamentTeam message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TournamentTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TournamentTeam} TournamentTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentTeam.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a TournamentTeam message.
         * @function verify
         * @memberof TournamentTeam
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TournamentTeam.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                if (!$util.isInteger(message.team_id))
                    return "team_id: integer expected";
            if (message.team_tag != null && message.hasOwnProperty("team_tag"))
                if (!$util.isString(message.team_tag))
                    return "team_tag: string expected";
            if (message.team_flag != null && message.hasOwnProperty("team_flag"))
                if (!$util.isString(message.team_flag))
                    return "team_flag: string expected";
            if (message.team_name != null && message.hasOwnProperty("team_name"))
                if (!$util.isString(message.team_name))
                    return "team_name: string expected";
            if (message.players != null && message.hasOwnProperty("players")) {
                if (!Array.isArray(message.players))
                    return "players: array expected";
                for (var i = 0; i < message.players.length; ++i) {
                    var error = $root.TournamentPlayer.verify(message.players[i]);
                    if (error)
                        return "players." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a TournamentTeam message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TournamentTeam
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TournamentTeam} TournamentTeam
         */
        TournamentTeam.fromObject = function fromObject(object) {
            if (object instanceof $root.TournamentTeam)
                return object;
            var message = new $root.TournamentTeam();
            if (object.team_id != null)
                message.team_id = object.team_id | 0;
            if (object.team_tag != null)
                message.team_tag = String(object.team_tag);
            if (object.team_flag != null)
                message.team_flag = String(object.team_flag);
            if (object.team_name != null)
                message.team_name = String(object.team_name);
            if (object.players) {
                if (!Array.isArray(object.players))
                    throw TypeError(".TournamentTeam.players: array expected");
                message.players = [];
                for (var i = 0; i < object.players.length; ++i) {
                    if (typeof object.players[i] !== "object")
                        throw TypeError(".TournamentTeam.players: object expected");
                    message.players[i] = $root.TournamentPlayer.fromObject(object.players[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a TournamentTeam message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TournamentTeam
         * @static
         * @param {TournamentTeam} message TournamentTeam
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TournamentTeam.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.players = [];
            if (options.defaults) {
                object.team_id = 0;
                object.team_tag = "";
                object.team_flag = "";
                object.team_name = "";
            }
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                object.team_id = message.team_id;
            if (message.team_tag != null && message.hasOwnProperty("team_tag"))
                object.team_tag = message.team_tag;
            if (message.team_flag != null && message.hasOwnProperty("team_flag"))
                object.team_flag = message.team_flag;
            if (message.team_name != null && message.hasOwnProperty("team_name"))
                object.team_name = message.team_name;
            if (message.players && message.players.length) {
                object.players = [];
                for (var j = 0; j < message.players.length; ++j)
                    object.players[j] = $root.TournamentPlayer.toObject(message.players[j], options);
            }
            return object;
        };
    
        /**
         * Converts this TournamentTeam to JSON.
         * @function toJSON
         * @memberof TournamentTeam
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TournamentTeam.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return TournamentTeam;
    })();
    
    $root.TournamentEvent = (function() {
    
        /**
         * Properties of a TournamentEvent.
         * @exports ITournamentEvent
         * @interface ITournamentEvent
         * @property {number|null} [event_id] TournamentEvent event_id
         * @property {string|null} [event_tag] TournamentEvent event_tag
         * @property {string|null} [event_name] TournamentEvent event_name
         * @property {number|null} [event_time_start] TournamentEvent event_time_start
         * @property {number|null} [event_time_end] TournamentEvent event_time_end
         * @property {number|null} [event_public] TournamentEvent event_public
         * @property {number|null} [event_stage_id] TournamentEvent event_stage_id
         * @property {string|null} [event_stage_name] TournamentEvent event_stage_name
         * @property {number|null} [active_section_id] TournamentEvent active_section_id
         */
    
        /**
         * Constructs a new TournamentEvent.
         * @exports TournamentEvent
         * @classdesc Represents a TournamentEvent.
         * @implements ITournamentEvent
         * @constructor
         * @param {ITournamentEvent=} [properties] Properties to set
         */
        function TournamentEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * TournamentEvent event_id.
         * @member {number} event_id
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_id = 0;
    
        /**
         * TournamentEvent event_tag.
         * @member {string} event_tag
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_tag = "";
    
        /**
         * TournamentEvent event_name.
         * @member {string} event_name
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_name = "";
    
        /**
         * TournamentEvent event_time_start.
         * @member {number} event_time_start
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_time_start = 0;
    
        /**
         * TournamentEvent event_time_end.
         * @member {number} event_time_end
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_time_end = 0;
    
        /**
         * TournamentEvent event_public.
         * @member {number} event_public
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_public = 0;
    
        /**
         * TournamentEvent event_stage_id.
         * @member {number} event_stage_id
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_stage_id = 0;
    
        /**
         * TournamentEvent event_stage_name.
         * @member {string} event_stage_name
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.event_stage_name = "";
    
        /**
         * TournamentEvent active_section_id.
         * @member {number} active_section_id
         * @memberof TournamentEvent
         * @instance
         */
        TournamentEvent.prototype.active_section_id = 0;
    
        /**
         * Creates a new TournamentEvent instance using the specified properties.
         * @function create
         * @memberof TournamentEvent
         * @static
         * @param {ITournamentEvent=} [properties] Properties to set
         * @returns {TournamentEvent} TournamentEvent instance
         */
        TournamentEvent.create = function create(properties) {
            return new TournamentEvent(properties);
        };
    
        /**
         * Encodes the specified TournamentEvent message. Does not implicitly {@link TournamentEvent.verify|verify} messages.
         * @function encode
         * @memberof TournamentEvent
         * @static
         * @param {ITournamentEvent} message TournamentEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.event_id);
            if (message.event_tag != null && message.hasOwnProperty("event_tag"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.event_tag);
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.event_name);
            if (message.event_time_start != null && message.hasOwnProperty("event_time_start"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.event_time_start);
            if (message.event_time_end != null && message.hasOwnProperty("event_time_end"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.event_time_end);
            if (message.event_public != null && message.hasOwnProperty("event_public"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.event_public);
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.event_stage_id);
            if (message.event_stage_name != null && message.hasOwnProperty("event_stage_name"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.event_stage_name);
            if (message.active_section_id != null && message.hasOwnProperty("active_section_id"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.active_section_id);
            return writer;
        };
    
        /**
         * Encodes the specified TournamentEvent message, length delimited. Does not implicitly {@link TournamentEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TournamentEvent
         * @static
         * @param {ITournamentEvent} message TournamentEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a TournamentEvent message from the specified reader or buffer.
         * @function decode
         * @memberof TournamentEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TournamentEvent} TournamentEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TournamentEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event_id = reader.int32();
                    break;
                case 2:
                    message.event_tag = reader.string();
                    break;
                case 3:
                    message.event_name = reader.string();
                    break;
                case 4:
                    message.event_time_start = reader.uint32();
                    break;
                case 5:
                    message.event_time_end = reader.uint32();
                    break;
                case 6:
                    message.event_public = reader.int32();
                    break;
                case 7:
                    message.event_stage_id = reader.int32();
                    break;
                case 8:
                    message.event_stage_name = reader.string();
                    break;
                case 9:
                    message.active_section_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a TournamentEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TournamentEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TournamentEvent} TournamentEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a TournamentEvent message.
         * @function verify
         * @memberof TournamentEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TournamentEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                if (!$util.isInteger(message.event_id))
                    return "event_id: integer expected";
            if (message.event_tag != null && message.hasOwnProperty("event_tag"))
                if (!$util.isString(message.event_tag))
                    return "event_tag: string expected";
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                if (!$util.isString(message.event_name))
                    return "event_name: string expected";
            if (message.event_time_start != null && message.hasOwnProperty("event_time_start"))
                if (!$util.isInteger(message.event_time_start))
                    return "event_time_start: integer expected";
            if (message.event_time_end != null && message.hasOwnProperty("event_time_end"))
                if (!$util.isInteger(message.event_time_end))
                    return "event_time_end: integer expected";
            if (message.event_public != null && message.hasOwnProperty("event_public"))
                if (!$util.isInteger(message.event_public))
                    return "event_public: integer expected";
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                if (!$util.isInteger(message.event_stage_id))
                    return "event_stage_id: integer expected";
            if (message.event_stage_name != null && message.hasOwnProperty("event_stage_name"))
                if (!$util.isString(message.event_stage_name))
                    return "event_stage_name: string expected";
            if (message.active_section_id != null && message.hasOwnProperty("active_section_id"))
                if (!$util.isInteger(message.active_section_id))
                    return "active_section_id: integer expected";
            return null;
        };
    
        /**
         * Creates a TournamentEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TournamentEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TournamentEvent} TournamentEvent
         */
        TournamentEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.TournamentEvent)
                return object;
            var message = new $root.TournamentEvent();
            if (object.event_id != null)
                message.event_id = object.event_id | 0;
            if (object.event_tag != null)
                message.event_tag = String(object.event_tag);
            if (object.event_name != null)
                message.event_name = String(object.event_name);
            if (object.event_time_start != null)
                message.event_time_start = object.event_time_start >>> 0;
            if (object.event_time_end != null)
                message.event_time_end = object.event_time_end >>> 0;
            if (object.event_public != null)
                message.event_public = object.event_public | 0;
            if (object.event_stage_id != null)
                message.event_stage_id = object.event_stage_id | 0;
            if (object.event_stage_name != null)
                message.event_stage_name = String(object.event_stage_name);
            if (object.active_section_id != null)
                message.active_section_id = object.active_section_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a TournamentEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TournamentEvent
         * @static
         * @param {TournamentEvent} message TournamentEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TournamentEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.event_id = 0;
                object.event_tag = "";
                object.event_name = "";
                object.event_time_start = 0;
                object.event_time_end = 0;
                object.event_public = 0;
                object.event_stage_id = 0;
                object.event_stage_name = "";
                object.active_section_id = 0;
            }
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                object.event_id = message.event_id;
            if (message.event_tag != null && message.hasOwnProperty("event_tag"))
                object.event_tag = message.event_tag;
            if (message.event_name != null && message.hasOwnProperty("event_name"))
                object.event_name = message.event_name;
            if (message.event_time_start != null && message.hasOwnProperty("event_time_start"))
                object.event_time_start = message.event_time_start;
            if (message.event_time_end != null && message.hasOwnProperty("event_time_end"))
                object.event_time_end = message.event_time_end;
            if (message.event_public != null && message.hasOwnProperty("event_public"))
                object.event_public = message.event_public;
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                object.event_stage_id = message.event_stage_id;
            if (message.event_stage_name != null && message.hasOwnProperty("event_stage_name"))
                object.event_stage_name = message.event_stage_name;
            if (message.active_section_id != null && message.hasOwnProperty("active_section_id"))
                object.active_section_id = message.active_section_id;
            return object;
        };
    
        /**
         * Converts this TournamentEvent to JSON.
         * @function toJSON
         * @memberof TournamentEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TournamentEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return TournamentEvent;
    })();
    
    $root.GlobalStatistics = (function() {
    
        /**
         * Properties of a GlobalStatistics.
         * @exports IGlobalStatistics
         * @interface IGlobalStatistics
         * @property {number|null} [players_online] GlobalStatistics players_online
         * @property {number|null} [servers_online] GlobalStatistics servers_online
         * @property {number|null} [players_searching] GlobalStatistics players_searching
         * @property {number|null} [servers_available] GlobalStatistics servers_available
         * @property {number|null} [ongoing_matches] GlobalStatistics ongoing_matches
         * @property {number|null} [search_time_avg] GlobalStatistics search_time_avg
         * @property {Array.<IDetailedSearchStatistic>|null} [search_statistics] GlobalStatistics search_statistics
         * @property {string|null} [main_post_url] GlobalStatistics main_post_url
         * @property {number|null} [required_appid_version] GlobalStatistics required_appid_version
         * @property {number|null} [pricesheet_version] GlobalStatistics pricesheet_version
         * @property {number|null} [twitch_streams_version] GlobalStatistics twitch_streams_version
         * @property {number|null} [active_tournament_eventid] GlobalStatistics active_tournament_eventid
         * @property {number|null} [active_survey_id] GlobalStatistics active_survey_id
         * @property {number|null} [rtime32_cur] GlobalStatistics rtime32_cur
         * @property {number|null} [rtime32_event_start] GlobalStatistics rtime32_event_start
         */
    
        /**
         * Constructs a new GlobalStatistics.
         * @exports GlobalStatistics
         * @classdesc Represents a GlobalStatistics.
         * @implements IGlobalStatistics
         * @constructor
         * @param {IGlobalStatistics=} [properties] Properties to set
         */
        function GlobalStatistics(properties) {
            this.search_statistics = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * GlobalStatistics players_online.
         * @member {number} players_online
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.players_online = 0;
    
        /**
         * GlobalStatistics servers_online.
         * @member {number} servers_online
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.servers_online = 0;
    
        /**
         * GlobalStatistics players_searching.
         * @member {number} players_searching
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.players_searching = 0;
    
        /**
         * GlobalStatistics servers_available.
         * @member {number} servers_available
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.servers_available = 0;
    
        /**
         * GlobalStatistics ongoing_matches.
         * @member {number} ongoing_matches
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.ongoing_matches = 0;
    
        /**
         * GlobalStatistics search_time_avg.
         * @member {number} search_time_avg
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.search_time_avg = 0;
    
        /**
         * GlobalStatistics search_statistics.
         * @member {Array.<IDetailedSearchStatistic>} search_statistics
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.search_statistics = $util.emptyArray;
    
        /**
         * GlobalStatistics main_post_url.
         * @member {string} main_post_url
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.main_post_url = "";
    
        /**
         * GlobalStatistics required_appid_version.
         * @member {number} required_appid_version
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.required_appid_version = 0;
    
        /**
         * GlobalStatistics pricesheet_version.
         * @member {number} pricesheet_version
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.pricesheet_version = 0;
    
        /**
         * GlobalStatistics twitch_streams_version.
         * @member {number} twitch_streams_version
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.twitch_streams_version = 0;
    
        /**
         * GlobalStatistics active_tournament_eventid.
         * @member {number} active_tournament_eventid
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.active_tournament_eventid = 0;
    
        /**
         * GlobalStatistics active_survey_id.
         * @member {number} active_survey_id
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.active_survey_id = 0;
    
        /**
         * GlobalStatistics rtime32_cur.
         * @member {number} rtime32_cur
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.rtime32_cur = 0;
    
        /**
         * GlobalStatistics rtime32_event_start.
         * @member {number} rtime32_event_start
         * @memberof GlobalStatistics
         * @instance
         */
        GlobalStatistics.prototype.rtime32_event_start = 0;
    
        /**
         * Creates a new GlobalStatistics instance using the specified properties.
         * @function create
         * @memberof GlobalStatistics
         * @static
         * @param {IGlobalStatistics=} [properties] Properties to set
         * @returns {GlobalStatistics} GlobalStatistics instance
         */
        GlobalStatistics.create = function create(properties) {
            return new GlobalStatistics(properties);
        };
    
        /**
         * Encodes the specified GlobalStatistics message. Does not implicitly {@link GlobalStatistics.verify|verify} messages.
         * @function encode
         * @memberof GlobalStatistics
         * @static
         * @param {IGlobalStatistics} message GlobalStatistics message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GlobalStatistics.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.players_online != null && message.hasOwnProperty("players_online"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.players_online);
            if (message.servers_online != null && message.hasOwnProperty("servers_online"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.servers_online);
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.players_searching);
            if (message.servers_available != null && message.hasOwnProperty("servers_available"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.servers_available);
            if (message.ongoing_matches != null && message.hasOwnProperty("ongoing_matches"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ongoing_matches);
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.search_time_avg);
            if (message.search_statistics != null && message.search_statistics.length)
                for (var i = 0; i < message.search_statistics.length; ++i)
                    $root.DetailedSearchStatistic.encode(message.search_statistics[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.main_post_url);
            if (message.required_appid_version != null && message.hasOwnProperty("required_appid_version"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.required_appid_version);
            if (message.pricesheet_version != null && message.hasOwnProperty("pricesheet_version"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.pricesheet_version);
            if (message.twitch_streams_version != null && message.hasOwnProperty("twitch_streams_version"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.twitch_streams_version);
            if (message.active_tournament_eventid != null && message.hasOwnProperty("active_tournament_eventid"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.active_tournament_eventid);
            if (message.active_survey_id != null && message.hasOwnProperty("active_survey_id"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.active_survey_id);
            if (message.rtime32_cur != null && message.hasOwnProperty("rtime32_cur"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.rtime32_cur);
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.rtime32_event_start);
            return writer;
        };
    
        /**
         * Encodes the specified GlobalStatistics message, length delimited. Does not implicitly {@link GlobalStatistics.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GlobalStatistics
         * @static
         * @param {IGlobalStatistics} message GlobalStatistics message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GlobalStatistics.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a GlobalStatistics message from the specified reader or buffer.
         * @function decode
         * @memberof GlobalStatistics
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GlobalStatistics} GlobalStatistics
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GlobalStatistics.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GlobalStatistics();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.players_online = reader.uint32();
                    break;
                case 2:
                    message.servers_online = reader.uint32();
                    break;
                case 3:
                    message.players_searching = reader.uint32();
                    break;
                case 4:
                    message.servers_available = reader.uint32();
                    break;
                case 5:
                    message.ongoing_matches = reader.uint32();
                    break;
                case 6:
                    message.search_time_avg = reader.uint32();
                    break;
                case 7:
                    if (!(message.search_statistics && message.search_statistics.length))
                        message.search_statistics = [];
                    message.search_statistics.push($root.DetailedSearchStatistic.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.main_post_url = reader.string();
                    break;
                case 9:
                    message.required_appid_version = reader.uint32();
                    break;
                case 10:
                    message.pricesheet_version = reader.uint32();
                    break;
                case 11:
                    message.twitch_streams_version = reader.uint32();
                    break;
                case 12:
                    message.active_tournament_eventid = reader.uint32();
                    break;
                case 13:
                    message.active_survey_id = reader.uint32();
                    break;
                case 14:
                    message.rtime32_cur = reader.uint32();
                    break;
                case 15:
                    message.rtime32_event_start = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a GlobalStatistics message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GlobalStatistics
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GlobalStatistics} GlobalStatistics
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GlobalStatistics.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a GlobalStatistics message.
         * @function verify
         * @memberof GlobalStatistics
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GlobalStatistics.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.players_online != null && message.hasOwnProperty("players_online"))
                if (!$util.isInteger(message.players_online))
                    return "players_online: integer expected";
            if (message.servers_online != null && message.hasOwnProperty("servers_online"))
                if (!$util.isInteger(message.servers_online))
                    return "servers_online: integer expected";
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                if (!$util.isInteger(message.players_searching))
                    return "players_searching: integer expected";
            if (message.servers_available != null && message.hasOwnProperty("servers_available"))
                if (!$util.isInteger(message.servers_available))
                    return "servers_available: integer expected";
            if (message.ongoing_matches != null && message.hasOwnProperty("ongoing_matches"))
                if (!$util.isInteger(message.ongoing_matches))
                    return "ongoing_matches: integer expected";
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                if (!$util.isInteger(message.search_time_avg))
                    return "search_time_avg: integer expected";
            if (message.search_statistics != null && message.hasOwnProperty("search_statistics")) {
                if (!Array.isArray(message.search_statistics))
                    return "search_statistics: array expected";
                for (var i = 0; i < message.search_statistics.length; ++i) {
                    var error = $root.DetailedSearchStatistic.verify(message.search_statistics[i]);
                    if (error)
                        return "search_statistics." + error;
                }
            }
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                if (!$util.isString(message.main_post_url))
                    return "main_post_url: string expected";
            if (message.required_appid_version != null && message.hasOwnProperty("required_appid_version"))
                if (!$util.isInteger(message.required_appid_version))
                    return "required_appid_version: integer expected";
            if (message.pricesheet_version != null && message.hasOwnProperty("pricesheet_version"))
                if (!$util.isInteger(message.pricesheet_version))
                    return "pricesheet_version: integer expected";
            if (message.twitch_streams_version != null && message.hasOwnProperty("twitch_streams_version"))
                if (!$util.isInteger(message.twitch_streams_version))
                    return "twitch_streams_version: integer expected";
            if (message.active_tournament_eventid != null && message.hasOwnProperty("active_tournament_eventid"))
                if (!$util.isInteger(message.active_tournament_eventid))
                    return "active_tournament_eventid: integer expected";
            if (message.active_survey_id != null && message.hasOwnProperty("active_survey_id"))
                if (!$util.isInteger(message.active_survey_id))
                    return "active_survey_id: integer expected";
            if (message.rtime32_cur != null && message.hasOwnProperty("rtime32_cur"))
                if (!$util.isInteger(message.rtime32_cur))
                    return "rtime32_cur: integer expected";
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                if (!$util.isInteger(message.rtime32_event_start))
                    return "rtime32_event_start: integer expected";
            return null;
        };
    
        /**
         * Creates a GlobalStatistics message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GlobalStatistics
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GlobalStatistics} GlobalStatistics
         */
        GlobalStatistics.fromObject = function fromObject(object) {
            if (object instanceof $root.GlobalStatistics)
                return object;
            var message = new $root.GlobalStatistics();
            if (object.players_online != null)
                message.players_online = object.players_online >>> 0;
            if (object.servers_online != null)
                message.servers_online = object.servers_online >>> 0;
            if (object.players_searching != null)
                message.players_searching = object.players_searching >>> 0;
            if (object.servers_available != null)
                message.servers_available = object.servers_available >>> 0;
            if (object.ongoing_matches != null)
                message.ongoing_matches = object.ongoing_matches >>> 0;
            if (object.search_time_avg != null)
                message.search_time_avg = object.search_time_avg >>> 0;
            if (object.search_statistics) {
                if (!Array.isArray(object.search_statistics))
                    throw TypeError(".GlobalStatistics.search_statistics: array expected");
                message.search_statistics = [];
                for (var i = 0; i < object.search_statistics.length; ++i) {
                    if (typeof object.search_statistics[i] !== "object")
                        throw TypeError(".GlobalStatistics.search_statistics: object expected");
                    message.search_statistics[i] = $root.DetailedSearchStatistic.fromObject(object.search_statistics[i]);
                }
            }
            if (object.main_post_url != null)
                message.main_post_url = String(object.main_post_url);
            if (object.required_appid_version != null)
                message.required_appid_version = object.required_appid_version >>> 0;
            if (object.pricesheet_version != null)
                message.pricesheet_version = object.pricesheet_version >>> 0;
            if (object.twitch_streams_version != null)
                message.twitch_streams_version = object.twitch_streams_version >>> 0;
            if (object.active_tournament_eventid != null)
                message.active_tournament_eventid = object.active_tournament_eventid >>> 0;
            if (object.active_survey_id != null)
                message.active_survey_id = object.active_survey_id >>> 0;
            if (object.rtime32_cur != null)
                message.rtime32_cur = object.rtime32_cur >>> 0;
            if (object.rtime32_event_start != null)
                message.rtime32_event_start = object.rtime32_event_start >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a GlobalStatistics message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GlobalStatistics
         * @static
         * @param {GlobalStatistics} message GlobalStatistics
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GlobalStatistics.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.search_statistics = [];
            if (options.defaults) {
                object.players_online = 0;
                object.servers_online = 0;
                object.players_searching = 0;
                object.servers_available = 0;
                object.ongoing_matches = 0;
                object.search_time_avg = 0;
                object.main_post_url = "";
                object.required_appid_version = 0;
                object.pricesheet_version = 0;
                object.twitch_streams_version = 0;
                object.active_tournament_eventid = 0;
                object.active_survey_id = 0;
                object.rtime32_cur = 0;
                object.rtime32_event_start = 0;
            }
            if (message.players_online != null && message.hasOwnProperty("players_online"))
                object.players_online = message.players_online;
            if (message.servers_online != null && message.hasOwnProperty("servers_online"))
                object.servers_online = message.servers_online;
            if (message.players_searching != null && message.hasOwnProperty("players_searching"))
                object.players_searching = message.players_searching;
            if (message.servers_available != null && message.hasOwnProperty("servers_available"))
                object.servers_available = message.servers_available;
            if (message.ongoing_matches != null && message.hasOwnProperty("ongoing_matches"))
                object.ongoing_matches = message.ongoing_matches;
            if (message.search_time_avg != null && message.hasOwnProperty("search_time_avg"))
                object.search_time_avg = message.search_time_avg;
            if (message.search_statistics && message.search_statistics.length) {
                object.search_statistics = [];
                for (var j = 0; j < message.search_statistics.length; ++j)
                    object.search_statistics[j] = $root.DetailedSearchStatistic.toObject(message.search_statistics[j], options);
            }
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                object.main_post_url = message.main_post_url;
            if (message.required_appid_version != null && message.hasOwnProperty("required_appid_version"))
                object.required_appid_version = message.required_appid_version;
            if (message.pricesheet_version != null && message.hasOwnProperty("pricesheet_version"))
                object.pricesheet_version = message.pricesheet_version;
            if (message.twitch_streams_version != null && message.hasOwnProperty("twitch_streams_version"))
                object.twitch_streams_version = message.twitch_streams_version;
            if (message.active_tournament_eventid != null && message.hasOwnProperty("active_tournament_eventid"))
                object.active_tournament_eventid = message.active_tournament_eventid;
            if (message.active_survey_id != null && message.hasOwnProperty("active_survey_id"))
                object.active_survey_id = message.active_survey_id;
            if (message.rtime32_cur != null && message.hasOwnProperty("rtime32_cur"))
                object.rtime32_cur = message.rtime32_cur;
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                object.rtime32_event_start = message.rtime32_event_start;
            return object;
        };
    
        /**
         * Converts this GlobalStatistics to JSON.
         * @function toJSON
         * @memberof GlobalStatistics
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GlobalStatistics.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return GlobalStatistics;
    })();
    
    $root.OperationalStatisticDescription = (function() {
    
        /**
         * Properties of an OperationalStatisticDescription.
         * @exports IOperationalStatisticDescription
         * @interface IOperationalStatisticDescription
         * @property {string|null} [name] OperationalStatisticDescription name
         * @property {number|null} [idkey] OperationalStatisticDescription idkey
         */
    
        /**
         * Constructs a new OperationalStatisticDescription.
         * @exports OperationalStatisticDescription
         * @classdesc Represents an OperationalStatisticDescription.
         * @implements IOperationalStatisticDescription
         * @constructor
         * @param {IOperationalStatisticDescription=} [properties] Properties to set
         */
        function OperationalStatisticDescription(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * OperationalStatisticDescription name.
         * @member {string} name
         * @memberof OperationalStatisticDescription
         * @instance
         */
        OperationalStatisticDescription.prototype.name = "";
    
        /**
         * OperationalStatisticDescription idkey.
         * @member {number} idkey
         * @memberof OperationalStatisticDescription
         * @instance
         */
        OperationalStatisticDescription.prototype.idkey = 0;
    
        /**
         * Creates a new OperationalStatisticDescription instance using the specified properties.
         * @function create
         * @memberof OperationalStatisticDescription
         * @static
         * @param {IOperationalStatisticDescription=} [properties] Properties to set
         * @returns {OperationalStatisticDescription} OperationalStatisticDescription instance
         */
        OperationalStatisticDescription.create = function create(properties) {
            return new OperationalStatisticDescription(properties);
        };
    
        /**
         * Encodes the specified OperationalStatisticDescription message. Does not implicitly {@link OperationalStatisticDescription.verify|verify} messages.
         * @function encode
         * @memberof OperationalStatisticDescription
         * @static
         * @param {IOperationalStatisticDescription} message OperationalStatisticDescription message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticDescription.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.idkey);
            return writer;
        };
    
        /**
         * Encodes the specified OperationalStatisticDescription message, length delimited. Does not implicitly {@link OperationalStatisticDescription.verify|verify} messages.
         * @function encodeDelimited
         * @memberof OperationalStatisticDescription
         * @static
         * @param {IOperationalStatisticDescription} message OperationalStatisticDescription message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticDescription.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an OperationalStatisticDescription message from the specified reader or buffer.
         * @function decode
         * @memberof OperationalStatisticDescription
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {OperationalStatisticDescription} OperationalStatisticDescription
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticDescription.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.OperationalStatisticDescription();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.idkey = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an OperationalStatisticDescription message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof OperationalStatisticDescription
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {OperationalStatisticDescription} OperationalStatisticDescription
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticDescription.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an OperationalStatisticDescription message.
         * @function verify
         * @memberof OperationalStatisticDescription
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OperationalStatisticDescription.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                if (!$util.isInteger(message.idkey))
                    return "idkey: integer expected";
            return null;
        };
    
        /**
         * Creates an OperationalStatisticDescription message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof OperationalStatisticDescription
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {OperationalStatisticDescription} OperationalStatisticDescription
         */
        OperationalStatisticDescription.fromObject = function fromObject(object) {
            if (object instanceof $root.OperationalStatisticDescription)
                return object;
            var message = new $root.OperationalStatisticDescription();
            if (object.name != null)
                message.name = String(object.name);
            if (object.idkey != null)
                message.idkey = object.idkey >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from an OperationalStatisticDescription message. Also converts values to other types if specified.
         * @function toObject
         * @memberof OperationalStatisticDescription
         * @static
         * @param {OperationalStatisticDescription} message OperationalStatisticDescription
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OperationalStatisticDescription.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.name = "";
                object.idkey = 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                object.idkey = message.idkey;
            return object;
        };
    
        /**
         * Converts this OperationalStatisticDescription to JSON.
         * @function toJSON
         * @memberof OperationalStatisticDescription
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OperationalStatisticDescription.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return OperationalStatisticDescription;
    })();
    
    $root.OperationalStatisticElement = (function() {
    
        /**
         * Properties of an OperationalStatisticElement.
         * @exports IOperationalStatisticElement
         * @interface IOperationalStatisticElement
         * @property {number|null} [idkey] OperationalStatisticElement idkey
         * @property {Array.<number>|null} [values] OperationalStatisticElement values
         */
    
        /**
         * Constructs a new OperationalStatisticElement.
         * @exports OperationalStatisticElement
         * @classdesc Represents an OperationalStatisticElement.
         * @implements IOperationalStatisticElement
         * @constructor
         * @param {IOperationalStatisticElement=} [properties] Properties to set
         */
        function OperationalStatisticElement(properties) {
            this.values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * OperationalStatisticElement idkey.
         * @member {number} idkey
         * @memberof OperationalStatisticElement
         * @instance
         */
        OperationalStatisticElement.prototype.idkey = 0;
    
        /**
         * OperationalStatisticElement values.
         * @member {Array.<number>} values
         * @memberof OperationalStatisticElement
         * @instance
         */
        OperationalStatisticElement.prototype.values = $util.emptyArray;
    
        /**
         * Creates a new OperationalStatisticElement instance using the specified properties.
         * @function create
         * @memberof OperationalStatisticElement
         * @static
         * @param {IOperationalStatisticElement=} [properties] Properties to set
         * @returns {OperationalStatisticElement} OperationalStatisticElement instance
         */
        OperationalStatisticElement.create = function create(properties) {
            return new OperationalStatisticElement(properties);
        };
    
        /**
         * Encodes the specified OperationalStatisticElement message. Does not implicitly {@link OperationalStatisticElement.verify|verify} messages.
         * @function encode
         * @memberof OperationalStatisticElement
         * @static
         * @param {IOperationalStatisticElement} message OperationalStatisticElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticElement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.idkey);
            if (message.values != null && message.values.length)
                for (var i = 0; i < message.values.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.values[i]);
            return writer;
        };
    
        /**
         * Encodes the specified OperationalStatisticElement message, length delimited. Does not implicitly {@link OperationalStatisticElement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof OperationalStatisticElement
         * @static
         * @param {IOperationalStatisticElement} message OperationalStatisticElement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticElement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an OperationalStatisticElement message from the specified reader or buffer.
         * @function decode
         * @memberof OperationalStatisticElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {OperationalStatisticElement} OperationalStatisticElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticElement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.OperationalStatisticElement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.idkey = reader.uint32();
                    break;
                case 2:
                    if (!(message.values && message.values.length))
                        message.values = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.values.push(reader.int32());
                    } else
                        message.values.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an OperationalStatisticElement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof OperationalStatisticElement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {OperationalStatisticElement} OperationalStatisticElement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticElement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an OperationalStatisticElement message.
         * @function verify
         * @memberof OperationalStatisticElement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OperationalStatisticElement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                if (!$util.isInteger(message.idkey))
                    return "idkey: integer expected";
            if (message.values != null && message.hasOwnProperty("values")) {
                if (!Array.isArray(message.values))
                    return "values: array expected";
                for (var i = 0; i < message.values.length; ++i)
                    if (!$util.isInteger(message.values[i]))
                        return "values: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates an OperationalStatisticElement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof OperationalStatisticElement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {OperationalStatisticElement} OperationalStatisticElement
         */
        OperationalStatisticElement.fromObject = function fromObject(object) {
            if (object instanceof $root.OperationalStatisticElement)
                return object;
            var message = new $root.OperationalStatisticElement();
            if (object.idkey != null)
                message.idkey = object.idkey >>> 0;
            if (object.values) {
                if (!Array.isArray(object.values))
                    throw TypeError(".OperationalStatisticElement.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i)
                    message.values[i] = object.values[i] | 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from an OperationalStatisticElement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof OperationalStatisticElement
         * @static
         * @param {OperationalStatisticElement} message OperationalStatisticElement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OperationalStatisticElement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.values = [];
            if (options.defaults)
                object.idkey = 0;
            if (message.idkey != null && message.hasOwnProperty("idkey"))
                object.idkey = message.idkey;
            if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = message.values[j];
            }
            return object;
        };
    
        /**
         * Converts this OperationalStatisticElement to JSON.
         * @function toJSON
         * @memberof OperationalStatisticElement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OperationalStatisticElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return OperationalStatisticElement;
    })();
    
    $root.OperationalStatisticsPacket = (function() {
    
        /**
         * Properties of an OperationalStatisticsPacket.
         * @exports IOperationalStatisticsPacket
         * @interface IOperationalStatisticsPacket
         * @property {number|null} [packetid] OperationalStatisticsPacket packetid
         * @property {number|null} [mstimestamp] OperationalStatisticsPacket mstimestamp
         * @property {Array.<IOperationalStatisticElement>|null} [values] OperationalStatisticsPacket values
         */
    
        /**
         * Constructs a new OperationalStatisticsPacket.
         * @exports OperationalStatisticsPacket
         * @classdesc Represents an OperationalStatisticsPacket.
         * @implements IOperationalStatisticsPacket
         * @constructor
         * @param {IOperationalStatisticsPacket=} [properties] Properties to set
         */
        function OperationalStatisticsPacket(properties) {
            this.values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * OperationalStatisticsPacket packetid.
         * @member {number} packetid
         * @memberof OperationalStatisticsPacket
         * @instance
         */
        OperationalStatisticsPacket.prototype.packetid = 0;
    
        /**
         * OperationalStatisticsPacket mstimestamp.
         * @member {number} mstimestamp
         * @memberof OperationalStatisticsPacket
         * @instance
         */
        OperationalStatisticsPacket.prototype.mstimestamp = 0;
    
        /**
         * OperationalStatisticsPacket values.
         * @member {Array.<IOperationalStatisticElement>} values
         * @memberof OperationalStatisticsPacket
         * @instance
         */
        OperationalStatisticsPacket.prototype.values = $util.emptyArray;
    
        /**
         * Creates a new OperationalStatisticsPacket instance using the specified properties.
         * @function create
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {IOperationalStatisticsPacket=} [properties] Properties to set
         * @returns {OperationalStatisticsPacket} OperationalStatisticsPacket instance
         */
        OperationalStatisticsPacket.create = function create(properties) {
            return new OperationalStatisticsPacket(properties);
        };
    
        /**
         * Encodes the specified OperationalStatisticsPacket message. Does not implicitly {@link OperationalStatisticsPacket.verify|verify} messages.
         * @function encode
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {IOperationalStatisticsPacket} message OperationalStatisticsPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticsPacket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.packetid);
            if (message.mstimestamp != null && message.hasOwnProperty("mstimestamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mstimestamp);
            if (message.values != null && message.values.length)
                for (var i = 0; i < message.values.length; ++i)
                    $root.OperationalStatisticElement.encode(message.values[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified OperationalStatisticsPacket message, length delimited. Does not implicitly {@link OperationalStatisticsPacket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {IOperationalStatisticsPacket} message OperationalStatisticsPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OperationalStatisticsPacket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an OperationalStatisticsPacket message from the specified reader or buffer.
         * @function decode
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {OperationalStatisticsPacket} OperationalStatisticsPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticsPacket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.OperationalStatisticsPacket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.packetid = reader.int32();
                    break;
                case 2:
                    message.mstimestamp = reader.int32();
                    break;
                case 3:
                    if (!(message.values && message.values.length))
                        message.values = [];
                    message.values.push($root.OperationalStatisticElement.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an OperationalStatisticsPacket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {OperationalStatisticsPacket} OperationalStatisticsPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OperationalStatisticsPacket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an OperationalStatisticsPacket message.
         * @function verify
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OperationalStatisticsPacket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                if (!$util.isInteger(message.packetid))
                    return "packetid: integer expected";
            if (message.mstimestamp != null && message.hasOwnProperty("mstimestamp"))
                if (!$util.isInteger(message.mstimestamp))
                    return "mstimestamp: integer expected";
            if (message.values != null && message.hasOwnProperty("values")) {
                if (!Array.isArray(message.values))
                    return "values: array expected";
                for (var i = 0; i < message.values.length; ++i) {
                    var error = $root.OperationalStatisticElement.verify(message.values[i]);
                    if (error)
                        return "values." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates an OperationalStatisticsPacket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {OperationalStatisticsPacket} OperationalStatisticsPacket
         */
        OperationalStatisticsPacket.fromObject = function fromObject(object) {
            if (object instanceof $root.OperationalStatisticsPacket)
                return object;
            var message = new $root.OperationalStatisticsPacket();
            if (object.packetid != null)
                message.packetid = object.packetid | 0;
            if (object.mstimestamp != null)
                message.mstimestamp = object.mstimestamp | 0;
            if (object.values) {
                if (!Array.isArray(object.values))
                    throw TypeError(".OperationalStatisticsPacket.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i) {
                    if (typeof object.values[i] !== "object")
                        throw TypeError(".OperationalStatisticsPacket.values: object expected");
                    message.values[i] = $root.OperationalStatisticElement.fromObject(object.values[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from an OperationalStatisticsPacket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof OperationalStatisticsPacket
         * @static
         * @param {OperationalStatisticsPacket} message OperationalStatisticsPacket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OperationalStatisticsPacket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.values = [];
            if (options.defaults) {
                object.packetid = 0;
                object.mstimestamp = 0;
            }
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                object.packetid = message.packetid;
            if (message.mstimestamp != null && message.hasOwnProperty("mstimestamp"))
                object.mstimestamp = message.mstimestamp;
            if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = $root.OperationalStatisticElement.toObject(message.values[j], options);
            }
            return object;
        };
    
        /**
         * Converts this OperationalStatisticsPacket to JSON.
         * @function toJSON
         * @memberof OperationalStatisticsPacket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OperationalStatisticsPacket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return OperationalStatisticsPacket;
    })();
    
    $root.PlayerRankingInfo = (function() {
    
        /**
         * Properties of a PlayerRankingInfo.
         * @exports IPlayerRankingInfo
         * @interface IPlayerRankingInfo
         * @property {number|null} [account_id] PlayerRankingInfo account_id
         * @property {number|null} [rank_id] PlayerRankingInfo rank_id
         * @property {number|null} [wins] PlayerRankingInfo wins
         * @property {number|null} [rank_change] PlayerRankingInfo rank_change
         * @property {number|null} [rank_type_id] PlayerRankingInfo rank_type_id
         */
    
        /**
         * Constructs a new PlayerRankingInfo.
         * @exports PlayerRankingInfo
         * @classdesc Represents a PlayerRankingInfo.
         * @implements IPlayerRankingInfo
         * @constructor
         * @param {IPlayerRankingInfo=} [properties] Properties to set
         */
        function PlayerRankingInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PlayerRankingInfo account_id.
         * @member {number} account_id
         * @memberof PlayerRankingInfo
         * @instance
         */
        PlayerRankingInfo.prototype.account_id = 0;
    
        /**
         * PlayerRankingInfo rank_id.
         * @member {number} rank_id
         * @memberof PlayerRankingInfo
         * @instance
         */
        PlayerRankingInfo.prototype.rank_id = 0;
    
        /**
         * PlayerRankingInfo wins.
         * @member {number} wins
         * @memberof PlayerRankingInfo
         * @instance
         */
        PlayerRankingInfo.prototype.wins = 0;
    
        /**
         * PlayerRankingInfo rank_change.
         * @member {number} rank_change
         * @memberof PlayerRankingInfo
         * @instance
         */
        PlayerRankingInfo.prototype.rank_change = 0;
    
        /**
         * PlayerRankingInfo rank_type_id.
         * @member {number} rank_type_id
         * @memberof PlayerRankingInfo
         * @instance
         */
        PlayerRankingInfo.prototype.rank_type_id = 0;
    
        /**
         * Creates a new PlayerRankingInfo instance using the specified properties.
         * @function create
         * @memberof PlayerRankingInfo
         * @static
         * @param {IPlayerRankingInfo=} [properties] Properties to set
         * @returns {PlayerRankingInfo} PlayerRankingInfo instance
         */
        PlayerRankingInfo.create = function create(properties) {
            return new PlayerRankingInfo(properties);
        };
    
        /**
         * Encodes the specified PlayerRankingInfo message. Does not implicitly {@link PlayerRankingInfo.verify|verify} messages.
         * @function encode
         * @memberof PlayerRankingInfo
         * @static
         * @param {IPlayerRankingInfo} message PlayerRankingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerRankingInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.rank_id != null && message.hasOwnProperty("rank_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rank_id);
            if (message.wins != null && message.hasOwnProperty("wins"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.wins);
            if (message.rank_change != null && message.hasOwnProperty("rank_change"))
                writer.uint32(/* id 4, wireType 5 =*/37).float(message.rank_change);
            if (message.rank_type_id != null && message.hasOwnProperty("rank_type_id"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.rank_type_id);
            return writer;
        };
    
        /**
         * Encodes the specified PlayerRankingInfo message, length delimited. Does not implicitly {@link PlayerRankingInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PlayerRankingInfo
         * @static
         * @param {IPlayerRankingInfo} message PlayerRankingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerRankingInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PlayerRankingInfo message from the specified reader or buffer.
         * @function decode
         * @memberof PlayerRankingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PlayerRankingInfo} PlayerRankingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerRankingInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerRankingInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.rank_id = reader.uint32();
                    break;
                case 3:
                    message.wins = reader.uint32();
                    break;
                case 4:
                    message.rank_change = reader.float();
                    break;
                case 6:
                    message.rank_type_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PlayerRankingInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PlayerRankingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PlayerRankingInfo} PlayerRankingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerRankingInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PlayerRankingInfo message.
         * @function verify
         * @memberof PlayerRankingInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerRankingInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.rank_id != null && message.hasOwnProperty("rank_id"))
                if (!$util.isInteger(message.rank_id))
                    return "rank_id: integer expected";
            if (message.wins != null && message.hasOwnProperty("wins"))
                if (!$util.isInteger(message.wins))
                    return "wins: integer expected";
            if (message.rank_change != null && message.hasOwnProperty("rank_change"))
                if (typeof message.rank_change !== "number")
                    return "rank_change: number expected";
            if (message.rank_type_id != null && message.hasOwnProperty("rank_type_id"))
                if (!$util.isInteger(message.rank_type_id))
                    return "rank_type_id: integer expected";
            return null;
        };
    
        /**
         * Creates a PlayerRankingInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PlayerRankingInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PlayerRankingInfo} PlayerRankingInfo
         */
        PlayerRankingInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.PlayerRankingInfo)
                return object;
            var message = new $root.PlayerRankingInfo();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.rank_id != null)
                message.rank_id = object.rank_id >>> 0;
            if (object.wins != null)
                message.wins = object.wins >>> 0;
            if (object.rank_change != null)
                message.rank_change = Number(object.rank_change);
            if (object.rank_type_id != null)
                message.rank_type_id = object.rank_type_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a PlayerRankingInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PlayerRankingInfo
         * @static
         * @param {PlayerRankingInfo} message PlayerRankingInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerRankingInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.rank_id = 0;
                object.wins = 0;
                object.rank_change = 0;
                object.rank_type_id = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.rank_id != null && message.hasOwnProperty("rank_id"))
                object.rank_id = message.rank_id;
            if (message.wins != null && message.hasOwnProperty("wins"))
                object.wins = message.wins;
            if (message.rank_change != null && message.hasOwnProperty("rank_change"))
                object.rank_change = options.json && !isFinite(message.rank_change) ? String(message.rank_change) : message.rank_change;
            if (message.rank_type_id != null && message.hasOwnProperty("rank_type_id"))
                object.rank_type_id = message.rank_type_id;
            return object;
        };
    
        /**
         * Converts this PlayerRankingInfo to JSON.
         * @function toJSON
         * @memberof PlayerRankingInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerRankingInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PlayerRankingInfo;
    })();
    
    $root.PlayerCommendationInfo = (function() {
    
        /**
         * Properties of a PlayerCommendationInfo.
         * @exports IPlayerCommendationInfo
         * @interface IPlayerCommendationInfo
         * @property {number|null} [cmd_friendly] PlayerCommendationInfo cmd_friendly
         * @property {number|null} [cmd_teaching] PlayerCommendationInfo cmd_teaching
         * @property {number|null} [cmd_leader] PlayerCommendationInfo cmd_leader
         */
    
        /**
         * Constructs a new PlayerCommendationInfo.
         * @exports PlayerCommendationInfo
         * @classdesc Represents a PlayerCommendationInfo.
         * @implements IPlayerCommendationInfo
         * @constructor
         * @param {IPlayerCommendationInfo=} [properties] Properties to set
         */
        function PlayerCommendationInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PlayerCommendationInfo cmd_friendly.
         * @member {number} cmd_friendly
         * @memberof PlayerCommendationInfo
         * @instance
         */
        PlayerCommendationInfo.prototype.cmd_friendly = 0;
    
        /**
         * PlayerCommendationInfo cmd_teaching.
         * @member {number} cmd_teaching
         * @memberof PlayerCommendationInfo
         * @instance
         */
        PlayerCommendationInfo.prototype.cmd_teaching = 0;
    
        /**
         * PlayerCommendationInfo cmd_leader.
         * @member {number} cmd_leader
         * @memberof PlayerCommendationInfo
         * @instance
         */
        PlayerCommendationInfo.prototype.cmd_leader = 0;
    
        /**
         * Creates a new PlayerCommendationInfo instance using the specified properties.
         * @function create
         * @memberof PlayerCommendationInfo
         * @static
         * @param {IPlayerCommendationInfo=} [properties] Properties to set
         * @returns {PlayerCommendationInfo} PlayerCommendationInfo instance
         */
        PlayerCommendationInfo.create = function create(properties) {
            return new PlayerCommendationInfo(properties);
        };
    
        /**
         * Encodes the specified PlayerCommendationInfo message. Does not implicitly {@link PlayerCommendationInfo.verify|verify} messages.
         * @function encode
         * @memberof PlayerCommendationInfo
         * @static
         * @param {IPlayerCommendationInfo} message PlayerCommendationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerCommendationInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cmd_friendly != null && message.hasOwnProperty("cmd_friendly"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.cmd_friendly);
            if (message.cmd_teaching != null && message.hasOwnProperty("cmd_teaching"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cmd_teaching);
            if (message.cmd_leader != null && message.hasOwnProperty("cmd_leader"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cmd_leader);
            return writer;
        };
    
        /**
         * Encodes the specified PlayerCommendationInfo message, length delimited. Does not implicitly {@link PlayerCommendationInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PlayerCommendationInfo
         * @static
         * @param {IPlayerCommendationInfo} message PlayerCommendationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerCommendationInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PlayerCommendationInfo message from the specified reader or buffer.
         * @function decode
         * @memberof PlayerCommendationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PlayerCommendationInfo} PlayerCommendationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerCommendationInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerCommendationInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cmd_friendly = reader.uint32();
                    break;
                case 2:
                    message.cmd_teaching = reader.uint32();
                    break;
                case 4:
                    message.cmd_leader = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PlayerCommendationInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PlayerCommendationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PlayerCommendationInfo} PlayerCommendationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerCommendationInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PlayerCommendationInfo message.
         * @function verify
         * @memberof PlayerCommendationInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerCommendationInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cmd_friendly != null && message.hasOwnProperty("cmd_friendly"))
                if (!$util.isInteger(message.cmd_friendly))
                    return "cmd_friendly: integer expected";
            if (message.cmd_teaching != null && message.hasOwnProperty("cmd_teaching"))
                if (!$util.isInteger(message.cmd_teaching))
                    return "cmd_teaching: integer expected";
            if (message.cmd_leader != null && message.hasOwnProperty("cmd_leader"))
                if (!$util.isInteger(message.cmd_leader))
                    return "cmd_leader: integer expected";
            return null;
        };
    
        /**
         * Creates a PlayerCommendationInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PlayerCommendationInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PlayerCommendationInfo} PlayerCommendationInfo
         */
        PlayerCommendationInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.PlayerCommendationInfo)
                return object;
            var message = new $root.PlayerCommendationInfo();
            if (object.cmd_friendly != null)
                message.cmd_friendly = object.cmd_friendly >>> 0;
            if (object.cmd_teaching != null)
                message.cmd_teaching = object.cmd_teaching >>> 0;
            if (object.cmd_leader != null)
                message.cmd_leader = object.cmd_leader >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a PlayerCommendationInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PlayerCommendationInfo
         * @static
         * @param {PlayerCommendationInfo} message PlayerCommendationInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerCommendationInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cmd_friendly = 0;
                object.cmd_teaching = 0;
                object.cmd_leader = 0;
            }
            if (message.cmd_friendly != null && message.hasOwnProperty("cmd_friendly"))
                object.cmd_friendly = message.cmd_friendly;
            if (message.cmd_teaching != null && message.hasOwnProperty("cmd_teaching"))
                object.cmd_teaching = message.cmd_teaching;
            if (message.cmd_leader != null && message.hasOwnProperty("cmd_leader"))
                object.cmd_leader = message.cmd_leader;
            return object;
        };
    
        /**
         * Converts this PlayerCommendationInfo to JSON.
         * @function toJSON
         * @memberof PlayerCommendationInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerCommendationInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PlayerCommendationInfo;
    })();
    
    $root.PlayerMedalsInfo = (function() {
    
        /**
         * Properties of a PlayerMedalsInfo.
         * @exports IPlayerMedalsInfo
         * @interface IPlayerMedalsInfo
         * @property {Array.<number>|null} [display_items_defidx] PlayerMedalsInfo display_items_defidx
         * @property {number|null} [featured_display_item_defidx] PlayerMedalsInfo featured_display_item_defidx
         */
    
        /**
         * Constructs a new PlayerMedalsInfo.
         * @exports PlayerMedalsInfo
         * @classdesc Represents a PlayerMedalsInfo.
         * @implements IPlayerMedalsInfo
         * @constructor
         * @param {IPlayerMedalsInfo=} [properties] Properties to set
         */
        function PlayerMedalsInfo(properties) {
            this.display_items_defidx = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PlayerMedalsInfo display_items_defidx.
         * @member {Array.<number>} display_items_defidx
         * @memberof PlayerMedalsInfo
         * @instance
         */
        PlayerMedalsInfo.prototype.display_items_defidx = $util.emptyArray;
    
        /**
         * PlayerMedalsInfo featured_display_item_defidx.
         * @member {number} featured_display_item_defidx
         * @memberof PlayerMedalsInfo
         * @instance
         */
        PlayerMedalsInfo.prototype.featured_display_item_defidx = 0;
    
        /**
         * Creates a new PlayerMedalsInfo instance using the specified properties.
         * @function create
         * @memberof PlayerMedalsInfo
         * @static
         * @param {IPlayerMedalsInfo=} [properties] Properties to set
         * @returns {PlayerMedalsInfo} PlayerMedalsInfo instance
         */
        PlayerMedalsInfo.create = function create(properties) {
            return new PlayerMedalsInfo(properties);
        };
    
        /**
         * Encodes the specified PlayerMedalsInfo message. Does not implicitly {@link PlayerMedalsInfo.verify|verify} messages.
         * @function encode
         * @memberof PlayerMedalsInfo
         * @static
         * @param {IPlayerMedalsInfo} message PlayerMedalsInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerMedalsInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.display_items_defidx != null && message.display_items_defidx.length)
                for (var i = 0; i < message.display_items_defidx.length; ++i)
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.display_items_defidx[i]);
            if (message.featured_display_item_defidx != null && message.hasOwnProperty("featured_display_item_defidx"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.featured_display_item_defidx);
            return writer;
        };
    
        /**
         * Encodes the specified PlayerMedalsInfo message, length delimited. Does not implicitly {@link PlayerMedalsInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PlayerMedalsInfo
         * @static
         * @param {IPlayerMedalsInfo} message PlayerMedalsInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerMedalsInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PlayerMedalsInfo message from the specified reader or buffer.
         * @function decode
         * @memberof PlayerMedalsInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PlayerMedalsInfo} PlayerMedalsInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerMedalsInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerMedalsInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7:
                    if (!(message.display_items_defidx && message.display_items_defidx.length))
                        message.display_items_defidx = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.display_items_defidx.push(reader.uint32());
                    } else
                        message.display_items_defidx.push(reader.uint32());
                    break;
                case 8:
                    message.featured_display_item_defidx = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PlayerMedalsInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PlayerMedalsInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PlayerMedalsInfo} PlayerMedalsInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerMedalsInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PlayerMedalsInfo message.
         * @function verify
         * @memberof PlayerMedalsInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerMedalsInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.display_items_defidx != null && message.hasOwnProperty("display_items_defidx")) {
                if (!Array.isArray(message.display_items_defidx))
                    return "display_items_defidx: array expected";
                for (var i = 0; i < message.display_items_defidx.length; ++i)
                    if (!$util.isInteger(message.display_items_defidx[i]))
                        return "display_items_defidx: integer[] expected";
            }
            if (message.featured_display_item_defidx != null && message.hasOwnProperty("featured_display_item_defidx"))
                if (!$util.isInteger(message.featured_display_item_defidx))
                    return "featured_display_item_defidx: integer expected";
            return null;
        };
    
        /**
         * Creates a PlayerMedalsInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PlayerMedalsInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PlayerMedalsInfo} PlayerMedalsInfo
         */
        PlayerMedalsInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.PlayerMedalsInfo)
                return object;
            var message = new $root.PlayerMedalsInfo();
            if (object.display_items_defidx) {
                if (!Array.isArray(object.display_items_defidx))
                    throw TypeError(".PlayerMedalsInfo.display_items_defidx: array expected");
                message.display_items_defidx = [];
                for (var i = 0; i < object.display_items_defidx.length; ++i)
                    message.display_items_defidx[i] = object.display_items_defidx[i] >>> 0;
            }
            if (object.featured_display_item_defidx != null)
                message.featured_display_item_defidx = object.featured_display_item_defidx >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a PlayerMedalsInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PlayerMedalsInfo
         * @static
         * @param {PlayerMedalsInfo} message PlayerMedalsInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerMedalsInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.display_items_defidx = [];
            if (options.defaults)
                object.featured_display_item_defidx = 0;
            if (message.display_items_defidx && message.display_items_defidx.length) {
                object.display_items_defidx = [];
                for (var j = 0; j < message.display_items_defidx.length; ++j)
                    object.display_items_defidx[j] = message.display_items_defidx[j];
            }
            if (message.featured_display_item_defidx != null && message.hasOwnProperty("featured_display_item_defidx"))
                object.featured_display_item_defidx = message.featured_display_item_defidx;
            return object;
        };
    
        /**
         * Converts this PlayerMedalsInfo to JSON.
         * @function toJSON
         * @memberof PlayerMedalsInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerMedalsInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PlayerMedalsInfo;
    })();
    
    $root.AccountActivity = (function() {
    
        /**
         * Properties of an AccountActivity.
         * @exports IAccountActivity
         * @interface IAccountActivity
         * @property {number|null} [activity] AccountActivity activity
         * @property {number|null} [mode] AccountActivity mode
         * @property {number|null} [map] AccountActivity map
         * @property {number|Long|null} [matchid] AccountActivity matchid
         */
    
        /**
         * Constructs a new AccountActivity.
         * @exports AccountActivity
         * @classdesc Represents an AccountActivity.
         * @implements IAccountActivity
         * @constructor
         * @param {IAccountActivity=} [properties] Properties to set
         */
        function AccountActivity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * AccountActivity activity.
         * @member {number} activity
         * @memberof AccountActivity
         * @instance
         */
        AccountActivity.prototype.activity = 0;
    
        /**
         * AccountActivity mode.
         * @member {number} mode
         * @memberof AccountActivity
         * @instance
         */
        AccountActivity.prototype.mode = 0;
    
        /**
         * AccountActivity map.
         * @member {number} map
         * @memberof AccountActivity
         * @instance
         */
        AccountActivity.prototype.map = 0;
    
        /**
         * AccountActivity matchid.
         * @member {number|Long} matchid
         * @memberof AccountActivity
         * @instance
         */
        AccountActivity.prototype.matchid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new AccountActivity instance using the specified properties.
         * @function create
         * @memberof AccountActivity
         * @static
         * @param {IAccountActivity=} [properties] Properties to set
         * @returns {AccountActivity} AccountActivity instance
         */
        AccountActivity.create = function create(properties) {
            return new AccountActivity(properties);
        };
    
        /**
         * Encodes the specified AccountActivity message. Does not implicitly {@link AccountActivity.verify|verify} messages.
         * @function encode
         * @memberof AccountActivity
         * @static
         * @param {IAccountActivity} message AccountActivity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountActivity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.activity != null && message.hasOwnProperty("activity"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.activity);
            if (message.mode != null && message.hasOwnProperty("mode"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mode);
            if (message.map != null && message.hasOwnProperty("map"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.map);
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.matchid);
            return writer;
        };
    
        /**
         * Encodes the specified AccountActivity message, length delimited. Does not implicitly {@link AccountActivity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof AccountActivity
         * @static
         * @param {IAccountActivity} message AccountActivity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AccountActivity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an AccountActivity message from the specified reader or buffer.
         * @function decode
         * @memberof AccountActivity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {AccountActivity} AccountActivity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountActivity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AccountActivity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.activity = reader.uint32();
                    break;
                case 2:
                    message.mode = reader.uint32();
                    break;
                case 3:
                    message.map = reader.uint32();
                    break;
                case 4:
                    message.matchid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an AccountActivity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof AccountActivity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {AccountActivity} AccountActivity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AccountActivity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an AccountActivity message.
         * @function verify
         * @memberof AccountActivity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AccountActivity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.activity != null && message.hasOwnProperty("activity"))
                if (!$util.isInteger(message.activity))
                    return "activity: integer expected";
            if (message.mode != null && message.hasOwnProperty("mode"))
                if (!$util.isInteger(message.mode))
                    return "mode: integer expected";
            if (message.map != null && message.hasOwnProperty("map"))
                if (!$util.isInteger(message.map))
                    return "map: integer expected";
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (!$util.isInteger(message.matchid) && !(message.matchid && $util.isInteger(message.matchid.low) && $util.isInteger(message.matchid.high)))
                    return "matchid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates an AccountActivity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof AccountActivity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {AccountActivity} AccountActivity
         */
        AccountActivity.fromObject = function fromObject(object) {
            if (object instanceof $root.AccountActivity)
                return object;
            var message = new $root.AccountActivity();
            if (object.activity != null)
                message.activity = object.activity >>> 0;
            if (object.mode != null)
                message.mode = object.mode >>> 0;
            if (object.map != null)
                message.map = object.map >>> 0;
            if (object.matchid != null)
                if ($util.Long)
                    (message.matchid = $util.Long.fromValue(object.matchid)).unsigned = true;
                else if (typeof object.matchid === "string")
                    message.matchid = parseInt(object.matchid, 10);
                else if (typeof object.matchid === "number")
                    message.matchid = object.matchid;
                else if (typeof object.matchid === "object")
                    message.matchid = new $util.LongBits(object.matchid.low >>> 0, object.matchid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from an AccountActivity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof AccountActivity
         * @static
         * @param {AccountActivity} message AccountActivity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AccountActivity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.activity = 0;
                object.mode = 0;
                object.map = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.matchid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.matchid = options.longs === String ? "0" : 0;
            }
            if (message.activity != null && message.hasOwnProperty("activity"))
                object.activity = message.activity;
            if (message.mode != null && message.hasOwnProperty("mode"))
                object.mode = message.mode;
            if (message.map != null && message.hasOwnProperty("map"))
                object.map = message.map;
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (typeof message.matchid === "number")
                    object.matchid = options.longs === String ? String(message.matchid) : message.matchid;
                else
                    object.matchid = options.longs === String ? $util.Long.prototype.toString.call(message.matchid) : options.longs === Number ? new $util.LongBits(message.matchid.low >>> 0, message.matchid.high >>> 0).toNumber(true) : message.matchid;
            return object;
        };
    
        /**
         * Converts this AccountActivity to JSON.
         * @function toJSON
         * @memberof AccountActivity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AccountActivity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return AccountActivity;
    })();
    
    $root.TournamentMatchSetup = (function() {
    
        /**
         * Properties of a TournamentMatchSetup.
         * @exports ITournamentMatchSetup
         * @interface ITournamentMatchSetup
         * @property {number|null} [event_id] TournamentMatchSetup event_id
         * @property {number|null} [team_id_ct] TournamentMatchSetup team_id_ct
         * @property {number|null} [team_id_t] TournamentMatchSetup team_id_t
         * @property {number|null} [event_stage_id] TournamentMatchSetup event_stage_id
         */
    
        /**
         * Constructs a new TournamentMatchSetup.
         * @exports TournamentMatchSetup
         * @classdesc Represents a TournamentMatchSetup.
         * @implements ITournamentMatchSetup
         * @constructor
         * @param {ITournamentMatchSetup=} [properties] Properties to set
         */
        function TournamentMatchSetup(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * TournamentMatchSetup event_id.
         * @member {number} event_id
         * @memberof TournamentMatchSetup
         * @instance
         */
        TournamentMatchSetup.prototype.event_id = 0;
    
        /**
         * TournamentMatchSetup team_id_ct.
         * @member {number} team_id_ct
         * @memberof TournamentMatchSetup
         * @instance
         */
        TournamentMatchSetup.prototype.team_id_ct = 0;
    
        /**
         * TournamentMatchSetup team_id_t.
         * @member {number} team_id_t
         * @memberof TournamentMatchSetup
         * @instance
         */
        TournamentMatchSetup.prototype.team_id_t = 0;
    
        /**
         * TournamentMatchSetup event_stage_id.
         * @member {number} event_stage_id
         * @memberof TournamentMatchSetup
         * @instance
         */
        TournamentMatchSetup.prototype.event_stage_id = 0;
    
        /**
         * Creates a new TournamentMatchSetup instance using the specified properties.
         * @function create
         * @memberof TournamentMatchSetup
         * @static
         * @param {ITournamentMatchSetup=} [properties] Properties to set
         * @returns {TournamentMatchSetup} TournamentMatchSetup instance
         */
        TournamentMatchSetup.create = function create(properties) {
            return new TournamentMatchSetup(properties);
        };
    
        /**
         * Encodes the specified TournamentMatchSetup message. Does not implicitly {@link TournamentMatchSetup.verify|verify} messages.
         * @function encode
         * @memberof TournamentMatchSetup
         * @static
         * @param {ITournamentMatchSetup} message TournamentMatchSetup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentMatchSetup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.event_id);
            if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.team_id_ct);
            if (message.team_id_t != null && message.hasOwnProperty("team_id_t"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.team_id_t);
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.event_stage_id);
            return writer;
        };
    
        /**
         * Encodes the specified TournamentMatchSetup message, length delimited. Does not implicitly {@link TournamentMatchSetup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TournamentMatchSetup
         * @static
         * @param {ITournamentMatchSetup} message TournamentMatchSetup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TournamentMatchSetup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a TournamentMatchSetup message from the specified reader or buffer.
         * @function decode
         * @memberof TournamentMatchSetup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TournamentMatchSetup} TournamentMatchSetup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentMatchSetup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TournamentMatchSetup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event_id = reader.int32();
                    break;
                case 2:
                    message.team_id_ct = reader.int32();
                    break;
                case 3:
                    message.team_id_t = reader.int32();
                    break;
                case 4:
                    message.event_stage_id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a TournamentMatchSetup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TournamentMatchSetup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TournamentMatchSetup} TournamentMatchSetup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TournamentMatchSetup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a TournamentMatchSetup message.
         * @function verify
         * @memberof TournamentMatchSetup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TournamentMatchSetup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                if (!$util.isInteger(message.event_id))
                    return "event_id: integer expected";
            if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                if (!$util.isInteger(message.team_id_ct))
                    return "team_id_ct: integer expected";
            if (message.team_id_t != null && message.hasOwnProperty("team_id_t"))
                if (!$util.isInteger(message.team_id_t))
                    return "team_id_t: integer expected";
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                if (!$util.isInteger(message.event_stage_id))
                    return "event_stage_id: integer expected";
            return null;
        };
    
        /**
         * Creates a TournamentMatchSetup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TournamentMatchSetup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TournamentMatchSetup} TournamentMatchSetup
         */
        TournamentMatchSetup.fromObject = function fromObject(object) {
            if (object instanceof $root.TournamentMatchSetup)
                return object;
            var message = new $root.TournamentMatchSetup();
            if (object.event_id != null)
                message.event_id = object.event_id | 0;
            if (object.team_id_ct != null)
                message.team_id_ct = object.team_id_ct | 0;
            if (object.team_id_t != null)
                message.team_id_t = object.team_id_t | 0;
            if (object.event_stage_id != null)
                message.event_stage_id = object.event_stage_id | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a TournamentMatchSetup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TournamentMatchSetup
         * @static
         * @param {TournamentMatchSetup} message TournamentMatchSetup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TournamentMatchSetup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.event_id = 0;
                object.team_id_ct = 0;
                object.team_id_t = 0;
                object.event_stage_id = 0;
            }
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                object.event_id = message.event_id;
            if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                object.team_id_ct = message.team_id_ct;
            if (message.team_id_t != null && message.hasOwnProperty("team_id_t"))
                object.team_id_t = message.team_id_t;
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                object.event_stage_id = message.event_stage_id;
            return object;
        };
    
        /**
         * Converts this TournamentMatchSetup to JSON.
         * @function toJSON
         * @memberof TournamentMatchSetup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TournamentMatchSetup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return TournamentMatchSetup;
    })();
    
    $root.ServerHltvInfo = (function() {
    
        /**
         * Properties of a ServerHltvInfo.
         * @exports IServerHltvInfo
         * @interface IServerHltvInfo
         * @property {number|null} [tv_udp_port] ServerHltvInfo tv_udp_port
         * @property {number|Long|null} [tv_watch_key] ServerHltvInfo tv_watch_key
         * @property {number|null} [tv_slots] ServerHltvInfo tv_slots
         * @property {number|null} [tv_clients] ServerHltvInfo tv_clients
         * @property {number|null} [tv_proxies] ServerHltvInfo tv_proxies
         * @property {number|null} [tv_time] ServerHltvInfo tv_time
         * @property {number|null} [game_type] ServerHltvInfo game_type
         * @property {string|null} [game_mapgroup] ServerHltvInfo game_mapgroup
         * @property {string|null} [game_map] ServerHltvInfo game_map
         * @property {number|Long|null} [tv_master_steamid] ServerHltvInfo tv_master_steamid
         * @property {number|null} [tv_local_slots] ServerHltvInfo tv_local_slots
         * @property {number|null} [tv_local_clients] ServerHltvInfo tv_local_clients
         * @property {number|null} [tv_local_proxies] ServerHltvInfo tv_local_proxies
         * @property {number|null} [tv_relay_slots] ServerHltvInfo tv_relay_slots
         * @property {number|null} [tv_relay_clients] ServerHltvInfo tv_relay_clients
         * @property {number|null} [tv_relay_proxies] ServerHltvInfo tv_relay_proxies
         * @property {number|null} [tv_relay_address] ServerHltvInfo tv_relay_address
         * @property {number|null} [tv_relay_port] ServerHltvInfo tv_relay_port
         * @property {number|Long|null} [tv_relay_steamid] ServerHltvInfo tv_relay_steamid
         * @property {number|null} [flags] ServerHltvInfo flags
         */
    
        /**
         * Constructs a new ServerHltvInfo.
         * @exports ServerHltvInfo
         * @classdesc Represents a ServerHltvInfo.
         * @implements IServerHltvInfo
         * @constructor
         * @param {IServerHltvInfo=} [properties] Properties to set
         */
        function ServerHltvInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ServerHltvInfo tv_udp_port.
         * @member {number} tv_udp_port
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_udp_port = 0;
    
        /**
         * ServerHltvInfo tv_watch_key.
         * @member {number|Long} tv_watch_key
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_watch_key = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ServerHltvInfo tv_slots.
         * @member {number} tv_slots
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_slots = 0;
    
        /**
         * ServerHltvInfo tv_clients.
         * @member {number} tv_clients
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_clients = 0;
    
        /**
         * ServerHltvInfo tv_proxies.
         * @member {number} tv_proxies
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_proxies = 0;
    
        /**
         * ServerHltvInfo tv_time.
         * @member {number} tv_time
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_time = 0;
    
        /**
         * ServerHltvInfo game_type.
         * @member {number} game_type
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.game_type = 0;
    
        /**
         * ServerHltvInfo game_mapgroup.
         * @member {string} game_mapgroup
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.game_mapgroup = "";
    
        /**
         * ServerHltvInfo game_map.
         * @member {string} game_map
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.game_map = "";
    
        /**
         * ServerHltvInfo tv_master_steamid.
         * @member {number|Long} tv_master_steamid
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_master_steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ServerHltvInfo tv_local_slots.
         * @member {number} tv_local_slots
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_local_slots = 0;
    
        /**
         * ServerHltvInfo tv_local_clients.
         * @member {number} tv_local_clients
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_local_clients = 0;
    
        /**
         * ServerHltvInfo tv_local_proxies.
         * @member {number} tv_local_proxies
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_local_proxies = 0;
    
        /**
         * ServerHltvInfo tv_relay_slots.
         * @member {number} tv_relay_slots
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_slots = 0;
    
        /**
         * ServerHltvInfo tv_relay_clients.
         * @member {number} tv_relay_clients
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_clients = 0;
    
        /**
         * ServerHltvInfo tv_relay_proxies.
         * @member {number} tv_relay_proxies
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_proxies = 0;
    
        /**
         * ServerHltvInfo tv_relay_address.
         * @member {number} tv_relay_address
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_address = 0;
    
        /**
         * ServerHltvInfo tv_relay_port.
         * @member {number} tv_relay_port
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_port = 0;
    
        /**
         * ServerHltvInfo tv_relay_steamid.
         * @member {number|Long} tv_relay_steamid
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.tv_relay_steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ServerHltvInfo flags.
         * @member {number} flags
         * @memberof ServerHltvInfo
         * @instance
         */
        ServerHltvInfo.prototype.flags = 0;
    
        /**
         * Creates a new ServerHltvInfo instance using the specified properties.
         * @function create
         * @memberof ServerHltvInfo
         * @static
         * @param {IServerHltvInfo=} [properties] Properties to set
         * @returns {ServerHltvInfo} ServerHltvInfo instance
         */
        ServerHltvInfo.create = function create(properties) {
            return new ServerHltvInfo(properties);
        };
    
        /**
         * Encodes the specified ServerHltvInfo message. Does not implicitly {@link ServerHltvInfo.verify|verify} messages.
         * @function encode
         * @memberof ServerHltvInfo
         * @static
         * @param {IServerHltvInfo} message ServerHltvInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerHltvInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.tv_udp_port != null && message.hasOwnProperty("tv_udp_port"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tv_udp_port);
            if (message.tv_watch_key != null && message.hasOwnProperty("tv_watch_key"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.tv_watch_key);
            if (message.tv_slots != null && message.hasOwnProperty("tv_slots"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tv_slots);
            if (message.tv_clients != null && message.hasOwnProperty("tv_clients"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tv_clients);
            if (message.tv_proxies != null && message.hasOwnProperty("tv_proxies"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.tv_proxies);
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tv_time);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.game_type);
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.game_mapgroup);
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.game_map);
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.tv_master_steamid);
            if (message.tv_local_slots != null && message.hasOwnProperty("tv_local_slots"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.tv_local_slots);
            if (message.tv_local_clients != null && message.hasOwnProperty("tv_local_clients"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.tv_local_clients);
            if (message.tv_local_proxies != null && message.hasOwnProperty("tv_local_proxies"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.tv_local_proxies);
            if (message.tv_relay_slots != null && message.hasOwnProperty("tv_relay_slots"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.tv_relay_slots);
            if (message.tv_relay_clients != null && message.hasOwnProperty("tv_relay_clients"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.tv_relay_clients);
            if (message.tv_relay_proxies != null && message.hasOwnProperty("tv_relay_proxies"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.tv_relay_proxies);
            if (message.tv_relay_address != null && message.hasOwnProperty("tv_relay_address"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.tv_relay_address);
            if (message.tv_relay_port != null && message.hasOwnProperty("tv_relay_port"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.tv_relay_port);
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint64(message.tv_relay_steamid);
            if (message.flags != null && message.hasOwnProperty("flags"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.flags);
            return writer;
        };
    
        /**
         * Encodes the specified ServerHltvInfo message, length delimited. Does not implicitly {@link ServerHltvInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ServerHltvInfo
         * @static
         * @param {IServerHltvInfo} message ServerHltvInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerHltvInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ServerHltvInfo message from the specified reader or buffer.
         * @function decode
         * @memberof ServerHltvInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ServerHltvInfo} ServerHltvInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerHltvInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServerHltvInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.tv_udp_port = reader.uint32();
                    break;
                case 2:
                    message.tv_watch_key = reader.uint64();
                    break;
                case 3:
                    message.tv_slots = reader.uint32();
                    break;
                case 4:
                    message.tv_clients = reader.uint32();
                    break;
                case 5:
                    message.tv_proxies = reader.uint32();
                    break;
                case 6:
                    message.tv_time = reader.uint32();
                    break;
                case 8:
                    message.game_type = reader.uint32();
                    break;
                case 9:
                    message.game_mapgroup = reader.string();
                    break;
                case 10:
                    message.game_map = reader.string();
                    break;
                case 11:
                    message.tv_master_steamid = reader.uint64();
                    break;
                case 12:
                    message.tv_local_slots = reader.uint32();
                    break;
                case 13:
                    message.tv_local_clients = reader.uint32();
                    break;
                case 14:
                    message.tv_local_proxies = reader.uint32();
                    break;
                case 15:
                    message.tv_relay_slots = reader.uint32();
                    break;
                case 16:
                    message.tv_relay_clients = reader.uint32();
                    break;
                case 17:
                    message.tv_relay_proxies = reader.uint32();
                    break;
                case 18:
                    message.tv_relay_address = reader.uint32();
                    break;
                case 19:
                    message.tv_relay_port = reader.uint32();
                    break;
                case 20:
                    message.tv_relay_steamid = reader.uint64();
                    break;
                case 21:
                    message.flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ServerHltvInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ServerHltvInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ServerHltvInfo} ServerHltvInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerHltvInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ServerHltvInfo message.
         * @function verify
         * @memberof ServerHltvInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServerHltvInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.tv_udp_port != null && message.hasOwnProperty("tv_udp_port"))
                if (!$util.isInteger(message.tv_udp_port))
                    return "tv_udp_port: integer expected";
            if (message.tv_watch_key != null && message.hasOwnProperty("tv_watch_key"))
                if (!$util.isInteger(message.tv_watch_key) && !(message.tv_watch_key && $util.isInteger(message.tv_watch_key.low) && $util.isInteger(message.tv_watch_key.high)))
                    return "tv_watch_key: integer|Long expected";
            if (message.tv_slots != null && message.hasOwnProperty("tv_slots"))
                if (!$util.isInteger(message.tv_slots))
                    return "tv_slots: integer expected";
            if (message.tv_clients != null && message.hasOwnProperty("tv_clients"))
                if (!$util.isInteger(message.tv_clients))
                    return "tv_clients: integer expected";
            if (message.tv_proxies != null && message.hasOwnProperty("tv_proxies"))
                if (!$util.isInteger(message.tv_proxies))
                    return "tv_proxies: integer expected";
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                if (!$util.isInteger(message.tv_time))
                    return "tv_time: integer expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                if (!$util.isString(message.game_mapgroup))
                    return "game_mapgroup: string expected";
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                if (!$util.isString(message.game_map))
                    return "game_map: string expected";
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                if (!$util.isInteger(message.tv_master_steamid) && !(message.tv_master_steamid && $util.isInteger(message.tv_master_steamid.low) && $util.isInteger(message.tv_master_steamid.high)))
                    return "tv_master_steamid: integer|Long expected";
            if (message.tv_local_slots != null && message.hasOwnProperty("tv_local_slots"))
                if (!$util.isInteger(message.tv_local_slots))
                    return "tv_local_slots: integer expected";
            if (message.tv_local_clients != null && message.hasOwnProperty("tv_local_clients"))
                if (!$util.isInteger(message.tv_local_clients))
                    return "tv_local_clients: integer expected";
            if (message.tv_local_proxies != null && message.hasOwnProperty("tv_local_proxies"))
                if (!$util.isInteger(message.tv_local_proxies))
                    return "tv_local_proxies: integer expected";
            if (message.tv_relay_slots != null && message.hasOwnProperty("tv_relay_slots"))
                if (!$util.isInteger(message.tv_relay_slots))
                    return "tv_relay_slots: integer expected";
            if (message.tv_relay_clients != null && message.hasOwnProperty("tv_relay_clients"))
                if (!$util.isInteger(message.tv_relay_clients))
                    return "tv_relay_clients: integer expected";
            if (message.tv_relay_proxies != null && message.hasOwnProperty("tv_relay_proxies"))
                if (!$util.isInteger(message.tv_relay_proxies))
                    return "tv_relay_proxies: integer expected";
            if (message.tv_relay_address != null && message.hasOwnProperty("tv_relay_address"))
                if (!$util.isInteger(message.tv_relay_address))
                    return "tv_relay_address: integer expected";
            if (message.tv_relay_port != null && message.hasOwnProperty("tv_relay_port"))
                if (!$util.isInteger(message.tv_relay_port))
                    return "tv_relay_port: integer expected";
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                if (!$util.isInteger(message.tv_relay_steamid) && !(message.tv_relay_steamid && $util.isInteger(message.tv_relay_steamid.low) && $util.isInteger(message.tv_relay_steamid.high)))
                    return "tv_relay_steamid: integer|Long expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            return null;
        };
    
        /**
         * Creates a ServerHltvInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ServerHltvInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ServerHltvInfo} ServerHltvInfo
         */
        ServerHltvInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.ServerHltvInfo)
                return object;
            var message = new $root.ServerHltvInfo();
            if (object.tv_udp_port != null)
                message.tv_udp_port = object.tv_udp_port >>> 0;
            if (object.tv_watch_key != null)
                if ($util.Long)
                    (message.tv_watch_key = $util.Long.fromValue(object.tv_watch_key)).unsigned = true;
                else if (typeof object.tv_watch_key === "string")
                    message.tv_watch_key = parseInt(object.tv_watch_key, 10);
                else if (typeof object.tv_watch_key === "number")
                    message.tv_watch_key = object.tv_watch_key;
                else if (typeof object.tv_watch_key === "object")
                    message.tv_watch_key = new $util.LongBits(object.tv_watch_key.low >>> 0, object.tv_watch_key.high >>> 0).toNumber(true);
            if (object.tv_slots != null)
                message.tv_slots = object.tv_slots >>> 0;
            if (object.tv_clients != null)
                message.tv_clients = object.tv_clients >>> 0;
            if (object.tv_proxies != null)
                message.tv_proxies = object.tv_proxies >>> 0;
            if (object.tv_time != null)
                message.tv_time = object.tv_time >>> 0;
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.game_mapgroup != null)
                message.game_mapgroup = String(object.game_mapgroup);
            if (object.game_map != null)
                message.game_map = String(object.game_map);
            if (object.tv_master_steamid != null)
                if ($util.Long)
                    (message.tv_master_steamid = $util.Long.fromValue(object.tv_master_steamid)).unsigned = true;
                else if (typeof object.tv_master_steamid === "string")
                    message.tv_master_steamid = parseInt(object.tv_master_steamid, 10);
                else if (typeof object.tv_master_steamid === "number")
                    message.tv_master_steamid = object.tv_master_steamid;
                else if (typeof object.tv_master_steamid === "object")
                    message.tv_master_steamid = new $util.LongBits(object.tv_master_steamid.low >>> 0, object.tv_master_steamid.high >>> 0).toNumber(true);
            if (object.tv_local_slots != null)
                message.tv_local_slots = object.tv_local_slots >>> 0;
            if (object.tv_local_clients != null)
                message.tv_local_clients = object.tv_local_clients >>> 0;
            if (object.tv_local_proxies != null)
                message.tv_local_proxies = object.tv_local_proxies >>> 0;
            if (object.tv_relay_slots != null)
                message.tv_relay_slots = object.tv_relay_slots >>> 0;
            if (object.tv_relay_clients != null)
                message.tv_relay_clients = object.tv_relay_clients >>> 0;
            if (object.tv_relay_proxies != null)
                message.tv_relay_proxies = object.tv_relay_proxies >>> 0;
            if (object.tv_relay_address != null)
                message.tv_relay_address = object.tv_relay_address >>> 0;
            if (object.tv_relay_port != null)
                message.tv_relay_port = object.tv_relay_port >>> 0;
            if (object.tv_relay_steamid != null)
                if ($util.Long)
                    (message.tv_relay_steamid = $util.Long.fromValue(object.tv_relay_steamid)).unsigned = true;
                else if (typeof object.tv_relay_steamid === "string")
                    message.tv_relay_steamid = parseInt(object.tv_relay_steamid, 10);
                else if (typeof object.tv_relay_steamid === "number")
                    message.tv_relay_steamid = object.tv_relay_steamid;
                else if (typeof object.tv_relay_steamid === "object")
                    message.tv_relay_steamid = new $util.LongBits(object.tv_relay_steamid.low >>> 0, object.tv_relay_steamid.high >>> 0).toNumber(true);
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a ServerHltvInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ServerHltvInfo
         * @static
         * @param {ServerHltvInfo} message ServerHltvInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServerHltvInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.tv_udp_port = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tv_watch_key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tv_watch_key = options.longs === String ? "0" : 0;
                object.tv_slots = 0;
                object.tv_clients = 0;
                object.tv_proxies = 0;
                object.tv_time = 0;
                object.game_type = 0;
                object.game_mapgroup = "";
                object.game_map = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tv_master_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tv_master_steamid = options.longs === String ? "0" : 0;
                object.tv_local_slots = 0;
                object.tv_local_clients = 0;
                object.tv_local_proxies = 0;
                object.tv_relay_slots = 0;
                object.tv_relay_clients = 0;
                object.tv_relay_proxies = 0;
                object.tv_relay_address = 0;
                object.tv_relay_port = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tv_relay_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tv_relay_steamid = options.longs === String ? "0" : 0;
                object.flags = 0;
            }
            if (message.tv_udp_port != null && message.hasOwnProperty("tv_udp_port"))
                object.tv_udp_port = message.tv_udp_port;
            if (message.tv_watch_key != null && message.hasOwnProperty("tv_watch_key"))
                if (typeof message.tv_watch_key === "number")
                    object.tv_watch_key = options.longs === String ? String(message.tv_watch_key) : message.tv_watch_key;
                else
                    object.tv_watch_key = options.longs === String ? $util.Long.prototype.toString.call(message.tv_watch_key) : options.longs === Number ? new $util.LongBits(message.tv_watch_key.low >>> 0, message.tv_watch_key.high >>> 0).toNumber(true) : message.tv_watch_key;
            if (message.tv_slots != null && message.hasOwnProperty("tv_slots"))
                object.tv_slots = message.tv_slots;
            if (message.tv_clients != null && message.hasOwnProperty("tv_clients"))
                object.tv_clients = message.tv_clients;
            if (message.tv_proxies != null && message.hasOwnProperty("tv_proxies"))
                object.tv_proxies = message.tv_proxies;
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                object.tv_time = message.tv_time;
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                object.game_mapgroup = message.game_mapgroup;
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                object.game_map = message.game_map;
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                if (typeof message.tv_master_steamid === "number")
                    object.tv_master_steamid = options.longs === String ? String(message.tv_master_steamid) : message.tv_master_steamid;
                else
                    object.tv_master_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.tv_master_steamid) : options.longs === Number ? new $util.LongBits(message.tv_master_steamid.low >>> 0, message.tv_master_steamid.high >>> 0).toNumber(true) : message.tv_master_steamid;
            if (message.tv_local_slots != null && message.hasOwnProperty("tv_local_slots"))
                object.tv_local_slots = message.tv_local_slots;
            if (message.tv_local_clients != null && message.hasOwnProperty("tv_local_clients"))
                object.tv_local_clients = message.tv_local_clients;
            if (message.tv_local_proxies != null && message.hasOwnProperty("tv_local_proxies"))
                object.tv_local_proxies = message.tv_local_proxies;
            if (message.tv_relay_slots != null && message.hasOwnProperty("tv_relay_slots"))
                object.tv_relay_slots = message.tv_relay_slots;
            if (message.tv_relay_clients != null && message.hasOwnProperty("tv_relay_clients"))
                object.tv_relay_clients = message.tv_relay_clients;
            if (message.tv_relay_proxies != null && message.hasOwnProperty("tv_relay_proxies"))
                object.tv_relay_proxies = message.tv_relay_proxies;
            if (message.tv_relay_address != null && message.hasOwnProperty("tv_relay_address"))
                object.tv_relay_address = message.tv_relay_address;
            if (message.tv_relay_port != null && message.hasOwnProperty("tv_relay_port"))
                object.tv_relay_port = message.tv_relay_port;
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                if (typeof message.tv_relay_steamid === "number")
                    object.tv_relay_steamid = options.longs === String ? String(message.tv_relay_steamid) : message.tv_relay_steamid;
                else
                    object.tv_relay_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.tv_relay_steamid) : options.longs === Number ? new $util.LongBits(message.tv_relay_steamid.low >>> 0, message.tv_relay_steamid.high >>> 0).toNumber(true) : message.tv_relay_steamid;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            return object;
        };
    
        /**
         * Converts this ServerHltvInfo to JSON.
         * @function toJSON
         * @memberof ServerHltvInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServerHltvInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return ServerHltvInfo;
    })();
    
    $root.IpAddressMask = (function() {
    
        /**
         * Properties of an IpAddressMask.
         * @exports IIpAddressMask
         * @interface IIpAddressMask
         * @property {number|null} [a] IpAddressMask a
         * @property {number|null} [b] IpAddressMask b
         * @property {number|null} [c] IpAddressMask c
         * @property {number|null} [d] IpAddressMask d
         * @property {number|null} [bits] IpAddressMask bits
         * @property {number|null} [token] IpAddressMask token
         */
    
        /**
         * Constructs a new IpAddressMask.
         * @exports IpAddressMask
         * @classdesc Represents an IpAddressMask.
         * @implements IIpAddressMask
         * @constructor
         * @param {IIpAddressMask=} [properties] Properties to set
         */
        function IpAddressMask(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * IpAddressMask a.
         * @member {number} a
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.a = 0;
    
        /**
         * IpAddressMask b.
         * @member {number} b
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.b = 0;
    
        /**
         * IpAddressMask c.
         * @member {number} c
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.c = 0;
    
        /**
         * IpAddressMask d.
         * @member {number} d
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.d = 0;
    
        /**
         * IpAddressMask bits.
         * @member {number} bits
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.bits = 0;
    
        /**
         * IpAddressMask token.
         * @member {number} token
         * @memberof IpAddressMask
         * @instance
         */
        IpAddressMask.prototype.token = 0;
    
        /**
         * Creates a new IpAddressMask instance using the specified properties.
         * @function create
         * @memberof IpAddressMask
         * @static
         * @param {IIpAddressMask=} [properties] Properties to set
         * @returns {IpAddressMask} IpAddressMask instance
         */
        IpAddressMask.create = function create(properties) {
            return new IpAddressMask(properties);
        };
    
        /**
         * Encodes the specified IpAddressMask message. Does not implicitly {@link IpAddressMask.verify|verify} messages.
         * @function encode
         * @memberof IpAddressMask
         * @static
         * @param {IIpAddressMask} message IpAddressMask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpAddressMask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.a != null && message.hasOwnProperty("a"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.a);
            if (message.b != null && message.hasOwnProperty("b"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.b);
            if (message.c != null && message.hasOwnProperty("c"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.c);
            if (message.d != null && message.hasOwnProperty("d"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.d);
            if (message.bits != null && message.hasOwnProperty("bits"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.bits);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.token);
            return writer;
        };
    
        /**
         * Encodes the specified IpAddressMask message, length delimited. Does not implicitly {@link IpAddressMask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof IpAddressMask
         * @static
         * @param {IIpAddressMask} message IpAddressMask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IpAddressMask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes an IpAddressMask message from the specified reader or buffer.
         * @function decode
         * @memberof IpAddressMask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {IpAddressMask} IpAddressMask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpAddressMask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.IpAddressMask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.a = reader.uint32();
                    break;
                case 2:
                    message.b = reader.uint32();
                    break;
                case 3:
                    message.c = reader.uint32();
                    break;
                case 4:
                    message.d = reader.uint32();
                    break;
                case 5:
                    message.bits = reader.uint32();
                    break;
                case 6:
                    message.token = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes an IpAddressMask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof IpAddressMask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {IpAddressMask} IpAddressMask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IpAddressMask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies an IpAddressMask message.
         * @function verify
         * @memberof IpAddressMask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IpAddressMask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.a != null && message.hasOwnProperty("a"))
                if (!$util.isInteger(message.a))
                    return "a: integer expected";
            if (message.b != null && message.hasOwnProperty("b"))
                if (!$util.isInteger(message.b))
                    return "b: integer expected";
            if (message.c != null && message.hasOwnProperty("c"))
                if (!$util.isInteger(message.c))
                    return "c: integer expected";
            if (message.d != null && message.hasOwnProperty("d"))
                if (!$util.isInteger(message.d))
                    return "d: integer expected";
            if (message.bits != null && message.hasOwnProperty("bits"))
                if (!$util.isInteger(message.bits))
                    return "bits: integer expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isInteger(message.token))
                    return "token: integer expected";
            return null;
        };
    
        /**
         * Creates an IpAddressMask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof IpAddressMask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {IpAddressMask} IpAddressMask
         */
        IpAddressMask.fromObject = function fromObject(object) {
            if (object instanceof $root.IpAddressMask)
                return object;
            var message = new $root.IpAddressMask();
            if (object.a != null)
                message.a = object.a >>> 0;
            if (object.b != null)
                message.b = object.b >>> 0;
            if (object.c != null)
                message.c = object.c >>> 0;
            if (object.d != null)
                message.d = object.d >>> 0;
            if (object.bits != null)
                message.bits = object.bits >>> 0;
            if (object.token != null)
                message.token = object.token >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from an IpAddressMask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof IpAddressMask
         * @static
         * @param {IpAddressMask} message IpAddressMask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IpAddressMask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.a = 0;
                object.b = 0;
                object.c = 0;
                object.d = 0;
                object.bits = 0;
                object.token = 0;
            }
            if (message.a != null && message.hasOwnProperty("a"))
                object.a = message.a;
            if (message.b != null && message.hasOwnProperty("b"))
                object.b = message.b;
            if (message.c != null && message.hasOwnProperty("c"))
                object.c = message.c;
            if (message.d != null && message.hasOwnProperty("d"))
                object.d = message.d;
            if (message.bits != null && message.hasOwnProperty("bits"))
                object.bits = message.bits;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };
    
        /**
         * Converts this IpAddressMask to JSON.
         * @function toJSON
         * @memberof IpAddressMask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IpAddressMask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return IpAddressMask;
    })();
    
    $root.CMsgCsgoSteamUserStatChange = (function() {
    
        /**
         * Properties of a CMsgCsgoSteamUserStatChange.
         * @exports ICMsgCsgoSteamUserStatChange
         * @interface ICMsgCsgoSteamUserStatChange
         * @property {number|null} [ecsgosteamuserstat] CMsgCsgoSteamUserStatChange ecsgosteamuserstat
         * @property {number|null} [delta] CMsgCsgoSteamUserStatChange delta
         * @property {boolean|null} [absolute] CMsgCsgoSteamUserStatChange absolute
         */
    
        /**
         * Constructs a new CMsgCsgoSteamUserStatChange.
         * @exports CMsgCsgoSteamUserStatChange
         * @classdesc Represents a CMsgCsgoSteamUserStatChange.
         * @implements ICMsgCsgoSteamUserStatChange
         * @constructor
         * @param {ICMsgCsgoSteamUserStatChange=} [properties] Properties to set
         */
        function CMsgCsgoSteamUserStatChange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCsgoSteamUserStatChange ecsgosteamuserstat.
         * @member {number} ecsgosteamuserstat
         * @memberof CMsgCsgoSteamUserStatChange
         * @instance
         */
        CMsgCsgoSteamUserStatChange.prototype.ecsgosteamuserstat = 0;
    
        /**
         * CMsgCsgoSteamUserStatChange delta.
         * @member {number} delta
         * @memberof CMsgCsgoSteamUserStatChange
         * @instance
         */
        CMsgCsgoSteamUserStatChange.prototype.delta = 0;
    
        /**
         * CMsgCsgoSteamUserStatChange absolute.
         * @member {boolean} absolute
         * @memberof CMsgCsgoSteamUserStatChange
         * @instance
         */
        CMsgCsgoSteamUserStatChange.prototype.absolute = false;
    
        /**
         * Creates a new CMsgCsgoSteamUserStatChange instance using the specified properties.
         * @function create
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {ICMsgCsgoSteamUserStatChange=} [properties] Properties to set
         * @returns {CMsgCsgoSteamUserStatChange} CMsgCsgoSteamUserStatChange instance
         */
        CMsgCsgoSteamUserStatChange.create = function create(properties) {
            return new CMsgCsgoSteamUserStatChange(properties);
        };
    
        /**
         * Encodes the specified CMsgCsgoSteamUserStatChange message. Does not implicitly {@link CMsgCsgoSteamUserStatChange.verify|verify} messages.
         * @function encode
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {ICMsgCsgoSteamUserStatChange} message CMsgCsgoSteamUserStatChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCsgoSteamUserStatChange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ecsgosteamuserstat != null && message.hasOwnProperty("ecsgosteamuserstat"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ecsgosteamuserstat);
            if (message.delta != null && message.hasOwnProperty("delta"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.delta);
            if (message.absolute != null && message.hasOwnProperty("absolute"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.absolute);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCsgoSteamUserStatChange message, length delimited. Does not implicitly {@link CMsgCsgoSteamUserStatChange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {ICMsgCsgoSteamUserStatChange} message CMsgCsgoSteamUserStatChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCsgoSteamUserStatChange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCsgoSteamUserStatChange message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCsgoSteamUserStatChange} CMsgCsgoSteamUserStatChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCsgoSteamUserStatChange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCsgoSteamUserStatChange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ecsgosteamuserstat = reader.int32();
                    break;
                case 2:
                    message.delta = reader.int32();
                    break;
                case 3:
                    message.absolute = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCsgoSteamUserStatChange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCsgoSteamUserStatChange} CMsgCsgoSteamUserStatChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCsgoSteamUserStatChange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCsgoSteamUserStatChange message.
         * @function verify
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCsgoSteamUserStatChange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ecsgosteamuserstat != null && message.hasOwnProperty("ecsgosteamuserstat"))
                if (!$util.isInteger(message.ecsgosteamuserstat))
                    return "ecsgosteamuserstat: integer expected";
            if (message.delta != null && message.hasOwnProperty("delta"))
                if (!$util.isInteger(message.delta))
                    return "delta: integer expected";
            if (message.absolute != null && message.hasOwnProperty("absolute"))
                if (typeof message.absolute !== "boolean")
                    return "absolute: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgCsgoSteamUserStatChange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCsgoSteamUserStatChange} CMsgCsgoSteamUserStatChange
         */
        CMsgCsgoSteamUserStatChange.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCsgoSteamUserStatChange)
                return object;
            var message = new $root.CMsgCsgoSteamUserStatChange();
            if (object.ecsgosteamuserstat != null)
                message.ecsgosteamuserstat = object.ecsgosteamuserstat | 0;
            if (object.delta != null)
                message.delta = object.delta | 0;
            if (object.absolute != null)
                message.absolute = Boolean(object.absolute);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCsgoSteamUserStatChange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCsgoSteamUserStatChange
         * @static
         * @param {CMsgCsgoSteamUserStatChange} message CMsgCsgoSteamUserStatChange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCsgoSteamUserStatChange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ecsgosteamuserstat = 0;
                object.delta = 0;
                object.absolute = false;
            }
            if (message.ecsgosteamuserstat != null && message.hasOwnProperty("ecsgosteamuserstat"))
                object.ecsgosteamuserstat = message.ecsgosteamuserstat;
            if (message.delta != null && message.hasOwnProperty("delta"))
                object.delta = message.delta;
            if (message.absolute != null && message.hasOwnProperty("absolute"))
                object.absolute = message.absolute;
            return object;
        };
    
        /**
         * Converts this CMsgCsgoSteamUserStatChange to JSON.
         * @function toJSON
         * @memberof CMsgCsgoSteamUserStatChange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCsgoSteamUserStatChange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCsgoSteamUserStatChange;
    })();
    
    $root.XpProgressData = (function() {
    
        /**
         * Properties of a XpProgressData.
         * @exports IXpProgressData
         * @interface IXpProgressData
         * @property {number|null} [xp_points] XpProgressData xp_points
         * @property {number|null} [xp_category] XpProgressData xp_category
         */
    
        /**
         * Constructs a new XpProgressData.
         * @exports XpProgressData
         * @classdesc Represents a XpProgressData.
         * @implements IXpProgressData
         * @constructor
         * @param {IXpProgressData=} [properties] Properties to set
         */
        function XpProgressData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * XpProgressData xp_points.
         * @member {number} xp_points
         * @memberof XpProgressData
         * @instance
         */
        XpProgressData.prototype.xp_points = 0;
    
        /**
         * XpProgressData xp_category.
         * @member {number} xp_category
         * @memberof XpProgressData
         * @instance
         */
        XpProgressData.prototype.xp_category = 0;
    
        /**
         * Creates a new XpProgressData instance using the specified properties.
         * @function create
         * @memberof XpProgressData
         * @static
         * @param {IXpProgressData=} [properties] Properties to set
         * @returns {XpProgressData} XpProgressData instance
         */
        XpProgressData.create = function create(properties) {
            return new XpProgressData(properties);
        };
    
        /**
         * Encodes the specified XpProgressData message. Does not implicitly {@link XpProgressData.verify|verify} messages.
         * @function encode
         * @memberof XpProgressData
         * @static
         * @param {IXpProgressData} message XpProgressData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XpProgressData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.xp_points != null && message.hasOwnProperty("xp_points"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.xp_points);
            if (message.xp_category != null && message.hasOwnProperty("xp_category"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.xp_category);
            return writer;
        };
    
        /**
         * Encodes the specified XpProgressData message, length delimited. Does not implicitly {@link XpProgressData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof XpProgressData
         * @static
         * @param {IXpProgressData} message XpProgressData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        XpProgressData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a XpProgressData message from the specified reader or buffer.
         * @function decode
         * @memberof XpProgressData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {XpProgressData} XpProgressData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XpProgressData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.XpProgressData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.xp_points = reader.uint32();
                    break;
                case 2:
                    message.xp_category = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a XpProgressData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof XpProgressData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {XpProgressData} XpProgressData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        XpProgressData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a XpProgressData message.
         * @function verify
         * @memberof XpProgressData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        XpProgressData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.xp_points != null && message.hasOwnProperty("xp_points"))
                if (!$util.isInteger(message.xp_points))
                    return "xp_points: integer expected";
            if (message.xp_category != null && message.hasOwnProperty("xp_category"))
                if (!$util.isInteger(message.xp_category))
                    return "xp_category: integer expected";
            return null;
        };
    
        /**
         * Creates a XpProgressData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof XpProgressData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {XpProgressData} XpProgressData
         */
        XpProgressData.fromObject = function fromObject(object) {
            if (object instanceof $root.XpProgressData)
                return object;
            var message = new $root.XpProgressData();
            if (object.xp_points != null)
                message.xp_points = object.xp_points >>> 0;
            if (object.xp_category != null)
                message.xp_category = object.xp_category | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a XpProgressData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof XpProgressData
         * @static
         * @param {XpProgressData} message XpProgressData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        XpProgressData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.xp_points = 0;
                object.xp_category = 0;
            }
            if (message.xp_points != null && message.hasOwnProperty("xp_points"))
                object.xp_points = message.xp_points;
            if (message.xp_category != null && message.hasOwnProperty("xp_category"))
                object.xp_category = message.xp_category;
            return object;
        };
    
        /**
         * Converts this XpProgressData to JSON.
         * @function toJSON
         * @memberof XpProgressData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        XpProgressData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return XpProgressData;
    })();
    
    $root.MatchEndItemUpdates = (function() {
    
        /**
         * Properties of a MatchEndItemUpdates.
         * @exports IMatchEndItemUpdates
         * @interface IMatchEndItemUpdates
         * @property {number|Long|null} [item_id] MatchEndItemUpdates item_id
         * @property {number|null} [item_attr_defidx] MatchEndItemUpdates item_attr_defidx
         * @property {number|null} [item_attr_delta_value] MatchEndItemUpdates item_attr_delta_value
         */
    
        /**
         * Constructs a new MatchEndItemUpdates.
         * @exports MatchEndItemUpdates
         * @classdesc Represents a MatchEndItemUpdates.
         * @implements IMatchEndItemUpdates
         * @constructor
         * @param {IMatchEndItemUpdates=} [properties] Properties to set
         */
        function MatchEndItemUpdates(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * MatchEndItemUpdates item_id.
         * @member {number|Long} item_id
         * @memberof MatchEndItemUpdates
         * @instance
         */
        MatchEndItemUpdates.prototype.item_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * MatchEndItemUpdates item_attr_defidx.
         * @member {number} item_attr_defidx
         * @memberof MatchEndItemUpdates
         * @instance
         */
        MatchEndItemUpdates.prototype.item_attr_defidx = 0;
    
        /**
         * MatchEndItemUpdates item_attr_delta_value.
         * @member {number} item_attr_delta_value
         * @memberof MatchEndItemUpdates
         * @instance
         */
        MatchEndItemUpdates.prototype.item_attr_delta_value = 0;
    
        /**
         * Creates a new MatchEndItemUpdates instance using the specified properties.
         * @function create
         * @memberof MatchEndItemUpdates
         * @static
         * @param {IMatchEndItemUpdates=} [properties] Properties to set
         * @returns {MatchEndItemUpdates} MatchEndItemUpdates instance
         */
        MatchEndItemUpdates.create = function create(properties) {
            return new MatchEndItemUpdates(properties);
        };
    
        /**
         * Encodes the specified MatchEndItemUpdates message. Does not implicitly {@link MatchEndItemUpdates.verify|verify} messages.
         * @function encode
         * @memberof MatchEndItemUpdates
         * @static
         * @param {IMatchEndItemUpdates} message MatchEndItemUpdates message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchEndItemUpdates.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.item_id != null && message.hasOwnProperty("item_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.item_id);
            if (message.item_attr_defidx != null && message.hasOwnProperty("item_attr_defidx"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.item_attr_defidx);
            if (message.item_attr_delta_value != null && message.hasOwnProperty("item_attr_delta_value"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.item_attr_delta_value);
            return writer;
        };
    
        /**
         * Encodes the specified MatchEndItemUpdates message, length delimited. Does not implicitly {@link MatchEndItemUpdates.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MatchEndItemUpdates
         * @static
         * @param {IMatchEndItemUpdates} message MatchEndItemUpdates message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchEndItemUpdates.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a MatchEndItemUpdates message from the specified reader or buffer.
         * @function decode
         * @memberof MatchEndItemUpdates
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {MatchEndItemUpdates} MatchEndItemUpdates
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchEndItemUpdates.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchEndItemUpdates();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.item_id = reader.uint64();
                    break;
                case 2:
                    message.item_attr_defidx = reader.uint32();
                    break;
                case 3:
                    message.item_attr_delta_value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a MatchEndItemUpdates message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof MatchEndItemUpdates
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {MatchEndItemUpdates} MatchEndItemUpdates
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchEndItemUpdates.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a MatchEndItemUpdates message.
         * @function verify
         * @memberof MatchEndItemUpdates
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MatchEndItemUpdates.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.item_id != null && message.hasOwnProperty("item_id"))
                if (!$util.isInteger(message.item_id) && !(message.item_id && $util.isInteger(message.item_id.low) && $util.isInteger(message.item_id.high)))
                    return "item_id: integer|Long expected";
            if (message.item_attr_defidx != null && message.hasOwnProperty("item_attr_defidx"))
                if (!$util.isInteger(message.item_attr_defidx))
                    return "item_attr_defidx: integer expected";
            if (message.item_attr_delta_value != null && message.hasOwnProperty("item_attr_delta_value"))
                if (!$util.isInteger(message.item_attr_delta_value))
                    return "item_attr_delta_value: integer expected";
            return null;
        };
    
        /**
         * Creates a MatchEndItemUpdates message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof MatchEndItemUpdates
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {MatchEndItemUpdates} MatchEndItemUpdates
         */
        MatchEndItemUpdates.fromObject = function fromObject(object) {
            if (object instanceof $root.MatchEndItemUpdates)
                return object;
            var message = new $root.MatchEndItemUpdates();
            if (object.item_id != null)
                if ($util.Long)
                    (message.item_id = $util.Long.fromValue(object.item_id)).unsigned = true;
                else if (typeof object.item_id === "string")
                    message.item_id = parseInt(object.item_id, 10);
                else if (typeof object.item_id === "number")
                    message.item_id = object.item_id;
                else if (typeof object.item_id === "object")
                    message.item_id = new $util.LongBits(object.item_id.low >>> 0, object.item_id.high >>> 0).toNumber(true);
            if (object.item_attr_defidx != null)
                message.item_attr_defidx = object.item_attr_defidx >>> 0;
            if (object.item_attr_delta_value != null)
                message.item_attr_delta_value = object.item_attr_delta_value >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a MatchEndItemUpdates message. Also converts values to other types if specified.
         * @function toObject
         * @memberof MatchEndItemUpdates
         * @static
         * @param {MatchEndItemUpdates} message MatchEndItemUpdates
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MatchEndItemUpdates.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.item_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.item_id = options.longs === String ? "0" : 0;
                object.item_attr_defidx = 0;
                object.item_attr_delta_value = 0;
            }
            if (message.item_id != null && message.hasOwnProperty("item_id"))
                if (typeof message.item_id === "number")
                    object.item_id = options.longs === String ? String(message.item_id) : message.item_id;
                else
                    object.item_id = options.longs === String ? $util.Long.prototype.toString.call(message.item_id) : options.longs === Number ? new $util.LongBits(message.item_id.low >>> 0, message.item_id.high >>> 0).toNumber(true) : message.item_id;
            if (message.item_attr_defidx != null && message.hasOwnProperty("item_attr_defidx"))
                object.item_attr_defidx = message.item_attr_defidx;
            if (message.item_attr_delta_value != null && message.hasOwnProperty("item_attr_delta_value"))
                object.item_attr_delta_value = message.item_attr_delta_value;
            return object;
        };
    
        /**
         * Converts this MatchEndItemUpdates to JSON.
         * @function toJSON
         * @memberof MatchEndItemUpdates
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MatchEndItemUpdates.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return MatchEndItemUpdates;
    })();
    
    $root.ScoreLeaderboardData = (function() {
    
        /**
         * Properties of a ScoreLeaderboardData.
         * @exports IScoreLeaderboardData
         * @interface IScoreLeaderboardData
         * @property {number|Long|null} [quest_id] ScoreLeaderboardData quest_id
         * @property {number|null} [score] ScoreLeaderboardData score
         * @property {Array.<ScoreLeaderboardData.IAccountEntries>|null} [accountentries] ScoreLeaderboardData accountentries
         * @property {Array.<ScoreLeaderboardData.IEntry>|null} [matchentries] ScoreLeaderboardData matchentries
         */
    
        /**
         * Constructs a new ScoreLeaderboardData.
         * @exports ScoreLeaderboardData
         * @classdesc Represents a ScoreLeaderboardData.
         * @implements IScoreLeaderboardData
         * @constructor
         * @param {IScoreLeaderboardData=} [properties] Properties to set
         */
        function ScoreLeaderboardData(properties) {
            this.accountentries = [];
            this.matchentries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * ScoreLeaderboardData quest_id.
         * @member {number|Long} quest_id
         * @memberof ScoreLeaderboardData
         * @instance
         */
        ScoreLeaderboardData.prototype.quest_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * ScoreLeaderboardData score.
         * @member {number} score
         * @memberof ScoreLeaderboardData
         * @instance
         */
        ScoreLeaderboardData.prototype.score = 0;
    
        /**
         * ScoreLeaderboardData accountentries.
         * @member {Array.<ScoreLeaderboardData.IAccountEntries>} accountentries
         * @memberof ScoreLeaderboardData
         * @instance
         */
        ScoreLeaderboardData.prototype.accountentries = $util.emptyArray;
    
        /**
         * ScoreLeaderboardData matchentries.
         * @member {Array.<ScoreLeaderboardData.IEntry>} matchentries
         * @memberof ScoreLeaderboardData
         * @instance
         */
        ScoreLeaderboardData.prototype.matchentries = $util.emptyArray;
    
        /**
         * Creates a new ScoreLeaderboardData instance using the specified properties.
         * @function create
         * @memberof ScoreLeaderboardData
         * @static
         * @param {IScoreLeaderboardData=} [properties] Properties to set
         * @returns {ScoreLeaderboardData} ScoreLeaderboardData instance
         */
        ScoreLeaderboardData.create = function create(properties) {
            return new ScoreLeaderboardData(properties);
        };
    
        /**
         * Encodes the specified ScoreLeaderboardData message. Does not implicitly {@link ScoreLeaderboardData.verify|verify} messages.
         * @function encode
         * @memberof ScoreLeaderboardData
         * @static
         * @param {IScoreLeaderboardData} message ScoreLeaderboardData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ScoreLeaderboardData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.quest_id);
            if (message.score != null && message.hasOwnProperty("score"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.score);
            if (message.accountentries != null && message.accountentries.length)
                for (var i = 0; i < message.accountentries.length; ++i)
                    $root.ScoreLeaderboardData.AccountEntries.encode(message.accountentries[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.matchentries != null && message.matchentries.length)
                for (var i = 0; i < message.matchentries.length; ++i)
                    $root.ScoreLeaderboardData.Entry.encode(message.matchentries[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified ScoreLeaderboardData message, length delimited. Does not implicitly {@link ScoreLeaderboardData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ScoreLeaderboardData
         * @static
         * @param {IScoreLeaderboardData} message ScoreLeaderboardData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ScoreLeaderboardData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a ScoreLeaderboardData message from the specified reader or buffer.
         * @function decode
         * @memberof ScoreLeaderboardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ScoreLeaderboardData} ScoreLeaderboardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ScoreLeaderboardData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ScoreLeaderboardData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quest_id = reader.uint64();
                    break;
                case 2:
                    message.score = reader.uint32();
                    break;
                case 3:
                    if (!(message.accountentries && message.accountentries.length))
                        message.accountentries = [];
                    message.accountentries.push($root.ScoreLeaderboardData.AccountEntries.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.matchentries && message.matchentries.length))
                        message.matchentries = [];
                    message.matchentries.push($root.ScoreLeaderboardData.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a ScoreLeaderboardData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ScoreLeaderboardData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ScoreLeaderboardData} ScoreLeaderboardData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ScoreLeaderboardData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a ScoreLeaderboardData message.
         * @function verify
         * @memberof ScoreLeaderboardData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ScoreLeaderboardData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                if (!$util.isInteger(message.quest_id) && !(message.quest_id && $util.isInteger(message.quest_id.low) && $util.isInteger(message.quest_id.high)))
                    return "quest_id: integer|Long expected";
            if (message.score != null && message.hasOwnProperty("score"))
                if (!$util.isInteger(message.score))
                    return "score: integer expected";
            if (message.accountentries != null && message.hasOwnProperty("accountentries")) {
                if (!Array.isArray(message.accountentries))
                    return "accountentries: array expected";
                for (var i = 0; i < message.accountentries.length; ++i) {
                    var error = $root.ScoreLeaderboardData.AccountEntries.verify(message.accountentries[i]);
                    if (error)
                        return "accountentries." + error;
                }
            }
            if (message.matchentries != null && message.hasOwnProperty("matchentries")) {
                if (!Array.isArray(message.matchentries))
                    return "matchentries: array expected";
                for (var i = 0; i < message.matchentries.length; ++i) {
                    var error = $root.ScoreLeaderboardData.Entry.verify(message.matchentries[i]);
                    if (error)
                        return "matchentries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a ScoreLeaderboardData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ScoreLeaderboardData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ScoreLeaderboardData} ScoreLeaderboardData
         */
        ScoreLeaderboardData.fromObject = function fromObject(object) {
            if (object instanceof $root.ScoreLeaderboardData)
                return object;
            var message = new $root.ScoreLeaderboardData();
            if (object.quest_id != null)
                if ($util.Long)
                    (message.quest_id = $util.Long.fromValue(object.quest_id)).unsigned = true;
                else if (typeof object.quest_id === "string")
                    message.quest_id = parseInt(object.quest_id, 10);
                else if (typeof object.quest_id === "number")
                    message.quest_id = object.quest_id;
                else if (typeof object.quest_id === "object")
                    message.quest_id = new $util.LongBits(object.quest_id.low >>> 0, object.quest_id.high >>> 0).toNumber(true);
            if (object.score != null)
                message.score = object.score >>> 0;
            if (object.accountentries) {
                if (!Array.isArray(object.accountentries))
                    throw TypeError(".ScoreLeaderboardData.accountentries: array expected");
                message.accountentries = [];
                for (var i = 0; i < object.accountentries.length; ++i) {
                    if (typeof object.accountentries[i] !== "object")
                        throw TypeError(".ScoreLeaderboardData.accountentries: object expected");
                    message.accountentries[i] = $root.ScoreLeaderboardData.AccountEntries.fromObject(object.accountentries[i]);
                }
            }
            if (object.matchentries) {
                if (!Array.isArray(object.matchentries))
                    throw TypeError(".ScoreLeaderboardData.matchentries: array expected");
                message.matchentries = [];
                for (var i = 0; i < object.matchentries.length; ++i) {
                    if (typeof object.matchentries[i] !== "object")
                        throw TypeError(".ScoreLeaderboardData.matchentries: object expected");
                    message.matchentries[i] = $root.ScoreLeaderboardData.Entry.fromObject(object.matchentries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a ScoreLeaderboardData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ScoreLeaderboardData
         * @static
         * @param {ScoreLeaderboardData} message ScoreLeaderboardData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ScoreLeaderboardData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.accountentries = [];
                object.matchentries = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.quest_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.quest_id = options.longs === String ? "0" : 0;
                object.score = 0;
            }
            if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                if (typeof message.quest_id === "number")
                    object.quest_id = options.longs === String ? String(message.quest_id) : message.quest_id;
                else
                    object.quest_id = options.longs === String ? $util.Long.prototype.toString.call(message.quest_id) : options.longs === Number ? new $util.LongBits(message.quest_id.low >>> 0, message.quest_id.high >>> 0).toNumber(true) : message.quest_id;
            if (message.score != null && message.hasOwnProperty("score"))
                object.score = message.score;
            if (message.accountentries && message.accountentries.length) {
                object.accountentries = [];
                for (var j = 0; j < message.accountentries.length; ++j)
                    object.accountentries[j] = $root.ScoreLeaderboardData.AccountEntries.toObject(message.accountentries[j], options);
            }
            if (message.matchentries && message.matchentries.length) {
                object.matchentries = [];
                for (var j = 0; j < message.matchentries.length; ++j)
                    object.matchentries[j] = $root.ScoreLeaderboardData.Entry.toObject(message.matchentries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this ScoreLeaderboardData to JSON.
         * @function toJSON
         * @memberof ScoreLeaderboardData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ScoreLeaderboardData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        ScoreLeaderboardData.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof ScoreLeaderboardData
             * @interface IEntry
             * @property {number|null} [tag] Entry tag
             * @property {number|null} [val] Entry val
             */
    
            /**
             * Constructs a new Entry.
             * @memberof ScoreLeaderboardData
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {ScoreLeaderboardData.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry tag.
             * @member {number} tag
             * @memberof ScoreLeaderboardData.Entry
             * @instance
             */
            Entry.prototype.tag = 0;
    
            /**
             * Entry val.
             * @member {number} val
             * @memberof ScoreLeaderboardData.Entry
             * @instance
             */
            Entry.prototype.val = 0;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {ScoreLeaderboardData.IEntry=} [properties] Properties to set
             * @returns {ScoreLeaderboardData.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link ScoreLeaderboardData.Entry.verify|verify} messages.
             * @function encode
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {ScoreLeaderboardData.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tag != null && message.hasOwnProperty("tag"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tag);
                if (message.val != null && message.hasOwnProperty("val"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.val);
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link ScoreLeaderboardData.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {ScoreLeaderboardData.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ScoreLeaderboardData.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ScoreLeaderboardData.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.tag = reader.uint32();
                        break;
                    case 2:
                        message.val = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ScoreLeaderboardData.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tag != null && message.hasOwnProperty("tag"))
                    if (!$util.isInteger(message.tag))
                        return "tag: integer expected";
                if (message.val != null && message.hasOwnProperty("val"))
                    if (!$util.isInteger(message.val))
                        return "val: integer expected";
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ScoreLeaderboardData.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.ScoreLeaderboardData.Entry)
                    return object;
                var message = new $root.ScoreLeaderboardData.Entry();
                if (object.tag != null)
                    message.tag = object.tag >>> 0;
                if (object.val != null)
                    message.val = object.val >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ScoreLeaderboardData.Entry
             * @static
             * @param {ScoreLeaderboardData.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tag = 0;
                    object.val = 0;
                }
                if (message.tag != null && message.hasOwnProperty("tag"))
                    object.tag = message.tag;
                if (message.val != null && message.hasOwnProperty("val"))
                    object.val = message.val;
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof ScoreLeaderboardData.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        ScoreLeaderboardData.AccountEntries = (function() {
    
            /**
             * Properties of an AccountEntries.
             * @memberof ScoreLeaderboardData
             * @interface IAccountEntries
             * @property {number|null} [accountid] AccountEntries accountid
             * @property {Array.<ScoreLeaderboardData.IEntry>|null} [entries] AccountEntries entries
             */
    
            /**
             * Constructs a new AccountEntries.
             * @memberof ScoreLeaderboardData
             * @classdesc Represents an AccountEntries.
             * @implements IAccountEntries
             * @constructor
             * @param {ScoreLeaderboardData.IAccountEntries=} [properties] Properties to set
             */
            function AccountEntries(properties) {
                this.entries = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AccountEntries accountid.
             * @member {number} accountid
             * @memberof ScoreLeaderboardData.AccountEntries
             * @instance
             */
            AccountEntries.prototype.accountid = 0;
    
            /**
             * AccountEntries entries.
             * @member {Array.<ScoreLeaderboardData.IEntry>} entries
             * @memberof ScoreLeaderboardData.AccountEntries
             * @instance
             */
            AccountEntries.prototype.entries = $util.emptyArray;
    
            /**
             * Creates a new AccountEntries instance using the specified properties.
             * @function create
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {ScoreLeaderboardData.IAccountEntries=} [properties] Properties to set
             * @returns {ScoreLeaderboardData.AccountEntries} AccountEntries instance
             */
            AccountEntries.create = function create(properties) {
                return new AccountEntries(properties);
            };
    
            /**
             * Encodes the specified AccountEntries message. Does not implicitly {@link ScoreLeaderboardData.AccountEntries.verify|verify} messages.
             * @function encode
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {ScoreLeaderboardData.IAccountEntries} message AccountEntries message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccountEntries.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
                if (message.entries != null && message.entries.length)
                    for (var i = 0; i < message.entries.length; ++i)
                        $root.ScoreLeaderboardData.Entry.encode(message.entries[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified AccountEntries message, length delimited. Does not implicitly {@link ScoreLeaderboardData.AccountEntries.verify|verify} messages.
             * @function encodeDelimited
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {ScoreLeaderboardData.IAccountEntries} message AccountEntries message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccountEntries.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AccountEntries message from the specified reader or buffer.
             * @function decode
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {ScoreLeaderboardData.AccountEntries} AccountEntries
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccountEntries.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ScoreLeaderboardData.AccountEntries();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.accountid = reader.uint32();
                        break;
                    case 2:
                        if (!(message.entries && message.entries.length))
                            message.entries = [];
                        message.entries.push($root.ScoreLeaderboardData.Entry.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AccountEntries message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {ScoreLeaderboardData.AccountEntries} AccountEntries
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccountEntries.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AccountEntries message.
             * @function verify
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AccountEntries.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    if (!$util.isInteger(message.accountid))
                        return "accountid: integer expected";
                if (message.entries != null && message.hasOwnProperty("entries")) {
                    if (!Array.isArray(message.entries))
                        return "entries: array expected";
                    for (var i = 0; i < message.entries.length; ++i) {
                        var error = $root.ScoreLeaderboardData.Entry.verify(message.entries[i]);
                        if (error)
                            return "entries." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates an AccountEntries message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {ScoreLeaderboardData.AccountEntries} AccountEntries
             */
            AccountEntries.fromObject = function fromObject(object) {
                if (object instanceof $root.ScoreLeaderboardData.AccountEntries)
                    return object;
                var message = new $root.ScoreLeaderboardData.AccountEntries();
                if (object.accountid != null)
                    message.accountid = object.accountid >>> 0;
                if (object.entries) {
                    if (!Array.isArray(object.entries))
                        throw TypeError(".ScoreLeaderboardData.AccountEntries.entries: array expected");
                    message.entries = [];
                    for (var i = 0; i < object.entries.length; ++i) {
                        if (typeof object.entries[i] !== "object")
                            throw TypeError(".ScoreLeaderboardData.AccountEntries.entries: object expected");
                        message.entries[i] = $root.ScoreLeaderboardData.Entry.fromObject(object.entries[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from an AccountEntries message. Also converts values to other types if specified.
             * @function toObject
             * @memberof ScoreLeaderboardData.AccountEntries
             * @static
             * @param {ScoreLeaderboardData.AccountEntries} message AccountEntries
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AccountEntries.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.entries = [];
                if (options.defaults)
                    object.accountid = 0;
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    object.accountid = message.accountid;
                if (message.entries && message.entries.length) {
                    object.entries = [];
                    for (var j = 0; j < message.entries.length; ++j)
                        object.entries[j] = $root.ScoreLeaderboardData.Entry.toObject(message.entries[j], options);
                }
                return object;
            };
    
            /**
             * Converts this AccountEntries to JSON.
             * @function toJSON
             * @memberof ScoreLeaderboardData.AccountEntries
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AccountEntries.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return AccountEntries;
        })();
    
        return ScoreLeaderboardData;
    })();
    
    $root.PlayerQuestData = (function() {
    
        /**
         * Properties of a PlayerQuestData.
         * @exports IPlayerQuestData
         * @interface IPlayerQuestData
         * @property {number|null} [quester_account_id] PlayerQuestData quester_account_id
         * @property {Array.<PlayerQuestData.IQuestItemData>|null} [quest_item_data] PlayerQuestData quest_item_data
         * @property {Array.<IXpProgressData>|null} [xp_progress_data] PlayerQuestData xp_progress_data
         * @property {number|null} [time_played] PlayerQuestData time_played
         * @property {number|null} [mm_game_mode] PlayerQuestData mm_game_mode
         * @property {Array.<IMatchEndItemUpdates>|null} [item_updates] PlayerQuestData item_updates
         * @property {boolean|null} [operation_points_eligible] PlayerQuestData operation_points_eligible
         * @property {Array.<ICMsgCsgoSteamUserStatChange>|null} [userstatchanges] PlayerQuestData userstatchanges
         */
    
        /**
         * Constructs a new PlayerQuestData.
         * @exports PlayerQuestData
         * @classdesc Represents a PlayerQuestData.
         * @implements IPlayerQuestData
         * @constructor
         * @param {IPlayerQuestData=} [properties] Properties to set
         */
        function PlayerQuestData(properties) {
            this.quest_item_data = [];
            this.xp_progress_data = [];
            this.item_updates = [];
            this.userstatchanges = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PlayerQuestData quester_account_id.
         * @member {number} quester_account_id
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.quester_account_id = 0;
    
        /**
         * PlayerQuestData quest_item_data.
         * @member {Array.<PlayerQuestData.IQuestItemData>} quest_item_data
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.quest_item_data = $util.emptyArray;
    
        /**
         * PlayerQuestData xp_progress_data.
         * @member {Array.<IXpProgressData>} xp_progress_data
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.xp_progress_data = $util.emptyArray;
    
        /**
         * PlayerQuestData time_played.
         * @member {number} time_played
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.time_played = 0;
    
        /**
         * PlayerQuestData mm_game_mode.
         * @member {number} mm_game_mode
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.mm_game_mode = 0;
    
        /**
         * PlayerQuestData item_updates.
         * @member {Array.<IMatchEndItemUpdates>} item_updates
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.item_updates = $util.emptyArray;
    
        /**
         * PlayerQuestData operation_points_eligible.
         * @member {boolean} operation_points_eligible
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.operation_points_eligible = false;
    
        /**
         * PlayerQuestData userstatchanges.
         * @member {Array.<ICMsgCsgoSteamUserStatChange>} userstatchanges
         * @memberof PlayerQuestData
         * @instance
         */
        PlayerQuestData.prototype.userstatchanges = $util.emptyArray;
    
        /**
         * Creates a new PlayerQuestData instance using the specified properties.
         * @function create
         * @memberof PlayerQuestData
         * @static
         * @param {IPlayerQuestData=} [properties] Properties to set
         * @returns {PlayerQuestData} PlayerQuestData instance
         */
        PlayerQuestData.create = function create(properties) {
            return new PlayerQuestData(properties);
        };
    
        /**
         * Encodes the specified PlayerQuestData message. Does not implicitly {@link PlayerQuestData.verify|verify} messages.
         * @function encode
         * @memberof PlayerQuestData
         * @static
         * @param {IPlayerQuestData} message PlayerQuestData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerQuestData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.quester_account_id != null && message.hasOwnProperty("quester_account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.quester_account_id);
            if (message.quest_item_data != null && message.quest_item_data.length)
                for (var i = 0; i < message.quest_item_data.length; ++i)
                    $root.PlayerQuestData.QuestItemData.encode(message.quest_item_data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.xp_progress_data != null && message.xp_progress_data.length)
                for (var i = 0; i < message.xp_progress_data.length; ++i)
                    $root.XpProgressData.encode(message.xp_progress_data[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.time_played != null && message.hasOwnProperty("time_played"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time_played);
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.mm_game_mode);
            if (message.item_updates != null && message.item_updates.length)
                for (var i = 0; i < message.item_updates.length; ++i)
                    $root.MatchEndItemUpdates.encode(message.item_updates[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.operation_points_eligible != null && message.hasOwnProperty("operation_points_eligible"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.operation_points_eligible);
            if (message.userstatchanges != null && message.userstatchanges.length)
                for (var i = 0; i < message.userstatchanges.length; ++i)
                    $root.CMsgCsgoSteamUserStatChange.encode(message.userstatchanges[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified PlayerQuestData message, length delimited. Does not implicitly {@link PlayerQuestData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PlayerQuestData
         * @static
         * @param {IPlayerQuestData} message PlayerQuestData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerQuestData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PlayerQuestData message from the specified reader or buffer.
         * @function decode
         * @memberof PlayerQuestData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PlayerQuestData} PlayerQuestData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerQuestData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerQuestData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.quester_account_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.quest_item_data && message.quest_item_data.length))
                        message.quest_item_data = [];
                    message.quest_item_data.push($root.PlayerQuestData.QuestItemData.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.xp_progress_data && message.xp_progress_data.length))
                        message.xp_progress_data = [];
                    message.xp_progress_data.push($root.XpProgressData.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.time_played = reader.uint32();
                    break;
                case 5:
                    message.mm_game_mode = reader.uint32();
                    break;
                case 6:
                    if (!(message.item_updates && message.item_updates.length))
                        message.item_updates = [];
                    message.item_updates.push($root.MatchEndItemUpdates.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.operation_points_eligible = reader.bool();
                    break;
                case 8:
                    if (!(message.userstatchanges && message.userstatchanges.length))
                        message.userstatchanges = [];
                    message.userstatchanges.push($root.CMsgCsgoSteamUserStatChange.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PlayerQuestData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PlayerQuestData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PlayerQuestData} PlayerQuestData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerQuestData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PlayerQuestData message.
         * @function verify
         * @memberof PlayerQuestData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerQuestData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.quester_account_id != null && message.hasOwnProperty("quester_account_id"))
                if (!$util.isInteger(message.quester_account_id))
                    return "quester_account_id: integer expected";
            if (message.quest_item_data != null && message.hasOwnProperty("quest_item_data")) {
                if (!Array.isArray(message.quest_item_data))
                    return "quest_item_data: array expected";
                for (var i = 0; i < message.quest_item_data.length; ++i) {
                    var error = $root.PlayerQuestData.QuestItemData.verify(message.quest_item_data[i]);
                    if (error)
                        return "quest_item_data." + error;
                }
            }
            if (message.xp_progress_data != null && message.hasOwnProperty("xp_progress_data")) {
                if (!Array.isArray(message.xp_progress_data))
                    return "xp_progress_data: array expected";
                for (var i = 0; i < message.xp_progress_data.length; ++i) {
                    var error = $root.XpProgressData.verify(message.xp_progress_data[i]);
                    if (error)
                        return "xp_progress_data." + error;
                }
            }
            if (message.time_played != null && message.hasOwnProperty("time_played"))
                if (!$util.isInteger(message.time_played))
                    return "time_played: integer expected";
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                if (!$util.isInteger(message.mm_game_mode))
                    return "mm_game_mode: integer expected";
            if (message.item_updates != null && message.hasOwnProperty("item_updates")) {
                if (!Array.isArray(message.item_updates))
                    return "item_updates: array expected";
                for (var i = 0; i < message.item_updates.length; ++i) {
                    var error = $root.MatchEndItemUpdates.verify(message.item_updates[i]);
                    if (error)
                        return "item_updates." + error;
                }
            }
            if (message.operation_points_eligible != null && message.hasOwnProperty("operation_points_eligible"))
                if (typeof message.operation_points_eligible !== "boolean")
                    return "operation_points_eligible: boolean expected";
            if (message.userstatchanges != null && message.hasOwnProperty("userstatchanges")) {
                if (!Array.isArray(message.userstatchanges))
                    return "userstatchanges: array expected";
                for (var i = 0; i < message.userstatchanges.length; ++i) {
                    var error = $root.CMsgCsgoSteamUserStatChange.verify(message.userstatchanges[i]);
                    if (error)
                        return "userstatchanges." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a PlayerQuestData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PlayerQuestData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PlayerQuestData} PlayerQuestData
         */
        PlayerQuestData.fromObject = function fromObject(object) {
            if (object instanceof $root.PlayerQuestData)
                return object;
            var message = new $root.PlayerQuestData();
            if (object.quester_account_id != null)
                message.quester_account_id = object.quester_account_id >>> 0;
            if (object.quest_item_data) {
                if (!Array.isArray(object.quest_item_data))
                    throw TypeError(".PlayerQuestData.quest_item_data: array expected");
                message.quest_item_data = [];
                for (var i = 0; i < object.quest_item_data.length; ++i) {
                    if (typeof object.quest_item_data[i] !== "object")
                        throw TypeError(".PlayerQuestData.quest_item_data: object expected");
                    message.quest_item_data[i] = $root.PlayerQuestData.QuestItemData.fromObject(object.quest_item_data[i]);
                }
            }
            if (object.xp_progress_data) {
                if (!Array.isArray(object.xp_progress_data))
                    throw TypeError(".PlayerQuestData.xp_progress_data: array expected");
                message.xp_progress_data = [];
                for (var i = 0; i < object.xp_progress_data.length; ++i) {
                    if (typeof object.xp_progress_data[i] !== "object")
                        throw TypeError(".PlayerQuestData.xp_progress_data: object expected");
                    message.xp_progress_data[i] = $root.XpProgressData.fromObject(object.xp_progress_data[i]);
                }
            }
            if (object.time_played != null)
                message.time_played = object.time_played >>> 0;
            if (object.mm_game_mode != null)
                message.mm_game_mode = object.mm_game_mode >>> 0;
            if (object.item_updates) {
                if (!Array.isArray(object.item_updates))
                    throw TypeError(".PlayerQuestData.item_updates: array expected");
                message.item_updates = [];
                for (var i = 0; i < object.item_updates.length; ++i) {
                    if (typeof object.item_updates[i] !== "object")
                        throw TypeError(".PlayerQuestData.item_updates: object expected");
                    message.item_updates[i] = $root.MatchEndItemUpdates.fromObject(object.item_updates[i]);
                }
            }
            if (object.operation_points_eligible != null)
                message.operation_points_eligible = Boolean(object.operation_points_eligible);
            if (object.userstatchanges) {
                if (!Array.isArray(object.userstatchanges))
                    throw TypeError(".PlayerQuestData.userstatchanges: array expected");
                message.userstatchanges = [];
                for (var i = 0; i < object.userstatchanges.length; ++i) {
                    if (typeof object.userstatchanges[i] !== "object")
                        throw TypeError(".PlayerQuestData.userstatchanges: object expected");
                    message.userstatchanges[i] = $root.CMsgCsgoSteamUserStatChange.fromObject(object.userstatchanges[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a PlayerQuestData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PlayerQuestData
         * @static
         * @param {PlayerQuestData} message PlayerQuestData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerQuestData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.quest_item_data = [];
                object.xp_progress_data = [];
                object.item_updates = [];
                object.userstatchanges = [];
            }
            if (options.defaults) {
                object.quester_account_id = 0;
                object.time_played = 0;
                object.mm_game_mode = 0;
                object.operation_points_eligible = false;
            }
            if (message.quester_account_id != null && message.hasOwnProperty("quester_account_id"))
                object.quester_account_id = message.quester_account_id;
            if (message.quest_item_data && message.quest_item_data.length) {
                object.quest_item_data = [];
                for (var j = 0; j < message.quest_item_data.length; ++j)
                    object.quest_item_data[j] = $root.PlayerQuestData.QuestItemData.toObject(message.quest_item_data[j], options);
            }
            if (message.xp_progress_data && message.xp_progress_data.length) {
                object.xp_progress_data = [];
                for (var j = 0; j < message.xp_progress_data.length; ++j)
                    object.xp_progress_data[j] = $root.XpProgressData.toObject(message.xp_progress_data[j], options);
            }
            if (message.time_played != null && message.hasOwnProperty("time_played"))
                object.time_played = message.time_played;
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                object.mm_game_mode = message.mm_game_mode;
            if (message.item_updates && message.item_updates.length) {
                object.item_updates = [];
                for (var j = 0; j < message.item_updates.length; ++j)
                    object.item_updates[j] = $root.MatchEndItemUpdates.toObject(message.item_updates[j], options);
            }
            if (message.operation_points_eligible != null && message.hasOwnProperty("operation_points_eligible"))
                object.operation_points_eligible = message.operation_points_eligible;
            if (message.userstatchanges && message.userstatchanges.length) {
                object.userstatchanges = [];
                for (var j = 0; j < message.userstatchanges.length; ++j)
                    object.userstatchanges[j] = $root.CMsgCsgoSteamUserStatChange.toObject(message.userstatchanges[j], options);
            }
            return object;
        };
    
        /**
         * Converts this PlayerQuestData to JSON.
         * @function toJSON
         * @memberof PlayerQuestData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerQuestData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        PlayerQuestData.QuestItemData = (function() {
    
            /**
             * Properties of a QuestItemData.
             * @memberof PlayerQuestData
             * @interface IQuestItemData
             * @property {number|Long|null} [quest_id] QuestItemData quest_id
             * @property {number|null} [quest_normal_points_earned] QuestItemData quest_normal_points_earned
             * @property {number|null} [quest_bonus_points_earned] QuestItemData quest_bonus_points_earned
             */
    
            /**
             * Constructs a new QuestItemData.
             * @memberof PlayerQuestData
             * @classdesc Represents a QuestItemData.
             * @implements IQuestItemData
             * @constructor
             * @param {PlayerQuestData.IQuestItemData=} [properties] Properties to set
             */
            function QuestItemData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * QuestItemData quest_id.
             * @member {number|Long} quest_id
             * @memberof PlayerQuestData.QuestItemData
             * @instance
             */
            QuestItemData.prototype.quest_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * QuestItemData quest_normal_points_earned.
             * @member {number} quest_normal_points_earned
             * @memberof PlayerQuestData.QuestItemData
             * @instance
             */
            QuestItemData.prototype.quest_normal_points_earned = 0;
    
            /**
             * QuestItemData quest_bonus_points_earned.
             * @member {number} quest_bonus_points_earned
             * @memberof PlayerQuestData.QuestItemData
             * @instance
             */
            QuestItemData.prototype.quest_bonus_points_earned = 0;
    
            /**
             * Creates a new QuestItemData instance using the specified properties.
             * @function create
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {PlayerQuestData.IQuestItemData=} [properties] Properties to set
             * @returns {PlayerQuestData.QuestItemData} QuestItemData instance
             */
            QuestItemData.create = function create(properties) {
                return new QuestItemData(properties);
            };
    
            /**
             * Encodes the specified QuestItemData message. Does not implicitly {@link PlayerQuestData.QuestItemData.verify|verify} messages.
             * @function encode
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {PlayerQuestData.IQuestItemData} message QuestItemData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QuestItemData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.quest_id);
                if (message.quest_normal_points_earned != null && message.hasOwnProperty("quest_normal_points_earned"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.quest_normal_points_earned);
                if (message.quest_bonus_points_earned != null && message.hasOwnProperty("quest_bonus_points_earned"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.quest_bonus_points_earned);
                return writer;
            };
    
            /**
             * Encodes the specified QuestItemData message, length delimited. Does not implicitly {@link PlayerQuestData.QuestItemData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {PlayerQuestData.IQuestItemData} message QuestItemData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QuestItemData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a QuestItemData message from the specified reader or buffer.
             * @function decode
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {PlayerQuestData.QuestItemData} QuestItemData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QuestItemData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerQuestData.QuestItemData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.quest_id = reader.uint64();
                        break;
                    case 2:
                        message.quest_normal_points_earned = reader.int32();
                        break;
                    case 3:
                        message.quest_bonus_points_earned = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a QuestItemData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {PlayerQuestData.QuestItemData} QuestItemData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QuestItemData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a QuestItemData message.
             * @function verify
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QuestItemData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                    if (!$util.isInteger(message.quest_id) && !(message.quest_id && $util.isInteger(message.quest_id.low) && $util.isInteger(message.quest_id.high)))
                        return "quest_id: integer|Long expected";
                if (message.quest_normal_points_earned != null && message.hasOwnProperty("quest_normal_points_earned"))
                    if (!$util.isInteger(message.quest_normal_points_earned))
                        return "quest_normal_points_earned: integer expected";
                if (message.quest_bonus_points_earned != null && message.hasOwnProperty("quest_bonus_points_earned"))
                    if (!$util.isInteger(message.quest_bonus_points_earned))
                        return "quest_bonus_points_earned: integer expected";
                return null;
            };
    
            /**
             * Creates a QuestItemData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {PlayerQuestData.QuestItemData} QuestItemData
             */
            QuestItemData.fromObject = function fromObject(object) {
                if (object instanceof $root.PlayerQuestData.QuestItemData)
                    return object;
                var message = new $root.PlayerQuestData.QuestItemData();
                if (object.quest_id != null)
                    if ($util.Long)
                        (message.quest_id = $util.Long.fromValue(object.quest_id)).unsigned = true;
                    else if (typeof object.quest_id === "string")
                        message.quest_id = parseInt(object.quest_id, 10);
                    else if (typeof object.quest_id === "number")
                        message.quest_id = object.quest_id;
                    else if (typeof object.quest_id === "object")
                        message.quest_id = new $util.LongBits(object.quest_id.low >>> 0, object.quest_id.high >>> 0).toNumber(true);
                if (object.quest_normal_points_earned != null)
                    message.quest_normal_points_earned = object.quest_normal_points_earned | 0;
                if (object.quest_bonus_points_earned != null)
                    message.quest_bonus_points_earned = object.quest_bonus_points_earned | 0;
                return message;
            };
    
            /**
             * Creates a plain object from a QuestItemData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof PlayerQuestData.QuestItemData
             * @static
             * @param {PlayerQuestData.QuestItemData} message QuestItemData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QuestItemData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.quest_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.quest_id = options.longs === String ? "0" : 0;
                    object.quest_normal_points_earned = 0;
                    object.quest_bonus_points_earned = 0;
                }
                if (message.quest_id != null && message.hasOwnProperty("quest_id"))
                    if (typeof message.quest_id === "number")
                        object.quest_id = options.longs === String ? String(message.quest_id) : message.quest_id;
                    else
                        object.quest_id = options.longs === String ? $util.Long.prototype.toString.call(message.quest_id) : options.longs === Number ? new $util.LongBits(message.quest_id.low >>> 0, message.quest_id.high >>> 0).toNumber(true) : message.quest_id;
                if (message.quest_normal_points_earned != null && message.hasOwnProperty("quest_normal_points_earned"))
                    object.quest_normal_points_earned = message.quest_normal_points_earned;
                if (message.quest_bonus_points_earned != null && message.hasOwnProperty("quest_bonus_points_earned"))
                    object.quest_bonus_points_earned = message.quest_bonus_points_earned;
                return object;
            };
    
            /**
             * Converts this QuestItemData to JSON.
             * @function toJSON
             * @memberof PlayerQuestData.QuestItemData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QuestItemData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return QuestItemData;
        })();
    
        return PlayerQuestData;
    })();
    
    $root.CMsgGC_ServerQuestUpdateData = (function() {
    
        /**
         * Properties of a CMsgGC_ServerQuestUpdateData.
         * @exports ICMsgGC_ServerQuestUpdateData
         * @interface ICMsgGC_ServerQuestUpdateData
         * @property {Array.<IPlayerQuestData>|null} [player_quest_data] CMsgGC_ServerQuestUpdateData player_quest_data
         * @property {Uint8Array|null} [binary_data] CMsgGC_ServerQuestUpdateData binary_data
         * @property {number|null} [mm_game_mode] CMsgGC_ServerQuestUpdateData mm_game_mode
         * @property {IScoreLeaderboardData|null} [missionlbsdata] CMsgGC_ServerQuestUpdateData missionlbsdata
         */
    
        /**
         * Constructs a new CMsgGC_ServerQuestUpdateData.
         * @exports CMsgGC_ServerQuestUpdateData
         * @classdesc Represents a CMsgGC_ServerQuestUpdateData.
         * @implements ICMsgGC_ServerQuestUpdateData
         * @constructor
         * @param {ICMsgGC_ServerQuestUpdateData=} [properties] Properties to set
         */
        function CMsgGC_ServerQuestUpdateData(properties) {
            this.player_quest_data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGC_ServerQuestUpdateData player_quest_data.
         * @member {Array.<IPlayerQuestData>} player_quest_data
         * @memberof CMsgGC_ServerQuestUpdateData
         * @instance
         */
        CMsgGC_ServerQuestUpdateData.prototype.player_quest_data = $util.emptyArray;
    
        /**
         * CMsgGC_ServerQuestUpdateData binary_data.
         * @member {Uint8Array} binary_data
         * @memberof CMsgGC_ServerQuestUpdateData
         * @instance
         */
        CMsgGC_ServerQuestUpdateData.prototype.binary_data = $util.newBuffer([]);
    
        /**
         * CMsgGC_ServerQuestUpdateData mm_game_mode.
         * @member {number} mm_game_mode
         * @memberof CMsgGC_ServerQuestUpdateData
         * @instance
         */
        CMsgGC_ServerQuestUpdateData.prototype.mm_game_mode = 0;
    
        /**
         * CMsgGC_ServerQuestUpdateData missionlbsdata.
         * @member {IScoreLeaderboardData|null|undefined} missionlbsdata
         * @memberof CMsgGC_ServerQuestUpdateData
         * @instance
         */
        CMsgGC_ServerQuestUpdateData.prototype.missionlbsdata = null;
    
        /**
         * Creates a new CMsgGC_ServerQuestUpdateData instance using the specified properties.
         * @function create
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {ICMsgGC_ServerQuestUpdateData=} [properties] Properties to set
         * @returns {CMsgGC_ServerQuestUpdateData} CMsgGC_ServerQuestUpdateData instance
         */
        CMsgGC_ServerQuestUpdateData.create = function create(properties) {
            return new CMsgGC_ServerQuestUpdateData(properties);
        };
    
        /**
         * Encodes the specified CMsgGC_ServerQuestUpdateData message. Does not implicitly {@link CMsgGC_ServerQuestUpdateData.verify|verify} messages.
         * @function encode
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {ICMsgGC_ServerQuestUpdateData} message CMsgGC_ServerQuestUpdateData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_ServerQuestUpdateData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.player_quest_data != null && message.player_quest_data.length)
                for (var i = 0; i < message.player_quest_data.length; ++i)
                    $root.PlayerQuestData.encode(message.player_quest_data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.binary_data != null && message.hasOwnProperty("binary_data"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.binary_data);
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mm_game_mode);
            if (message.missionlbsdata != null && message.hasOwnProperty("missionlbsdata"))
                $root.ScoreLeaderboardData.encode(message.missionlbsdata, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGC_ServerQuestUpdateData message, length delimited. Does not implicitly {@link CMsgGC_ServerQuestUpdateData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {ICMsgGC_ServerQuestUpdateData} message CMsgGC_ServerQuestUpdateData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_ServerQuestUpdateData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGC_ServerQuestUpdateData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGC_ServerQuestUpdateData} CMsgGC_ServerQuestUpdateData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_ServerQuestUpdateData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGC_ServerQuestUpdateData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.player_quest_data && message.player_quest_data.length))
                        message.player_quest_data = [];
                    message.player_quest_data.push($root.PlayerQuestData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.binary_data = reader.bytes();
                    break;
                case 3:
                    message.mm_game_mode = reader.uint32();
                    break;
                case 4:
                    message.missionlbsdata = $root.ScoreLeaderboardData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGC_ServerQuestUpdateData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGC_ServerQuestUpdateData} CMsgGC_ServerQuestUpdateData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_ServerQuestUpdateData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGC_ServerQuestUpdateData message.
         * @function verify
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGC_ServerQuestUpdateData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.player_quest_data != null && message.hasOwnProperty("player_quest_data")) {
                if (!Array.isArray(message.player_quest_data))
                    return "player_quest_data: array expected";
                for (var i = 0; i < message.player_quest_data.length; ++i) {
                    var error = $root.PlayerQuestData.verify(message.player_quest_data[i]);
                    if (error)
                        return "player_quest_data." + error;
                }
            }
            if (message.binary_data != null && message.hasOwnProperty("binary_data"))
                if (!(message.binary_data && typeof message.binary_data.length === "number" || $util.isString(message.binary_data)))
                    return "binary_data: buffer expected";
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                if (!$util.isInteger(message.mm_game_mode))
                    return "mm_game_mode: integer expected";
            if (message.missionlbsdata != null && message.hasOwnProperty("missionlbsdata")) {
                var error = $root.ScoreLeaderboardData.verify(message.missionlbsdata);
                if (error)
                    return "missionlbsdata." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGC_ServerQuestUpdateData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGC_ServerQuestUpdateData} CMsgGC_ServerQuestUpdateData
         */
        CMsgGC_ServerQuestUpdateData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGC_ServerQuestUpdateData)
                return object;
            var message = new $root.CMsgGC_ServerQuestUpdateData();
            if (object.player_quest_data) {
                if (!Array.isArray(object.player_quest_data))
                    throw TypeError(".CMsgGC_ServerQuestUpdateData.player_quest_data: array expected");
                message.player_quest_data = [];
                for (var i = 0; i < object.player_quest_data.length; ++i) {
                    if (typeof object.player_quest_data[i] !== "object")
                        throw TypeError(".CMsgGC_ServerQuestUpdateData.player_quest_data: object expected");
                    message.player_quest_data[i] = $root.PlayerQuestData.fromObject(object.player_quest_data[i]);
                }
            }
            if (object.binary_data != null)
                if (typeof object.binary_data === "string")
                    $util.base64.decode(object.binary_data, message.binary_data = $util.newBuffer($util.base64.length(object.binary_data)), 0);
                else if (object.binary_data.length)
                    message.binary_data = object.binary_data;
            if (object.mm_game_mode != null)
                message.mm_game_mode = object.mm_game_mode >>> 0;
            if (object.missionlbsdata != null) {
                if (typeof object.missionlbsdata !== "object")
                    throw TypeError(".CMsgGC_ServerQuestUpdateData.missionlbsdata: object expected");
                message.missionlbsdata = $root.ScoreLeaderboardData.fromObject(object.missionlbsdata);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGC_ServerQuestUpdateData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGC_ServerQuestUpdateData
         * @static
         * @param {CMsgGC_ServerQuestUpdateData} message CMsgGC_ServerQuestUpdateData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGC_ServerQuestUpdateData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.player_quest_data = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.binary_data = "";
                else {
                    object.binary_data = [];
                    if (options.bytes !== Array)
                        object.binary_data = $util.newBuffer(object.binary_data);
                }
                object.mm_game_mode = 0;
                object.missionlbsdata = null;
            }
            if (message.player_quest_data && message.player_quest_data.length) {
                object.player_quest_data = [];
                for (var j = 0; j < message.player_quest_data.length; ++j)
                    object.player_quest_data[j] = $root.PlayerQuestData.toObject(message.player_quest_data[j], options);
            }
            if (message.binary_data != null && message.hasOwnProperty("binary_data"))
                object.binary_data = options.bytes === String ? $util.base64.encode(message.binary_data, 0, message.binary_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.binary_data) : message.binary_data;
            if (message.mm_game_mode != null && message.hasOwnProperty("mm_game_mode"))
                object.mm_game_mode = message.mm_game_mode;
            if (message.missionlbsdata != null && message.hasOwnProperty("missionlbsdata"))
                object.missionlbsdata = $root.ScoreLeaderboardData.toObject(message.missionlbsdata, options);
            return object;
        };
    
        /**
         * Converts this CMsgGC_ServerQuestUpdateData to JSON.
         * @function toJSON
         * @memberof CMsgGC_ServerQuestUpdateData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGC_ServerQuestUpdateData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGC_ServerQuestUpdateData;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGCOperationalStats = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @interface ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @property {number|null} [packetid] CMsgGCCStrike15_v2_MatchmakingGCOperationalStats packetid
         * @property {Array.<IOperationalStatisticDescription>|null} [namekeys] CMsgGCCStrike15_v2_MatchmakingGCOperationalStats namekeys
         * @property {Array.<IOperationalStatisticsPacket>|null} [packets] CMsgGCCStrike15_v2_MatchmakingGCOperationalStats packets
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.
         * @exports CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(properties) {
            this.namekeys = [];
            this.packets = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGCOperationalStats packetid.
         * @member {number} packetid
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.prototype.packetid = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGCOperationalStats namekeys.
         * @member {Array.<IOperationalStatisticDescription>} namekeys
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.prototype.namekeys = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGCOperationalStats packets.
         * @member {Array.<IOperationalStatisticsPacket>} packets
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.prototype.packets = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGCOperationalStats} CMsgGCCStrike15_v2_MatchmakingGCOperationalStats instance
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats} message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.packetid);
            if (message.namekeys != null && message.namekeys.length)
                for (var i = 0; i < message.namekeys.length; ++i)
                    $root.OperationalStatisticDescription.encode(message.namekeys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.packets != null && message.packets.length)
                for (var i = 0; i < message.packets.length; ++i)
                    $root.OperationalStatisticsPacket.encode(message.packets[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGCOperationalStats} message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGCOperationalStats} CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.packetid = reader.int32();
                    break;
                case 2:
                    if (!(message.namekeys && message.namekeys.length))
                        message.namekeys = [];
                    message.namekeys.push($root.OperationalStatisticDescription.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.packets && message.packets.length))
                        message.packets = [];
                    message.packets.push($root.OperationalStatisticsPacket.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGCOperationalStats} CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                if (!$util.isInteger(message.packetid))
                    return "packetid: integer expected";
            if (message.namekeys != null && message.hasOwnProperty("namekeys")) {
                if (!Array.isArray(message.namekeys))
                    return "namekeys: array expected";
                for (var i = 0; i < message.namekeys.length; ++i) {
                    var error = $root.OperationalStatisticDescription.verify(message.namekeys[i]);
                    if (error)
                        return "namekeys." + error;
                }
            }
            if (message.packets != null && message.hasOwnProperty("packets")) {
                if (!Array.isArray(message.packets))
                    return "packets: array expected";
                for (var i = 0; i < message.packets.length; ++i) {
                    var error = $root.OperationalStatisticsPacket.verify(message.packets[i]);
                    if (error)
                        return "packets." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGCOperationalStats} CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGCOperationalStats)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
            if (object.packetid != null)
                message.packetid = object.packetid | 0;
            if (object.namekeys) {
                if (!Array.isArray(object.namekeys))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys: array expected");
                message.namekeys = [];
                for (var i = 0; i < object.namekeys.length; ++i) {
                    if (typeof object.namekeys[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.namekeys: object expected");
                    message.namekeys[i] = $root.OperationalStatisticDescription.fromObject(object.namekeys[i]);
                }
            }
            if (object.packets) {
                if (!Array.isArray(object.packets))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets: array expected");
                message.packets = [];
                for (var i = 0; i < object.packets.length; ++i) {
                    if (typeof object.packets[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.packets: object expected");
                    message.packets[i] = $root.OperationalStatisticsPacket.fromObject(object.packets[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGCOperationalStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGCOperationalStats} message CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.namekeys = [];
                object.packets = [];
            }
            if (options.defaults)
                object.packetid = 0;
            if (message.packetid != null && message.hasOwnProperty("packetid"))
                object.packetid = message.packetid;
            if (message.namekeys && message.namekeys.length) {
                object.namekeys = [];
                for (var j = 0; j < message.namekeys.length; ++j)
                    object.namekeys[j] = $root.OperationalStatisticDescription.toObject(message.namekeys[j], options);
            }
            if (message.packets && message.packets.length) {
                object.packets = [];
                for (var j = 0; j < message.packets.length; ++j)
                    object.packets[j] = $root.OperationalStatisticsPacket.toObject(message.packets[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGCOperationalStats to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGCOperationalStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGCOperationalStats;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @property {number|null} [token] CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm token
         * @property {number|null} [stamp] CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm stamp
         * @property {number|Long|null} [exchange] CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm exchange
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm token.
         * @member {number} token
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.prototype.token = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm stamp.
         * @member {number} stamp
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.prototype.stamp = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm exchange.
         * @member {number|Long} exchange
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.prototype.exchange = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.token);
            if (message.stamp != null && message.hasOwnProperty("stamp"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.stamp);
            if (message.exchange != null && message.hasOwnProperty("exchange"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.exchange);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.token = reader.uint32();
                    break;
                case 2:
                    message.stamp = reader.uint32();
                    break;
                case 3:
                    message.exchange = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isInteger(message.token))
                    return "token: integer expected";
            if (message.stamp != null && message.hasOwnProperty("stamp"))
                if (!$util.isInteger(message.stamp))
                    return "stamp: integer expected";
            if (message.exchange != null && message.hasOwnProperty("exchange"))
                if (!$util.isInteger(message.exchange) && !(message.exchange && $util.isInteger(message.exchange.low) && $util.isInteger(message.exchange.high)))
                    return "exchange: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
            if (object.token != null)
                message.token = object.token >>> 0;
            if (object.stamp != null)
                message.stamp = object.stamp >>> 0;
            if (object.exchange != null)
                if ($util.Long)
                    (message.exchange = $util.Long.fromValue(object.exchange)).unsigned = true;
                else if (typeof object.exchange === "string")
                    message.exchange = parseInt(object.exchange, 10);
                else if (typeof object.exchange === "number")
                    message.exchange = object.exchange;
                else if (typeof object.exchange === "object")
                    message.exchange = new $util.LongBits(object.exchange.low >>> 0, object.exchange.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm} message CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.token = 0;
                object.stamp = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.exchange = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.exchange = options.longs === String ? "0" : 0;
            }
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            if (message.stamp != null && message.hasOwnProperty("stamp"))
                object.stamp = message.stamp;
            if (message.exchange != null && message.hasOwnProperty("exchange"))
                if (typeof message.exchange === "number")
                    object.exchange = options.longs === String ? String(message.exchange) : message.exchange;
                else
                    object.exchange = options.longs === String ? $util.Long.prototype.toString.call(message.exchange) : options.longs === Number ? new $util.LongBits(message.exchange.low >>> 0, message.exchange.high >>> 0).toNumber(true) : message.exchange;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm;
    })();
    
    $root.CMsgGCCStrike15_v2_GC2ServerReservationUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GC2ServerReservationUpdate.
         * @exports ICMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @interface ICMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @property {number|null} [viewers_external_total] CMsgGCCStrike15_v2_GC2ServerReservationUpdate viewers_external_total
         * @property {number|null} [viewers_external_steam] CMsgGCCStrike15_v2_GC2ServerReservationUpdate viewers_external_steam
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GC2ServerReservationUpdate.
         * @exports CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_GC2ServerReservationUpdate.
         * @implements ICMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GC2ServerReservationUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GC2ServerReservationUpdate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GC2ServerReservationUpdate viewers_external_total.
         * @member {number} viewers_external_total
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.prototype.viewers_external_total = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ServerReservationUpdate viewers_external_steam.
         * @member {number} viewers_external_steam
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.prototype.viewers_external_steam = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GC2ServerReservationUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ServerReservationUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GC2ServerReservationUpdate} CMsgGCCStrike15_v2_GC2ServerReservationUpdate instance
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GC2ServerReservationUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ServerReservationUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ServerReservationUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ServerReservationUpdate} message CMsgGCCStrike15_v2_GC2ServerReservationUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.viewers_external_total != null && message.hasOwnProperty("viewers_external_total"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.viewers_external_total);
            if (message.viewers_external_steam != null && message.hasOwnProperty("viewers_external_steam"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.viewers_external_steam);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ServerReservationUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ServerReservationUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ServerReservationUpdate} message CMsgGCCStrike15_v2_GC2ServerReservationUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ServerReservationUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GC2ServerReservationUpdate} CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.viewers_external_total = reader.uint32();
                    break;
                case 2:
                    message.viewers_external_steam = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ServerReservationUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GC2ServerReservationUpdate} CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GC2ServerReservationUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.viewers_external_total != null && message.hasOwnProperty("viewers_external_total"))
                if (!$util.isInteger(message.viewers_external_total))
                    return "viewers_external_total: integer expected";
            if (message.viewers_external_steam != null && message.hasOwnProperty("viewers_external_steam"))
                if (!$util.isInteger(message.viewers_external_steam))
                    return "viewers_external_steam: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GC2ServerReservationUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GC2ServerReservationUpdate} CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
            if (object.viewers_external_total != null)
                message.viewers_external_total = object.viewers_external_total >>> 0;
            if (object.viewers_external_steam != null)
                message.viewers_external_steam = object.viewers_external_steam >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GC2ServerReservationUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_GC2ServerReservationUpdate} message CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.viewers_external_total = 0;
                object.viewers_external_steam = 0;
            }
            if (message.viewers_external_total != null && message.hasOwnProperty("viewers_external_total"))
                object.viewers_external_total = message.viewers_external_total;
            if (message.viewers_external_steam != null && message.hasOwnProperty("viewers_external_steam"))
                object.viewers_external_steam = message.viewers_external_steam;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GC2ServerReservationUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GC2ServerReservationUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GC2ServerReservationUpdate;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingStart = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingStart.
         * @exports ICMsgGCCStrike15_v2_MatchmakingStart
         * @interface ICMsgGCCStrike15_v2_MatchmakingStart
         * @property {Array.<number>|null} [account_ids] CMsgGCCStrike15_v2_MatchmakingStart account_ids
         * @property {number|null} [game_type] CMsgGCCStrike15_v2_MatchmakingStart game_type
         * @property {string|null} [ticket_data] CMsgGCCStrike15_v2_MatchmakingStart ticket_data
         * @property {number|null} [client_version] CMsgGCCStrike15_v2_MatchmakingStart client_version
         * @property {ITournamentMatchSetup|null} [tournament_match] CMsgGCCStrike15_v2_MatchmakingStart tournament_match
         * @property {boolean|null} [prime_only] CMsgGCCStrike15_v2_MatchmakingStart prime_only
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingStart.
         * @exports CMsgGCCStrike15_v2_MatchmakingStart
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingStart.
         * @implements ICMsgGCCStrike15_v2_MatchmakingStart
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingStart=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingStart(properties) {
            this.account_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart account_ids.
         * @member {Array.<number>} account_ids
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.account_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart game_type.
         * @member {number} game_type
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.game_type = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart ticket_data.
         * @member {string} ticket_data
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.ticket_data = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart client_version.
         * @member {number} client_version
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.client_version = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart tournament_match.
         * @member {ITournamentMatchSetup|null|undefined} tournament_match
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.tournament_match = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStart prime_only.
         * @member {boolean} prime_only
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.prime_only = false;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingStart instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStart=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingStart} CMsgGCCStrike15_v2_MatchmakingStart instance
         */
        CMsgGCCStrike15_v2_MatchmakingStart.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingStart(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingStart message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingStart.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStart} message CMsgGCCStrike15_v2_MatchmakingStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingStart.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_ids != null && message.account_ids.length)
                for (var i = 0; i < message.account_ids.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_ids[i]);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.game_type);
            if (message.ticket_data != null && message.hasOwnProperty("ticket_data"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.ticket_data);
            if (message.client_version != null && message.hasOwnProperty("client_version"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.client_version);
            if (message.tournament_match != null && message.hasOwnProperty("tournament_match"))
                $root.TournamentMatchSetup.encode(message.tournament_match, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.prime_only != null && message.hasOwnProperty("prime_only"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.prime_only);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingStart message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingStart.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStart} message CMsgGCCStrike15_v2_MatchmakingStart message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingStart.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingStart message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingStart} CMsgGCCStrike15_v2_MatchmakingStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingStart.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingStart();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.account_ids && message.account_ids.length))
                        message.account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.account_ids.push(reader.uint32());
                    } else
                        message.account_ids.push(reader.uint32());
                    break;
                case 2:
                    message.game_type = reader.uint32();
                    break;
                case 3:
                    message.ticket_data = reader.string();
                    break;
                case 4:
                    message.client_version = reader.uint32();
                    break;
                case 5:
                    message.tournament_match = $root.TournamentMatchSetup.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.prime_only = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingStart message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingStart} CMsgGCCStrike15_v2_MatchmakingStart
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingStart.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingStart message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingStart.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_ids != null && message.hasOwnProperty("account_ids")) {
                if (!Array.isArray(message.account_ids))
                    return "account_ids: array expected";
                for (var i = 0; i < message.account_ids.length; ++i)
                    if (!$util.isInteger(message.account_ids[i]))
                        return "account_ids: integer[] expected";
            }
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.ticket_data != null && message.hasOwnProperty("ticket_data"))
                if (!$util.isString(message.ticket_data))
                    return "ticket_data: string expected";
            if (message.client_version != null && message.hasOwnProperty("client_version"))
                if (!$util.isInteger(message.client_version))
                    return "client_version: integer expected";
            if (message.tournament_match != null && message.hasOwnProperty("tournament_match")) {
                var error = $root.TournamentMatchSetup.verify(message.tournament_match);
                if (error)
                    return "tournament_match." + error;
            }
            if (message.prime_only != null && message.hasOwnProperty("prime_only"))
                if (typeof message.prime_only !== "boolean")
                    return "prime_only: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingStart message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingStart} CMsgGCCStrike15_v2_MatchmakingStart
         */
        CMsgGCCStrike15_v2_MatchmakingStart.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingStart)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingStart();
            if (object.account_ids) {
                if (!Array.isArray(object.account_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingStart.account_ids: array expected");
                message.account_ids = [];
                for (var i = 0; i < object.account_ids.length; ++i)
                    message.account_ids[i] = object.account_ids[i] >>> 0;
            }
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.ticket_data != null)
                message.ticket_data = String(object.ticket_data);
            if (object.client_version != null)
                message.client_version = object.client_version >>> 0;
            if (object.tournament_match != null) {
                if (typeof object.tournament_match !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingStart.tournament_match: object expected");
                message.tournament_match = $root.TournamentMatchSetup.fromObject(object.tournament_match);
            }
            if (object.prime_only != null)
                message.prime_only = Boolean(object.prime_only);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingStart message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingStart} message CMsgGCCStrike15_v2_MatchmakingStart
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingStart.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.account_ids = [];
            if (options.defaults) {
                object.game_type = 0;
                object.ticket_data = "";
                object.client_version = 0;
                object.tournament_match = null;
                object.prime_only = false;
            }
            if (message.account_ids && message.account_ids.length) {
                object.account_ids = [];
                for (var j = 0; j < message.account_ids.length; ++j)
                    object.account_ids[j] = message.account_ids[j];
            }
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.ticket_data != null && message.hasOwnProperty("ticket_data"))
                object.ticket_data = message.ticket_data;
            if (message.client_version != null && message.hasOwnProperty("client_version"))
                object.client_version = message.client_version;
            if (message.tournament_match != null && message.hasOwnProperty("tournament_match"))
                object.tournament_match = $root.TournamentMatchSetup.toObject(message.tournament_match, options);
            if (message.prime_only != null && message.hasOwnProperty("prime_only"))
                object.prime_only = message.prime_only;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingStart to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingStart
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingStart.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingStart;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingStop = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingStop.
         * @exports ICMsgGCCStrike15_v2_MatchmakingStop
         * @interface ICMsgGCCStrike15_v2_MatchmakingStop
         * @property {number|null} [abandon] CMsgGCCStrike15_v2_MatchmakingStop abandon
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingStop.
         * @exports CMsgGCCStrike15_v2_MatchmakingStop
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingStop.
         * @implements ICMsgGCCStrike15_v2_MatchmakingStop
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingStop=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingStop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingStop abandon.
         * @member {number} abandon
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingStop.prototype.abandon = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingStop instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStop=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingStop} CMsgGCCStrike15_v2_MatchmakingStop instance
         */
        CMsgGCCStrike15_v2_MatchmakingStop.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingStop(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingStop message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingStop.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStop} message CMsgGCCStrike15_v2_MatchmakingStop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingStop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.abandon != null && message.hasOwnProperty("abandon"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.abandon);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingStop message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingStop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingStop} message CMsgGCCStrike15_v2_MatchmakingStop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingStop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingStop message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingStop} CMsgGCCStrike15_v2_MatchmakingStop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingStop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingStop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.abandon = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingStop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingStop} CMsgGCCStrike15_v2_MatchmakingStop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingStop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingStop message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingStop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.abandon != null && message.hasOwnProperty("abandon"))
                if (!$util.isInteger(message.abandon))
                    return "abandon: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingStop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingStop} CMsgGCCStrike15_v2_MatchmakingStop
         */
        CMsgGCCStrike15_v2_MatchmakingStop.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingStop)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingStop();
            if (object.abandon != null)
                message.abandon = object.abandon | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingStop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingStop} message CMsgGCCStrike15_v2_MatchmakingStop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingStop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.abandon = 0;
            if (message.abandon != null && message.hasOwnProperty("abandon"))
                object.abandon = message.abandon;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingStop to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingStop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingStop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingStop;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.
         * @exports ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @interface ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @property {Array.<IGameServerPing>|null} [gameserverpings] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing gameserverpings
         * @property {number|null} [offset_index] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing offset_index
         * @property {number|null} [final_batch] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing final_batch
         * @property {Array.<IDataCenterPing>|null} [data_center_pings] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing data_center_pings
         * @property {number|null} [max_ping] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing max_ping
         * @property {number|null} [test_token] CMsgGCCStrike15_v2_MatchmakingClient2ServerPing test_token
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.
         * @exports CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.
         * @implements ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(properties) {
            this.gameserverpings = [];
            this.data_center_pings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing gameserverpings.
         * @member {Array.<IGameServerPing>} gameserverpings
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.gameserverpings = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing offset_index.
         * @member {number} offset_index
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.offset_index = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing final_batch.
         * @member {number} final_batch
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.final_batch = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing data_center_pings.
         * @member {Array.<IDataCenterPing>} data_center_pings
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.data_center_pings = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing max_ping.
         * @member {number} max_ping
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.max_ping = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingClient2ServerPing test_token.
         * @member {number} test_token
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.test_token = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2ServerPing} CMsgGCCStrike15_v2_MatchmakingClient2ServerPing instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing} message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameserverpings != null && message.gameserverpings.length)
                for (var i = 0; i < message.gameserverpings.length; ++i)
                    $root.GameServerPing.encode(message.gameserverpings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.offset_index != null && message.hasOwnProperty("offset_index"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.offset_index);
            if (message.final_batch != null && message.hasOwnProperty("final_batch"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.final_batch);
            if (message.data_center_pings != null && message.data_center_pings.length)
                for (var i = 0; i < message.data_center_pings.length; ++i)
                    $root.DataCenterPing.encode(message.data_center_pings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.max_ping != null && message.hasOwnProperty("max_ping"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.max_ping);
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.test_token);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2ServerPing} message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2ServerPing} CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.gameserverpings && message.gameserverpings.length))
                        message.gameserverpings = [];
                    message.gameserverpings.push($root.GameServerPing.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.offset_index = reader.int32();
                    break;
                case 3:
                    message.final_batch = reader.int32();
                    break;
                case 4:
                    if (!(message.data_center_pings && message.data_center_pings.length))
                        message.data_center_pings = [];
                    message.data_center_pings.push($root.DataCenterPing.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.max_ping = reader.uint32();
                    break;
                case 6:
                    message.test_token = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2ServerPing} CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameserverpings != null && message.hasOwnProperty("gameserverpings")) {
                if (!Array.isArray(message.gameserverpings))
                    return "gameserverpings: array expected";
                for (var i = 0; i < message.gameserverpings.length; ++i) {
                    var error = $root.GameServerPing.verify(message.gameserverpings[i]);
                    if (error)
                        return "gameserverpings." + error;
                }
            }
            if (message.offset_index != null && message.hasOwnProperty("offset_index"))
                if (!$util.isInteger(message.offset_index))
                    return "offset_index: integer expected";
            if (message.final_batch != null && message.hasOwnProperty("final_batch"))
                if (!$util.isInteger(message.final_batch))
                    return "final_batch: integer expected";
            if (message.data_center_pings != null && message.hasOwnProperty("data_center_pings")) {
                if (!Array.isArray(message.data_center_pings))
                    return "data_center_pings: array expected";
                for (var i = 0; i < message.data_center_pings.length; ++i) {
                    var error = $root.DataCenterPing.verify(message.data_center_pings[i]);
                    if (error)
                        return "data_center_pings." + error;
                }
            }
            if (message.max_ping != null && message.hasOwnProperty("max_ping"))
                if (!$util.isInteger(message.max_ping))
                    return "max_ping: integer expected";
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                if (!$util.isInteger(message.test_token))
                    return "test_token: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2ServerPing} CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
            if (object.gameserverpings) {
                if (!Array.isArray(object.gameserverpings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings: array expected");
                message.gameserverpings = [];
                for (var i = 0; i < object.gameserverpings.length; ++i) {
                    if (typeof object.gameserverpings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.gameserverpings: object expected");
                    message.gameserverpings[i] = $root.GameServerPing.fromObject(object.gameserverpings[i]);
                }
            }
            if (object.offset_index != null)
                message.offset_index = object.offset_index | 0;
            if (object.final_batch != null)
                message.final_batch = object.final_batch | 0;
            if (object.data_center_pings) {
                if (!Array.isArray(object.data_center_pings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings: array expected");
                message.data_center_pings = [];
                for (var i = 0; i < object.data_center_pings.length; ++i) {
                    if (typeof object.data_center_pings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.data_center_pings: object expected");
                    message.data_center_pings[i] = $root.DataCenterPing.fromObject(object.data_center_pings[i]);
                }
            }
            if (object.max_ping != null)
                message.max_ping = object.max_ping >>> 0;
            if (object.test_token != null)
                message.test_token = object.test_token >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingClient2ServerPing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingClient2ServerPing} message CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.gameserverpings = [];
                object.data_center_pings = [];
            }
            if (options.defaults) {
                object.offset_index = 0;
                object.final_batch = 0;
                object.max_ping = 0;
                object.test_token = 0;
            }
            if (message.gameserverpings && message.gameserverpings.length) {
                object.gameserverpings = [];
                for (var j = 0; j < message.gameserverpings.length; ++j)
                    object.gameserverpings[j] = $root.GameServerPing.toObject(message.gameserverpings[j], options);
            }
            if (message.offset_index != null && message.hasOwnProperty("offset_index"))
                object.offset_index = message.offset_index;
            if (message.final_batch != null && message.hasOwnProperty("final_batch"))
                object.final_batch = message.final_batch;
            if (message.data_center_pings && message.data_center_pings.length) {
                object.data_center_pings = [];
                for (var j = 0; j < message.data_center_pings.length; ++j)
                    object.data_center_pings[j] = $root.DataCenterPing.toObject(message.data_center_pings[j], options);
            }
            if (message.max_ping != null && message.hasOwnProperty("max_ping"))
                object.max_ping = message.max_ping;
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                object.test_token = message.test_token;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingClient2ServerPing to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2ServerPing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingClient2ServerPing;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @property {number|null} [matchmaking] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate matchmaking
         * @property {Array.<number>|null} [waiting_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate waiting_account_id_sessions
         * @property {string|null} [error] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate error
         * @property {Array.<number>|null} [ongoingmatch_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ongoingmatch_account_id_sessions
         * @property {IGlobalStatistics|null} [global_stats] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate global_stats
         * @property {Array.<number>|null} [failping_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate failping_account_id_sessions
         * @property {Array.<number>|null} [penalty_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate penalty_account_id_sessions
         * @property {Array.<number>|null} [failready_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate failready_account_id_sessions
         * @property {Array.<number>|null} [vacbanned_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate vacbanned_account_id_sessions
         * @property {IIpAddressMask|null} [server_ipaddress_mask] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate server_ipaddress_mask
         * @property {Array.<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote>|null} [notes] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate notes
         * @property {Array.<number>|null} [penalty_account_id_sessions_green] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate penalty_account_id_sessions_green
         * @property {Array.<number>|null} [insufficientlevel_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate insufficientlevel_sessions
         * @property {Array.<number>|null} [vsncheck_account_id_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate vsncheck_account_id_sessions
         * @property {Array.<number>|null} [launcher_mismatch_sessions] CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate launcher_mismatch_sessions
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(properties) {
            this.waiting_account_id_sessions = [];
            this.ongoingmatch_account_id_sessions = [];
            this.failping_account_id_sessions = [];
            this.penalty_account_id_sessions = [];
            this.failready_account_id_sessions = [];
            this.vacbanned_account_id_sessions = [];
            this.notes = [];
            this.penalty_account_id_sessions_green = [];
            this.insufficientlevel_sessions = [];
            this.vsncheck_account_id_sessions = [];
            this.launcher_mismatch_sessions = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate matchmaking.
         * @member {number} matchmaking
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.matchmaking = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate waiting_account_id_sessions.
         * @member {Array.<number>} waiting_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.waiting_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate error.
         * @member {string} error
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.error = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ongoingmatch_account_id_sessions.
         * @member {Array.<number>} ongoingmatch_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.ongoingmatch_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate global_stats.
         * @member {IGlobalStatistics|null|undefined} global_stats
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.global_stats = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate failping_account_id_sessions.
         * @member {Array.<number>} failping_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.failping_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate penalty_account_id_sessions.
         * @member {Array.<number>} penalty_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.penalty_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate failready_account_id_sessions.
         * @member {Array.<number>} failready_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.failready_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate vacbanned_account_id_sessions.
         * @member {Array.<number>} vacbanned_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.vacbanned_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate server_ipaddress_mask.
         * @member {IIpAddressMask|null|undefined} server_ipaddress_mask
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.server_ipaddress_mask = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate notes.
         * @member {Array.<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote>} notes
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.notes = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate penalty_account_id_sessions_green.
         * @member {Array.<number>} penalty_account_id_sessions_green
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.penalty_account_id_sessions_green = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate insufficientlevel_sessions.
         * @member {Array.<number>} insufficientlevel_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.insufficientlevel_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate vsncheck_account_id_sessions.
         * @member {Array.<number>} vsncheck_account_id_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.vsncheck_account_id_sessions = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate launcher_mismatch_sessions.
         * @member {Array.<number>} launcher_mismatch_sessions
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.launcher_mismatch_sessions = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.matchmaking != null && message.hasOwnProperty("matchmaking"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.matchmaking);
            if (message.waiting_account_id_sessions != null && message.waiting_account_id_sessions.length)
                for (var i = 0; i < message.waiting_account_id_sessions.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.waiting_account_id_sessions[i]);
            if (message.error != null && message.hasOwnProperty("error"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.error);
            if (message.ongoingmatch_account_id_sessions != null && message.ongoingmatch_account_id_sessions.length)
                for (var i = 0; i < message.ongoingmatch_account_id_sessions.length; ++i)
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ongoingmatch_account_id_sessions[i]);
            if (message.global_stats != null && message.hasOwnProperty("global_stats"))
                $root.GlobalStatistics.encode(message.global_stats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.failping_account_id_sessions != null && message.failping_account_id_sessions.length)
                for (var i = 0; i < message.failping_account_id_sessions.length; ++i)
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.failping_account_id_sessions[i]);
            if (message.penalty_account_id_sessions != null && message.penalty_account_id_sessions.length)
                for (var i = 0; i < message.penalty_account_id_sessions.length; ++i)
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.penalty_account_id_sessions[i]);
            if (message.failready_account_id_sessions != null && message.failready_account_id_sessions.length)
                for (var i = 0; i < message.failready_account_id_sessions.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.failready_account_id_sessions[i]);
            if (message.vacbanned_account_id_sessions != null && message.vacbanned_account_id_sessions.length)
                for (var i = 0; i < message.vacbanned_account_id_sessions.length; ++i)
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.vacbanned_account_id_sessions[i]);
            if (message.server_ipaddress_mask != null && message.hasOwnProperty("server_ipaddress_mask"))
                $root.IpAddressMask.encode(message.server_ipaddress_mask, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.notes != null && message.notes.length)
                for (var i = 0; i < message.notes.length; ++i)
                    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.encode(message.notes[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.penalty_account_id_sessions_green != null && message.penalty_account_id_sessions_green.length)
                for (var i = 0; i < message.penalty_account_id_sessions_green.length; ++i)
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.penalty_account_id_sessions_green[i]);
            if (message.insufficientlevel_sessions != null && message.insufficientlevel_sessions.length)
                for (var i = 0; i < message.insufficientlevel_sessions.length; ++i)
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.insufficientlevel_sessions[i]);
            if (message.vsncheck_account_id_sessions != null && message.vsncheck_account_id_sessions.length)
                for (var i = 0; i < message.vsncheck_account_id_sessions.length; ++i)
                    writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.vsncheck_account_id_sessions[i]);
            if (message.launcher_mismatch_sessions != null && message.launcher_mismatch_sessions.length)
                for (var i = 0; i < message.launcher_mismatch_sessions.length; ++i)
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.launcher_mismatch_sessions[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.matchmaking = reader.int32();
                    break;
                case 2:
                    if (!(message.waiting_account_id_sessions && message.waiting_account_id_sessions.length))
                        message.waiting_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.waiting_account_id_sessions.push(reader.uint32());
                    } else
                        message.waiting_account_id_sessions.push(reader.uint32());
                    break;
                case 3:
                    message.error = reader.string();
                    break;
                case 6:
                    if (!(message.ongoingmatch_account_id_sessions && message.ongoingmatch_account_id_sessions.length))
                        message.ongoingmatch_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ongoingmatch_account_id_sessions.push(reader.uint32());
                    } else
                        message.ongoingmatch_account_id_sessions.push(reader.uint32());
                    break;
                case 7:
                    message.global_stats = $root.GlobalStatistics.decode(reader, reader.uint32());
                    break;
                case 8:
                    if (!(message.failping_account_id_sessions && message.failping_account_id_sessions.length))
                        message.failping_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.failping_account_id_sessions.push(reader.uint32());
                    } else
                        message.failping_account_id_sessions.push(reader.uint32());
                    break;
                case 9:
                    if (!(message.penalty_account_id_sessions && message.penalty_account_id_sessions.length))
                        message.penalty_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.penalty_account_id_sessions.push(reader.uint32());
                    } else
                        message.penalty_account_id_sessions.push(reader.uint32());
                    break;
                case 10:
                    if (!(message.failready_account_id_sessions && message.failready_account_id_sessions.length))
                        message.failready_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.failready_account_id_sessions.push(reader.uint32());
                    } else
                        message.failready_account_id_sessions.push(reader.uint32());
                    break;
                case 11:
                    if (!(message.vacbanned_account_id_sessions && message.vacbanned_account_id_sessions.length))
                        message.vacbanned_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.vacbanned_account_id_sessions.push(reader.uint32());
                    } else
                        message.vacbanned_account_id_sessions.push(reader.uint32());
                    break;
                case 12:
                    message.server_ipaddress_mask = $root.IpAddressMask.decode(reader, reader.uint32());
                    break;
                case 13:
                    if (!(message.notes && message.notes.length))
                        message.notes = [];
                    message.notes.push($root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.decode(reader, reader.uint32()));
                    break;
                case 14:
                    if (!(message.penalty_account_id_sessions_green && message.penalty_account_id_sessions_green.length))
                        message.penalty_account_id_sessions_green = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.penalty_account_id_sessions_green.push(reader.uint32());
                    } else
                        message.penalty_account_id_sessions_green.push(reader.uint32());
                    break;
                case 15:
                    if (!(message.insufficientlevel_sessions && message.insufficientlevel_sessions.length))
                        message.insufficientlevel_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.insufficientlevel_sessions.push(reader.uint32());
                    } else
                        message.insufficientlevel_sessions.push(reader.uint32());
                    break;
                case 16:
                    if (!(message.vsncheck_account_id_sessions && message.vsncheck_account_id_sessions.length))
                        message.vsncheck_account_id_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.vsncheck_account_id_sessions.push(reader.uint32());
                    } else
                        message.vsncheck_account_id_sessions.push(reader.uint32());
                    break;
                case 17:
                    if (!(message.launcher_mismatch_sessions && message.launcher_mismatch_sessions.length))
                        message.launcher_mismatch_sessions = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.launcher_mismatch_sessions.push(reader.uint32());
                    } else
                        message.launcher_mismatch_sessions.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.matchmaking != null && message.hasOwnProperty("matchmaking"))
                if (!$util.isInteger(message.matchmaking))
                    return "matchmaking: integer expected";
            if (message.waiting_account_id_sessions != null && message.hasOwnProperty("waiting_account_id_sessions")) {
                if (!Array.isArray(message.waiting_account_id_sessions))
                    return "waiting_account_id_sessions: array expected";
                for (var i = 0; i < message.waiting_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.waiting_account_id_sessions[i]))
                        return "waiting_account_id_sessions: integer[] expected";
            }
            if (message.error != null && message.hasOwnProperty("error"))
                if (!$util.isString(message.error))
                    return "error: string expected";
            if (message.ongoingmatch_account_id_sessions != null && message.hasOwnProperty("ongoingmatch_account_id_sessions")) {
                if (!Array.isArray(message.ongoingmatch_account_id_sessions))
                    return "ongoingmatch_account_id_sessions: array expected";
                for (var i = 0; i < message.ongoingmatch_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.ongoingmatch_account_id_sessions[i]))
                        return "ongoingmatch_account_id_sessions: integer[] expected";
            }
            if (message.global_stats != null && message.hasOwnProperty("global_stats")) {
                var error = $root.GlobalStatistics.verify(message.global_stats);
                if (error)
                    return "global_stats." + error;
            }
            if (message.failping_account_id_sessions != null && message.hasOwnProperty("failping_account_id_sessions")) {
                if (!Array.isArray(message.failping_account_id_sessions))
                    return "failping_account_id_sessions: array expected";
                for (var i = 0; i < message.failping_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.failping_account_id_sessions[i]))
                        return "failping_account_id_sessions: integer[] expected";
            }
            if (message.penalty_account_id_sessions != null && message.hasOwnProperty("penalty_account_id_sessions")) {
                if (!Array.isArray(message.penalty_account_id_sessions))
                    return "penalty_account_id_sessions: array expected";
                for (var i = 0; i < message.penalty_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.penalty_account_id_sessions[i]))
                        return "penalty_account_id_sessions: integer[] expected";
            }
            if (message.failready_account_id_sessions != null && message.hasOwnProperty("failready_account_id_sessions")) {
                if (!Array.isArray(message.failready_account_id_sessions))
                    return "failready_account_id_sessions: array expected";
                for (var i = 0; i < message.failready_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.failready_account_id_sessions[i]))
                        return "failready_account_id_sessions: integer[] expected";
            }
            if (message.vacbanned_account_id_sessions != null && message.hasOwnProperty("vacbanned_account_id_sessions")) {
                if (!Array.isArray(message.vacbanned_account_id_sessions))
                    return "vacbanned_account_id_sessions: array expected";
                for (var i = 0; i < message.vacbanned_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.vacbanned_account_id_sessions[i]))
                        return "vacbanned_account_id_sessions: integer[] expected";
            }
            if (message.server_ipaddress_mask != null && message.hasOwnProperty("server_ipaddress_mask")) {
                var error = $root.IpAddressMask.verify(message.server_ipaddress_mask);
                if (error)
                    return "server_ipaddress_mask." + error;
            }
            if (message.notes != null && message.hasOwnProperty("notes")) {
                if (!Array.isArray(message.notes))
                    return "notes: array expected";
                for (var i = 0; i < message.notes.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.verify(message.notes[i]);
                    if (error)
                        return "notes." + error;
                }
            }
            if (message.penalty_account_id_sessions_green != null && message.hasOwnProperty("penalty_account_id_sessions_green")) {
                if (!Array.isArray(message.penalty_account_id_sessions_green))
                    return "penalty_account_id_sessions_green: array expected";
                for (var i = 0; i < message.penalty_account_id_sessions_green.length; ++i)
                    if (!$util.isInteger(message.penalty_account_id_sessions_green[i]))
                        return "penalty_account_id_sessions_green: integer[] expected";
            }
            if (message.insufficientlevel_sessions != null && message.hasOwnProperty("insufficientlevel_sessions")) {
                if (!Array.isArray(message.insufficientlevel_sessions))
                    return "insufficientlevel_sessions: array expected";
                for (var i = 0; i < message.insufficientlevel_sessions.length; ++i)
                    if (!$util.isInteger(message.insufficientlevel_sessions[i]))
                        return "insufficientlevel_sessions: integer[] expected";
            }
            if (message.vsncheck_account_id_sessions != null && message.hasOwnProperty("vsncheck_account_id_sessions")) {
                if (!Array.isArray(message.vsncheck_account_id_sessions))
                    return "vsncheck_account_id_sessions: array expected";
                for (var i = 0; i < message.vsncheck_account_id_sessions.length; ++i)
                    if (!$util.isInteger(message.vsncheck_account_id_sessions[i]))
                        return "vsncheck_account_id_sessions: integer[] expected";
            }
            if (message.launcher_mismatch_sessions != null && message.hasOwnProperty("launcher_mismatch_sessions")) {
                if (!Array.isArray(message.launcher_mismatch_sessions))
                    return "launcher_mismatch_sessions: array expected";
                for (var i = 0; i < message.launcher_mismatch_sessions.length; ++i)
                    if (!$util.isInteger(message.launcher_mismatch_sessions[i]))
                        return "launcher_mismatch_sessions: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
            if (object.matchmaking != null)
                message.matchmaking = object.matchmaking | 0;
            if (object.waiting_account_id_sessions) {
                if (!Array.isArray(object.waiting_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.waiting_account_id_sessions: array expected");
                message.waiting_account_id_sessions = [];
                for (var i = 0; i < object.waiting_account_id_sessions.length; ++i)
                    message.waiting_account_id_sessions[i] = object.waiting_account_id_sessions[i] >>> 0;
            }
            if (object.error != null)
                message.error = String(object.error);
            if (object.ongoingmatch_account_id_sessions) {
                if (!Array.isArray(object.ongoingmatch_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.ongoingmatch_account_id_sessions: array expected");
                message.ongoingmatch_account_id_sessions = [];
                for (var i = 0; i < object.ongoingmatch_account_id_sessions.length; ++i)
                    message.ongoingmatch_account_id_sessions[i] = object.ongoingmatch_account_id_sessions[i] >>> 0;
            }
            if (object.global_stats != null) {
                if (typeof object.global_stats !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.global_stats: object expected");
                message.global_stats = $root.GlobalStatistics.fromObject(object.global_stats);
            }
            if (object.failping_account_id_sessions) {
                if (!Array.isArray(object.failping_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failping_account_id_sessions: array expected");
                message.failping_account_id_sessions = [];
                for (var i = 0; i < object.failping_account_id_sessions.length; ++i)
                    message.failping_account_id_sessions[i] = object.failping_account_id_sessions[i] >>> 0;
            }
            if (object.penalty_account_id_sessions) {
                if (!Array.isArray(object.penalty_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions: array expected");
                message.penalty_account_id_sessions = [];
                for (var i = 0; i < object.penalty_account_id_sessions.length; ++i)
                    message.penalty_account_id_sessions[i] = object.penalty_account_id_sessions[i] >>> 0;
            }
            if (object.failready_account_id_sessions) {
                if (!Array.isArray(object.failready_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.failready_account_id_sessions: array expected");
                message.failready_account_id_sessions = [];
                for (var i = 0; i < object.failready_account_id_sessions.length; ++i)
                    message.failready_account_id_sessions[i] = object.failready_account_id_sessions[i] >>> 0;
            }
            if (object.vacbanned_account_id_sessions) {
                if (!Array.isArray(object.vacbanned_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vacbanned_account_id_sessions: array expected");
                message.vacbanned_account_id_sessions = [];
                for (var i = 0; i < object.vacbanned_account_id_sessions.length; ++i)
                    message.vacbanned_account_id_sessions[i] = object.vacbanned_account_id_sessions[i] >>> 0;
            }
            if (object.server_ipaddress_mask != null) {
                if (typeof object.server_ipaddress_mask !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.server_ipaddress_mask: object expected");
                message.server_ipaddress_mask = $root.IpAddressMask.fromObject(object.server_ipaddress_mask);
            }
            if (object.notes) {
                if (!Array.isArray(object.notes))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes: array expected");
                message.notes = [];
                for (var i = 0; i < object.notes.length; ++i) {
                    if (typeof object.notes[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.notes: object expected");
                    message.notes[i] = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.fromObject(object.notes[i]);
                }
            }
            if (object.penalty_account_id_sessions_green) {
                if (!Array.isArray(object.penalty_account_id_sessions_green))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.penalty_account_id_sessions_green: array expected");
                message.penalty_account_id_sessions_green = [];
                for (var i = 0; i < object.penalty_account_id_sessions_green.length; ++i)
                    message.penalty_account_id_sessions_green[i] = object.penalty_account_id_sessions_green[i] >>> 0;
            }
            if (object.insufficientlevel_sessions) {
                if (!Array.isArray(object.insufficientlevel_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.insufficientlevel_sessions: array expected");
                message.insufficientlevel_sessions = [];
                for (var i = 0; i < object.insufficientlevel_sessions.length; ++i)
                    message.insufficientlevel_sessions[i] = object.insufficientlevel_sessions[i] >>> 0;
            }
            if (object.vsncheck_account_id_sessions) {
                if (!Array.isArray(object.vsncheck_account_id_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.vsncheck_account_id_sessions: array expected");
                message.vsncheck_account_id_sessions = [];
                for (var i = 0; i < object.vsncheck_account_id_sessions.length; ++i)
                    message.vsncheck_account_id_sessions[i] = object.vsncheck_account_id_sessions[i] >>> 0;
            }
            if (object.launcher_mismatch_sessions) {
                if (!Array.isArray(object.launcher_mismatch_sessions))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.launcher_mismatch_sessions: array expected");
                message.launcher_mismatch_sessions = [];
                for (var i = 0; i < object.launcher_mismatch_sessions.length; ++i)
                    message.launcher_mismatch_sessions[i] = object.launcher_mismatch_sessions[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.waiting_account_id_sessions = [];
                object.ongoingmatch_account_id_sessions = [];
                object.failping_account_id_sessions = [];
                object.penalty_account_id_sessions = [];
                object.failready_account_id_sessions = [];
                object.vacbanned_account_id_sessions = [];
                object.notes = [];
                object.penalty_account_id_sessions_green = [];
                object.insufficientlevel_sessions = [];
                object.vsncheck_account_id_sessions = [];
                object.launcher_mismatch_sessions = [];
            }
            if (options.defaults) {
                object.matchmaking = 0;
                object.error = "";
                object.global_stats = null;
                object.server_ipaddress_mask = null;
            }
            if (message.matchmaking != null && message.hasOwnProperty("matchmaking"))
                object.matchmaking = message.matchmaking;
            if (message.waiting_account_id_sessions && message.waiting_account_id_sessions.length) {
                object.waiting_account_id_sessions = [];
                for (var j = 0; j < message.waiting_account_id_sessions.length; ++j)
                    object.waiting_account_id_sessions[j] = message.waiting_account_id_sessions[j];
            }
            if (message.error != null && message.hasOwnProperty("error"))
                object.error = message.error;
            if (message.ongoingmatch_account_id_sessions && message.ongoingmatch_account_id_sessions.length) {
                object.ongoingmatch_account_id_sessions = [];
                for (var j = 0; j < message.ongoingmatch_account_id_sessions.length; ++j)
                    object.ongoingmatch_account_id_sessions[j] = message.ongoingmatch_account_id_sessions[j];
            }
            if (message.global_stats != null && message.hasOwnProperty("global_stats"))
                object.global_stats = $root.GlobalStatistics.toObject(message.global_stats, options);
            if (message.failping_account_id_sessions && message.failping_account_id_sessions.length) {
                object.failping_account_id_sessions = [];
                for (var j = 0; j < message.failping_account_id_sessions.length; ++j)
                    object.failping_account_id_sessions[j] = message.failping_account_id_sessions[j];
            }
            if (message.penalty_account_id_sessions && message.penalty_account_id_sessions.length) {
                object.penalty_account_id_sessions = [];
                for (var j = 0; j < message.penalty_account_id_sessions.length; ++j)
                    object.penalty_account_id_sessions[j] = message.penalty_account_id_sessions[j];
            }
            if (message.failready_account_id_sessions && message.failready_account_id_sessions.length) {
                object.failready_account_id_sessions = [];
                for (var j = 0; j < message.failready_account_id_sessions.length; ++j)
                    object.failready_account_id_sessions[j] = message.failready_account_id_sessions[j];
            }
            if (message.vacbanned_account_id_sessions && message.vacbanned_account_id_sessions.length) {
                object.vacbanned_account_id_sessions = [];
                for (var j = 0; j < message.vacbanned_account_id_sessions.length; ++j)
                    object.vacbanned_account_id_sessions[j] = message.vacbanned_account_id_sessions[j];
            }
            if (message.server_ipaddress_mask != null && message.hasOwnProperty("server_ipaddress_mask"))
                object.server_ipaddress_mask = $root.IpAddressMask.toObject(message.server_ipaddress_mask, options);
            if (message.notes && message.notes.length) {
                object.notes = [];
                for (var j = 0; j < message.notes.length; ++j)
                    object.notes[j] = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.toObject(message.notes[j], options);
            }
            if (message.penalty_account_id_sessions_green && message.penalty_account_id_sessions_green.length) {
                object.penalty_account_id_sessions_green = [];
                for (var j = 0; j < message.penalty_account_id_sessions_green.length; ++j)
                    object.penalty_account_id_sessions_green[j] = message.penalty_account_id_sessions_green[j];
            }
            if (message.insufficientlevel_sessions && message.insufficientlevel_sessions.length) {
                object.insufficientlevel_sessions = [];
                for (var j = 0; j < message.insufficientlevel_sessions.length; ++j)
                    object.insufficientlevel_sessions[j] = message.insufficientlevel_sessions[j];
            }
            if (message.vsncheck_account_id_sessions && message.vsncheck_account_id_sessions.length) {
                object.vsncheck_account_id_sessions = [];
                for (var j = 0; j < message.vsncheck_account_id_sessions.length; ++j)
                    object.vsncheck_account_id_sessions[j] = message.vsncheck_account_id_sessions[j];
            }
            if (message.launcher_mismatch_sessions && message.launcher_mismatch_sessions.length) {
                object.launcher_mismatch_sessions = [];
                for (var j = 0; j < message.launcher_mismatch_sessions.length; ++j)
                    object.launcher_mismatch_sessions[j] = message.launcher_mismatch_sessions[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note = (function() {
    
            /**
             * Properties of a Note.
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
             * @interface INote
             * @property {number|null} [type] Note type
             * @property {number|null} [region_id] Note region_id
             * @property {number|null} [region_r] Note region_r
             * @property {number|null} [distance] Note distance
             */
    
            /**
             * Constructs a new Note.
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate
             * @classdesc Represents a Note.
             * @implements INote
             * @constructor
             * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote=} [properties] Properties to set
             */
            function Note(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Note type.
             * @member {number} type
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @instance
             */
            Note.prototype.type = 0;
    
            /**
             * Note region_id.
             * @member {number} region_id
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @instance
             */
            Note.prototype.region_id = 0;
    
            /**
             * Note region_r.
             * @member {number} region_r
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @instance
             */
            Note.prototype.region_r = 0;
    
            /**
             * Note distance.
             * @member {number} distance
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @instance
             */
            Note.prototype.distance = 0;
    
            /**
             * Creates a new Note instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note} Note instance
             */
            Note.create = function create(properties) {
                return new Note(properties);
            };
    
            /**
             * Encodes the specified Note message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote} message Note message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Note.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.region_id != null && message.hasOwnProperty("region_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.region_id);
                if (message.region_r != null && message.hasOwnProperty("region_r"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.region_r);
                if (message.distance != null && message.hasOwnProperty("distance"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.distance);
                return writer;
            };
    
            /**
             * Encodes the specified Note message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.INote} message Note message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Note.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Note message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note} Note
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Note.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.region_id = reader.int32();
                        break;
                    case 3:
                        message.region_r = reader.float();
                        break;
                    case 4:
                        message.distance = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Note message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note} Note
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Note.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Note message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Note.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.region_id != null && message.hasOwnProperty("region_id"))
                    if (!$util.isInteger(message.region_id))
                        return "region_id: integer expected";
                if (message.region_r != null && message.hasOwnProperty("region_r"))
                    if (typeof message.region_r !== "number")
                        return "region_r: number expected";
                if (message.distance != null && message.hasOwnProperty("distance"))
                    if (typeof message.distance !== "number")
                        return "distance: number expected";
                return null;
            };
    
            /**
             * Creates a Note message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note} Note
             */
            Note.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note();
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.region_id != null)
                    message.region_id = object.region_id | 0;
                if (object.region_r != null)
                    message.region_r = Number(object.region_r);
                if (object.distance != null)
                    message.distance = Number(object.distance);
                return message;
            };
    
            /**
             * Creates a plain object from a Note message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note} message Note
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Note.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.region_id = 0;
                    object.region_r = 0;
                    object.distance = 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.region_id != null && message.hasOwnProperty("region_id"))
                    object.region_id = message.region_id;
                if (message.region_r != null && message.hasOwnProperty("region_r"))
                    object.region_r = options.json && !isFinite(message.region_r) ? String(message.region_r) : message.region_r;
                if (message.distance != null && message.hasOwnProperty("distance"))
                    object.distance = options.json && !isFinite(message.distance) ? String(message.distance) : message.distance;
                return object;
            };
    
            /**
             * Converts this Note to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Note.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Note;
        })();
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate;
    })();
    
    $root.CDataGCCStrike15_v2_TournamentMatchDraft = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_TournamentMatchDraft.
         * @exports ICDataGCCStrike15_v2_TournamentMatchDraft
         * @interface ICDataGCCStrike15_v2_TournamentMatchDraft
         * @property {number|null} [event_id] CDataGCCStrike15_v2_TournamentMatchDraft event_id
         * @property {number|null} [event_stage_id] CDataGCCStrike15_v2_TournamentMatchDraft event_stage_id
         * @property {number|null} [team_id_0] CDataGCCStrike15_v2_TournamentMatchDraft team_id_0
         * @property {number|null} [team_id_1] CDataGCCStrike15_v2_TournamentMatchDraft team_id_1
         * @property {number|null} [maps_count] CDataGCCStrike15_v2_TournamentMatchDraft maps_count
         * @property {number|null} [maps_current] CDataGCCStrike15_v2_TournamentMatchDraft maps_current
         * @property {number|null} [team_id_start] CDataGCCStrike15_v2_TournamentMatchDraft team_id_start
         * @property {number|null} [team_id_veto1] CDataGCCStrike15_v2_TournamentMatchDraft team_id_veto1
         * @property {number|null} [team_id_pickn] CDataGCCStrike15_v2_TournamentMatchDraft team_id_pickn
         * @property {Array.<CDataGCCStrike15_v2_TournamentMatchDraft.IEntry>|null} [drafts] CDataGCCStrike15_v2_TournamentMatchDraft drafts
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_TournamentMatchDraft.
         * @exports CDataGCCStrike15_v2_TournamentMatchDraft
         * @classdesc Represents a CDataGCCStrike15_v2_TournamentMatchDraft.
         * @implements ICDataGCCStrike15_v2_TournamentMatchDraft
         * @constructor
         * @param {ICDataGCCStrike15_v2_TournamentMatchDraft=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_TournamentMatchDraft(properties) {
            this.drafts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft event_id.
         * @member {number} event_id
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.event_id = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft event_stage_id.
         * @member {number} event_stage_id
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.event_stage_id = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft team_id_0.
         * @member {number} team_id_0
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.team_id_0 = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft team_id_1.
         * @member {number} team_id_1
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.team_id_1 = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft maps_count.
         * @member {number} maps_count
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.maps_count = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft maps_current.
         * @member {number} maps_current
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.maps_current = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft team_id_start.
         * @member {number} team_id_start
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.team_id_start = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft team_id_veto1.
         * @member {number} team_id_veto1
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.team_id_veto1 = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft team_id_pickn.
         * @member {number} team_id_pickn
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.team_id_pickn = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentMatchDraft drafts.
         * @member {Array.<CDataGCCStrike15_v2_TournamentMatchDraft.IEntry>} drafts
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.drafts = $util.emptyArray;
    
        /**
         * Creates a new CDataGCCStrike15_v2_TournamentMatchDraft instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentMatchDraft=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_TournamentMatchDraft} CDataGCCStrike15_v2_TournamentMatchDraft instance
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.create = function create(properties) {
            return new CDataGCCStrike15_v2_TournamentMatchDraft(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentMatchDraft message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentMatchDraft.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentMatchDraft} message CDataGCCStrike15_v2_TournamentMatchDraft message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.event_id);
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.event_stage_id);
            if (message.team_id_0 != null && message.hasOwnProperty("team_id_0"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.team_id_0);
            if (message.team_id_1 != null && message.hasOwnProperty("team_id_1"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.team_id_1);
            if (message.maps_count != null && message.hasOwnProperty("maps_count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maps_count);
            if (message.maps_current != null && message.hasOwnProperty("maps_current"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.maps_current);
            if (message.team_id_start != null && message.hasOwnProperty("team_id_start"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.team_id_start);
            if (message.team_id_veto1 != null && message.hasOwnProperty("team_id_veto1"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.team_id_veto1);
            if (message.team_id_pickn != null && message.hasOwnProperty("team_id_pickn"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.team_id_pickn);
            if (message.drafts != null && message.drafts.length)
                for (var i = 0; i < message.drafts.length; ++i)
                    $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry.encode(message.drafts[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentMatchDraft message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentMatchDraft.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentMatchDraft} message CDataGCCStrike15_v2_TournamentMatchDraft message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentMatchDraft message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_TournamentMatchDraft} CDataGCCStrike15_v2_TournamentMatchDraft
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentMatchDraft();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event_id = reader.int32();
                    break;
                case 2:
                    message.event_stage_id = reader.int32();
                    break;
                case 3:
                    message.team_id_0 = reader.int32();
                    break;
                case 4:
                    message.team_id_1 = reader.int32();
                    break;
                case 5:
                    message.maps_count = reader.int32();
                    break;
                case 6:
                    message.maps_current = reader.int32();
                    break;
                case 7:
                    message.team_id_start = reader.int32();
                    break;
                case 8:
                    message.team_id_veto1 = reader.int32();
                    break;
                case 9:
                    message.team_id_pickn = reader.int32();
                    break;
                case 10:
                    if (!(message.drafts && message.drafts.length))
                        message.drafts = [];
                    message.drafts.push($root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentMatchDraft message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_TournamentMatchDraft} CDataGCCStrike15_v2_TournamentMatchDraft
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_TournamentMatchDraft message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                if (!$util.isInteger(message.event_id))
                    return "event_id: integer expected";
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                if (!$util.isInteger(message.event_stage_id))
                    return "event_stage_id: integer expected";
            if (message.team_id_0 != null && message.hasOwnProperty("team_id_0"))
                if (!$util.isInteger(message.team_id_0))
                    return "team_id_0: integer expected";
            if (message.team_id_1 != null && message.hasOwnProperty("team_id_1"))
                if (!$util.isInteger(message.team_id_1))
                    return "team_id_1: integer expected";
            if (message.maps_count != null && message.hasOwnProperty("maps_count"))
                if (!$util.isInteger(message.maps_count))
                    return "maps_count: integer expected";
            if (message.maps_current != null && message.hasOwnProperty("maps_current"))
                if (!$util.isInteger(message.maps_current))
                    return "maps_current: integer expected";
            if (message.team_id_start != null && message.hasOwnProperty("team_id_start"))
                if (!$util.isInteger(message.team_id_start))
                    return "team_id_start: integer expected";
            if (message.team_id_veto1 != null && message.hasOwnProperty("team_id_veto1"))
                if (!$util.isInteger(message.team_id_veto1))
                    return "team_id_veto1: integer expected";
            if (message.team_id_pickn != null && message.hasOwnProperty("team_id_pickn"))
                if (!$util.isInteger(message.team_id_pickn))
                    return "team_id_pickn: integer expected";
            if (message.drafts != null && message.hasOwnProperty("drafts")) {
                if (!Array.isArray(message.drafts))
                    return "drafts: array expected";
                for (var i = 0; i < message.drafts.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry.verify(message.drafts[i]);
                    if (error)
                        return "drafts." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_TournamentMatchDraft message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_TournamentMatchDraft} CDataGCCStrike15_v2_TournamentMatchDraft
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_TournamentMatchDraft)
                return object;
            var message = new $root.CDataGCCStrike15_v2_TournamentMatchDraft();
            if (object.event_id != null)
                message.event_id = object.event_id | 0;
            if (object.event_stage_id != null)
                message.event_stage_id = object.event_stage_id | 0;
            if (object.team_id_0 != null)
                message.team_id_0 = object.team_id_0 | 0;
            if (object.team_id_1 != null)
                message.team_id_1 = object.team_id_1 | 0;
            if (object.maps_count != null)
                message.maps_count = object.maps_count | 0;
            if (object.maps_current != null)
                message.maps_current = object.maps_current | 0;
            if (object.team_id_start != null)
                message.team_id_start = object.team_id_start | 0;
            if (object.team_id_veto1 != null)
                message.team_id_veto1 = object.team_id_veto1 | 0;
            if (object.team_id_pickn != null)
                message.team_id_pickn = object.team_id_pickn | 0;
            if (object.drafts) {
                if (!Array.isArray(object.drafts))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentMatchDraft.drafts: array expected");
                message.drafts = [];
                for (var i = 0; i < object.drafts.length; ++i) {
                    if (typeof object.drafts[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentMatchDraft.drafts: object expected");
                    message.drafts[i] = $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry.fromObject(object.drafts[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_TournamentMatchDraft message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @static
         * @param {CDataGCCStrike15_v2_TournamentMatchDraft} message CDataGCCStrike15_v2_TournamentMatchDraft
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.drafts = [];
            if (options.defaults) {
                object.event_id = 0;
                object.event_stage_id = 0;
                object.team_id_0 = 0;
                object.team_id_1 = 0;
                object.maps_count = 0;
                object.maps_current = 0;
                object.team_id_start = 0;
                object.team_id_veto1 = 0;
                object.team_id_pickn = 0;
            }
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                object.event_id = message.event_id;
            if (message.event_stage_id != null && message.hasOwnProperty("event_stage_id"))
                object.event_stage_id = message.event_stage_id;
            if (message.team_id_0 != null && message.hasOwnProperty("team_id_0"))
                object.team_id_0 = message.team_id_0;
            if (message.team_id_1 != null && message.hasOwnProperty("team_id_1"))
                object.team_id_1 = message.team_id_1;
            if (message.maps_count != null && message.hasOwnProperty("maps_count"))
                object.maps_count = message.maps_count;
            if (message.maps_current != null && message.hasOwnProperty("maps_current"))
                object.maps_current = message.maps_current;
            if (message.team_id_start != null && message.hasOwnProperty("team_id_start"))
                object.team_id_start = message.team_id_start;
            if (message.team_id_veto1 != null && message.hasOwnProperty("team_id_veto1"))
                object.team_id_veto1 = message.team_id_veto1;
            if (message.team_id_pickn != null && message.hasOwnProperty("team_id_pickn"))
                object.team_id_pickn = message.team_id_pickn;
            if (message.drafts && message.drafts.length) {
                object.drafts = [];
                for (var j = 0; j < message.drafts.length; ++j)
                    object.drafts[j] = $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry.toObject(message.drafts[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_TournamentMatchDraft to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_TournamentMatchDraft.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CDataGCCStrike15_v2_TournamentMatchDraft.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
             * @interface IEntry
             * @property {number|null} [mapid] Entry mapid
             * @property {number|null} [team_id_ct] Entry team_id_ct
             */
    
            /**
             * Constructs a new Entry.
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {CDataGCCStrike15_v2_TournamentMatchDraft.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry mapid.
             * @member {number} mapid
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @instance
             */
            Entry.prototype.mapid = 0;
    
            /**
             * Entry team_id_ct.
             * @member {number} team_id_ct
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @instance
             */
            Entry.prototype.team_id_ct = 0;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {CDataGCCStrike15_v2_TournamentMatchDraft.IEntry=} [properties] Properties to set
             * @returns {CDataGCCStrike15_v2_TournamentMatchDraft.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentMatchDraft.Entry.verify|verify} messages.
             * @function encode
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {CDataGCCStrike15_v2_TournamentMatchDraft.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mapid != null && message.hasOwnProperty("mapid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mapid);
                if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.team_id_ct);
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentMatchDraft.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {CDataGCCStrike15_v2_TournamentMatchDraft.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CDataGCCStrike15_v2_TournamentMatchDraft.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.mapid = reader.int32();
                        break;
                    case 2:
                        message.team_id_ct = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CDataGCCStrike15_v2_TournamentMatchDraft.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mapid != null && message.hasOwnProperty("mapid"))
                    if (!$util.isInteger(message.mapid))
                        return "mapid: integer expected";
                if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                    if (!$util.isInteger(message.team_id_ct))
                        return "team_id_ct: integer expected";
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CDataGCCStrike15_v2_TournamentMatchDraft.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
                    return object;
                var message = new $root.CDataGCCStrike15_v2_TournamentMatchDraft.Entry();
                if (object.mapid != null)
                    message.mapid = object.mapid | 0;
                if (object.team_id_ct != null)
                    message.team_id_ct = object.team_id_ct | 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @static
             * @param {CDataGCCStrike15_v2_TournamentMatchDraft.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mapid = 0;
                    object.team_id_ct = 0;
                }
                if (message.mapid != null && message.hasOwnProperty("mapid"))
                    object.mapid = message.mapid;
                if (message.team_id_ct != null && message.hasOwnProperty("team_id_ct"))
                    object.team_id_ct = message.team_id_ct;
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof CDataGCCStrike15_v2_TournamentMatchDraft.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        return CDataGCCStrike15_v2_TournamentMatchDraft;
    })();
    
    $root.CPreMatchInfoData = (function() {
    
        /**
         * Properties of a CPreMatchInfoData.
         * @exports ICPreMatchInfoData
         * @interface ICPreMatchInfoData
         * @property {number|null} [predictions_pct] CPreMatchInfoData predictions_pct
         * @property {ICDataGCCStrike15_v2_TournamentMatchDraft|null} [draft] CPreMatchInfoData draft
         * @property {Array.<CPreMatchInfoData.ITeamStats>|null} [stats] CPreMatchInfoData stats
         * @property {Array.<number>|null} [wins] CPreMatchInfoData wins
         */
    
        /**
         * Constructs a new CPreMatchInfoData.
         * @exports CPreMatchInfoData
         * @classdesc Represents a CPreMatchInfoData.
         * @implements ICPreMatchInfoData
         * @constructor
         * @param {ICPreMatchInfoData=} [properties] Properties to set
         */
        function CPreMatchInfoData(properties) {
            this.stats = [];
            this.wins = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CPreMatchInfoData predictions_pct.
         * @member {number} predictions_pct
         * @memberof CPreMatchInfoData
         * @instance
         */
        CPreMatchInfoData.prototype.predictions_pct = 0;
    
        /**
         * CPreMatchInfoData draft.
         * @member {ICDataGCCStrike15_v2_TournamentMatchDraft|null|undefined} draft
         * @memberof CPreMatchInfoData
         * @instance
         */
        CPreMatchInfoData.prototype.draft = null;
    
        /**
         * CPreMatchInfoData stats.
         * @member {Array.<CPreMatchInfoData.ITeamStats>} stats
         * @memberof CPreMatchInfoData
         * @instance
         */
        CPreMatchInfoData.prototype.stats = $util.emptyArray;
    
        /**
         * CPreMatchInfoData wins.
         * @member {Array.<number>} wins
         * @memberof CPreMatchInfoData
         * @instance
         */
        CPreMatchInfoData.prototype.wins = $util.emptyArray;
    
        /**
         * Creates a new CPreMatchInfoData instance using the specified properties.
         * @function create
         * @memberof CPreMatchInfoData
         * @static
         * @param {ICPreMatchInfoData=} [properties] Properties to set
         * @returns {CPreMatchInfoData} CPreMatchInfoData instance
         */
        CPreMatchInfoData.create = function create(properties) {
            return new CPreMatchInfoData(properties);
        };
    
        /**
         * Encodes the specified CPreMatchInfoData message. Does not implicitly {@link CPreMatchInfoData.verify|verify} messages.
         * @function encode
         * @memberof CPreMatchInfoData
         * @static
         * @param {ICPreMatchInfoData} message CPreMatchInfoData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPreMatchInfoData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.predictions_pct != null && message.hasOwnProperty("predictions_pct"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.predictions_pct);
            if (message.draft != null && message.hasOwnProperty("draft"))
                $root.CDataGCCStrike15_v2_TournamentMatchDraft.encode(message.draft, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.stats != null && message.stats.length)
                for (var i = 0; i < message.stats.length; ++i)
                    $root.CPreMatchInfoData.TeamStats.encode(message.stats[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.wins != null && message.wins.length)
                for (var i = 0; i < message.wins.length; ++i)
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.wins[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CPreMatchInfoData message, length delimited. Does not implicitly {@link CPreMatchInfoData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CPreMatchInfoData
         * @static
         * @param {ICPreMatchInfoData} message CPreMatchInfoData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CPreMatchInfoData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CPreMatchInfoData message from the specified reader or buffer.
         * @function decode
         * @memberof CPreMatchInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CPreMatchInfoData} CPreMatchInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPreMatchInfoData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPreMatchInfoData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.predictions_pct = reader.int32();
                    break;
                case 4:
                    message.draft = $root.CDataGCCStrike15_v2_TournamentMatchDraft.decode(reader, reader.uint32());
                    break;
                case 5:
                    if (!(message.stats && message.stats.length))
                        message.stats = [];
                    message.stats.push($root.CPreMatchInfoData.TeamStats.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.wins && message.wins.length))
                        message.wins = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.wins.push(reader.int32());
                    } else
                        message.wins.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CPreMatchInfoData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CPreMatchInfoData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CPreMatchInfoData} CPreMatchInfoData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CPreMatchInfoData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CPreMatchInfoData message.
         * @function verify
         * @memberof CPreMatchInfoData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CPreMatchInfoData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.predictions_pct != null && message.hasOwnProperty("predictions_pct"))
                if (!$util.isInteger(message.predictions_pct))
                    return "predictions_pct: integer expected";
            if (message.draft != null && message.hasOwnProperty("draft")) {
                var error = $root.CDataGCCStrike15_v2_TournamentMatchDraft.verify(message.draft);
                if (error)
                    return "draft." + error;
            }
            if (message.stats != null && message.hasOwnProperty("stats")) {
                if (!Array.isArray(message.stats))
                    return "stats: array expected";
                for (var i = 0; i < message.stats.length; ++i) {
                    var error = $root.CPreMatchInfoData.TeamStats.verify(message.stats[i]);
                    if (error)
                        return "stats." + error;
                }
            }
            if (message.wins != null && message.hasOwnProperty("wins")) {
                if (!Array.isArray(message.wins))
                    return "wins: array expected";
                for (var i = 0; i < message.wins.length; ++i)
                    if (!$util.isInteger(message.wins[i]))
                        return "wins: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CPreMatchInfoData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CPreMatchInfoData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CPreMatchInfoData} CPreMatchInfoData
         */
        CPreMatchInfoData.fromObject = function fromObject(object) {
            if (object instanceof $root.CPreMatchInfoData)
                return object;
            var message = new $root.CPreMatchInfoData();
            if (object.predictions_pct != null)
                message.predictions_pct = object.predictions_pct | 0;
            if (object.draft != null) {
                if (typeof object.draft !== "object")
                    throw TypeError(".CPreMatchInfoData.draft: object expected");
                message.draft = $root.CDataGCCStrike15_v2_TournamentMatchDraft.fromObject(object.draft);
            }
            if (object.stats) {
                if (!Array.isArray(object.stats))
                    throw TypeError(".CPreMatchInfoData.stats: array expected");
                message.stats = [];
                for (var i = 0; i < object.stats.length; ++i) {
                    if (typeof object.stats[i] !== "object")
                        throw TypeError(".CPreMatchInfoData.stats: object expected");
                    message.stats[i] = $root.CPreMatchInfoData.TeamStats.fromObject(object.stats[i]);
                }
            }
            if (object.wins) {
                if (!Array.isArray(object.wins))
                    throw TypeError(".CPreMatchInfoData.wins: array expected");
                message.wins = [];
                for (var i = 0; i < object.wins.length; ++i)
                    message.wins[i] = object.wins[i] | 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CPreMatchInfoData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CPreMatchInfoData
         * @static
         * @param {CPreMatchInfoData} message CPreMatchInfoData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CPreMatchInfoData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.stats = [];
                object.wins = [];
            }
            if (options.defaults) {
                object.predictions_pct = 0;
                object.draft = null;
            }
            if (message.predictions_pct != null && message.hasOwnProperty("predictions_pct"))
                object.predictions_pct = message.predictions_pct;
            if (message.draft != null && message.hasOwnProperty("draft"))
                object.draft = $root.CDataGCCStrike15_v2_TournamentMatchDraft.toObject(message.draft, options);
            if (message.stats && message.stats.length) {
                object.stats = [];
                for (var j = 0; j < message.stats.length; ++j)
                    object.stats[j] = $root.CPreMatchInfoData.TeamStats.toObject(message.stats[j], options);
            }
            if (message.wins && message.wins.length) {
                object.wins = [];
                for (var j = 0; j < message.wins.length; ++j)
                    object.wins[j] = message.wins[j];
            }
            return object;
        };
    
        /**
         * Converts this CPreMatchInfoData to JSON.
         * @function toJSON
         * @memberof CPreMatchInfoData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CPreMatchInfoData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CPreMatchInfoData.TeamStats = (function() {
    
            /**
             * Properties of a TeamStats.
             * @memberof CPreMatchInfoData
             * @interface ITeamStats
             * @property {number|null} [match_info_idxtxt] TeamStats match_info_idxtxt
             * @property {string|null} [match_info_txt] TeamStats match_info_txt
             * @property {Array.<string>|null} [match_info_teams] TeamStats match_info_teams
             */
    
            /**
             * Constructs a new TeamStats.
             * @memberof CPreMatchInfoData
             * @classdesc Represents a TeamStats.
             * @implements ITeamStats
             * @constructor
             * @param {CPreMatchInfoData.ITeamStats=} [properties] Properties to set
             */
            function TeamStats(properties) {
                this.match_info_teams = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * TeamStats match_info_idxtxt.
             * @member {number} match_info_idxtxt
             * @memberof CPreMatchInfoData.TeamStats
             * @instance
             */
            TeamStats.prototype.match_info_idxtxt = 0;
    
            /**
             * TeamStats match_info_txt.
             * @member {string} match_info_txt
             * @memberof CPreMatchInfoData.TeamStats
             * @instance
             */
            TeamStats.prototype.match_info_txt = "";
    
            /**
             * TeamStats match_info_teams.
             * @member {Array.<string>} match_info_teams
             * @memberof CPreMatchInfoData.TeamStats
             * @instance
             */
            TeamStats.prototype.match_info_teams = $util.emptyArray;
    
            /**
             * Creates a new TeamStats instance using the specified properties.
             * @function create
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {CPreMatchInfoData.ITeamStats=} [properties] Properties to set
             * @returns {CPreMatchInfoData.TeamStats} TeamStats instance
             */
            TeamStats.create = function create(properties) {
                return new TeamStats(properties);
            };
    
            /**
             * Encodes the specified TeamStats message. Does not implicitly {@link CPreMatchInfoData.TeamStats.verify|verify} messages.
             * @function encode
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {CPreMatchInfoData.ITeamStats} message TeamStats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamStats.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.match_info_idxtxt != null && message.hasOwnProperty("match_info_idxtxt"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.match_info_idxtxt);
                if (message.match_info_txt != null && message.hasOwnProperty("match_info_txt"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.match_info_txt);
                if (message.match_info_teams != null && message.match_info_teams.length)
                    for (var i = 0; i < message.match_info_teams.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.match_info_teams[i]);
                return writer;
            };
    
            /**
             * Encodes the specified TeamStats message, length delimited. Does not implicitly {@link CPreMatchInfoData.TeamStats.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {CPreMatchInfoData.ITeamStats} message TeamStats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TeamStats.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a TeamStats message from the specified reader or buffer.
             * @function decode
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CPreMatchInfoData.TeamStats} TeamStats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamStats.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CPreMatchInfoData.TeamStats();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.match_info_idxtxt = reader.int32();
                        break;
                    case 2:
                        message.match_info_txt = reader.string();
                        break;
                    case 3:
                        if (!(message.match_info_teams && message.match_info_teams.length))
                            message.match_info_teams = [];
                        message.match_info_teams.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a TeamStats message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CPreMatchInfoData.TeamStats} TeamStats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TeamStats.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a TeamStats message.
             * @function verify
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TeamStats.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.match_info_idxtxt != null && message.hasOwnProperty("match_info_idxtxt"))
                    if (!$util.isInteger(message.match_info_idxtxt))
                        return "match_info_idxtxt: integer expected";
                if (message.match_info_txt != null && message.hasOwnProperty("match_info_txt"))
                    if (!$util.isString(message.match_info_txt))
                        return "match_info_txt: string expected";
                if (message.match_info_teams != null && message.hasOwnProperty("match_info_teams")) {
                    if (!Array.isArray(message.match_info_teams))
                        return "match_info_teams: array expected";
                    for (var i = 0; i < message.match_info_teams.length; ++i)
                        if (!$util.isString(message.match_info_teams[i]))
                            return "match_info_teams: string[] expected";
                }
                return null;
            };
    
            /**
             * Creates a TeamStats message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CPreMatchInfoData.TeamStats} TeamStats
             */
            TeamStats.fromObject = function fromObject(object) {
                if (object instanceof $root.CPreMatchInfoData.TeamStats)
                    return object;
                var message = new $root.CPreMatchInfoData.TeamStats();
                if (object.match_info_idxtxt != null)
                    message.match_info_idxtxt = object.match_info_idxtxt | 0;
                if (object.match_info_txt != null)
                    message.match_info_txt = String(object.match_info_txt);
                if (object.match_info_teams) {
                    if (!Array.isArray(object.match_info_teams))
                        throw TypeError(".CPreMatchInfoData.TeamStats.match_info_teams: array expected");
                    message.match_info_teams = [];
                    for (var i = 0; i < object.match_info_teams.length; ++i)
                        message.match_info_teams[i] = String(object.match_info_teams[i]);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a TeamStats message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CPreMatchInfoData.TeamStats
             * @static
             * @param {CPreMatchInfoData.TeamStats} message TeamStats
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TeamStats.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.match_info_teams = [];
                if (options.defaults) {
                    object.match_info_idxtxt = 0;
                    object.match_info_txt = "";
                }
                if (message.match_info_idxtxt != null && message.hasOwnProperty("match_info_idxtxt"))
                    object.match_info_idxtxt = message.match_info_idxtxt;
                if (message.match_info_txt != null && message.hasOwnProperty("match_info_txt"))
                    object.match_info_txt = message.match_info_txt;
                if (message.match_info_teams && message.match_info_teams.length) {
                    object.match_info_teams = [];
                    for (var j = 0; j < message.match_info_teams.length; ++j)
                        object.match_info_teams[j] = message.match_info_teams[j];
                }
                return object;
            };
    
            /**
             * Converts this TeamStats to JSON.
             * @function toJSON
             * @memberof CPreMatchInfoData.TeamStats
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TeamStats.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return TeamStats;
        })();
    
        return CPreMatchInfoData;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @property {Array.<number>|null} [account_ids] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve account_ids
         * @property {number|null} [game_type] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve game_type
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve match_id
         * @property {number|null} [server_version] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve server_version
         * @property {number|null} [flags] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve flags
         * @property {Array.<IPlayerRankingInfo>|null} [rankings] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve rankings
         * @property {number|Long|null} [encryption_key] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve encryption_key
         * @property {number|Long|null} [encryption_key_pub] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve encryption_key_pub
         * @property {Array.<number>|null} [party_ids] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve party_ids
         * @property {Array.<IIpAddressMask>|null} [whitelist] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve whitelist
         * @property {number|Long|null} [tv_master_steamid] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_master_steamid
         * @property {ITournamentEvent|null} [tournament_event] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_event
         * @property {Array.<ITournamentTeam>|null} [tournament_teams] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_teams
         * @property {Array.<number>|null} [tournament_casters_account_ids] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_casters_account_ids
         * @property {number|Long|null} [tv_relay_steamid] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_relay_steamid
         * @property {ICPreMatchInfoData|null} [pre_match_data] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve pre_match_data
         * @property {number|null} [rtime32_event_start] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve rtime32_event_start
         * @property {number|null} [tv_control] CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_control
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(properties) {
            this.account_ids = [];
            this.rankings = [];
            this.party_ids = [];
            this.whitelist = [];
            this.tournament_teams = [];
            this.tournament_casters_account_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve account_ids.
         * @member {Array.<number>} account_ids
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.account_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve game_type.
         * @member {number} game_type
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.game_type = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve server_version.
         * @member {number} server_version
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.server_version = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve flags.
         * @member {number} flags
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.flags = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve rankings.
         * @member {Array.<IPlayerRankingInfo>} rankings
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.rankings = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve encryption_key.
         * @member {number|Long} encryption_key
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.encryption_key = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve encryption_key_pub.
         * @member {number|Long} encryption_key_pub
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.encryption_key_pub = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve party_ids.
         * @member {Array.<number>} party_ids
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.party_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve whitelist.
         * @member {Array.<IIpAddressMask>} whitelist
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.whitelist = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_master_steamid.
         * @member {number|Long} tv_master_steamid
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tv_master_steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_event.
         * @member {ITournamentEvent|null|undefined} tournament_event
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tournament_event = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_teams.
         * @member {Array.<ITournamentTeam>} tournament_teams
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tournament_teams = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tournament_casters_account_ids.
         * @member {Array.<number>} tournament_casters_account_ids
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tournament_casters_account_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_relay_steamid.
         * @member {number|Long} tv_relay_steamid
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tv_relay_steamid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve pre_match_data.
         * @member {ICPreMatchInfoData|null|undefined} pre_match_data
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.pre_match_data = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve rtime32_event_start.
         * @member {number} rtime32_event_start
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.rtime32_event_start = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve tv_control.
         * @member {number} tv_control
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.tv_control = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_ids != null && message.account_ids.length)
                for (var i = 0; i < message.account_ids.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_ids[i]);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.game_type);
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.match_id);
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.server_version);
            if (message.rankings != null && message.rankings.length)
                for (var i = 0; i < message.rankings.length; ++i)
                    $root.PlayerRankingInfo.encode(message.rankings[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.encryption_key != null && message.hasOwnProperty("encryption_key"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.encryption_key);
            if (message.encryption_key_pub != null && message.hasOwnProperty("encryption_key_pub"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.encryption_key_pub);
            if (message.party_ids != null && message.party_ids.length)
                for (var i = 0; i < message.party_ids.length; ++i)
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.party_ids[i]);
            if (message.whitelist != null && message.whitelist.length)
                for (var i = 0; i < message.whitelist.length; ++i)
                    $root.IpAddressMask.encode(message.whitelist[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.tv_master_steamid);
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event"))
                $root.TournamentEvent.encode(message.tournament_event, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.tournament_teams != null && message.tournament_teams.length)
                for (var i = 0; i < message.tournament_teams.length; ++i)
                    $root.TournamentTeam.encode(message.tournament_teams[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.tournament_casters_account_ids != null && message.tournament_casters_account_ids.length)
                for (var i = 0; i < message.tournament_casters_account_ids.length; ++i)
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.tournament_casters_account_ids[i]);
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.tv_relay_steamid);
            if (message.pre_match_data != null && message.hasOwnProperty("pre_match_data"))
                $root.CPreMatchInfoData.encode(message.pre_match_data, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.rtime32_event_start);
            if (message.tv_control != null && message.hasOwnProperty("tv_control"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.tv_control);
            if (message.flags != null && message.hasOwnProperty("flags"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.flags);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.account_ids && message.account_ids.length))
                        message.account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.account_ids.push(reader.uint32());
                    } else
                        message.account_ids.push(reader.uint32());
                    break;
                case 2:
                    message.game_type = reader.uint32();
                    break;
                case 3:
                    message.match_id = reader.uint64();
                    break;
                case 4:
                    message.server_version = reader.uint32();
                    break;
                case 18:
                    message.flags = reader.uint32();
                    break;
                case 5:
                    if (!(message.rankings && message.rankings.length))
                        message.rankings = [];
                    message.rankings.push($root.PlayerRankingInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.encryption_key = reader.uint64();
                    break;
                case 7:
                    message.encryption_key_pub = reader.uint64();
                    break;
                case 8:
                    if (!(message.party_ids && message.party_ids.length))
                        message.party_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.party_ids.push(reader.uint32());
                    } else
                        message.party_ids.push(reader.uint32());
                    break;
                case 9:
                    if (!(message.whitelist && message.whitelist.length))
                        message.whitelist = [];
                    message.whitelist.push($root.IpAddressMask.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.tv_master_steamid = reader.uint64();
                    break;
                case 11:
                    message.tournament_event = $root.TournamentEvent.decode(reader, reader.uint32());
                    break;
                case 12:
                    if (!(message.tournament_teams && message.tournament_teams.length))
                        message.tournament_teams = [];
                    message.tournament_teams.push($root.TournamentTeam.decode(reader, reader.uint32()));
                    break;
                case 13:
                    if (!(message.tournament_casters_account_ids && message.tournament_casters_account_ids.length))
                        message.tournament_casters_account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.tournament_casters_account_ids.push(reader.uint32());
                    } else
                        message.tournament_casters_account_ids.push(reader.uint32());
                    break;
                case 14:
                    message.tv_relay_steamid = reader.uint64();
                    break;
                case 15:
                    message.pre_match_data = $root.CPreMatchInfoData.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.rtime32_event_start = reader.uint32();
                    break;
                case 17:
                    message.tv_control = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_ids != null && message.hasOwnProperty("account_ids")) {
                if (!Array.isArray(message.account_ids))
                    return "account_ids: array expected";
                for (var i = 0; i < message.account_ids.length; ++i)
                    if (!$util.isInteger(message.account_ids[i]))
                        return "account_ids: integer[] expected";
            }
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                if (!$util.isInteger(message.server_version))
                    return "server_version: integer expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.rankings != null && message.hasOwnProperty("rankings")) {
                if (!Array.isArray(message.rankings))
                    return "rankings: array expected";
                for (var i = 0; i < message.rankings.length; ++i) {
                    var error = $root.PlayerRankingInfo.verify(message.rankings[i]);
                    if (error)
                        return "rankings." + error;
                }
            }
            if (message.encryption_key != null && message.hasOwnProperty("encryption_key"))
                if (!$util.isInteger(message.encryption_key) && !(message.encryption_key && $util.isInteger(message.encryption_key.low) && $util.isInteger(message.encryption_key.high)))
                    return "encryption_key: integer|Long expected";
            if (message.encryption_key_pub != null && message.hasOwnProperty("encryption_key_pub"))
                if (!$util.isInteger(message.encryption_key_pub) && !(message.encryption_key_pub && $util.isInteger(message.encryption_key_pub.low) && $util.isInteger(message.encryption_key_pub.high)))
                    return "encryption_key_pub: integer|Long expected";
            if (message.party_ids != null && message.hasOwnProperty("party_ids")) {
                if (!Array.isArray(message.party_ids))
                    return "party_ids: array expected";
                for (var i = 0; i < message.party_ids.length; ++i)
                    if (!$util.isInteger(message.party_ids[i]))
                        return "party_ids: integer[] expected";
            }
            if (message.whitelist != null && message.hasOwnProperty("whitelist")) {
                if (!Array.isArray(message.whitelist))
                    return "whitelist: array expected";
                for (var i = 0; i < message.whitelist.length; ++i) {
                    var error = $root.IpAddressMask.verify(message.whitelist[i]);
                    if (error)
                        return "whitelist." + error;
                }
            }
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                if (!$util.isInteger(message.tv_master_steamid) && !(message.tv_master_steamid && $util.isInteger(message.tv_master_steamid.low) && $util.isInteger(message.tv_master_steamid.high)))
                    return "tv_master_steamid: integer|Long expected";
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event")) {
                var error = $root.TournamentEvent.verify(message.tournament_event);
                if (error)
                    return "tournament_event." + error;
            }
            if (message.tournament_teams != null && message.hasOwnProperty("tournament_teams")) {
                if (!Array.isArray(message.tournament_teams))
                    return "tournament_teams: array expected";
                for (var i = 0; i < message.tournament_teams.length; ++i) {
                    var error = $root.TournamentTeam.verify(message.tournament_teams[i]);
                    if (error)
                        return "tournament_teams." + error;
                }
            }
            if (message.tournament_casters_account_ids != null && message.hasOwnProperty("tournament_casters_account_ids")) {
                if (!Array.isArray(message.tournament_casters_account_ids))
                    return "tournament_casters_account_ids: array expected";
                for (var i = 0; i < message.tournament_casters_account_ids.length; ++i)
                    if (!$util.isInteger(message.tournament_casters_account_ids[i]))
                        return "tournament_casters_account_ids: integer[] expected";
            }
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                if (!$util.isInteger(message.tv_relay_steamid) && !(message.tv_relay_steamid && $util.isInteger(message.tv_relay_steamid.low) && $util.isInteger(message.tv_relay_steamid.high)))
                    return "tv_relay_steamid: integer|Long expected";
            if (message.pre_match_data != null && message.hasOwnProperty("pre_match_data")) {
                var error = $root.CPreMatchInfoData.verify(message.pre_match_data);
                if (error)
                    return "pre_match_data." + error;
            }
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                if (!$util.isInteger(message.rtime32_event_start))
                    return "rtime32_event_start: integer expected";
            if (message.tv_control != null && message.hasOwnProperty("tv_control"))
                if (!$util.isInteger(message.tv_control))
                    return "tv_control: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
            if (object.account_ids) {
                if (!Array.isArray(object.account_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.account_ids: array expected");
                message.account_ids = [];
                for (var i = 0; i < object.account_ids.length; ++i)
                    message.account_ids[i] = object.account_ids[i] >>> 0;
            }
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.server_version != null)
                message.server_version = object.server_version >>> 0;
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.rankings) {
                if (!Array.isArray(object.rankings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings: array expected");
                message.rankings = [];
                for (var i = 0; i < object.rankings.length; ++i) {
                    if (typeof object.rankings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.rankings: object expected");
                    message.rankings[i] = $root.PlayerRankingInfo.fromObject(object.rankings[i]);
                }
            }
            if (object.encryption_key != null)
                if ($util.Long)
                    (message.encryption_key = $util.Long.fromValue(object.encryption_key)).unsigned = true;
                else if (typeof object.encryption_key === "string")
                    message.encryption_key = parseInt(object.encryption_key, 10);
                else if (typeof object.encryption_key === "number")
                    message.encryption_key = object.encryption_key;
                else if (typeof object.encryption_key === "object")
                    message.encryption_key = new $util.LongBits(object.encryption_key.low >>> 0, object.encryption_key.high >>> 0).toNumber(true);
            if (object.encryption_key_pub != null)
                if ($util.Long)
                    (message.encryption_key_pub = $util.Long.fromValue(object.encryption_key_pub)).unsigned = true;
                else if (typeof object.encryption_key_pub === "string")
                    message.encryption_key_pub = parseInt(object.encryption_key_pub, 10);
                else if (typeof object.encryption_key_pub === "number")
                    message.encryption_key_pub = object.encryption_key_pub;
                else if (typeof object.encryption_key_pub === "object")
                    message.encryption_key_pub = new $util.LongBits(object.encryption_key_pub.low >>> 0, object.encryption_key_pub.high >>> 0).toNumber(true);
            if (object.party_ids) {
                if (!Array.isArray(object.party_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.party_ids: array expected");
                message.party_ids = [];
                for (var i = 0; i < object.party_ids.length; ++i)
                    message.party_ids[i] = object.party_ids[i] >>> 0;
            }
            if (object.whitelist) {
                if (!Array.isArray(object.whitelist))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist: array expected");
                message.whitelist = [];
                for (var i = 0; i < object.whitelist.length; ++i) {
                    if (typeof object.whitelist[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.whitelist: object expected");
                    message.whitelist[i] = $root.IpAddressMask.fromObject(object.whitelist[i]);
                }
            }
            if (object.tv_master_steamid != null)
                if ($util.Long)
                    (message.tv_master_steamid = $util.Long.fromValue(object.tv_master_steamid)).unsigned = true;
                else if (typeof object.tv_master_steamid === "string")
                    message.tv_master_steamid = parseInt(object.tv_master_steamid, 10);
                else if (typeof object.tv_master_steamid === "number")
                    message.tv_master_steamid = object.tv_master_steamid;
                else if (typeof object.tv_master_steamid === "object")
                    message.tv_master_steamid = new $util.LongBits(object.tv_master_steamid.low >>> 0, object.tv_master_steamid.high >>> 0).toNumber(true);
            if (object.tournament_event != null) {
                if (typeof object.tournament_event !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_event: object expected");
                message.tournament_event = $root.TournamentEvent.fromObject(object.tournament_event);
            }
            if (object.tournament_teams) {
                if (!Array.isArray(object.tournament_teams))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams: array expected");
                message.tournament_teams = [];
                for (var i = 0; i < object.tournament_teams.length; ++i) {
                    if (typeof object.tournament_teams[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_teams: object expected");
                    message.tournament_teams[i] = $root.TournamentTeam.fromObject(object.tournament_teams[i]);
                }
            }
            if (object.tournament_casters_account_ids) {
                if (!Array.isArray(object.tournament_casters_account_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.tournament_casters_account_ids: array expected");
                message.tournament_casters_account_ids = [];
                for (var i = 0; i < object.tournament_casters_account_ids.length; ++i)
                    message.tournament_casters_account_ids[i] = object.tournament_casters_account_ids[i] >>> 0;
            }
            if (object.tv_relay_steamid != null)
                if ($util.Long)
                    (message.tv_relay_steamid = $util.Long.fromValue(object.tv_relay_steamid)).unsigned = true;
                else if (typeof object.tv_relay_steamid === "string")
                    message.tv_relay_steamid = parseInt(object.tv_relay_steamid, 10);
                else if (typeof object.tv_relay_steamid === "number")
                    message.tv_relay_steamid = object.tv_relay_steamid;
                else if (typeof object.tv_relay_steamid === "object")
                    message.tv_relay_steamid = new $util.LongBits(object.tv_relay_steamid.low >>> 0, object.tv_relay_steamid.high >>> 0).toNumber(true);
            if (object.pre_match_data != null) {
                if (typeof object.pre_match_data !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.pre_match_data: object expected");
                message.pre_match_data = $root.CPreMatchInfoData.fromObject(object.pre_match_data);
            }
            if (object.rtime32_event_start != null)
                message.rtime32_event_start = object.rtime32_event_start >>> 0;
            if (object.tv_control != null)
                message.tv_control = object.tv_control >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.account_ids = [];
                object.rankings = [];
                object.party_ids = [];
                object.whitelist = [];
                object.tournament_teams = [];
                object.tournament_casters_account_ids = [];
            }
            if (options.defaults) {
                object.game_type = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                object.server_version = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.encryption_key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.encryption_key = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.encryption_key_pub = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.encryption_key_pub = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tv_master_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tv_master_steamid = options.longs === String ? "0" : 0;
                object.tournament_event = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.tv_relay_steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tv_relay_steamid = options.longs === String ? "0" : 0;
                object.pre_match_data = null;
                object.rtime32_event_start = 0;
                object.tv_control = 0;
                object.flags = 0;
            }
            if (message.account_ids && message.account_ids.length) {
                object.account_ids = [];
                for (var j = 0; j < message.account_ids.length; ++j)
                    object.account_ids[j] = message.account_ids[j];
            }
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                object.server_version = message.server_version;
            if (message.rankings && message.rankings.length) {
                object.rankings = [];
                for (var j = 0; j < message.rankings.length; ++j)
                    object.rankings[j] = $root.PlayerRankingInfo.toObject(message.rankings[j], options);
            }
            if (message.encryption_key != null && message.hasOwnProperty("encryption_key"))
                if (typeof message.encryption_key === "number")
                    object.encryption_key = options.longs === String ? String(message.encryption_key) : message.encryption_key;
                else
                    object.encryption_key = options.longs === String ? $util.Long.prototype.toString.call(message.encryption_key) : options.longs === Number ? new $util.LongBits(message.encryption_key.low >>> 0, message.encryption_key.high >>> 0).toNumber(true) : message.encryption_key;
            if (message.encryption_key_pub != null && message.hasOwnProperty("encryption_key_pub"))
                if (typeof message.encryption_key_pub === "number")
                    object.encryption_key_pub = options.longs === String ? String(message.encryption_key_pub) : message.encryption_key_pub;
                else
                    object.encryption_key_pub = options.longs === String ? $util.Long.prototype.toString.call(message.encryption_key_pub) : options.longs === Number ? new $util.LongBits(message.encryption_key_pub.low >>> 0, message.encryption_key_pub.high >>> 0).toNumber(true) : message.encryption_key_pub;
            if (message.party_ids && message.party_ids.length) {
                object.party_ids = [];
                for (var j = 0; j < message.party_ids.length; ++j)
                    object.party_ids[j] = message.party_ids[j];
            }
            if (message.whitelist && message.whitelist.length) {
                object.whitelist = [];
                for (var j = 0; j < message.whitelist.length; ++j)
                    object.whitelist[j] = $root.IpAddressMask.toObject(message.whitelist[j], options);
            }
            if (message.tv_master_steamid != null && message.hasOwnProperty("tv_master_steamid"))
                if (typeof message.tv_master_steamid === "number")
                    object.tv_master_steamid = options.longs === String ? String(message.tv_master_steamid) : message.tv_master_steamid;
                else
                    object.tv_master_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.tv_master_steamid) : options.longs === Number ? new $util.LongBits(message.tv_master_steamid.low >>> 0, message.tv_master_steamid.high >>> 0).toNumber(true) : message.tv_master_steamid;
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event"))
                object.tournament_event = $root.TournamentEvent.toObject(message.tournament_event, options);
            if (message.tournament_teams && message.tournament_teams.length) {
                object.tournament_teams = [];
                for (var j = 0; j < message.tournament_teams.length; ++j)
                    object.tournament_teams[j] = $root.TournamentTeam.toObject(message.tournament_teams[j], options);
            }
            if (message.tournament_casters_account_ids && message.tournament_casters_account_ids.length) {
                object.tournament_casters_account_ids = [];
                for (var j = 0; j < message.tournament_casters_account_ids.length; ++j)
                    object.tournament_casters_account_ids[j] = message.tournament_casters_account_ids[j];
            }
            if (message.tv_relay_steamid != null && message.hasOwnProperty("tv_relay_steamid"))
                if (typeof message.tv_relay_steamid === "number")
                    object.tv_relay_steamid = options.longs === String ? String(message.tv_relay_steamid) : message.tv_relay_steamid;
                else
                    object.tv_relay_steamid = options.longs === String ? $util.Long.prototype.toString.call(message.tv_relay_steamid) : options.longs === Number ? new $util.LongBits(message.tv_relay_steamid.low >>> 0, message.tv_relay_steamid.high >>> 0).toNumber(true) : message.tv_relay_steamid;
            if (message.pre_match_data != null && message.hasOwnProperty("pre_match_data"))
                object.pre_match_data = $root.CPreMatchInfoData.toObject(message.pre_match_data, options);
            if (message.rtime32_event_start != null && message.hasOwnProperty("rtime32_event_start"))
                object.rtime32_event_start = message.rtime32_event_start;
            if (message.tv_control != null && message.hasOwnProperty("tv_control"))
                object.tv_control = message.tv_control;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.
         * @exports ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @interface ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @property {number|Long|null} [reservationid] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reservationid
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null} [reservation] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reservation
         * @property {string|null} [map] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse map
         * @property {number|Long|null} [gc_reservation_sent] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse gc_reservation_sent
         * @property {number|null} [server_version] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse server_version
         * @property {IServerHltvInfo|null} [tv_info] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse tv_info
         * @property {Array.<number>|null} [reward_player_accounts] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_player_accounts
         * @property {Array.<number>|null} [idle_player_accounts] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse idle_player_accounts
         * @property {number|null} [reward_item_attr_def_idx] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_def_idx
         * @property {number|null} [reward_item_attr_value] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_value
         * @property {number|null} [reward_item_attr_reward_idx] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_reward_idx
         * @property {number|null} [reward_drop_list] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_drop_list
         * @property {string|null} [tournament_tag] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse tournament_tag
         * @property {number|null} [legacy_steamdatagram_port] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse legacy_steamdatagram_port
         * @property {number|null} [steamdatagram_routing] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse steamdatagram_routing
         * @property {number|null} [test_token] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse test_token
         * @property {number|null} [flags] CMsgGCCStrike15_v2_MatchmakingServerReservationResponse flags
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.
         * @exports CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.
         * @implements ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(properties) {
            this.reward_player_accounts = [];
            this.idle_player_accounts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reservationid.
         * @member {number|Long} reservationid
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reservationid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reservation.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null|undefined} reservation
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reservation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse map.
         * @member {string} map
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.map = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse gc_reservation_sent.
         * @member {number|Long} gc_reservation_sent
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.gc_reservation_sent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse server_version.
         * @member {number} server_version
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.server_version = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse tv_info.
         * @member {IServerHltvInfo|null|undefined} tv_info
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.tv_info = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_player_accounts.
         * @member {Array.<number>} reward_player_accounts
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reward_player_accounts = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse idle_player_accounts.
         * @member {Array.<number>} idle_player_accounts
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.idle_player_accounts = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_def_idx.
         * @member {number} reward_item_attr_def_idx
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reward_item_attr_def_idx = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_value.
         * @member {number} reward_item_attr_value
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reward_item_attr_value = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_item_attr_reward_idx.
         * @member {number} reward_item_attr_reward_idx
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reward_item_attr_reward_idx = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse reward_drop_list.
         * @member {number} reward_drop_list
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.reward_drop_list = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse tournament_tag.
         * @member {string} tournament_tag
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.tournament_tag = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse legacy_steamdatagram_port.
         * @member {number} legacy_steamdatagram_port
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.legacy_steamdatagram_port = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse steamdatagram_routing.
         * @member {number} steamdatagram_routing
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.steamdatagram_routing = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse test_token.
         * @member {number} test_token
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.test_token = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerReservationResponse flags.
         * @member {number} flags
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.flags = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerReservationResponse} CMsgGCCStrike15_v2_MatchmakingServerReservationResponse instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse} message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.reservationid);
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode(message.reservation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.map != null && message.hasOwnProperty("map"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.map);
            if (message.gc_reservation_sent != null && message.hasOwnProperty("gc_reservation_sent"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gc_reservation_sent);
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.server_version);
            if (message.tv_info != null && message.hasOwnProperty("tv_info"))
                $root.ServerHltvInfo.encode(message.tv_info, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.reward_player_accounts != null && message.reward_player_accounts.length)
                for (var i = 0; i < message.reward_player_accounts.length; ++i)
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.reward_player_accounts[i]);
            if (message.idle_player_accounts != null && message.idle_player_accounts.length)
                for (var i = 0; i < message.idle_player_accounts.length; ++i)
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.idle_player_accounts[i]);
            if (message.reward_item_attr_def_idx != null && message.hasOwnProperty("reward_item_attr_def_idx"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.reward_item_attr_def_idx);
            if (message.reward_item_attr_value != null && message.hasOwnProperty("reward_item_attr_value"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.reward_item_attr_value);
            if (message.reward_item_attr_reward_idx != null && message.hasOwnProperty("reward_item_attr_reward_idx"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.reward_item_attr_reward_idx);
            if (message.reward_drop_list != null && message.hasOwnProperty("reward_drop_list"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.reward_drop_list);
            if (message.tournament_tag != null && message.hasOwnProperty("tournament_tag"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.tournament_tag);
            if (message.legacy_steamdatagram_port != null && message.hasOwnProperty("legacy_steamdatagram_port"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.legacy_steamdatagram_port);
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.test_token);
            if (message.flags != null && message.hasOwnProperty("flags"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.flags);
            if (message.steamdatagram_routing != null && message.hasOwnProperty("steamdatagram_routing"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.steamdatagram_routing);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse} message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerReservationResponse} CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reservationid = reader.uint64();
                    break;
                case 2:
                    message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.map = reader.string();
                    break;
                case 4:
                    message.gc_reservation_sent = reader.uint64();
                    break;
                case 5:
                    message.server_version = reader.uint32();
                    break;
                case 6:
                    message.tv_info = $root.ServerHltvInfo.decode(reader, reader.uint32());
                    break;
                case 7:
                    if (!(message.reward_player_accounts && message.reward_player_accounts.length))
                        message.reward_player_accounts = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.reward_player_accounts.push(reader.uint32());
                    } else
                        message.reward_player_accounts.push(reader.uint32());
                    break;
                case 8:
                    if (!(message.idle_player_accounts && message.idle_player_accounts.length))
                        message.idle_player_accounts = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.idle_player_accounts.push(reader.uint32());
                    } else
                        message.idle_player_accounts.push(reader.uint32());
                    break;
                case 9:
                    message.reward_item_attr_def_idx = reader.uint32();
                    break;
                case 10:
                    message.reward_item_attr_value = reader.uint32();
                    break;
                case 11:
                    message.reward_item_attr_reward_idx = reader.uint32();
                    break;
                case 12:
                    message.reward_drop_list = reader.uint32();
                    break;
                case 13:
                    message.tournament_tag = reader.string();
                    break;
                case 14:
                    message.legacy_steamdatagram_port = reader.uint32();
                    break;
                case 17:
                    message.steamdatagram_routing = reader.uint32();
                    break;
                case 15:
                    message.test_token = reader.fixed32();
                    break;
                case 16:
                    message.flags = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerReservationResponse} CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (!$util.isInteger(message.reservationid) && !(message.reservationid && $util.isInteger(message.reservationid.low) && $util.isInteger(message.reservationid.high)))
                    return "reservationid: integer|Long expected";
            if (message.reservation != null && message.hasOwnProperty("reservation")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify(message.reservation);
                if (error)
                    return "reservation." + error;
            }
            if (message.map != null && message.hasOwnProperty("map"))
                if (!$util.isString(message.map))
                    return "map: string expected";
            if (message.gc_reservation_sent != null && message.hasOwnProperty("gc_reservation_sent"))
                if (!$util.isInteger(message.gc_reservation_sent) && !(message.gc_reservation_sent && $util.isInteger(message.gc_reservation_sent.low) && $util.isInteger(message.gc_reservation_sent.high)))
                    return "gc_reservation_sent: integer|Long expected";
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                if (!$util.isInteger(message.server_version))
                    return "server_version: integer expected";
            if (message.tv_info != null && message.hasOwnProperty("tv_info")) {
                var error = $root.ServerHltvInfo.verify(message.tv_info);
                if (error)
                    return "tv_info." + error;
            }
            if (message.reward_player_accounts != null && message.hasOwnProperty("reward_player_accounts")) {
                if (!Array.isArray(message.reward_player_accounts))
                    return "reward_player_accounts: array expected";
                for (var i = 0; i < message.reward_player_accounts.length; ++i)
                    if (!$util.isInteger(message.reward_player_accounts[i]))
                        return "reward_player_accounts: integer[] expected";
            }
            if (message.idle_player_accounts != null && message.hasOwnProperty("idle_player_accounts")) {
                if (!Array.isArray(message.idle_player_accounts))
                    return "idle_player_accounts: array expected";
                for (var i = 0; i < message.idle_player_accounts.length; ++i)
                    if (!$util.isInteger(message.idle_player_accounts[i]))
                        return "idle_player_accounts: integer[] expected";
            }
            if (message.reward_item_attr_def_idx != null && message.hasOwnProperty("reward_item_attr_def_idx"))
                if (!$util.isInteger(message.reward_item_attr_def_idx))
                    return "reward_item_attr_def_idx: integer expected";
            if (message.reward_item_attr_value != null && message.hasOwnProperty("reward_item_attr_value"))
                if (!$util.isInteger(message.reward_item_attr_value))
                    return "reward_item_attr_value: integer expected";
            if (message.reward_item_attr_reward_idx != null && message.hasOwnProperty("reward_item_attr_reward_idx"))
                if (!$util.isInteger(message.reward_item_attr_reward_idx))
                    return "reward_item_attr_reward_idx: integer expected";
            if (message.reward_drop_list != null && message.hasOwnProperty("reward_drop_list"))
                if (!$util.isInteger(message.reward_drop_list))
                    return "reward_drop_list: integer expected";
            if (message.tournament_tag != null && message.hasOwnProperty("tournament_tag"))
                if (!$util.isString(message.tournament_tag))
                    return "tournament_tag: string expected";
            if (message.legacy_steamdatagram_port != null && message.hasOwnProperty("legacy_steamdatagram_port"))
                if (!$util.isInteger(message.legacy_steamdatagram_port))
                    return "legacy_steamdatagram_port: integer expected";
            if (message.steamdatagram_routing != null && message.hasOwnProperty("steamdatagram_routing"))
                if (!$util.isInteger(message.steamdatagram_routing))
                    return "steamdatagram_routing: integer expected";
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                if (!$util.isInteger(message.test_token))
                    return "test_token: integer expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerReservationResponse} CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
            if (object.reservationid != null)
                if ($util.Long)
                    (message.reservationid = $util.Long.fromValue(object.reservationid)).unsigned = true;
                else if (typeof object.reservationid === "string")
                    message.reservationid = parseInt(object.reservationid, 10);
                else if (typeof object.reservationid === "number")
                    message.reservationid = object.reservationid;
                else if (typeof object.reservationid === "object")
                    message.reservationid = new $util.LongBits(object.reservationid.low >>> 0, object.reservationid.high >>> 0).toNumber(true);
            if (object.reservation != null) {
                if (typeof object.reservation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reservation: object expected");
                message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject(object.reservation);
            }
            if (object.map != null)
                message.map = String(object.map);
            if (object.gc_reservation_sent != null)
                if ($util.Long)
                    (message.gc_reservation_sent = $util.Long.fromValue(object.gc_reservation_sent)).unsigned = true;
                else if (typeof object.gc_reservation_sent === "string")
                    message.gc_reservation_sent = parseInt(object.gc_reservation_sent, 10);
                else if (typeof object.gc_reservation_sent === "number")
                    message.gc_reservation_sent = object.gc_reservation_sent;
                else if (typeof object.gc_reservation_sent === "object")
                    message.gc_reservation_sent = new $util.LongBits(object.gc_reservation_sent.low >>> 0, object.gc_reservation_sent.high >>> 0).toNumber(true);
            if (object.server_version != null)
                message.server_version = object.server_version >>> 0;
            if (object.tv_info != null) {
                if (typeof object.tv_info !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tv_info: object expected");
                message.tv_info = $root.ServerHltvInfo.fromObject(object.tv_info);
            }
            if (object.reward_player_accounts) {
                if (!Array.isArray(object.reward_player_accounts))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.reward_player_accounts: array expected");
                message.reward_player_accounts = [];
                for (var i = 0; i < object.reward_player_accounts.length; ++i)
                    message.reward_player_accounts[i] = object.reward_player_accounts[i] >>> 0;
            }
            if (object.idle_player_accounts) {
                if (!Array.isArray(object.idle_player_accounts))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.idle_player_accounts: array expected");
                message.idle_player_accounts = [];
                for (var i = 0; i < object.idle_player_accounts.length; ++i)
                    message.idle_player_accounts[i] = object.idle_player_accounts[i] >>> 0;
            }
            if (object.reward_item_attr_def_idx != null)
                message.reward_item_attr_def_idx = object.reward_item_attr_def_idx >>> 0;
            if (object.reward_item_attr_value != null)
                message.reward_item_attr_value = object.reward_item_attr_value >>> 0;
            if (object.reward_item_attr_reward_idx != null)
                message.reward_item_attr_reward_idx = object.reward_item_attr_reward_idx >>> 0;
            if (object.reward_drop_list != null)
                message.reward_drop_list = object.reward_drop_list >>> 0;
            if (object.tournament_tag != null)
                message.tournament_tag = String(object.tournament_tag);
            if (object.legacy_steamdatagram_port != null)
                message.legacy_steamdatagram_port = object.legacy_steamdatagram_port >>> 0;
            if (object.steamdatagram_routing != null)
                message.steamdatagram_routing = object.steamdatagram_routing >>> 0;
            if (object.test_token != null)
                message.test_token = object.test_token >>> 0;
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingServerReservationResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingServerReservationResponse} message CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.reward_player_accounts = [];
                object.idle_player_accounts = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.reservationid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.reservationid = options.longs === String ? "0" : 0;
                object.reservation = null;
                object.map = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.gc_reservation_sent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gc_reservation_sent = options.longs === String ? "0" : 0;
                object.server_version = 0;
                object.tv_info = null;
                object.reward_item_attr_def_idx = 0;
                object.reward_item_attr_value = 0;
                object.reward_item_attr_reward_idx = 0;
                object.reward_drop_list = 0;
                object.tournament_tag = "";
                object.legacy_steamdatagram_port = 0;
                object.test_token = 0;
                object.flags = 0;
                object.steamdatagram_routing = 0;
            }
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (typeof message.reservationid === "number")
                    object.reservationid = options.longs === String ? String(message.reservationid) : message.reservationid;
                else
                    object.reservationid = options.longs === String ? $util.Long.prototype.toString.call(message.reservationid) : options.longs === Number ? new $util.LongBits(message.reservationid.low >>> 0, message.reservationid.high >>> 0).toNumber(true) : message.reservationid;
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                object.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject(message.reservation, options);
            if (message.map != null && message.hasOwnProperty("map"))
                object.map = message.map;
            if (message.gc_reservation_sent != null && message.hasOwnProperty("gc_reservation_sent"))
                if (typeof message.gc_reservation_sent === "number")
                    object.gc_reservation_sent = options.longs === String ? String(message.gc_reservation_sent) : message.gc_reservation_sent;
                else
                    object.gc_reservation_sent = options.longs === String ? $util.Long.prototype.toString.call(message.gc_reservation_sent) : options.longs === Number ? new $util.LongBits(message.gc_reservation_sent.low >>> 0, message.gc_reservation_sent.high >>> 0).toNumber(true) : message.gc_reservation_sent;
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                object.server_version = message.server_version;
            if (message.tv_info != null && message.hasOwnProperty("tv_info"))
                object.tv_info = $root.ServerHltvInfo.toObject(message.tv_info, options);
            if (message.reward_player_accounts && message.reward_player_accounts.length) {
                object.reward_player_accounts = [];
                for (var j = 0; j < message.reward_player_accounts.length; ++j)
                    object.reward_player_accounts[j] = message.reward_player_accounts[j];
            }
            if (message.idle_player_accounts && message.idle_player_accounts.length) {
                object.idle_player_accounts = [];
                for (var j = 0; j < message.idle_player_accounts.length; ++j)
                    object.idle_player_accounts[j] = message.idle_player_accounts[j];
            }
            if (message.reward_item_attr_def_idx != null && message.hasOwnProperty("reward_item_attr_def_idx"))
                object.reward_item_attr_def_idx = message.reward_item_attr_def_idx;
            if (message.reward_item_attr_value != null && message.hasOwnProperty("reward_item_attr_value"))
                object.reward_item_attr_value = message.reward_item_attr_value;
            if (message.reward_item_attr_reward_idx != null && message.hasOwnProperty("reward_item_attr_reward_idx"))
                object.reward_item_attr_reward_idx = message.reward_item_attr_reward_idx;
            if (message.reward_drop_list != null && message.hasOwnProperty("reward_drop_list"))
                object.reward_drop_list = message.reward_drop_list;
            if (message.tournament_tag != null && message.hasOwnProperty("tournament_tag"))
                object.tournament_tag = message.tournament_tag;
            if (message.legacy_steamdatagram_port != null && message.hasOwnProperty("legacy_steamdatagram_port"))
                object.legacy_steamdatagram_port = message.legacy_steamdatagram_port;
            if (message.test_token != null && message.hasOwnProperty("test_token"))
                object.test_token = message.test_token;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.steamdatagram_routing != null && message.hasOwnProperty("steamdatagram_routing"))
                object.steamdatagram_routing = message.steamdatagram_routing;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingServerReservationResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerReservationResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingServerReservationResponse;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @property {number|Long|null} [serverid] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve serverid
         * @property {number|null} [direct_udp_ip] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve direct_udp_ip
         * @property {number|null} [direct_udp_port] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve direct_udp_port
         * @property {number|Long|null} [reservationid] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve reservationid
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null} [reservation] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve reservation
         * @property {string|null} [map] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve map
         * @property {string|null} [server_address] CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve server_address
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve serverid.
         * @member {number|Long} serverid
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.serverid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve direct_udp_ip.
         * @member {number} direct_udp_ip
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.direct_udp_ip = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve direct_udp_port.
         * @member {number} direct_udp_port
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.direct_udp_port = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve reservationid.
         * @member {number|Long} reservationid
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.reservationid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve reservation.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null|undefined} reservation
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.reservation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve map.
         * @member {string} map
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.map = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve server_address.
         * @member {string} server_address
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.server_address = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.serverid);
            if (message.direct_udp_ip != null && message.hasOwnProperty("direct_udp_ip"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.direct_udp_ip);
            if (message.direct_udp_port != null && message.hasOwnProperty("direct_udp_port"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.direct_udp_port);
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.reservationid);
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode(message.reservation, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.map != null && message.hasOwnProperty("map"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.map);
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.server_address);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.serverid = reader.uint64();
                    break;
                case 2:
                    message.direct_udp_ip = reader.uint32();
                    break;
                case 3:
                    message.direct_udp_port = reader.uint32();
                    break;
                case 4:
                    message.reservationid = reader.uint64();
                    break;
                case 5:
                    message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.map = reader.string();
                    break;
                case 7:
                    message.server_address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (!$util.isInteger(message.serverid) && !(message.serverid && $util.isInteger(message.serverid.low) && $util.isInteger(message.serverid.high)))
                    return "serverid: integer|Long expected";
            if (message.direct_udp_ip != null && message.hasOwnProperty("direct_udp_ip"))
                if (!$util.isInteger(message.direct_udp_ip))
                    return "direct_udp_ip: integer expected";
            if (message.direct_udp_port != null && message.hasOwnProperty("direct_udp_port"))
                if (!$util.isInteger(message.direct_udp_port))
                    return "direct_udp_port: integer expected";
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (!$util.isInteger(message.reservationid) && !(message.reservationid && $util.isInteger(message.reservationid.low) && $util.isInteger(message.reservationid.high)))
                    return "reservationid: integer|Long expected";
            if (message.reservation != null && message.hasOwnProperty("reservation")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify(message.reservation);
                if (error)
                    return "reservation." + error;
            }
            if (message.map != null && message.hasOwnProperty("map"))
                if (!$util.isString(message.map))
                    return "map: string expected";
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                if (!$util.isString(message.server_address))
                    return "server_address: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
            if (object.serverid != null)
                if ($util.Long)
                    (message.serverid = $util.Long.fromValue(object.serverid)).unsigned = true;
                else if (typeof object.serverid === "string")
                    message.serverid = parseInt(object.serverid, 10);
                else if (typeof object.serverid === "number")
                    message.serverid = object.serverid;
                else if (typeof object.serverid === "object")
                    message.serverid = new $util.LongBits(object.serverid.low >>> 0, object.serverid.high >>> 0).toNumber(true);
            if (object.direct_udp_ip != null)
                message.direct_udp_ip = object.direct_udp_ip >>> 0;
            if (object.direct_udp_port != null)
                message.direct_udp_port = object.direct_udp_port >>> 0;
            if (object.reservationid != null)
                if ($util.Long)
                    (message.reservationid = $util.Long.fromValue(object.reservationid)).unsigned = true;
                else if (typeof object.reservationid === "string")
                    message.reservationid = parseInt(object.reservationid, 10);
                else if (typeof object.reservationid === "number")
                    message.reservationid = object.reservationid;
                else if (typeof object.reservationid === "object")
                    message.reservationid = new $util.LongBits(object.reservationid.low >>> 0, object.reservationid.high >>> 0).toNumber(true);
            if (object.reservation != null) {
                if (typeof object.reservation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.reservation: object expected");
                message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject(object.reservation);
            }
            if (object.map != null)
                message.map = String(object.map);
            if (object.server_address != null)
                message.server_address = String(object.server_address);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve} message CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.serverid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverid = options.longs === String ? "0" : 0;
                object.direct_udp_ip = 0;
                object.direct_udp_port = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.reservationid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.reservationid = options.longs === String ? "0" : 0;
                object.reservation = null;
                object.map = "";
                object.server_address = "";
            }
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (typeof message.serverid === "number")
                    object.serverid = options.longs === String ? String(message.serverid) : message.serverid;
                else
                    object.serverid = options.longs === String ? $util.Long.prototype.toString.call(message.serverid) : options.longs === Number ? new $util.LongBits(message.serverid.low >>> 0, message.serverid.high >>> 0).toNumber(true) : message.serverid;
            if (message.direct_udp_ip != null && message.hasOwnProperty("direct_udp_ip"))
                object.direct_udp_ip = message.direct_udp_ip;
            if (message.direct_udp_port != null && message.hasOwnProperty("direct_udp_port"))
                object.direct_udp_port = message.direct_udp_port;
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (typeof message.reservationid === "number")
                    object.reservationid = options.longs === String ? String(message.reservationid) : message.reservationid;
                else
                    object.reservationid = options.longs === String ? $util.Long.prototype.toString.call(message.reservationid) : options.longs === Number ? new $util.LongBits(message.reservationid.low >>> 0, message.reservationid.high >>> 0).toNumber(true) : message.reservationid;
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                object.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject(message.reservation, options);
            if (message.map != null && message.hasOwnProperty("map"))
                object.map = message.map;
            if (message.server_address != null && message.hasOwnProperty("server_address"))
                object.server_address = message.server_address;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingServerRoundStats.
         * @exports ICMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @interface ICMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @property {number|Long|null} [reservationid] CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservationid
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null} [reservation] CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservation
         * @property {string|null} [map] CMsgGCCStrike15_v2_MatchmakingServerRoundStats map
         * @property {number|null} [round] CMsgGCCStrike15_v2_MatchmakingServerRoundStats round
         * @property {Array.<number>|null} [kills] CMsgGCCStrike15_v2_MatchmakingServerRoundStats kills
         * @property {Array.<number>|null} [assists] CMsgGCCStrike15_v2_MatchmakingServerRoundStats assists
         * @property {Array.<number>|null} [deaths] CMsgGCCStrike15_v2_MatchmakingServerRoundStats deaths
         * @property {Array.<number>|null} [scores] CMsgGCCStrike15_v2_MatchmakingServerRoundStats scores
         * @property {Array.<number>|null} [pings] CMsgGCCStrike15_v2_MatchmakingServerRoundStats pings
         * @property {number|null} [round_result] CMsgGCCStrike15_v2_MatchmakingServerRoundStats round_result
         * @property {number|null} [match_result] CMsgGCCStrike15_v2_MatchmakingServerRoundStats match_result
         * @property {Array.<number>|null} [team_scores] CMsgGCCStrike15_v2_MatchmakingServerRoundStats team_scores
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null} [confirm] CMsgGCCStrike15_v2_MatchmakingServerRoundStats confirm
         * @property {number|null} [reservation_stage] CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservation_stage
         * @property {number|null} [match_duration] CMsgGCCStrike15_v2_MatchmakingServerRoundStats match_duration
         * @property {Array.<number>|null} [enemy_kills] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_kills
         * @property {Array.<number>|null} [enemy_headshots] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_headshots
         * @property {Array.<number>|null} [enemy_3ks] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_3ks
         * @property {Array.<number>|null} [enemy_4ks] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_4ks
         * @property {Array.<number>|null} [enemy_5ks] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_5ks
         * @property {Array.<number>|null} [mvps] CMsgGCCStrike15_v2_MatchmakingServerRoundStats mvps
         * @property {number|null} [spectators_count] CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count
         * @property {number|null} [spectators_count_tv] CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count_tv
         * @property {number|null} [spectators_count_lnk] CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count_lnk
         * @property {Array.<number>|null} [enemy_kills_agg] CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_kills_agg
         * @property {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo|null} [drop_info] CMsgGCCStrike15_v2_MatchmakingServerRoundStats drop_info
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingServerRoundStats.
         * @exports CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingServerRoundStats.
         * @implements ICMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingServerRoundStats(properties) {
            this.kills = [];
            this.assists = [];
            this.deaths = [];
            this.scores = [];
            this.pings = [];
            this.team_scores = [];
            this.enemy_kills = [];
            this.enemy_headshots = [];
            this.enemy_3ks = [];
            this.enemy_4ks = [];
            this.enemy_5ks = [];
            this.mvps = [];
            this.enemy_kills_agg = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservationid.
         * @member {number|Long} reservationid
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.reservationid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservation.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null|undefined} reservation
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.reservation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats map.
         * @member {string} map
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.map = "";
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats round.
         * @member {number} round
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.round = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats kills.
         * @member {Array.<number>} kills
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.kills = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats assists.
         * @member {Array.<number>} assists
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.assists = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats deaths.
         * @member {Array.<number>} deaths
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.deaths = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats scores.
         * @member {Array.<number>} scores
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.scores = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats pings.
         * @member {Array.<number>} pings
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.pings = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats round_result.
         * @member {number} round_result
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.round_result = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats match_result.
         * @member {number} match_result
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.match_result = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats team_scores.
         * @member {Array.<number>} team_scores
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.team_scores = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats confirm.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null|undefined} confirm
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.confirm = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats reservation_stage.
         * @member {number} reservation_stage
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.reservation_stage = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats match_duration.
         * @member {number} match_duration
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.match_duration = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_kills.
         * @member {Array.<number>} enemy_kills
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_kills = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_headshots.
         * @member {Array.<number>} enemy_headshots
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_headshots = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_3ks.
         * @member {Array.<number>} enemy_3ks
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_3ks = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_4ks.
         * @member {Array.<number>} enemy_4ks
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_4ks = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_5ks.
         * @member {Array.<number>} enemy_5ks
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_5ks = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats mvps.
         * @member {Array.<number>} mvps
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.mvps = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count.
         * @member {number} spectators_count
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.spectators_count = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count_tv.
         * @member {number} spectators_count_tv
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.spectators_count_tv = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats spectators_count_lnk.
         * @member {number} spectators_count_lnk
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.spectators_count_lnk = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats enemy_kills_agg.
         * @member {Array.<number>} enemy_kills_agg
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.enemy_kills_agg = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerRoundStats drop_info.
         * @member {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo|null|undefined} drop_info
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.drop_info = null;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingServerRoundStats instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats} CMsgGCCStrike15_v2_MatchmakingServerRoundStats instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingServerRoundStats(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerRoundStats message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats} message CMsgGCCStrike15_v2_MatchmakingServerRoundStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.reservationid);
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode(message.reservation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.map != null && message.hasOwnProperty("map"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.map);
            if (message.round != null && message.hasOwnProperty("round"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.round);
            if (message.kills != null && message.kills.length)
                for (var i = 0; i < message.kills.length; ++i)
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.kills[i]);
            if (message.assists != null && message.assists.length)
                for (var i = 0; i < message.assists.length; ++i)
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.assists[i]);
            if (message.deaths != null && message.deaths.length)
                for (var i = 0; i < message.deaths.length; ++i)
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.deaths[i]);
            if (message.scores != null && message.scores.length)
                for (var i = 0; i < message.scores.length; ++i)
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.scores[i]);
            if (message.pings != null && message.pings.length)
                for (var i = 0; i < message.pings.length; ++i)
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.pings[i]);
            if (message.round_result != null && message.hasOwnProperty("round_result"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.round_result);
            if (message.match_result != null && message.hasOwnProperty("match_result"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.match_result);
            if (message.team_scores != null && message.team_scores.length)
                for (var i = 0; i < message.team_scores.length; ++i)
                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.team_scores[i]);
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.encode(message.confirm, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.reservation_stage != null && message.hasOwnProperty("reservation_stage"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.reservation_stage);
            if (message.match_duration != null && message.hasOwnProperty("match_duration"))
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.match_duration);
            if (message.enemy_kills != null && message.enemy_kills.length)
                for (var i = 0; i < message.enemy_kills.length; ++i)
                    writer.uint32(/* id 16, wireType 0 =*/128).int32(message.enemy_kills[i]);
            if (message.enemy_headshots != null && message.enemy_headshots.length)
                for (var i = 0; i < message.enemy_headshots.length; ++i)
                    writer.uint32(/* id 17, wireType 0 =*/136).int32(message.enemy_headshots[i]);
            if (message.enemy_3ks != null && message.enemy_3ks.length)
                for (var i = 0; i < message.enemy_3ks.length; ++i)
                    writer.uint32(/* id 18, wireType 0 =*/144).int32(message.enemy_3ks[i]);
            if (message.enemy_4ks != null && message.enemy_4ks.length)
                for (var i = 0; i < message.enemy_4ks.length; ++i)
                    writer.uint32(/* id 19, wireType 0 =*/152).int32(message.enemy_4ks[i]);
            if (message.enemy_5ks != null && message.enemy_5ks.length)
                for (var i = 0; i < message.enemy_5ks.length; ++i)
                    writer.uint32(/* id 20, wireType 0 =*/160).int32(message.enemy_5ks[i]);
            if (message.mvps != null && message.mvps.length)
                for (var i = 0; i < message.mvps.length; ++i)
                    writer.uint32(/* id 21, wireType 0 =*/168).int32(message.mvps[i]);
            if (message.spectators_count != null && message.hasOwnProperty("spectators_count"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.spectators_count);
            if (message.spectators_count_tv != null && message.hasOwnProperty("spectators_count_tv"))
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.spectators_count_tv);
            if (message.spectators_count_lnk != null && message.hasOwnProperty("spectators_count_lnk"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.spectators_count_lnk);
            if (message.enemy_kills_agg != null && message.enemy_kills_agg.length)
                for (var i = 0; i < message.enemy_kills_agg.length; ++i)
                    writer.uint32(/* id 25, wireType 0 =*/200).int32(message.enemy_kills_agg[i]);
            if (message.drop_info != null && message.hasOwnProperty("drop_info"))
                $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.encode(message.drop_info, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerRoundStats message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats} message CMsgGCCStrike15_v2_MatchmakingServerRoundStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerRoundStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats} CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reservationid = reader.uint64();
                    break;
                case 2:
                    message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.map = reader.string();
                    break;
                case 4:
                    message.round = reader.int32();
                    break;
                case 5:
                    if (!(message.kills && message.kills.length))
                        message.kills = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.kills.push(reader.int32());
                    } else
                        message.kills.push(reader.int32());
                    break;
                case 6:
                    if (!(message.assists && message.assists.length))
                        message.assists = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.assists.push(reader.int32());
                    } else
                        message.assists.push(reader.int32());
                    break;
                case 7:
                    if (!(message.deaths && message.deaths.length))
                        message.deaths = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.deaths.push(reader.int32());
                    } else
                        message.deaths.push(reader.int32());
                    break;
                case 8:
                    if (!(message.scores && message.scores.length))
                        message.scores = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.scores.push(reader.int32());
                    } else
                        message.scores.push(reader.int32());
                    break;
                case 9:
                    if (!(message.pings && message.pings.length))
                        message.pings = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.pings.push(reader.int32());
                    } else
                        message.pings.push(reader.int32());
                    break;
                case 10:
                    message.round_result = reader.int32();
                    break;
                case 11:
                    message.match_result = reader.int32();
                    break;
                case 12:
                    if (!(message.team_scores && message.team_scores.length))
                        message.team_scores = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.team_scores.push(reader.int32());
                    } else
                        message.team_scores.push(reader.int32());
                    break;
                case 13:
                    message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.reservation_stage = reader.int32();
                    break;
                case 15:
                    message.match_duration = reader.int32();
                    break;
                case 16:
                    if (!(message.enemy_kills && message.enemy_kills.length))
                        message.enemy_kills = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_kills.push(reader.int32());
                    } else
                        message.enemy_kills.push(reader.int32());
                    break;
                case 17:
                    if (!(message.enemy_headshots && message.enemy_headshots.length))
                        message.enemy_headshots = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_headshots.push(reader.int32());
                    } else
                        message.enemy_headshots.push(reader.int32());
                    break;
                case 18:
                    if (!(message.enemy_3ks && message.enemy_3ks.length))
                        message.enemy_3ks = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_3ks.push(reader.int32());
                    } else
                        message.enemy_3ks.push(reader.int32());
                    break;
                case 19:
                    if (!(message.enemy_4ks && message.enemy_4ks.length))
                        message.enemy_4ks = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_4ks.push(reader.int32());
                    } else
                        message.enemy_4ks.push(reader.int32());
                    break;
                case 20:
                    if (!(message.enemy_5ks && message.enemy_5ks.length))
                        message.enemy_5ks = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_5ks.push(reader.int32());
                    } else
                        message.enemy_5ks.push(reader.int32());
                    break;
                case 21:
                    if (!(message.mvps && message.mvps.length))
                        message.mvps = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.mvps.push(reader.int32());
                    } else
                        message.mvps.push(reader.int32());
                    break;
                case 22:
                    message.spectators_count = reader.uint32();
                    break;
                case 23:
                    message.spectators_count_tv = reader.uint32();
                    break;
                case 24:
                    message.spectators_count_lnk = reader.uint32();
                    break;
                case 25:
                    if (!(message.enemy_kills_agg && message.enemy_kills_agg.length))
                        message.enemy_kills_agg = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.enemy_kills_agg.push(reader.int32());
                    } else
                        message.enemy_kills_agg.push(reader.int32());
                    break;
                case 26:
                    message.drop_info = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerRoundStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats} CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingServerRoundStats message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (!$util.isInteger(message.reservationid) && !(message.reservationid && $util.isInteger(message.reservationid.low) && $util.isInteger(message.reservationid.high)))
                    return "reservationid: integer|Long expected";
            if (message.reservation != null && message.hasOwnProperty("reservation")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify(message.reservation);
                if (error)
                    return "reservation." + error;
            }
            if (message.map != null && message.hasOwnProperty("map"))
                if (!$util.isString(message.map))
                    return "map: string expected";
            if (message.round != null && message.hasOwnProperty("round"))
                if (!$util.isInteger(message.round))
                    return "round: integer expected";
            if (message.kills != null && message.hasOwnProperty("kills")) {
                if (!Array.isArray(message.kills))
                    return "kills: array expected";
                for (var i = 0; i < message.kills.length; ++i)
                    if (!$util.isInteger(message.kills[i]))
                        return "kills: integer[] expected";
            }
            if (message.assists != null && message.hasOwnProperty("assists")) {
                if (!Array.isArray(message.assists))
                    return "assists: array expected";
                for (var i = 0; i < message.assists.length; ++i)
                    if (!$util.isInteger(message.assists[i]))
                        return "assists: integer[] expected";
            }
            if (message.deaths != null && message.hasOwnProperty("deaths")) {
                if (!Array.isArray(message.deaths))
                    return "deaths: array expected";
                for (var i = 0; i < message.deaths.length; ++i)
                    if (!$util.isInteger(message.deaths[i]))
                        return "deaths: integer[] expected";
            }
            if (message.scores != null && message.hasOwnProperty("scores")) {
                if (!Array.isArray(message.scores))
                    return "scores: array expected";
                for (var i = 0; i < message.scores.length; ++i)
                    if (!$util.isInteger(message.scores[i]))
                        return "scores: integer[] expected";
            }
            if (message.pings != null && message.hasOwnProperty("pings")) {
                if (!Array.isArray(message.pings))
                    return "pings: array expected";
                for (var i = 0; i < message.pings.length; ++i)
                    if (!$util.isInteger(message.pings[i]))
                        return "pings: integer[] expected";
            }
            if (message.round_result != null && message.hasOwnProperty("round_result"))
                if (!$util.isInteger(message.round_result))
                    return "round_result: integer expected";
            if (message.match_result != null && message.hasOwnProperty("match_result"))
                if (!$util.isInteger(message.match_result))
                    return "match_result: integer expected";
            if (message.team_scores != null && message.hasOwnProperty("team_scores")) {
                if (!Array.isArray(message.team_scores))
                    return "team_scores: array expected";
                for (var i = 0; i < message.team_scores.length; ++i)
                    if (!$util.isInteger(message.team_scores[i]))
                        return "team_scores: integer[] expected";
            }
            if (message.confirm != null && message.hasOwnProperty("confirm")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify(message.confirm);
                if (error)
                    return "confirm." + error;
            }
            if (message.reservation_stage != null && message.hasOwnProperty("reservation_stage"))
                if (!$util.isInteger(message.reservation_stage))
                    return "reservation_stage: integer expected";
            if (message.match_duration != null && message.hasOwnProperty("match_duration"))
                if (!$util.isInteger(message.match_duration))
                    return "match_duration: integer expected";
            if (message.enemy_kills != null && message.hasOwnProperty("enemy_kills")) {
                if (!Array.isArray(message.enemy_kills))
                    return "enemy_kills: array expected";
                for (var i = 0; i < message.enemy_kills.length; ++i)
                    if (!$util.isInteger(message.enemy_kills[i]))
                        return "enemy_kills: integer[] expected";
            }
            if (message.enemy_headshots != null && message.hasOwnProperty("enemy_headshots")) {
                if (!Array.isArray(message.enemy_headshots))
                    return "enemy_headshots: array expected";
                for (var i = 0; i < message.enemy_headshots.length; ++i)
                    if (!$util.isInteger(message.enemy_headshots[i]))
                        return "enemy_headshots: integer[] expected";
            }
            if (message.enemy_3ks != null && message.hasOwnProperty("enemy_3ks")) {
                if (!Array.isArray(message.enemy_3ks))
                    return "enemy_3ks: array expected";
                for (var i = 0; i < message.enemy_3ks.length; ++i)
                    if (!$util.isInteger(message.enemy_3ks[i]))
                        return "enemy_3ks: integer[] expected";
            }
            if (message.enemy_4ks != null && message.hasOwnProperty("enemy_4ks")) {
                if (!Array.isArray(message.enemy_4ks))
                    return "enemy_4ks: array expected";
                for (var i = 0; i < message.enemy_4ks.length; ++i)
                    if (!$util.isInteger(message.enemy_4ks[i]))
                        return "enemy_4ks: integer[] expected";
            }
            if (message.enemy_5ks != null && message.hasOwnProperty("enemy_5ks")) {
                if (!Array.isArray(message.enemy_5ks))
                    return "enemy_5ks: array expected";
                for (var i = 0; i < message.enemy_5ks.length; ++i)
                    if (!$util.isInteger(message.enemy_5ks[i]))
                        return "enemy_5ks: integer[] expected";
            }
            if (message.mvps != null && message.hasOwnProperty("mvps")) {
                if (!Array.isArray(message.mvps))
                    return "mvps: array expected";
                for (var i = 0; i < message.mvps.length; ++i)
                    if (!$util.isInteger(message.mvps[i]))
                        return "mvps: integer[] expected";
            }
            if (message.spectators_count != null && message.hasOwnProperty("spectators_count"))
                if (!$util.isInteger(message.spectators_count))
                    return "spectators_count: integer expected";
            if (message.spectators_count_tv != null && message.hasOwnProperty("spectators_count_tv"))
                if (!$util.isInteger(message.spectators_count_tv))
                    return "spectators_count_tv: integer expected";
            if (message.spectators_count_lnk != null && message.hasOwnProperty("spectators_count_lnk"))
                if (!$util.isInteger(message.spectators_count_lnk))
                    return "spectators_count_lnk: integer expected";
            if (message.enemy_kills_agg != null && message.hasOwnProperty("enemy_kills_agg")) {
                if (!Array.isArray(message.enemy_kills_agg))
                    return "enemy_kills_agg: array expected";
                for (var i = 0; i < message.enemy_kills_agg.length; ++i)
                    if (!$util.isInteger(message.enemy_kills_agg[i]))
                        return "enemy_kills_agg: integer[] expected";
            }
            if (message.drop_info != null && message.hasOwnProperty("drop_info")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.verify(message.drop_info);
                if (error)
                    return "drop_info." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingServerRoundStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats} CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
            if (object.reservationid != null)
                if ($util.Long)
                    (message.reservationid = $util.Long.fromValue(object.reservationid)).unsigned = true;
                else if (typeof object.reservationid === "string")
                    message.reservationid = parseInt(object.reservationid, 10);
                else if (typeof object.reservationid === "number")
                    message.reservationid = object.reservationid;
                else if (typeof object.reservationid === "object")
                    message.reservationid = new $util.LongBits(object.reservationid.low >>> 0, object.reservationid.high >>> 0).toNumber(true);
            if (object.reservation != null) {
                if (typeof object.reservation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.reservation: object expected");
                message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject(object.reservation);
            }
            if (object.map != null)
                message.map = String(object.map);
            if (object.round != null)
                message.round = object.round | 0;
            if (object.kills) {
                if (!Array.isArray(object.kills))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.kills: array expected");
                message.kills = [];
                for (var i = 0; i < object.kills.length; ++i)
                    message.kills[i] = object.kills[i] | 0;
            }
            if (object.assists) {
                if (!Array.isArray(object.assists))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.assists: array expected");
                message.assists = [];
                for (var i = 0; i < object.assists.length; ++i)
                    message.assists[i] = object.assists[i] | 0;
            }
            if (object.deaths) {
                if (!Array.isArray(object.deaths))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.deaths: array expected");
                message.deaths = [];
                for (var i = 0; i < object.deaths.length; ++i)
                    message.deaths[i] = object.deaths[i] | 0;
            }
            if (object.scores) {
                if (!Array.isArray(object.scores))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.scores: array expected");
                message.scores = [];
                for (var i = 0; i < object.scores.length; ++i)
                    message.scores[i] = object.scores[i] | 0;
            }
            if (object.pings) {
                if (!Array.isArray(object.pings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.pings: array expected");
                message.pings = [];
                for (var i = 0; i < object.pings.length; ++i)
                    message.pings[i] = object.pings[i] | 0;
            }
            if (object.round_result != null)
                message.round_result = object.round_result | 0;
            if (object.match_result != null)
                message.match_result = object.match_result | 0;
            if (object.team_scores) {
                if (!Array.isArray(object.team_scores))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.team_scores: array expected");
                message.team_scores = [];
                for (var i = 0; i < object.team_scores.length; ++i)
                    message.team_scores[i] = object.team_scores[i] | 0;
            }
            if (object.confirm != null) {
                if (typeof object.confirm !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.confirm: object expected");
                message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.fromObject(object.confirm);
            }
            if (object.reservation_stage != null)
                message.reservation_stage = object.reservation_stage | 0;
            if (object.match_duration != null)
                message.match_duration = object.match_duration | 0;
            if (object.enemy_kills) {
                if (!Array.isArray(object.enemy_kills))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills: array expected");
                message.enemy_kills = [];
                for (var i = 0; i < object.enemy_kills.length; ++i)
                    message.enemy_kills[i] = object.enemy_kills[i] | 0;
            }
            if (object.enemy_headshots) {
                if (!Array.isArray(object.enemy_headshots))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_headshots: array expected");
                message.enemy_headshots = [];
                for (var i = 0; i < object.enemy_headshots.length; ++i)
                    message.enemy_headshots[i] = object.enemy_headshots[i] | 0;
            }
            if (object.enemy_3ks) {
                if (!Array.isArray(object.enemy_3ks))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_3ks: array expected");
                message.enemy_3ks = [];
                for (var i = 0; i < object.enemy_3ks.length; ++i)
                    message.enemy_3ks[i] = object.enemy_3ks[i] | 0;
            }
            if (object.enemy_4ks) {
                if (!Array.isArray(object.enemy_4ks))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_4ks: array expected");
                message.enemy_4ks = [];
                for (var i = 0; i < object.enemy_4ks.length; ++i)
                    message.enemy_4ks[i] = object.enemy_4ks[i] | 0;
            }
            if (object.enemy_5ks) {
                if (!Array.isArray(object.enemy_5ks))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_5ks: array expected");
                message.enemy_5ks = [];
                for (var i = 0; i < object.enemy_5ks.length; ++i)
                    message.enemy_5ks[i] = object.enemy_5ks[i] | 0;
            }
            if (object.mvps) {
                if (!Array.isArray(object.mvps))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.mvps: array expected");
                message.mvps = [];
                for (var i = 0; i < object.mvps.length; ++i)
                    message.mvps[i] = object.mvps[i] | 0;
            }
            if (object.spectators_count != null)
                message.spectators_count = object.spectators_count >>> 0;
            if (object.spectators_count_tv != null)
                message.spectators_count_tv = object.spectators_count_tv >>> 0;
            if (object.spectators_count_lnk != null)
                message.spectators_count_lnk = object.spectators_count_lnk >>> 0;
            if (object.enemy_kills_agg) {
                if (!Array.isArray(object.enemy_kills_agg))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.enemy_kills_agg: array expected");
                message.enemy_kills_agg = [];
                for (var i = 0; i < object.enemy_kills_agg.length; ++i)
                    message.enemy_kills_agg[i] = object.enemy_kills_agg[i] | 0;
            }
            if (object.drop_info != null) {
                if (typeof object.drop_info !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerRoundStats.drop_info: object expected");
                message.drop_info = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.fromObject(object.drop_info);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingServerRoundStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats} message CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.kills = [];
                object.assists = [];
                object.deaths = [];
                object.scores = [];
                object.pings = [];
                object.team_scores = [];
                object.enemy_kills = [];
                object.enemy_headshots = [];
                object.enemy_3ks = [];
                object.enemy_4ks = [];
                object.enemy_5ks = [];
                object.mvps = [];
                object.enemy_kills_agg = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.reservationid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.reservationid = options.longs === String ? "0" : 0;
                object.reservation = null;
                object.map = "";
                object.round = 0;
                object.round_result = 0;
                object.match_result = 0;
                object.confirm = null;
                object.reservation_stage = 0;
                object.match_duration = 0;
                object.spectators_count = 0;
                object.spectators_count_tv = 0;
                object.spectators_count_lnk = 0;
                object.drop_info = null;
            }
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (typeof message.reservationid === "number")
                    object.reservationid = options.longs === String ? String(message.reservationid) : message.reservationid;
                else
                    object.reservationid = options.longs === String ? $util.Long.prototype.toString.call(message.reservationid) : options.longs === Number ? new $util.LongBits(message.reservationid.low >>> 0, message.reservationid.high >>> 0).toNumber(true) : message.reservationid;
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                object.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject(message.reservation, options);
            if (message.map != null && message.hasOwnProperty("map"))
                object.map = message.map;
            if (message.round != null && message.hasOwnProperty("round"))
                object.round = message.round;
            if (message.kills && message.kills.length) {
                object.kills = [];
                for (var j = 0; j < message.kills.length; ++j)
                    object.kills[j] = message.kills[j];
            }
            if (message.assists && message.assists.length) {
                object.assists = [];
                for (var j = 0; j < message.assists.length; ++j)
                    object.assists[j] = message.assists[j];
            }
            if (message.deaths && message.deaths.length) {
                object.deaths = [];
                for (var j = 0; j < message.deaths.length; ++j)
                    object.deaths[j] = message.deaths[j];
            }
            if (message.scores && message.scores.length) {
                object.scores = [];
                for (var j = 0; j < message.scores.length; ++j)
                    object.scores[j] = message.scores[j];
            }
            if (message.pings && message.pings.length) {
                object.pings = [];
                for (var j = 0; j < message.pings.length; ++j)
                    object.pings[j] = message.pings[j];
            }
            if (message.round_result != null && message.hasOwnProperty("round_result"))
                object.round_result = message.round_result;
            if (message.match_result != null && message.hasOwnProperty("match_result"))
                object.match_result = message.match_result;
            if (message.team_scores && message.team_scores.length) {
                object.team_scores = [];
                for (var j = 0; j < message.team_scores.length; ++j)
                    object.team_scores[j] = message.team_scores[j];
            }
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                object.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.toObject(message.confirm, options);
            if (message.reservation_stage != null && message.hasOwnProperty("reservation_stage"))
                object.reservation_stage = message.reservation_stage;
            if (message.match_duration != null && message.hasOwnProperty("match_duration"))
                object.match_duration = message.match_duration;
            if (message.enemy_kills && message.enemy_kills.length) {
                object.enemy_kills = [];
                for (var j = 0; j < message.enemy_kills.length; ++j)
                    object.enemy_kills[j] = message.enemy_kills[j];
            }
            if (message.enemy_headshots && message.enemy_headshots.length) {
                object.enemy_headshots = [];
                for (var j = 0; j < message.enemy_headshots.length; ++j)
                    object.enemy_headshots[j] = message.enemy_headshots[j];
            }
            if (message.enemy_3ks && message.enemy_3ks.length) {
                object.enemy_3ks = [];
                for (var j = 0; j < message.enemy_3ks.length; ++j)
                    object.enemy_3ks[j] = message.enemy_3ks[j];
            }
            if (message.enemy_4ks && message.enemy_4ks.length) {
                object.enemy_4ks = [];
                for (var j = 0; j < message.enemy_4ks.length; ++j)
                    object.enemy_4ks[j] = message.enemy_4ks[j];
            }
            if (message.enemy_5ks && message.enemy_5ks.length) {
                object.enemy_5ks = [];
                for (var j = 0; j < message.enemy_5ks.length; ++j)
                    object.enemy_5ks[j] = message.enemy_5ks[j];
            }
            if (message.mvps && message.mvps.length) {
                object.mvps = [];
                for (var j = 0; j < message.mvps.length; ++j)
                    object.mvps[j] = message.mvps[j];
            }
            if (message.spectators_count != null && message.hasOwnProperty("spectators_count"))
                object.spectators_count = message.spectators_count;
            if (message.spectators_count_tv != null && message.hasOwnProperty("spectators_count_tv"))
                object.spectators_count_tv = message.spectators_count_tv;
            if (message.spectators_count_lnk != null && message.hasOwnProperty("spectators_count_lnk"))
                object.spectators_count_lnk = message.spectators_count_lnk;
            if (message.enemy_kills_agg && message.enemy_kills_agg.length) {
                object.enemy_kills_agg = [];
                for (var j = 0; j < message.enemy_kills_agg.length; ++j)
                    object.enemy_kills_agg[j] = message.enemy_kills_agg[j];
            }
            if (message.drop_info != null && message.hasOwnProperty("drop_info"))
                object.drop_info = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.toObject(message.drop_info, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingServerRoundStats to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo = (function() {
    
            /**
             * Properties of a DropInfo.
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
             * @interface IDropInfo
             * @property {number|null} [account_mvp] DropInfo account_mvp
             */
    
            /**
             * Constructs a new DropInfo.
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats
             * @classdesc Represents a DropInfo.
             * @implements IDropInfo
             * @constructor
             * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo=} [properties] Properties to set
             */
            function DropInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * DropInfo account_mvp.
             * @member {number} account_mvp
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @instance
             */
            DropInfo.prototype.account_mvp = 0;
    
            /**
             * Creates a new DropInfo instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo} DropInfo instance
             */
            DropInfo.create = function create(properties) {
                return new DropInfo(properties);
            };
    
            /**
             * Encodes the specified DropInfo message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo} message DropInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DropInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account_mvp != null && message.hasOwnProperty("account_mvp"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_mvp);
                return writer;
            };
    
            /**
             * Encodes the specified DropInfo message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.IDropInfo} message DropInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DropInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a DropInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo} DropInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DropInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.account_mvp = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a DropInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo} DropInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DropInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a DropInfo message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DropInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account_mvp != null && message.hasOwnProperty("account_mvp"))
                    if (!$util.isInteger(message.account_mvp))
                        return "account_mvp: integer expected";
                return null;
            };
    
            /**
             * Creates a DropInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo} DropInfo
             */
            DropInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo();
                if (object.account_mvp != null)
                    message.account_mvp = object.account_mvp >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a DropInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @static
             * @param {CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo} message DropInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DropInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.account_mvp = 0;
                if (message.account_mvp != null && message.hasOwnProperty("account_mvp"))
                    object.account_mvp = message.account_mvp;
                return object;
            };
    
            /**
             * Converts this DropInfo to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DropInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return DropInfo;
        })();
    
        return CMsgGCCStrike15_v2_MatchmakingServerRoundStats;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEnd = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.
         * @exports ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @interface ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @property {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats|null} [stats] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd stats
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null} [confirm] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd confirm
         * @property {number|Long|null} [rematch] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd rematch
         * @property {number|null} [replay_token] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd replay_token
         * @property {number|null} [replay_cluster_id] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd replay_cluster_id
         * @property {boolean|null} [aborted_match] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd aborted_match
         * @property {ICMsgGC_ServerQuestUpdateData|null} [match_end_quest_data] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd match_end_quest_data
         * @property {number|null} [server_version] CMsgGCCStrike15_v2_MatchmakingServerMatchEnd server_version
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.
         * @exports CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.
         * @implements ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd stats.
         * @member {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats|null|undefined} stats
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.stats = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd confirm.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null|undefined} confirm
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.confirm = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd rematch.
         * @member {number|Long} rematch
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.rematch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd replay_token.
         * @member {number} replay_token
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.replay_token = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd replay_cluster_id.
         * @member {number} replay_cluster_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.replay_cluster_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd aborted_match.
         * @member {boolean} aborted_match
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.aborted_match = false;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd match_end_quest_data.
         * @member {ICMsgGC_ServerQuestUpdateData|null|undefined} match_end_quest_data
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.match_end_quest_data = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEnd server_version.
         * @member {number} server_version
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.server_version = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEnd} CMsgGCCStrike15_v2_MatchmakingServerMatchEnd instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd} message CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stats != null && message.hasOwnProperty("stats"))
                $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.encode(message.stats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.encode(message.confirm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.rematch != null && message.hasOwnProperty("rematch"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.rematch);
            if (message.replay_token != null && message.hasOwnProperty("replay_token"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.replay_token);
            if (message.replay_cluster_id != null && message.hasOwnProperty("replay_cluster_id"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.replay_cluster_id);
            if (message.aborted_match != null && message.hasOwnProperty("aborted_match"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.aborted_match);
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data"))
                $root.CMsgGC_ServerQuestUpdateData.encode(message.match_end_quest_data, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.server_version);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEnd} message CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEnd} CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.stats = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.rematch = reader.uint64();
                    break;
                case 5:
                    message.replay_token = reader.uint32();
                    break;
                case 6:
                    message.replay_cluster_id = reader.uint32();
                    break;
                case 7:
                    message.aborted_match = reader.bool();
                    break;
                case 8:
                    message.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.server_version = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEnd} CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stats != null && message.hasOwnProperty("stats")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify(message.stats);
                if (error)
                    return "stats." + error;
            }
            if (message.confirm != null && message.hasOwnProperty("confirm")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify(message.confirm);
                if (error)
                    return "confirm." + error;
            }
            if (message.rematch != null && message.hasOwnProperty("rematch"))
                if (!$util.isInteger(message.rematch) && !(message.rematch && $util.isInteger(message.rematch.low) && $util.isInteger(message.rematch.high)))
                    return "rematch: integer|Long expected";
            if (message.replay_token != null && message.hasOwnProperty("replay_token"))
                if (!$util.isInteger(message.replay_token))
                    return "replay_token: integer expected";
            if (message.replay_cluster_id != null && message.hasOwnProperty("replay_cluster_id"))
                if (!$util.isInteger(message.replay_cluster_id))
                    return "replay_cluster_id: integer expected";
            if (message.aborted_match != null && message.hasOwnProperty("aborted_match"))
                if (typeof message.aborted_match !== "boolean")
                    return "aborted_match: boolean expected";
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data")) {
                var error = $root.CMsgGC_ServerQuestUpdateData.verify(message.match_end_quest_data);
                if (error)
                    return "match_end_quest_data." + error;
            }
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                if (!$util.isInteger(message.server_version))
                    return "server_version: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEnd} CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEnd)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
            if (object.stats != null) {
                if (typeof object.stats !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.stats: object expected");
                message.stats = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.fromObject(object.stats);
            }
            if (object.confirm != null) {
                if (typeof object.confirm !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.confirm: object expected");
                message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.fromObject(object.confirm);
            }
            if (object.rematch != null)
                if ($util.Long)
                    (message.rematch = $util.Long.fromValue(object.rematch)).unsigned = true;
                else if (typeof object.rematch === "string")
                    message.rematch = parseInt(object.rematch, 10);
                else if (typeof object.rematch === "number")
                    message.rematch = object.rematch;
                else if (typeof object.rematch === "object")
                    message.rematch = new $util.LongBits(object.rematch.low >>> 0, object.rematch.high >>> 0).toNumber(true);
            if (object.replay_token != null)
                message.replay_token = object.replay_token >>> 0;
            if (object.replay_cluster_id != null)
                message.replay_cluster_id = object.replay_cluster_id >>> 0;
            if (object.aborted_match != null)
                message.aborted_match = Boolean(object.aborted_match);
            if (object.match_end_quest_data != null) {
                if (typeof object.match_end_quest_data !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.match_end_quest_data: object expected");
                message.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.fromObject(object.match_end_quest_data);
            }
            if (object.server_version != null)
                message.server_version = object.server_version >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingServerMatchEnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingServerMatchEnd} message CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stats = null;
                object.confirm = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.rematch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.rematch = options.longs === String ? "0" : 0;
                object.replay_token = 0;
                object.replay_cluster_id = 0;
                object.aborted_match = false;
                object.match_end_quest_data = null;
                object.server_version = 0;
            }
            if (message.stats != null && message.hasOwnProperty("stats"))
                object.stats = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.toObject(message.stats, options);
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                object.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.toObject(message.confirm, options);
            if (message.rematch != null && message.hasOwnProperty("rematch"))
                if (typeof message.rematch === "number")
                    object.rematch = options.longs === String ? String(message.rematch) : message.rematch;
                else
                    object.rematch = options.longs === String ? $util.Long.prototype.toString.call(message.rematch) : options.longs === Number ? new $util.LongBits(message.rematch.low >>> 0, message.rematch.high >>> 0).toNumber(true) : message.rematch;
            if (message.replay_token != null && message.hasOwnProperty("replay_token"))
                object.replay_token = message.replay_token;
            if (message.replay_cluster_id != null && message.hasOwnProperty("replay_cluster_id"))
                object.replay_cluster_id = message.replay_cluster_id;
            if (message.aborted_match != null && message.hasOwnProperty("aborted_match"))
                object.aborted_match = message.aborted_match;
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data"))
                object.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.toObject(message.match_end_quest_data, options);
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                object.server_version = message.server_version;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingServerMatchEnd to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingServerMatchEnd;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.
         * @exports ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @interface ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @property {number|Long|null} [reservationid] CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial reservationid
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null} [reservation] CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial reservation
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null} [confirm] CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial confirm
         * @property {ICMsgGC_ServerQuestUpdateData|null} [completed_player_quest_data] CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial completed_player_quest_data
         * @property {number|null} [server_version] CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial server_version
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.
         * @exports CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.
         * @implements ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial reservationid.
         * @member {number|Long} reservationid
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.reservationid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial reservation.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null|undefined} reservation
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.reservation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial confirm.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm|null|undefined} confirm
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.confirm = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial completed_player_quest_data.
         * @member {ICMsgGC_ServerQuestUpdateData|null|undefined} completed_player_quest_data
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.completed_player_quest_data = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial server_version.
         * @member {number} server_version
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.server_version = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial instance
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} message CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.reservationid);
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode(message.reservation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.encode(message.confirm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.completed_player_quest_data != null && message.hasOwnProperty("completed_player_quest_data"))
                $root.CMsgGC_ServerQuestUpdateData.encode(message.completed_player_quest_data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.server_version);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} message CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reservationid = reader.uint64();
                    break;
                case 2:
                    message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.completed_player_quest_data = $root.CMsgGC_ServerQuestUpdateData.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.server_version = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (!$util.isInteger(message.reservationid) && !(message.reservationid && $util.isInteger(message.reservationid.low) && $util.isInteger(message.reservationid.high)))
                    return "reservationid: integer|Long expected";
            if (message.reservation != null && message.hasOwnProperty("reservation")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify(message.reservation);
                if (error)
                    return "reservation." + error;
            }
            if (message.confirm != null && message.hasOwnProperty("confirm")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.verify(message.confirm);
                if (error)
                    return "confirm." + error;
            }
            if (message.completed_player_quest_data != null && message.hasOwnProperty("completed_player_quest_data")) {
                var error = $root.CMsgGC_ServerQuestUpdateData.verify(message.completed_player_quest_data);
                if (error)
                    return "completed_player_quest_data." + error;
            }
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                if (!$util.isInteger(message.server_version))
                    return "server_version: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial();
            if (object.reservationid != null)
                if ($util.Long)
                    (message.reservationid = $util.Long.fromValue(object.reservationid)).unsigned = true;
                else if (typeof object.reservationid === "string")
                    message.reservationid = parseInt(object.reservationid, 10);
                else if (typeof object.reservationid === "number")
                    message.reservationid = object.reservationid;
                else if (typeof object.reservationid === "object")
                    message.reservationid = new $util.LongBits(object.reservationid.low >>> 0, object.reservationid.high >>> 0).toNumber(true);
            if (object.reservation != null) {
                if (typeof object.reservation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.reservation: object expected");
                message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject(object.reservation);
            }
            if (object.confirm != null) {
                if (typeof object.confirm !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.confirm: object expected");
                message.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.fromObject(object.confirm);
            }
            if (object.completed_player_quest_data != null) {
                if (typeof object.completed_player_quest_data !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.completed_player_quest_data: object expected");
                message.completed_player_quest_data = $root.CMsgGC_ServerQuestUpdateData.fromObject(object.completed_player_quest_data);
            }
            if (object.server_version != null)
                message.server_version = object.server_version >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial} message CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.reservationid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.reservationid = options.longs === String ? "0" : 0;
                object.reservation = null;
                object.confirm = null;
                object.completed_player_quest_data = null;
                object.server_version = 0;
            }
            if (message.reservationid != null && message.hasOwnProperty("reservationid"))
                if (typeof message.reservationid === "number")
                    object.reservationid = options.longs === String ? String(message.reservationid) : message.reservationid;
                else
                    object.reservationid = options.longs === String ? $util.Long.prototype.toString.call(message.reservationid) : options.longs === Number ? new $util.LongBits(message.reservationid.low >>> 0, message.reservationid.high >>> 0).toNumber(true) : message.reservationid;
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                object.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject(message.reservation, options);
            if (message.confirm != null && message.hasOwnProperty("confirm"))
                object.confirm = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.toObject(message.confirm, options);
            if (message.completed_player_quest_data != null && message.hasOwnProperty("completed_player_quest_data"))
                object.completed_player_quest_data = $root.CMsgGC_ServerQuestUpdateData.toObject(message.completed_player_quest_data, options);
            if (message.server_version != null && message.hasOwnProperty("server_version"))
                object.server_version = message.server_version;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingServerMatchEndPartial;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingClient2GCHello = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingClient2GCHello.
         * @exports ICMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @interface ICMsgGCCStrike15_v2_MatchmakingClient2GCHello
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingClient2GCHello.
         * @exports CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingClient2GCHello.
         * @implements ICMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2GCHello=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingClient2GCHello(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingClient2GCHello instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2GCHello=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2GCHello} CMsgGCCStrike15_v2_MatchmakingClient2GCHello instance
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingClient2GCHello(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingClient2GCHello message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingClient2GCHello.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2GCHello} message CMsgGCCStrike15_v2_MatchmakingClient2GCHello message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingClient2GCHello message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingClient2GCHello.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingClient2GCHello} message CMsgGCCStrike15_v2_MatchmakingClient2GCHello message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingClient2GCHello message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2GCHello} CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingClient2GCHello message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2GCHello} CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingClient2GCHello message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingClient2GCHello message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingClient2GCHello} CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
                return object;
            return new $root.CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingClient2GCHello message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingClient2GCHello} message CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingClient2GCHello to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingClient2GCHello
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingClient2GCHello;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_id
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null} [ongoingmatch] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ongoingmatch
         * @property {IGlobalStatistics|null} [global_stats] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello global_stats
         * @property {number|null} [penalty_seconds] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello penalty_seconds
         * @property {number|null} [penalty_reason] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello penalty_reason
         * @property {number|null} [vac_banned] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello vac_banned
         * @property {IPlayerRankingInfo|null} [ranking] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ranking
         * @property {IPlayerCommendationInfo|null} [commendation] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello commendation
         * @property {IPlayerMedalsInfo|null} [medals] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello medals
         * @property {ITournamentEvent|null} [my_current_event] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event
         * @property {Array.<ITournamentTeam>|null} [my_current_event_teams] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event_teams
         * @property {ITournamentTeam|null} [my_current_team] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_team
         * @property {Array.<ITournamentEvent>|null} [my_current_event_stages] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event_stages
         * @property {number|null} [survey_vote] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello survey_vote
         * @property {IAccountActivity|null} [activity] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello activity
         * @property {number|null} [player_level] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_level
         * @property {number|null} [player_cur_xp] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_cur_xp
         * @property {number|null} [player_xp_bonus_flags] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_xp_bonus_flags
         * @property {Array.<IPlayerRankingInfo>|null} [rankings] CMsgGCCStrike15_v2_MatchmakingGC2ClientHello rankings
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(properties) {
            this.my_current_event_teams = [];
            this.my_current_event_stages = [];
            this.rankings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ongoingmatch.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null|undefined} ongoingmatch
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.ongoingmatch = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello global_stats.
         * @member {IGlobalStatistics|null|undefined} global_stats
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.global_stats = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello penalty_seconds.
         * @member {number} penalty_seconds
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.penalty_seconds = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello penalty_reason.
         * @member {number} penalty_reason
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.penalty_reason = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello vac_banned.
         * @member {number} vac_banned
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.vac_banned = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ranking.
         * @member {IPlayerRankingInfo|null|undefined} ranking
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.ranking = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello commendation.
         * @member {IPlayerCommendationInfo|null|undefined} commendation
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.commendation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello medals.
         * @member {IPlayerMedalsInfo|null|undefined} medals
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.medals = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event.
         * @member {ITournamentEvent|null|undefined} my_current_event
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.my_current_event = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event_teams.
         * @member {Array.<ITournamentTeam>} my_current_event_teams
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.my_current_event_teams = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_team.
         * @member {ITournamentTeam|null|undefined} my_current_team
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.my_current_team = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello my_current_event_stages.
         * @member {Array.<ITournamentEvent>} my_current_event_stages
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.my_current_event_stages = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello survey_vote.
         * @member {number} survey_vote
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.survey_vote = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello activity.
         * @member {IAccountActivity|null|undefined} activity
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.activity = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_level.
         * @member {number} player_level
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.player_level = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_cur_xp.
         * @member {number} player_cur_xp
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.player_cur_xp = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello player_xp_bonus_flags.
         * @member {number} player_xp_bonus_flags
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.player_xp_bonus_flags = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientHello rankings.
         * @member {Array.<IPlayerRankingInfo>} rankings
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.rankings = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientHello} CMsgGCCStrike15_v2_MatchmakingGC2ClientHello instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello} message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.ongoingmatch != null && message.hasOwnProperty("ongoingmatch"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encode(message.ongoingmatch, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.global_stats != null && message.hasOwnProperty("global_stats"))
                $root.GlobalStatistics.encode(message.global_stats, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.penalty_seconds);
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.penalty_reason);
            if (message.vac_banned != null && message.hasOwnProperty("vac_banned"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.vac_banned);
            if (message.ranking != null && message.hasOwnProperty("ranking"))
                $root.PlayerRankingInfo.encode(message.ranking, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                $root.PlayerCommendationInfo.encode(message.commendation, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.medals != null && message.hasOwnProperty("medals"))
                $root.PlayerMedalsInfo.encode(message.medals, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.my_current_event != null && message.hasOwnProperty("my_current_event"))
                $root.TournamentEvent.encode(message.my_current_event, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.my_current_event_teams != null && message.my_current_event_teams.length)
                for (var i = 0; i < message.my_current_event_teams.length; ++i)
                    $root.TournamentTeam.encode(message.my_current_event_teams[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.my_current_team != null && message.hasOwnProperty("my_current_team"))
                $root.TournamentTeam.encode(message.my_current_team, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.my_current_event_stages != null && message.my_current_event_stages.length)
                for (var i = 0; i < message.my_current_event_stages.length; ++i)
                    $root.TournamentEvent.encode(message.my_current_event_stages[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.survey_vote != null && message.hasOwnProperty("survey_vote"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.survey_vote);
            if (message.activity != null && message.hasOwnProperty("activity"))
                $root.AccountActivity.encode(message.activity, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.player_level);
            if (message.player_cur_xp != null && message.hasOwnProperty("player_cur_xp"))
                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.player_cur_xp);
            if (message.player_xp_bonus_flags != null && message.hasOwnProperty("player_xp_bonus_flags"))
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.player_xp_bonus_flags);
            if (message.rankings != null && message.rankings.length)
                for (var i = 0; i < message.rankings.length; ++i)
                    $root.PlayerRankingInfo.encode(message.rankings[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello} message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientHello} CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.ongoingmatch = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.global_stats = $root.GlobalStatistics.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.penalty_seconds = reader.uint32();
                    break;
                case 5:
                    message.penalty_reason = reader.uint32();
                    break;
                case 6:
                    message.vac_banned = reader.int32();
                    break;
                case 7:
                    message.ranking = $root.PlayerRankingInfo.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.commendation = $root.PlayerCommendationInfo.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.medals = $root.PlayerMedalsInfo.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.my_current_event = $root.TournamentEvent.decode(reader, reader.uint32());
                    break;
                case 11:
                    if (!(message.my_current_event_teams && message.my_current_event_teams.length))
                        message.my_current_event_teams = [];
                    message.my_current_event_teams.push($root.TournamentTeam.decode(reader, reader.uint32()));
                    break;
                case 12:
                    message.my_current_team = $root.TournamentTeam.decode(reader, reader.uint32());
                    break;
                case 13:
                    if (!(message.my_current_event_stages && message.my_current_event_stages.length))
                        message.my_current_event_stages = [];
                    message.my_current_event_stages.push($root.TournamentEvent.decode(reader, reader.uint32()));
                    break;
                case 14:
                    message.survey_vote = reader.uint32();
                    break;
                case 15:
                    message.activity = $root.AccountActivity.decode(reader, reader.uint32());
                    break;
                case 17:
                    message.player_level = reader.int32();
                    break;
                case 18:
                    message.player_cur_xp = reader.int32();
                    break;
                case 19:
                    message.player_xp_bonus_flags = reader.int32();
                    break;
                case 20:
                    if (!(message.rankings && message.rankings.length))
                        message.rankings = [];
                    message.rankings.push($root.PlayerRankingInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientHello} CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.ongoingmatch != null && message.hasOwnProperty("ongoingmatch")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify(message.ongoingmatch);
                if (error)
                    return "ongoingmatch." + error;
            }
            if (message.global_stats != null && message.hasOwnProperty("global_stats")) {
                var error = $root.GlobalStatistics.verify(message.global_stats);
                if (error)
                    return "global_stats." + error;
            }
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                if (!$util.isInteger(message.penalty_seconds))
                    return "penalty_seconds: integer expected";
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                if (!$util.isInteger(message.penalty_reason))
                    return "penalty_reason: integer expected";
            if (message.vac_banned != null && message.hasOwnProperty("vac_banned"))
                if (!$util.isInteger(message.vac_banned))
                    return "vac_banned: integer expected";
            if (message.ranking != null && message.hasOwnProperty("ranking")) {
                var error = $root.PlayerRankingInfo.verify(message.ranking);
                if (error)
                    return "ranking." + error;
            }
            if (message.commendation != null && message.hasOwnProperty("commendation")) {
                var error = $root.PlayerCommendationInfo.verify(message.commendation);
                if (error)
                    return "commendation." + error;
            }
            if (message.medals != null && message.hasOwnProperty("medals")) {
                var error = $root.PlayerMedalsInfo.verify(message.medals);
                if (error)
                    return "medals." + error;
            }
            if (message.my_current_event != null && message.hasOwnProperty("my_current_event")) {
                var error = $root.TournamentEvent.verify(message.my_current_event);
                if (error)
                    return "my_current_event." + error;
            }
            if (message.my_current_event_teams != null && message.hasOwnProperty("my_current_event_teams")) {
                if (!Array.isArray(message.my_current_event_teams))
                    return "my_current_event_teams: array expected";
                for (var i = 0; i < message.my_current_event_teams.length; ++i) {
                    var error = $root.TournamentTeam.verify(message.my_current_event_teams[i]);
                    if (error)
                        return "my_current_event_teams." + error;
                }
            }
            if (message.my_current_team != null && message.hasOwnProperty("my_current_team")) {
                var error = $root.TournamentTeam.verify(message.my_current_team);
                if (error)
                    return "my_current_team." + error;
            }
            if (message.my_current_event_stages != null && message.hasOwnProperty("my_current_event_stages")) {
                if (!Array.isArray(message.my_current_event_stages))
                    return "my_current_event_stages: array expected";
                for (var i = 0; i < message.my_current_event_stages.length; ++i) {
                    var error = $root.TournamentEvent.verify(message.my_current_event_stages[i]);
                    if (error)
                        return "my_current_event_stages." + error;
                }
            }
            if (message.survey_vote != null && message.hasOwnProperty("survey_vote"))
                if (!$util.isInteger(message.survey_vote))
                    return "survey_vote: integer expected";
            if (message.activity != null && message.hasOwnProperty("activity")) {
                var error = $root.AccountActivity.verify(message.activity);
                if (error)
                    return "activity." + error;
            }
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                if (!$util.isInteger(message.player_level))
                    return "player_level: integer expected";
            if (message.player_cur_xp != null && message.hasOwnProperty("player_cur_xp"))
                if (!$util.isInteger(message.player_cur_xp))
                    return "player_cur_xp: integer expected";
            if (message.player_xp_bonus_flags != null && message.hasOwnProperty("player_xp_bonus_flags"))
                if (!$util.isInteger(message.player_xp_bonus_flags))
                    return "player_xp_bonus_flags: integer expected";
            if (message.rankings != null && message.hasOwnProperty("rankings")) {
                if (!Array.isArray(message.rankings))
                    return "rankings: array expected";
                for (var i = 0; i < message.rankings.length; ++i) {
                    var error = $root.PlayerRankingInfo.verify(message.rankings[i]);
                    if (error)
                        return "rankings." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientHello} CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.ongoingmatch != null) {
                if (typeof object.ongoingmatch !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ongoingmatch: object expected");
                message.ongoingmatch = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.fromObject(object.ongoingmatch);
            }
            if (object.global_stats != null) {
                if (typeof object.global_stats !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.global_stats: object expected");
                message.global_stats = $root.GlobalStatistics.fromObject(object.global_stats);
            }
            if (object.penalty_seconds != null)
                message.penalty_seconds = object.penalty_seconds >>> 0;
            if (object.penalty_reason != null)
                message.penalty_reason = object.penalty_reason >>> 0;
            if (object.vac_banned != null)
                message.vac_banned = object.vac_banned | 0;
            if (object.ranking != null) {
                if (typeof object.ranking !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.ranking: object expected");
                message.ranking = $root.PlayerRankingInfo.fromObject(object.ranking);
            }
            if (object.commendation != null) {
                if (typeof object.commendation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.commendation: object expected");
                message.commendation = $root.PlayerCommendationInfo.fromObject(object.commendation);
            }
            if (object.medals != null) {
                if (typeof object.medals !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.medals: object expected");
                message.medals = $root.PlayerMedalsInfo.fromObject(object.medals);
            }
            if (object.my_current_event != null) {
                if (typeof object.my_current_event !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event: object expected");
                message.my_current_event = $root.TournamentEvent.fromObject(object.my_current_event);
            }
            if (object.my_current_event_teams) {
                if (!Array.isArray(object.my_current_event_teams))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams: array expected");
                message.my_current_event_teams = [];
                for (var i = 0; i < object.my_current_event_teams.length; ++i) {
                    if (typeof object.my_current_event_teams[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_teams: object expected");
                    message.my_current_event_teams[i] = $root.TournamentTeam.fromObject(object.my_current_event_teams[i]);
                }
            }
            if (object.my_current_team != null) {
                if (typeof object.my_current_team !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_team: object expected");
                message.my_current_team = $root.TournamentTeam.fromObject(object.my_current_team);
            }
            if (object.my_current_event_stages) {
                if (!Array.isArray(object.my_current_event_stages))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages: array expected");
                message.my_current_event_stages = [];
                for (var i = 0; i < object.my_current_event_stages.length; ++i) {
                    if (typeof object.my_current_event_stages[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.my_current_event_stages: object expected");
                    message.my_current_event_stages[i] = $root.TournamentEvent.fromObject(object.my_current_event_stages[i]);
                }
            }
            if (object.survey_vote != null)
                message.survey_vote = object.survey_vote >>> 0;
            if (object.activity != null) {
                if (typeof object.activity !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.activity: object expected");
                message.activity = $root.AccountActivity.fromObject(object.activity);
            }
            if (object.player_level != null)
                message.player_level = object.player_level | 0;
            if (object.player_cur_xp != null)
                message.player_cur_xp = object.player_cur_xp | 0;
            if (object.player_xp_bonus_flags != null)
                message.player_xp_bonus_flags = object.player_xp_bonus_flags | 0;
            if (object.rankings) {
                if (!Array.isArray(object.rankings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.rankings: array expected");
                message.rankings = [];
                for (var i = 0; i < object.rankings.length; ++i) {
                    if (typeof object.rankings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.rankings: object expected");
                    message.rankings[i] = $root.PlayerRankingInfo.fromObject(object.rankings[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ClientHello message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientHello} message CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.my_current_event_teams = [];
                object.my_current_event_stages = [];
                object.rankings = [];
            }
            if (options.defaults) {
                object.account_id = 0;
                object.ongoingmatch = null;
                object.global_stats = null;
                object.penalty_seconds = 0;
                object.penalty_reason = 0;
                object.vac_banned = 0;
                object.ranking = null;
                object.commendation = null;
                object.medals = null;
                object.my_current_event = null;
                object.my_current_team = null;
                object.survey_vote = 0;
                object.activity = null;
                object.player_level = 0;
                object.player_cur_xp = 0;
                object.player_xp_bonus_flags = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.ongoingmatch != null && message.hasOwnProperty("ongoingmatch"))
                object.ongoingmatch = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.toObject(message.ongoingmatch, options);
            if (message.global_stats != null && message.hasOwnProperty("global_stats"))
                object.global_stats = $root.GlobalStatistics.toObject(message.global_stats, options);
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                object.penalty_seconds = message.penalty_seconds;
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                object.penalty_reason = message.penalty_reason;
            if (message.vac_banned != null && message.hasOwnProperty("vac_banned"))
                object.vac_banned = message.vac_banned;
            if (message.ranking != null && message.hasOwnProperty("ranking"))
                object.ranking = $root.PlayerRankingInfo.toObject(message.ranking, options);
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                object.commendation = $root.PlayerCommendationInfo.toObject(message.commendation, options);
            if (message.medals != null && message.hasOwnProperty("medals"))
                object.medals = $root.PlayerMedalsInfo.toObject(message.medals, options);
            if (message.my_current_event != null && message.hasOwnProperty("my_current_event"))
                object.my_current_event = $root.TournamentEvent.toObject(message.my_current_event, options);
            if (message.my_current_event_teams && message.my_current_event_teams.length) {
                object.my_current_event_teams = [];
                for (var j = 0; j < message.my_current_event_teams.length; ++j)
                    object.my_current_event_teams[j] = $root.TournamentTeam.toObject(message.my_current_event_teams[j], options);
            }
            if (message.my_current_team != null && message.hasOwnProperty("my_current_team"))
                object.my_current_team = $root.TournamentTeam.toObject(message.my_current_team, options);
            if (message.my_current_event_stages && message.my_current_event_stages.length) {
                object.my_current_event_stages = [];
                for (var j = 0; j < message.my_current_event_stages.length; ++j)
                    object.my_current_event_stages[j] = $root.TournamentEvent.toObject(message.my_current_event_stages[j], options);
            }
            if (message.survey_vote != null && message.hasOwnProperty("survey_vote"))
                object.survey_vote = message.survey_vote;
            if (message.activity != null && message.hasOwnProperty("activity"))
                object.activity = $root.AccountActivity.toObject(message.activity, options);
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                object.player_level = message.player_level;
            if (message.player_cur_xp != null && message.hasOwnProperty("player_cur_xp"))
                object.player_cur_xp = message.player_cur_xp;
            if (message.player_xp_bonus_flags != null && message.hasOwnProperty("player_xp_bonus_flags"))
                object.player_xp_bonus_flags = message.player_xp_bonus_flags;
            if (message.rankings && message.rankings.length) {
                object.rankings = [];
                for (var j = 0; j < message.rankings.length; ++j)
                    object.rankings[j] = $root.PlayerRankingInfo.toObject(message.rankings[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ClientHello to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientHello
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ClientHello;
    })();
    
    $root.CMsgGCCStrike15_v2_AccountPrivacySettings = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_AccountPrivacySettings.
         * @exports ICMsgGCCStrike15_v2_AccountPrivacySettings
         * @interface ICMsgGCCStrike15_v2_AccountPrivacySettings
         * @property {Array.<CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting>|null} [settings] CMsgGCCStrike15_v2_AccountPrivacySettings settings
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_AccountPrivacySettings.
         * @exports CMsgGCCStrike15_v2_AccountPrivacySettings
         * @classdesc Represents a CMsgGCCStrike15_v2_AccountPrivacySettings.
         * @implements ICMsgGCCStrike15_v2_AccountPrivacySettings
         * @constructor
         * @param {ICMsgGCCStrike15_v2_AccountPrivacySettings=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_AccountPrivacySettings(properties) {
            this.settings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_AccountPrivacySettings settings.
         * @member {Array.<CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting>} settings
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @instance
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.prototype.settings = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_AccountPrivacySettings instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {ICMsgGCCStrike15_v2_AccountPrivacySettings=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings} CMsgGCCStrike15_v2_AccountPrivacySettings instance
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.create = function create(properties) {
            return new CMsgGCCStrike15_v2_AccountPrivacySettings(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_AccountPrivacySettings message. Does not implicitly {@link CMsgGCCStrike15_v2_AccountPrivacySettings.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {ICMsgGCCStrike15_v2_AccountPrivacySettings} message CMsgGCCStrike15_v2_AccountPrivacySettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.settings != null && message.settings.length)
                for (var i = 0; i < message.settings.length; ++i)
                    $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.encode(message.settings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_AccountPrivacySettings message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_AccountPrivacySettings.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {ICMsgGCCStrike15_v2_AccountPrivacySettings} message CMsgGCCStrike15_v2_AccountPrivacySettings message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_AccountPrivacySettings message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings} CMsgGCCStrike15_v2_AccountPrivacySettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_AccountPrivacySettings();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.settings && message.settings.length))
                        message.settings = [];
                    message.settings.push($root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_AccountPrivacySettings message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings} CMsgGCCStrike15_v2_AccountPrivacySettings
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_AccountPrivacySettings message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.settings != null && message.hasOwnProperty("settings")) {
                if (!Array.isArray(message.settings))
                    return "settings: array expected";
                for (var i = 0; i < message.settings.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.verify(message.settings[i]);
                    if (error)
                        return "settings." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_AccountPrivacySettings message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings} CMsgGCCStrike15_v2_AccountPrivacySettings
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_AccountPrivacySettings)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_AccountPrivacySettings();
            if (object.settings) {
                if (!Array.isArray(object.settings))
                    throw TypeError(".CMsgGCCStrike15_v2_AccountPrivacySettings.settings: array expected");
                message.settings = [];
                for (var i = 0; i < object.settings.length; ++i) {
                    if (typeof object.settings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_AccountPrivacySettings.settings: object expected");
                    message.settings[i] = $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.fromObject(object.settings[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_AccountPrivacySettings message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @static
         * @param {CMsgGCCStrike15_v2_AccountPrivacySettings} message CMsgGCCStrike15_v2_AccountPrivacySettings
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.settings = [];
            if (message.settings && message.settings.length) {
                object.settings = [];
                for (var j = 0; j < message.settings.length; ++j)
                    object.settings[j] = $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.toObject(message.settings[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_AccountPrivacySettings to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_AccountPrivacySettings.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_AccountPrivacySettings.Setting = (function() {
    
            /**
             * Properties of a Setting.
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
             * @interface ISetting
             * @property {number|null} [setting_type] Setting setting_type
             * @property {number|null} [setting_value] Setting setting_value
             */
    
            /**
             * Constructs a new Setting.
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings
             * @classdesc Represents a Setting.
             * @implements ISetting
             * @constructor
             * @param {CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting=} [properties] Properties to set
             */
            function Setting(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Setting setting_type.
             * @member {number} setting_type
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @instance
             */
            Setting.prototype.setting_type = 0;
    
            /**
             * Setting setting_value.
             * @member {number} setting_value
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @instance
             */
            Setting.prototype.setting_value = 0;
    
            /**
             * Creates a new Setting instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings.Setting} Setting instance
             */
            Setting.create = function create(properties) {
                return new Setting(properties);
            };
    
            /**
             * Encodes the specified Setting message. Does not implicitly {@link CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting} message Setting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Setting.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.setting_type != null && message.hasOwnProperty("setting_type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.setting_type);
                if (message.setting_value != null && message.hasOwnProperty("setting_value"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.setting_value);
                return writer;
            };
    
            /**
             * Encodes the specified Setting message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_AccountPrivacySettings.Setting.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {CMsgGCCStrike15_v2_AccountPrivacySettings.ISetting} message Setting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Setting.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Setting message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings.Setting} Setting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Setting.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.setting_type = reader.uint32();
                        break;
                    case 2:
                        message.setting_value = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Setting message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings.Setting} Setting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Setting.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Setting message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Setting.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.setting_type != null && message.hasOwnProperty("setting_type"))
                    if (!$util.isInteger(message.setting_type))
                        return "setting_type: integer expected";
                if (message.setting_value != null && message.hasOwnProperty("setting_value"))
                    if (!$util.isInteger(message.setting_value))
                        return "setting_value: integer expected";
                return null;
            };
    
            /**
             * Creates a Setting message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_AccountPrivacySettings.Setting} Setting
             */
            Setting.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_AccountPrivacySettings.Setting();
                if (object.setting_type != null)
                    message.setting_type = object.setting_type >>> 0;
                if (object.setting_value != null)
                    message.setting_value = object.setting_value >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Setting message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @static
             * @param {CMsgGCCStrike15_v2_AccountPrivacySettings.Setting} message Setting
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Setting.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.setting_type = 0;
                    object.setting_value = 0;
                }
                if (message.setting_type != null && message.hasOwnProperty("setting_type"))
                    object.setting_type = message.setting_type;
                if (message.setting_value != null && message.hasOwnProperty("setting_value"))
                    object.setting_value = message.setting_value;
                return object;
            };
    
            /**
             * Converts this Setting to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_AccountPrivacySettings.Setting
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Setting.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Setting;
        })();
    
        return CMsgGCCStrike15_v2_AccountPrivacySettings;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon account_id
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null} [abandoned_match] CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon abandoned_match
         * @property {number|null} [penalty_seconds] CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon penalty_seconds
         * @property {number|null} [penalty_reason] CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon penalty_reason
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon abandoned_match.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null|undefined} abandoned_match
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.prototype.abandoned_match = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon penalty_seconds.
         * @member {number} penalty_seconds
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.prototype.penalty_seconds = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon penalty_reason.
         * @member {number} penalty_reason
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.prototype.penalty_reason = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.abandoned_match != null && message.hasOwnProperty("abandoned_match"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encode(message.abandoned_match, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty_seconds);
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.penalty_reason);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.abandoned_match = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.penalty_seconds = reader.uint32();
                    break;
                case 4:
                    message.penalty_reason = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.abandoned_match != null && message.hasOwnProperty("abandoned_match")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify(message.abandoned_match);
                if (error)
                    return "abandoned_match." + error;
            }
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                if (!$util.isInteger(message.penalty_seconds))
                    return "penalty_seconds: integer expected";
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                if (!$util.isInteger(message.penalty_reason))
                    return "penalty_reason: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.abandoned_match != null) {
                if (typeof object.abandoned_match !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.abandoned_match: object expected");
                message.abandoned_match = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.fromObject(object.abandoned_match);
            }
            if (object.penalty_seconds != null)
                message.penalty_seconds = object.penalty_seconds >>> 0;
            if (object.penalty_reason != null)
                message.penalty_reason = object.penalty_reason >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon} message CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.abandoned_match = null;
                object.penalty_seconds = 0;
                object.penalty_reason = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.abandoned_match != null && message.hasOwnProperty("abandoned_match"))
                object.abandoned_match = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.toObject(message.abandoned_match, options);
            if (message.penalty_seconds != null && message.hasOwnProperty("penalty_seconds"))
                object.penalty_seconds = message.penalty_seconds;
            if (message.penalty_reason != null && message.hasOwnProperty("penalty_reason"))
                object.penalty_reason = message.penalty_reason;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingServer2GCKick = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingServer2GCKick.
         * @exports ICMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @interface ICMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_MatchmakingServer2GCKick account_id
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null} [reservation] CMsgGCCStrike15_v2_MatchmakingServer2GCKick reservation
         * @property {number|null} [reason] CMsgGCCStrike15_v2_MatchmakingServer2GCKick reason
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingServer2GCKick.
         * @exports CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingServer2GCKick.
         * @implements ICMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingServer2GCKick=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingServer2GCKick(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServer2GCKick account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServer2GCKick reservation.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ServerReserve|null|undefined} reservation
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.prototype.reservation = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingServer2GCKick reason.
         * @member {number} reason
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.prototype.reason = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingServer2GCKick instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServer2GCKick=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingServer2GCKick} CMsgGCCStrike15_v2_MatchmakingServer2GCKick instance
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingServer2GCKick(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServer2GCKick message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServer2GCKick.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServer2GCKick} message CMsgGCCStrike15_v2_MatchmakingServer2GCKick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.encode(message.reservation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.reason);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingServer2GCKick message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingServer2GCKick.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingServer2GCKick} message CMsgGCCStrike15_v2_MatchmakingServer2GCKick message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServer2GCKick message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingServer2GCKick} CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.reason = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingServer2GCKick message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingServer2GCKick} CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingServer2GCKick message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.reservation != null && message.hasOwnProperty("reservation")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.verify(message.reservation);
                if (error)
                    return "reservation." + error;
            }
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isInteger(message.reason))
                    return "reason: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingServer2GCKick message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingServer2GCKick} CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingServer2GCKick)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.reservation != null) {
                if (typeof object.reservation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingServer2GCKick.reservation: object expected");
                message.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.fromObject(object.reservation);
            }
            if (object.reason != null)
                message.reason = object.reason >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingServer2GCKick message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingServer2GCKick} message CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.reservation = null;
                object.reason = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.reservation != null && message.hasOwnProperty("reservation"))
                object.reservation = $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.toObject(message.reservation, options);
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingServer2GCKick to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingServer2GCKick
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingServer2GCKick;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.
         * @exports ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @interface ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @property {Array.<IPlayerRankingInfo>|null} [rankings] CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate rankings
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate match_id
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.
         * @exports CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.
         * @implements ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(properties) {
            this.rankings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate rankings.
         * @member {Array.<IPlayerRankingInfo>} rankings
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.prototype.rankings = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate instance
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rankings != null && message.rankings.length)
                for (var i = 0; i < message.rankings.length; ++i)
                    $root.PlayerRankingInfo.encode(message.rankings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.match_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.rankings && message.rankings.length))
                        message.rankings = [];
                    message.rankings.push($root.PlayerRankingInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.match_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rankings != null && message.hasOwnProperty("rankings")) {
                if (!Array.isArray(message.rankings))
                    return "rankings: array expected";
                for (var i = 0; i < message.rankings.length; ++i) {
                    var error = $root.PlayerRankingInfo.verify(message.rankings[i]);
                    if (error)
                        return "rankings." + error;
                }
            }
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
            if (object.rankings) {
                if (!Array.isArray(object.rankings))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings: array expected");
                message.rankings = [];
                for (var i = 0; i < object.rankings.length; ++i) {
                    if (typeof object.rankings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.rankings: object expected");
                    message.rankings[i] = $root.PlayerRankingInfo.fromObject(object.rankings[i]);
                }
            }
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate} message CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rankings = [];
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
            if (message.rankings && message.rankings.length) {
                object.rankings = [];
                for (var j = 0; j < message.rankings.length; ++j)
                    object.rankings[j] = $root.PlayerRankingInfo.toObject(message.rankings[j], options);
            }
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientGCRankUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientGCRankUpdate.
         * @exports ICMsgGCCStrike15_v2_ClientGCRankUpdate
         * @interface ICMsgGCCStrike15_v2_ClientGCRankUpdate
         * @property {Array.<IPlayerRankingInfo>|null} [rankings] CMsgGCCStrike15_v2_ClientGCRankUpdate rankings
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientGCRankUpdate.
         * @exports CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientGCRankUpdate.
         * @implements ICMsgGCCStrike15_v2_ClientGCRankUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientGCRankUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientGCRankUpdate(properties) {
            this.rankings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientGCRankUpdate rankings.
         * @member {Array.<IPlayerRankingInfo>} rankings
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.prototype.rankings = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientGCRankUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientGCRankUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientGCRankUpdate} CMsgGCCStrike15_v2_ClientGCRankUpdate instance
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientGCRankUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientGCRankUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientGCRankUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientGCRankUpdate} message CMsgGCCStrike15_v2_ClientGCRankUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rankings != null && message.rankings.length)
                for (var i = 0; i < message.rankings.length; ++i)
                    $root.PlayerRankingInfo.encode(message.rankings[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientGCRankUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientGCRankUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientGCRankUpdate} message CMsgGCCStrike15_v2_ClientGCRankUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientGCRankUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientGCRankUpdate} CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientGCRankUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.rankings && message.rankings.length))
                        message.rankings = [];
                    message.rankings.push($root.PlayerRankingInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientGCRankUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientGCRankUpdate} CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientGCRankUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rankings != null && message.hasOwnProperty("rankings")) {
                if (!Array.isArray(message.rankings))
                    return "rankings: array expected";
                for (var i = 0; i < message.rankings.length; ++i) {
                    var error = $root.PlayerRankingInfo.verify(message.rankings[i]);
                    if (error)
                        return "rankings." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientGCRankUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientGCRankUpdate} CMsgGCCStrike15_v2_ClientGCRankUpdate
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientGCRankUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientGCRankUpdate();
            if (object.rankings) {
                if (!Array.isArray(object.rankings))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientGCRankUpdate.rankings: array expected");
                message.rankings = [];
                for (var i = 0; i < object.rankings.length; ++i) {
                    if (typeof object.rankings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_ClientGCRankUpdate.rankings: object expected");
                    message.rankings[i] = $root.PlayerRankingInfo.fromObject(object.rankings[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientGCRankUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_ClientGCRankUpdate} message CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.rankings = [];
            if (message.rankings && message.rankings.length) {
                object.rankings = [];
                for (var j = 0; j < message.rankings.length; ++j)
                    object.rankings[j] = $root.PlayerRankingInfo.toObject(message.rankings[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientGCRankUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientGCRankUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientGCRankUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientGCRankUpdate;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.
         * @exports ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @interface ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @property {string|null} [main_post_url] CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate main_post_url
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.
         * @exports CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.
         * @implements ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate main_post_url.
         * @member {string} main_post_url
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.prototype.main_post_url = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate instance
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.main_post_url);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.main_post_url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                if (!$util.isString(message.main_post_url))
                    return "main_post_url: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
            if (object.main_post_url != null)
                message.main_post_url = String(object.main_post_url);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate} message CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.main_post_url = "";
            if (message.main_post_url != null && message.hasOwnProperty("main_post_url"))
                object.main_post_url = message.main_post_url;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate;
    })();
    
    $root.CMsgGCCStrike15_v2_ServerNotificationForUserPenalty = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.
         * @exports ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @interface ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ServerNotificationForUserPenalty account_id
         * @property {number|null} [reason] CMsgGCCStrike15_v2_ServerNotificationForUserPenalty reason
         * @property {number|null} [seconds] CMsgGCCStrike15_v2_ServerNotificationForUserPenalty seconds
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.
         * @exports CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @classdesc Represents a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.
         * @implements ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ServerNotificationForUserPenalty account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @instance
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ServerNotificationForUserPenalty reason.
         * @member {number} reason
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @instance
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.prototype.reason = 0;
    
        /**
         * CMsgGCCStrike15_v2_ServerNotificationForUserPenalty seconds.
         * @member {number} seconds
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @instance
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.prototype.seconds = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ServerNotificationForUserPenalty} CMsgGCCStrike15_v2_ServerNotificationForUserPenalty instance
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message. Does not implicitly {@link CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty} message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.reason);
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.seconds);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerNotificationForUserPenalty} message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ServerNotificationForUserPenalty} CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.reason = reader.uint32();
                    break;
                case 3:
                    message.seconds = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ServerNotificationForUserPenalty} CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isInteger(message.reason))
                    return "reason: integer expected";
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (!$util.isInteger(message.seconds))
                    return "seconds: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ServerNotificationForUserPenalty} CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.reason != null)
                message.reason = object.reason >>> 0;
            if (object.seconds != null)
                message.seconds = object.seconds >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ServerNotificationForUserPenalty message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @static
         * @param {CMsgGCCStrike15_v2_ServerNotificationForUserPenalty} message CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.reason = 0;
                object.seconds = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                object.seconds = message.seconds;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ServerNotificationForUserPenalty to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ServerNotificationForUserPenalty
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ServerNotificationForUserPenalty;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientReportPlayer = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientReportPlayer.
         * @exports ICMsgGCCStrike15_v2_ClientReportPlayer
         * @interface ICMsgGCCStrike15_v2_ClientReportPlayer
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientReportPlayer account_id
         * @property {number|null} [rpt_aimbot] CMsgGCCStrike15_v2_ClientReportPlayer rpt_aimbot
         * @property {number|null} [rpt_wallhack] CMsgGCCStrike15_v2_ClientReportPlayer rpt_wallhack
         * @property {number|null} [rpt_speedhack] CMsgGCCStrike15_v2_ClientReportPlayer rpt_speedhack
         * @property {number|null} [rpt_teamharm] CMsgGCCStrike15_v2_ClientReportPlayer rpt_teamharm
         * @property {number|null} [rpt_textabuse] CMsgGCCStrike15_v2_ClientReportPlayer rpt_textabuse
         * @property {number|null} [rpt_voiceabuse] CMsgGCCStrike15_v2_ClientReportPlayer rpt_voiceabuse
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_ClientReportPlayer match_id
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientReportPlayer.
         * @exports CMsgGCCStrike15_v2_ClientReportPlayer
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientReportPlayer.
         * @implements ICMsgGCCStrike15_v2_ClientReportPlayer
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientReportPlayer=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientReportPlayer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_aimbot.
         * @member {number} rpt_aimbot
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_aimbot = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_wallhack.
         * @member {number} rpt_wallhack
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_wallhack = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_speedhack.
         * @member {number} rpt_speedhack
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_speedhack = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_teamharm.
         * @member {number} rpt_teamharm
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_teamharm = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_textabuse.
         * @member {number} rpt_textabuse
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_textabuse = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer rpt_voiceabuse.
         * @member {number} rpt_voiceabuse
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.rpt_voiceabuse = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportPlayer match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientReportPlayer instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportPlayer=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientReportPlayer} CMsgGCCStrike15_v2_ClientReportPlayer instance
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientReportPlayer(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportPlayer message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportPlayer.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportPlayer} message CMsgGCCStrike15_v2_ClientReportPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rpt_aimbot);
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rpt_wallhack);
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rpt_speedhack);
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rpt_teamharm);
            if (message.rpt_textabuse != null && message.hasOwnProperty("rpt_textabuse"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.rpt_textabuse);
            if (message.rpt_voiceabuse != null && message.hasOwnProperty("rpt_voiceabuse"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.rpt_voiceabuse);
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.match_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportPlayer message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportPlayer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportPlayer} message CMsgGCCStrike15_v2_ClientReportPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientReportPlayer} CMsgGCCStrike15_v2_ClientReportPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientReportPlayer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.rpt_aimbot = reader.uint32();
                    break;
                case 3:
                    message.rpt_wallhack = reader.uint32();
                    break;
                case 4:
                    message.rpt_speedhack = reader.uint32();
                    break;
                case 5:
                    message.rpt_teamharm = reader.uint32();
                    break;
                case 6:
                    message.rpt_textabuse = reader.uint32();
                    break;
                case 7:
                    message.rpt_voiceabuse = reader.uint32();
                    break;
                case 8:
                    message.match_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportPlayer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientReportPlayer} CMsgGCCStrike15_v2_ClientReportPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientReportPlayer message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                if (!$util.isInteger(message.rpt_aimbot))
                    return "rpt_aimbot: integer expected";
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                if (!$util.isInteger(message.rpt_wallhack))
                    return "rpt_wallhack: integer expected";
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                if (!$util.isInteger(message.rpt_speedhack))
                    return "rpt_speedhack: integer expected";
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                if (!$util.isInteger(message.rpt_teamharm))
                    return "rpt_teamharm: integer expected";
            if (message.rpt_textabuse != null && message.hasOwnProperty("rpt_textabuse"))
                if (!$util.isInteger(message.rpt_textabuse))
                    return "rpt_textabuse: integer expected";
            if (message.rpt_voiceabuse != null && message.hasOwnProperty("rpt_voiceabuse"))
                if (!$util.isInteger(message.rpt_voiceabuse))
                    return "rpt_voiceabuse: integer expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientReportPlayer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientReportPlayer} CMsgGCCStrike15_v2_ClientReportPlayer
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientReportPlayer)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientReportPlayer();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.rpt_aimbot != null)
                message.rpt_aimbot = object.rpt_aimbot >>> 0;
            if (object.rpt_wallhack != null)
                message.rpt_wallhack = object.rpt_wallhack >>> 0;
            if (object.rpt_speedhack != null)
                message.rpt_speedhack = object.rpt_speedhack >>> 0;
            if (object.rpt_teamharm != null)
                message.rpt_teamharm = object.rpt_teamharm >>> 0;
            if (object.rpt_textabuse != null)
                message.rpt_textabuse = object.rpt_textabuse >>> 0;
            if (object.rpt_voiceabuse != null)
                message.rpt_voiceabuse = object.rpt_voiceabuse >>> 0;
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientReportPlayer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @static
         * @param {CMsgGCCStrike15_v2_ClientReportPlayer} message CMsgGCCStrike15_v2_ClientReportPlayer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.rpt_aimbot = 0;
                object.rpt_wallhack = 0;
                object.rpt_speedhack = 0;
                object.rpt_teamharm = 0;
                object.rpt_textabuse = 0;
                object.rpt_voiceabuse = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                object.rpt_aimbot = message.rpt_aimbot;
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                object.rpt_wallhack = message.rpt_wallhack;
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                object.rpt_speedhack = message.rpt_speedhack;
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                object.rpt_teamharm = message.rpt_teamharm;
            if (message.rpt_textabuse != null && message.hasOwnProperty("rpt_textabuse"))
                object.rpt_textabuse = message.rpt_textabuse;
            if (message.rpt_voiceabuse != null && message.hasOwnProperty("rpt_voiceabuse"))
                object.rpt_voiceabuse = message.rpt_voiceabuse;
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientReportPlayer to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientReportPlayer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientReportPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientReportPlayer;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientCommendPlayer = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientCommendPlayer.
         * @exports ICMsgGCCStrike15_v2_ClientCommendPlayer
         * @interface ICMsgGCCStrike15_v2_ClientCommendPlayer
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientCommendPlayer account_id
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_ClientCommendPlayer match_id
         * @property {IPlayerCommendationInfo|null} [commendation] CMsgGCCStrike15_v2_ClientCommendPlayer commendation
         * @property {number|null} [tokens] CMsgGCCStrike15_v2_ClientCommendPlayer tokens
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientCommendPlayer.
         * @exports CMsgGCCStrike15_v2_ClientCommendPlayer
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientCommendPlayer.
         * @implements ICMsgGCCStrike15_v2_ClientCommendPlayer
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientCommendPlayer=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientCommendPlayer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientCommendPlayer account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientCommendPlayer match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientCommendPlayer commendation.
         * @member {IPlayerCommendationInfo|null|undefined} commendation
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.prototype.commendation = null;
    
        /**
         * CMsgGCCStrike15_v2_ClientCommendPlayer tokens.
         * @member {number} tokens
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.prototype.tokens = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientCommendPlayer instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientCommendPlayer=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientCommendPlayer} CMsgGCCStrike15_v2_ClientCommendPlayer instance
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientCommendPlayer(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientCommendPlayer message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientCommendPlayer.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientCommendPlayer} message CMsgGCCStrike15_v2_ClientCommendPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.match_id);
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                $root.PlayerCommendationInfo.encode(message.commendation, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.tokens);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientCommendPlayer message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientCommendPlayer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientCommendPlayer} message CMsgGCCStrike15_v2_ClientCommendPlayer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientCommendPlayer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientCommendPlayer} CMsgGCCStrike15_v2_ClientCommendPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientCommendPlayer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 8:
                    message.match_id = reader.uint64();
                    break;
                case 9:
                    message.commendation = $root.PlayerCommendationInfo.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.tokens = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientCommendPlayer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientCommendPlayer} CMsgGCCStrike15_v2_ClientCommendPlayer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientCommendPlayer message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.commendation != null && message.hasOwnProperty("commendation")) {
                var error = $root.PlayerCommendationInfo.verify(message.commendation);
                if (error)
                    return "commendation." + error;
            }
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                if (!$util.isInteger(message.tokens))
                    return "tokens: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientCommendPlayer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientCommendPlayer} CMsgGCCStrike15_v2_ClientCommendPlayer
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientCommendPlayer)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientCommendPlayer();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.commendation != null) {
                if (typeof object.commendation !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_ClientCommendPlayer.commendation: object expected");
                message.commendation = $root.PlayerCommendationInfo.fromObject(object.commendation);
            }
            if (object.tokens != null)
                message.tokens = object.tokens >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientCommendPlayer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @static
         * @param {CMsgGCCStrike15_v2_ClientCommendPlayer} message CMsgGCCStrike15_v2_ClientCommendPlayer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                object.commendation = null;
                object.tokens = 0;
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                object.commendation = $root.PlayerCommendationInfo.toObject(message.commendation, options);
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                object.tokens = message.tokens;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientCommendPlayer to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientCommendPlayer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientCommendPlayer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientCommendPlayer;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientReportServer = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientReportServer.
         * @exports ICMsgGCCStrike15_v2_ClientReportServer
         * @interface ICMsgGCCStrike15_v2_ClientReportServer
         * @property {number|null} [rpt_poorperf] CMsgGCCStrike15_v2_ClientReportServer rpt_poorperf
         * @property {number|null} [rpt_abusivemodels] CMsgGCCStrike15_v2_ClientReportServer rpt_abusivemodels
         * @property {number|null} [rpt_badmotd] CMsgGCCStrike15_v2_ClientReportServer rpt_badmotd
         * @property {number|null} [rpt_listingabuse] CMsgGCCStrike15_v2_ClientReportServer rpt_listingabuse
         * @property {number|null} [rpt_inventoryabuse] CMsgGCCStrike15_v2_ClientReportServer rpt_inventoryabuse
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_ClientReportServer match_id
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientReportServer.
         * @exports CMsgGCCStrike15_v2_ClientReportServer
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientReportServer.
         * @implements ICMsgGCCStrike15_v2_ClientReportServer
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientReportServer=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientReportServer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer rpt_poorperf.
         * @member {number} rpt_poorperf
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.rpt_poorperf = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer rpt_abusivemodels.
         * @member {number} rpt_abusivemodels
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.rpt_abusivemodels = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer rpt_badmotd.
         * @member {number} rpt_badmotd
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.rpt_badmotd = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer rpt_listingabuse.
         * @member {number} rpt_listingabuse
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.rpt_listingabuse = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer rpt_inventoryabuse.
         * @member {number} rpt_inventoryabuse
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.rpt_inventoryabuse = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportServer match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientReportServer instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportServer=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientReportServer} CMsgGCCStrike15_v2_ClientReportServer instance
         */
        CMsgGCCStrike15_v2_ClientReportServer.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientReportServer(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportServer message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportServer.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportServer} message CMsgGCCStrike15_v2_ClientReportServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportServer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rpt_poorperf != null && message.hasOwnProperty("rpt_poorperf"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rpt_poorperf);
            if (message.rpt_abusivemodels != null && message.hasOwnProperty("rpt_abusivemodels"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rpt_abusivemodels);
            if (message.rpt_badmotd != null && message.hasOwnProperty("rpt_badmotd"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rpt_badmotd);
            if (message.rpt_listingabuse != null && message.hasOwnProperty("rpt_listingabuse"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rpt_listingabuse);
            if (message.rpt_inventoryabuse != null && message.hasOwnProperty("rpt_inventoryabuse"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rpt_inventoryabuse);
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.match_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportServer message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportServer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportServer} message CMsgGCCStrike15_v2_ClientReportServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportServer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportServer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientReportServer} CMsgGCCStrike15_v2_ClientReportServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportServer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientReportServer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rpt_poorperf = reader.uint32();
                    break;
                case 2:
                    message.rpt_abusivemodels = reader.uint32();
                    break;
                case 3:
                    message.rpt_badmotd = reader.uint32();
                    break;
                case 4:
                    message.rpt_listingabuse = reader.uint32();
                    break;
                case 5:
                    message.rpt_inventoryabuse = reader.uint32();
                    break;
                case 8:
                    message.match_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportServer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientReportServer} CMsgGCCStrike15_v2_ClientReportServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportServer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientReportServer message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientReportServer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rpt_poorperf != null && message.hasOwnProperty("rpt_poorperf"))
                if (!$util.isInteger(message.rpt_poorperf))
                    return "rpt_poorperf: integer expected";
            if (message.rpt_abusivemodels != null && message.hasOwnProperty("rpt_abusivemodels"))
                if (!$util.isInteger(message.rpt_abusivemodels))
                    return "rpt_abusivemodels: integer expected";
            if (message.rpt_badmotd != null && message.hasOwnProperty("rpt_badmotd"))
                if (!$util.isInteger(message.rpt_badmotd))
                    return "rpt_badmotd: integer expected";
            if (message.rpt_listingabuse != null && message.hasOwnProperty("rpt_listingabuse"))
                if (!$util.isInteger(message.rpt_listingabuse))
                    return "rpt_listingabuse: integer expected";
            if (message.rpt_inventoryabuse != null && message.hasOwnProperty("rpt_inventoryabuse"))
                if (!$util.isInteger(message.rpt_inventoryabuse))
                    return "rpt_inventoryabuse: integer expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientReportServer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientReportServer} CMsgGCCStrike15_v2_ClientReportServer
         */
        CMsgGCCStrike15_v2_ClientReportServer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientReportServer)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientReportServer();
            if (object.rpt_poorperf != null)
                message.rpt_poorperf = object.rpt_poorperf >>> 0;
            if (object.rpt_abusivemodels != null)
                message.rpt_abusivemodels = object.rpt_abusivemodels >>> 0;
            if (object.rpt_badmotd != null)
                message.rpt_badmotd = object.rpt_badmotd >>> 0;
            if (object.rpt_listingabuse != null)
                message.rpt_listingabuse = object.rpt_listingabuse >>> 0;
            if (object.rpt_inventoryabuse != null)
                message.rpt_inventoryabuse = object.rpt_inventoryabuse >>> 0;
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientReportServer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @static
         * @param {CMsgGCCStrike15_v2_ClientReportServer} message CMsgGCCStrike15_v2_ClientReportServer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientReportServer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rpt_poorperf = 0;
                object.rpt_abusivemodels = 0;
                object.rpt_badmotd = 0;
                object.rpt_listingabuse = 0;
                object.rpt_inventoryabuse = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
            }
            if (message.rpt_poorperf != null && message.hasOwnProperty("rpt_poorperf"))
                object.rpt_poorperf = message.rpt_poorperf;
            if (message.rpt_abusivemodels != null && message.hasOwnProperty("rpt_abusivemodels"))
                object.rpt_abusivemodels = message.rpt_abusivemodels;
            if (message.rpt_badmotd != null && message.hasOwnProperty("rpt_badmotd"))
                object.rpt_badmotd = message.rpt_badmotd;
            if (message.rpt_listingabuse != null && message.hasOwnProperty("rpt_listingabuse"))
                object.rpt_listingabuse = message.rpt_listingabuse;
            if (message.rpt_inventoryabuse != null && message.hasOwnProperty("rpt_inventoryabuse"))
                object.rpt_inventoryabuse = message.rpt_inventoryabuse;
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientReportServer to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientReportServer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientReportServer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientReportServer;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientReportResponse = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientReportResponse.
         * @exports ICMsgGCCStrike15_v2_ClientReportResponse
         * @interface ICMsgGCCStrike15_v2_ClientReportResponse
         * @property {number|Long|null} [confirmation_id] CMsgGCCStrike15_v2_ClientReportResponse confirmation_id
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientReportResponse account_id
         * @property {number|null} [server_ip] CMsgGCCStrike15_v2_ClientReportResponse server_ip
         * @property {number|null} [response_type] CMsgGCCStrike15_v2_ClientReportResponse response_type
         * @property {number|null} [response_result] CMsgGCCStrike15_v2_ClientReportResponse response_result
         * @property {number|null} [tokens] CMsgGCCStrike15_v2_ClientReportResponse tokens
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientReportResponse.
         * @exports CMsgGCCStrike15_v2_ClientReportResponse
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientReportResponse.
         * @implements ICMsgGCCStrike15_v2_ClientReportResponse
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientReportResponse=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientReportResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse confirmation_id.
         * @member {number|Long} confirmation_id
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.confirmation_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse server_ip.
         * @member {number} server_ip
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.server_ip = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse response_type.
         * @member {number} response_type
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.response_type = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse response_result.
         * @member {number} response_result
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.response_result = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientReportResponse tokens.
         * @member {number} tokens
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.tokens = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientReportResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportResponse=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientReportResponse} CMsgGCCStrike15_v2_ClientReportResponse instance
         */
        CMsgGCCStrike15_v2_ClientReportResponse.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientReportResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportResponse message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportResponse} message CMsgGCCStrike15_v2_ClientReportResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.confirmation_id != null && message.hasOwnProperty("confirmation_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.confirmation_id);
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_id);
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.server_ip);
            if (message.response_type != null && message.hasOwnProperty("response_type"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.response_type);
            if (message.response_result != null && message.hasOwnProperty("response_result"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.response_result);
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tokens);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientReportResponse message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientReportResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientReportResponse} message CMsgGCCStrike15_v2_ClientReportResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientReportResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientReportResponse} CMsgGCCStrike15_v2_ClientReportResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientReportResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.confirmation_id = reader.uint64();
                    break;
                case 2:
                    message.account_id = reader.uint32();
                    break;
                case 3:
                    message.server_ip = reader.uint32();
                    break;
                case 4:
                    message.response_type = reader.uint32();
                    break;
                case 5:
                    message.response_result = reader.uint32();
                    break;
                case 6:
                    message.tokens = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientReportResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientReportResponse} CMsgGCCStrike15_v2_ClientReportResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientReportResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientReportResponse message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientReportResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.confirmation_id != null && message.hasOwnProperty("confirmation_id"))
                if (!$util.isInteger(message.confirmation_id) && !(message.confirmation_id && $util.isInteger(message.confirmation_id.low) && $util.isInteger(message.confirmation_id.high)))
                    return "confirmation_id: integer|Long expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                if (!$util.isInteger(message.server_ip))
                    return "server_ip: integer expected";
            if (message.response_type != null && message.hasOwnProperty("response_type"))
                if (!$util.isInteger(message.response_type))
                    return "response_type: integer expected";
            if (message.response_result != null && message.hasOwnProperty("response_result"))
                if (!$util.isInteger(message.response_result))
                    return "response_result: integer expected";
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                if (!$util.isInteger(message.tokens))
                    return "tokens: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientReportResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientReportResponse} CMsgGCCStrike15_v2_ClientReportResponse
         */
        CMsgGCCStrike15_v2_ClientReportResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientReportResponse)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientReportResponse();
            if (object.confirmation_id != null)
                if ($util.Long)
                    (message.confirmation_id = $util.Long.fromValue(object.confirmation_id)).unsigned = true;
                else if (typeof object.confirmation_id === "string")
                    message.confirmation_id = parseInt(object.confirmation_id, 10);
                else if (typeof object.confirmation_id === "number")
                    message.confirmation_id = object.confirmation_id;
                else if (typeof object.confirmation_id === "object")
                    message.confirmation_id = new $util.LongBits(object.confirmation_id.low >>> 0, object.confirmation_id.high >>> 0).toNumber(true);
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.server_ip != null)
                message.server_ip = object.server_ip >>> 0;
            if (object.response_type != null)
                message.response_type = object.response_type >>> 0;
            if (object.response_result != null)
                message.response_result = object.response_result >>> 0;
            if (object.tokens != null)
                message.tokens = object.tokens >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientReportResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @static
         * @param {CMsgGCCStrike15_v2_ClientReportResponse} message CMsgGCCStrike15_v2_ClientReportResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientReportResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.confirmation_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.confirmation_id = options.longs === String ? "0" : 0;
                object.account_id = 0;
                object.server_ip = 0;
                object.response_type = 0;
                object.response_result = 0;
                object.tokens = 0;
            }
            if (message.confirmation_id != null && message.hasOwnProperty("confirmation_id"))
                if (typeof message.confirmation_id === "number")
                    object.confirmation_id = options.longs === String ? String(message.confirmation_id) : message.confirmation_id;
                else
                    object.confirmation_id = options.longs === String ? $util.Long.prototype.toString.call(message.confirmation_id) : options.longs === Number ? new $util.LongBits(message.confirmation_id.low >>> 0, message.confirmation_id.high >>> 0).toNumber(true) : message.confirmation_id;
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                object.server_ip = message.server_ip;
            if (message.response_type != null && message.hasOwnProperty("response_type"))
                object.response_type = message.response_type;
            if (message.response_result != null && message.hasOwnProperty("response_result"))
                object.response_result = message.response_result;
            if (message.tokens != null && message.hasOwnProperty("tokens"))
                object.tokens = message.tokens;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientReportResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientReportResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientReportResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientReportResponse;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.
         * @exports ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @interface ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @property {number|null} [request_id] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends request_id
         * @property {Array.<number>|null} [account_ids] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends account_ids
         * @property {number|Long|null} [serverid] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends serverid
         * @property {number|Long|null} [matchid] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends matchid
         * @property {number|null} [client_launcher] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends client_launcher
         * @property {Array.<IDataCenterPing>|null} [data_center_pings] CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends data_center_pings
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.
         * @exports CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.
         * @implements ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(properties) {
            this.account_ids = [];
            this.data_center_pings = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends request_id.
         * @member {number} request_id
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.request_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends account_ids.
         * @member {Array.<number>} account_ids
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.account_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends serverid.
         * @member {number|Long} serverid
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.serverid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends matchid.
         * @member {number|Long} matchid
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.matchid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends client_launcher.
         * @member {number} client_launcher
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.client_launcher = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends data_center_pings.
         * @member {Array.<IDataCenterPing>} data_center_pings
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.data_center_pings = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends instance
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_id);
            if (message.account_ids != null && message.account_ids.length)
                for (var i = 0; i < message.account_ids.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_ids[i]);
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.serverid);
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.matchid);
            if (message.client_launcher != null && message.hasOwnProperty("client_launcher"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.client_launcher);
            if (message.data_center_pings != null && message.data_center_pings.length)
                for (var i = 0; i < message.data_center_pings.length; ++i)
                    $root.DataCenterPing.encode(message.data_center_pings[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.account_ids && message.account_ids.length))
                        message.account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.account_ids.push(reader.uint32());
                    } else
                        message.account_ids.push(reader.uint32());
                    break;
                case 3:
                    message.serverid = reader.uint64();
                    break;
                case 4:
                    message.matchid = reader.uint64();
                    break;
                case 5:
                    message.client_launcher = reader.uint32();
                    break;
                case 6:
                    if (!(message.data_center_pings && message.data_center_pings.length))
                        message.data_center_pings = [];
                    message.data_center_pings.push($root.DataCenterPing.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                if (!$util.isInteger(message.request_id))
                    return "request_id: integer expected";
            if (message.account_ids != null && message.hasOwnProperty("account_ids")) {
                if (!Array.isArray(message.account_ids))
                    return "account_ids: array expected";
                for (var i = 0; i < message.account_ids.length; ++i)
                    if (!$util.isInteger(message.account_ids[i]))
                        return "account_ids: integer[] expected";
            }
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (!$util.isInteger(message.serverid) && !(message.serverid && $util.isInteger(message.serverid.low) && $util.isInteger(message.serverid.high)))
                    return "serverid: integer|Long expected";
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (!$util.isInteger(message.matchid) && !(message.matchid && $util.isInteger(message.matchid.low) && $util.isInteger(message.matchid.high)))
                    return "matchid: integer|Long expected";
            if (message.client_launcher != null && message.hasOwnProperty("client_launcher"))
                if (!$util.isInteger(message.client_launcher))
                    return "client_launcher: integer expected";
            if (message.data_center_pings != null && message.hasOwnProperty("data_center_pings")) {
                if (!Array.isArray(message.data_center_pings))
                    return "data_center_pings: array expected";
                for (var i = 0; i < message.data_center_pings.length; ++i) {
                    var error = $root.DataCenterPing.verify(message.data_center_pings[i]);
                    if (error)
                        return "data_center_pings." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
            if (object.request_id != null)
                message.request_id = object.request_id >>> 0;
            if (object.account_ids) {
                if (!Array.isArray(object.account_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.account_ids: array expected");
                message.account_ids = [];
                for (var i = 0; i < object.account_ids.length; ++i)
                    message.account_ids[i] = object.account_ids[i] >>> 0;
            }
            if (object.serverid != null)
                if ($util.Long)
                    (message.serverid = $util.Long.fromValue(object.serverid)).unsigned = true;
                else if (typeof object.serverid === "string")
                    message.serverid = parseInt(object.serverid, 10);
                else if (typeof object.serverid === "number")
                    message.serverid = object.serverid;
                else if (typeof object.serverid === "object")
                    message.serverid = new $util.LongBits(object.serverid.low >>> 0, object.serverid.high >>> 0).toNumber(true);
            if (object.matchid != null)
                if ($util.Long)
                    (message.matchid = $util.Long.fromValue(object.matchid)).unsigned = true;
                else if (typeof object.matchid === "string")
                    message.matchid = parseInt(object.matchid, 10);
                else if (typeof object.matchid === "number")
                    message.matchid = object.matchid;
                else if (typeof object.matchid === "object")
                    message.matchid = new $util.LongBits(object.matchid.low >>> 0, object.matchid.high >>> 0).toNumber(true);
            if (object.client_launcher != null)
                message.client_launcher = object.client_launcher >>> 0;
            if (object.data_center_pings) {
                if (!Array.isArray(object.data_center_pings))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.data_center_pings: array expected");
                message.data_center_pings = [];
                for (var i = 0; i < object.data_center_pings.length; ++i) {
                    if (typeof object.data_center_pings[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.data_center_pings: object expected");
                    message.data_center_pings[i] = $root.DataCenterPing.fromObject(object.data_center_pings[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends} message CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.account_ids = [];
                object.data_center_pings = [];
            }
            if (options.defaults) {
                object.request_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.serverid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.matchid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.matchid = options.longs === String ? "0" : 0;
                object.client_launcher = 0;
            }
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                object.request_id = message.request_id;
            if (message.account_ids && message.account_ids.length) {
                object.account_ids = [];
                for (var j = 0; j < message.account_ids.length; ++j)
                    object.account_ids[j] = message.account_ids[j];
            }
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (typeof message.serverid === "number")
                    object.serverid = options.longs === String ? String(message.serverid) : message.serverid;
                else
                    object.serverid = options.longs === String ? $util.Long.prototype.toString.call(message.serverid) : options.longs === Number ? new $util.LongBits(message.serverid.low >>> 0, message.serverid.high >>> 0).toNumber(true) : message.serverid;
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (typeof message.matchid === "number")
                    object.matchid = options.longs === String ? String(message.matchid) : message.matchid;
                else
                    object.matchid = options.longs === String ? $util.Long.prototype.toString.call(message.matchid) : options.longs === Number ? new $util.LongBits(message.matchid.low >>> 0, message.matchid.high >>> 0).toNumber(true) : message.matchid;
            if (message.client_launcher != null && message.hasOwnProperty("client_launcher"))
                object.client_launcher = message.client_launcher;
            if (message.data_center_pings && message.data_center_pings.length) {
                object.data_center_pings = [];
                for (var j = 0; j < message.data_center_pings.length; ++j)
                    object.data_center_pings[j] = $root.DataCenterPing.toObject(message.data_center_pings[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends;
    })();
    
    $root.WatchableMatchInfo = (function() {
    
        /**
         * Properties of a WatchableMatchInfo.
         * @exports IWatchableMatchInfo
         * @interface IWatchableMatchInfo
         * @property {number|null} [server_ip] WatchableMatchInfo server_ip
         * @property {number|null} [tv_port] WatchableMatchInfo tv_port
         * @property {number|null} [tv_spectators] WatchableMatchInfo tv_spectators
         * @property {number|null} [tv_time] WatchableMatchInfo tv_time
         * @property {Uint8Array|null} [tv_watch_password] WatchableMatchInfo tv_watch_password
         * @property {number|Long|null} [cl_decryptdata_key] WatchableMatchInfo cl_decryptdata_key
         * @property {number|Long|null} [cl_decryptdata_key_pub] WatchableMatchInfo cl_decryptdata_key_pub
         * @property {number|null} [game_type] WatchableMatchInfo game_type
         * @property {string|null} [game_mapgroup] WatchableMatchInfo game_mapgroup
         * @property {string|null} [game_map] WatchableMatchInfo game_map
         * @property {number|Long|null} [server_id] WatchableMatchInfo server_id
         * @property {number|Long|null} [match_id] WatchableMatchInfo match_id
         * @property {number|Long|null} [reservation_id] WatchableMatchInfo reservation_id
         */
    
        /**
         * Constructs a new WatchableMatchInfo.
         * @exports WatchableMatchInfo
         * @classdesc Represents a WatchableMatchInfo.
         * @implements IWatchableMatchInfo
         * @constructor
         * @param {IWatchableMatchInfo=} [properties] Properties to set
         */
        function WatchableMatchInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * WatchableMatchInfo server_ip.
         * @member {number} server_ip
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.server_ip = 0;
    
        /**
         * WatchableMatchInfo tv_port.
         * @member {number} tv_port
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.tv_port = 0;
    
        /**
         * WatchableMatchInfo tv_spectators.
         * @member {number} tv_spectators
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.tv_spectators = 0;
    
        /**
         * WatchableMatchInfo tv_time.
         * @member {number} tv_time
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.tv_time = 0;
    
        /**
         * WatchableMatchInfo tv_watch_password.
         * @member {Uint8Array} tv_watch_password
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.tv_watch_password = $util.newBuffer([]);
    
        /**
         * WatchableMatchInfo cl_decryptdata_key.
         * @member {number|Long} cl_decryptdata_key
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.cl_decryptdata_key = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * WatchableMatchInfo cl_decryptdata_key_pub.
         * @member {number|Long} cl_decryptdata_key_pub
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.cl_decryptdata_key_pub = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * WatchableMatchInfo game_type.
         * @member {number} game_type
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.game_type = 0;
    
        /**
         * WatchableMatchInfo game_mapgroup.
         * @member {string} game_mapgroup
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.game_mapgroup = "";
    
        /**
         * WatchableMatchInfo game_map.
         * @member {string} game_map
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.game_map = "";
    
        /**
         * WatchableMatchInfo server_id.
         * @member {number|Long} server_id
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.server_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * WatchableMatchInfo match_id.
         * @member {number|Long} match_id
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * WatchableMatchInfo reservation_id.
         * @member {number|Long} reservation_id
         * @memberof WatchableMatchInfo
         * @instance
         */
        WatchableMatchInfo.prototype.reservation_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new WatchableMatchInfo instance using the specified properties.
         * @function create
         * @memberof WatchableMatchInfo
         * @static
         * @param {IWatchableMatchInfo=} [properties] Properties to set
         * @returns {WatchableMatchInfo} WatchableMatchInfo instance
         */
        WatchableMatchInfo.create = function create(properties) {
            return new WatchableMatchInfo(properties);
        };
    
        /**
         * Encodes the specified WatchableMatchInfo message. Does not implicitly {@link WatchableMatchInfo.verify|verify} messages.
         * @function encode
         * @memberof WatchableMatchInfo
         * @static
         * @param {IWatchableMatchInfo} message WatchableMatchInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WatchableMatchInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.server_ip);
            if (message.tv_port != null && message.hasOwnProperty("tv_port"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tv_port);
            if (message.tv_spectators != null && message.hasOwnProperty("tv_spectators"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tv_spectators);
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tv_time);
            if (message.tv_watch_password != null && message.hasOwnProperty("tv_watch_password"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.tv_watch_password);
            if (message.cl_decryptdata_key != null && message.hasOwnProperty("cl_decryptdata_key"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.cl_decryptdata_key);
            if (message.cl_decryptdata_key_pub != null && message.hasOwnProperty("cl_decryptdata_key_pub"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.cl_decryptdata_key_pub);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.game_type);
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.game_mapgroup);
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.game_map);
            if (message.server_id != null && message.hasOwnProperty("server_id"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.server_id);
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.match_id);
            if (message.reservation_id != null && message.hasOwnProperty("reservation_id"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.reservation_id);
            return writer;
        };
    
        /**
         * Encodes the specified WatchableMatchInfo message, length delimited. Does not implicitly {@link WatchableMatchInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof WatchableMatchInfo
         * @static
         * @param {IWatchableMatchInfo} message WatchableMatchInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WatchableMatchInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a WatchableMatchInfo message from the specified reader or buffer.
         * @function decode
         * @memberof WatchableMatchInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {WatchableMatchInfo} WatchableMatchInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WatchableMatchInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WatchableMatchInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.server_ip = reader.uint32();
                    break;
                case 2:
                    message.tv_port = reader.uint32();
                    break;
                case 3:
                    message.tv_spectators = reader.uint32();
                    break;
                case 4:
                    message.tv_time = reader.uint32();
                    break;
                case 5:
                    message.tv_watch_password = reader.bytes();
                    break;
                case 6:
                    message.cl_decryptdata_key = reader.uint64();
                    break;
                case 7:
                    message.cl_decryptdata_key_pub = reader.uint64();
                    break;
                case 8:
                    message.game_type = reader.uint32();
                    break;
                case 9:
                    message.game_mapgroup = reader.string();
                    break;
                case 10:
                    message.game_map = reader.string();
                    break;
                case 11:
                    message.server_id = reader.uint64();
                    break;
                case 12:
                    message.match_id = reader.uint64();
                    break;
                case 13:
                    message.reservation_id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a WatchableMatchInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof WatchableMatchInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {WatchableMatchInfo} WatchableMatchInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WatchableMatchInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a WatchableMatchInfo message.
         * @function verify
         * @memberof WatchableMatchInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WatchableMatchInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                if (!$util.isInteger(message.server_ip))
                    return "server_ip: integer expected";
            if (message.tv_port != null && message.hasOwnProperty("tv_port"))
                if (!$util.isInteger(message.tv_port))
                    return "tv_port: integer expected";
            if (message.tv_spectators != null && message.hasOwnProperty("tv_spectators"))
                if (!$util.isInteger(message.tv_spectators))
                    return "tv_spectators: integer expected";
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                if (!$util.isInteger(message.tv_time))
                    return "tv_time: integer expected";
            if (message.tv_watch_password != null && message.hasOwnProperty("tv_watch_password"))
                if (!(message.tv_watch_password && typeof message.tv_watch_password.length === "number" || $util.isString(message.tv_watch_password)))
                    return "tv_watch_password: buffer expected";
            if (message.cl_decryptdata_key != null && message.hasOwnProperty("cl_decryptdata_key"))
                if (!$util.isInteger(message.cl_decryptdata_key) && !(message.cl_decryptdata_key && $util.isInteger(message.cl_decryptdata_key.low) && $util.isInteger(message.cl_decryptdata_key.high)))
                    return "cl_decryptdata_key: integer|Long expected";
            if (message.cl_decryptdata_key_pub != null && message.hasOwnProperty("cl_decryptdata_key_pub"))
                if (!$util.isInteger(message.cl_decryptdata_key_pub) && !(message.cl_decryptdata_key_pub && $util.isInteger(message.cl_decryptdata_key_pub.low) && $util.isInteger(message.cl_decryptdata_key_pub.high)))
                    return "cl_decryptdata_key_pub: integer|Long expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                if (!$util.isString(message.game_mapgroup))
                    return "game_mapgroup: string expected";
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                if (!$util.isString(message.game_map))
                    return "game_map: string expected";
            if (message.server_id != null && message.hasOwnProperty("server_id"))
                if (!$util.isInteger(message.server_id) && !(message.server_id && $util.isInteger(message.server_id.low) && $util.isInteger(message.server_id.high)))
                    return "server_id: integer|Long expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.reservation_id != null && message.hasOwnProperty("reservation_id"))
                if (!$util.isInteger(message.reservation_id) && !(message.reservation_id && $util.isInteger(message.reservation_id.low) && $util.isInteger(message.reservation_id.high)))
                    return "reservation_id: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a WatchableMatchInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof WatchableMatchInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {WatchableMatchInfo} WatchableMatchInfo
         */
        WatchableMatchInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.WatchableMatchInfo)
                return object;
            var message = new $root.WatchableMatchInfo();
            if (object.server_ip != null)
                message.server_ip = object.server_ip >>> 0;
            if (object.tv_port != null)
                message.tv_port = object.tv_port >>> 0;
            if (object.tv_spectators != null)
                message.tv_spectators = object.tv_spectators >>> 0;
            if (object.tv_time != null)
                message.tv_time = object.tv_time >>> 0;
            if (object.tv_watch_password != null)
                if (typeof object.tv_watch_password === "string")
                    $util.base64.decode(object.tv_watch_password, message.tv_watch_password = $util.newBuffer($util.base64.length(object.tv_watch_password)), 0);
                else if (object.tv_watch_password.length)
                    message.tv_watch_password = object.tv_watch_password;
            if (object.cl_decryptdata_key != null)
                if ($util.Long)
                    (message.cl_decryptdata_key = $util.Long.fromValue(object.cl_decryptdata_key)).unsigned = true;
                else if (typeof object.cl_decryptdata_key === "string")
                    message.cl_decryptdata_key = parseInt(object.cl_decryptdata_key, 10);
                else if (typeof object.cl_decryptdata_key === "number")
                    message.cl_decryptdata_key = object.cl_decryptdata_key;
                else if (typeof object.cl_decryptdata_key === "object")
                    message.cl_decryptdata_key = new $util.LongBits(object.cl_decryptdata_key.low >>> 0, object.cl_decryptdata_key.high >>> 0).toNumber(true);
            if (object.cl_decryptdata_key_pub != null)
                if ($util.Long)
                    (message.cl_decryptdata_key_pub = $util.Long.fromValue(object.cl_decryptdata_key_pub)).unsigned = true;
                else if (typeof object.cl_decryptdata_key_pub === "string")
                    message.cl_decryptdata_key_pub = parseInt(object.cl_decryptdata_key_pub, 10);
                else if (typeof object.cl_decryptdata_key_pub === "number")
                    message.cl_decryptdata_key_pub = object.cl_decryptdata_key_pub;
                else if (typeof object.cl_decryptdata_key_pub === "object")
                    message.cl_decryptdata_key_pub = new $util.LongBits(object.cl_decryptdata_key_pub.low >>> 0, object.cl_decryptdata_key_pub.high >>> 0).toNumber(true);
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.game_mapgroup != null)
                message.game_mapgroup = String(object.game_mapgroup);
            if (object.game_map != null)
                message.game_map = String(object.game_map);
            if (object.server_id != null)
                if ($util.Long)
                    (message.server_id = $util.Long.fromValue(object.server_id)).unsigned = true;
                else if (typeof object.server_id === "string")
                    message.server_id = parseInt(object.server_id, 10);
                else if (typeof object.server_id === "number")
                    message.server_id = object.server_id;
                else if (typeof object.server_id === "object")
                    message.server_id = new $util.LongBits(object.server_id.low >>> 0, object.server_id.high >>> 0).toNumber(true);
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.reservation_id != null)
                if ($util.Long)
                    (message.reservation_id = $util.Long.fromValue(object.reservation_id)).unsigned = true;
                else if (typeof object.reservation_id === "string")
                    message.reservation_id = parseInt(object.reservation_id, 10);
                else if (typeof object.reservation_id === "number")
                    message.reservation_id = object.reservation_id;
                else if (typeof object.reservation_id === "object")
                    message.reservation_id = new $util.LongBits(object.reservation_id.low >>> 0, object.reservation_id.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a WatchableMatchInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof WatchableMatchInfo
         * @static
         * @param {WatchableMatchInfo} message WatchableMatchInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WatchableMatchInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.server_ip = 0;
                object.tv_port = 0;
                object.tv_spectators = 0;
                object.tv_time = 0;
                if (options.bytes === String)
                    object.tv_watch_password = "";
                else {
                    object.tv_watch_password = [];
                    if (options.bytes !== Array)
                        object.tv_watch_password = $util.newBuffer(object.tv_watch_password);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cl_decryptdata_key = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cl_decryptdata_key = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cl_decryptdata_key_pub = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cl_decryptdata_key_pub = options.longs === String ? "0" : 0;
                object.game_type = 0;
                object.game_mapgroup = "";
                object.game_map = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.server_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.server_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.reservation_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.reservation_id = options.longs === String ? "0" : 0;
            }
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                object.server_ip = message.server_ip;
            if (message.tv_port != null && message.hasOwnProperty("tv_port"))
                object.tv_port = message.tv_port;
            if (message.tv_spectators != null && message.hasOwnProperty("tv_spectators"))
                object.tv_spectators = message.tv_spectators;
            if (message.tv_time != null && message.hasOwnProperty("tv_time"))
                object.tv_time = message.tv_time;
            if (message.tv_watch_password != null && message.hasOwnProperty("tv_watch_password"))
                object.tv_watch_password = options.bytes === String ? $util.base64.encode(message.tv_watch_password, 0, message.tv_watch_password.length) : options.bytes === Array ? Array.prototype.slice.call(message.tv_watch_password) : message.tv_watch_password;
            if (message.cl_decryptdata_key != null && message.hasOwnProperty("cl_decryptdata_key"))
                if (typeof message.cl_decryptdata_key === "number")
                    object.cl_decryptdata_key = options.longs === String ? String(message.cl_decryptdata_key) : message.cl_decryptdata_key;
                else
                    object.cl_decryptdata_key = options.longs === String ? $util.Long.prototype.toString.call(message.cl_decryptdata_key) : options.longs === Number ? new $util.LongBits(message.cl_decryptdata_key.low >>> 0, message.cl_decryptdata_key.high >>> 0).toNumber(true) : message.cl_decryptdata_key;
            if (message.cl_decryptdata_key_pub != null && message.hasOwnProperty("cl_decryptdata_key_pub"))
                if (typeof message.cl_decryptdata_key_pub === "number")
                    object.cl_decryptdata_key_pub = options.longs === String ? String(message.cl_decryptdata_key_pub) : message.cl_decryptdata_key_pub;
                else
                    object.cl_decryptdata_key_pub = options.longs === String ? $util.Long.prototype.toString.call(message.cl_decryptdata_key_pub) : options.longs === Number ? new $util.LongBits(message.cl_decryptdata_key_pub.low >>> 0, message.cl_decryptdata_key_pub.high >>> 0).toNumber(true) : message.cl_decryptdata_key_pub;
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.game_mapgroup != null && message.hasOwnProperty("game_mapgroup"))
                object.game_mapgroup = message.game_mapgroup;
            if (message.game_map != null && message.hasOwnProperty("game_map"))
                object.game_map = message.game_map;
            if (message.server_id != null && message.hasOwnProperty("server_id"))
                if (typeof message.server_id === "number")
                    object.server_id = options.longs === String ? String(message.server_id) : message.server_id;
                else
                    object.server_id = options.longs === String ? $util.Long.prototype.toString.call(message.server_id) : options.longs === Number ? new $util.LongBits(message.server_id.low >>> 0, message.server_id.high >>> 0).toNumber(true) : message.server_id;
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.reservation_id != null && message.hasOwnProperty("reservation_id"))
                if (typeof message.reservation_id === "number")
                    object.reservation_id = options.longs === String ? String(message.reservation_id) : message.reservation_id;
                else
                    object.reservation_id = options.longs === String ? $util.Long.prototype.toString.call(message.reservation_id) : options.longs === Number ? new $util.LongBits(message.reservation_id.low >>> 0, message.reservation_id.high >>> 0).toNumber(true) : message.reservation_id;
            return object;
        };
    
        /**
         * Converts this WatchableMatchInfo to JSON.
         * @function toJSON
         * @memberof WatchableMatchInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WatchableMatchInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return WatchableMatchInfo;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestJoinFriendData = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestJoinFriendData.
         * @exports ICMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @interface ICMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @property {number|null} [version] CMsgGCCStrike15_v2_ClientRequestJoinFriendData version
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientRequestJoinFriendData account_id
         * @property {number|null} [join_token] CMsgGCCStrike15_v2_ClientRequestJoinFriendData join_token
         * @property {number|null} [join_ipp] CMsgGCCStrike15_v2_ClientRequestJoinFriendData join_ipp
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null} [res] CMsgGCCStrike15_v2_ClientRequestJoinFriendData res
         * @property {string|null} [errormsg] CMsgGCCStrike15_v2_ClientRequestJoinFriendData errormsg
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestJoinFriendData.
         * @exports CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestJoinFriendData.
         * @implements ICMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinFriendData=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestJoinFriendData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData version.
         * @member {number} version
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.version = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData join_token.
         * @member {number} join_token
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.join_token = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData join_ipp.
         * @member {number} join_ipp
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.join_ipp = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData res.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null|undefined} res
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.res = null;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinFriendData errormsg.
         * @member {string} errormsg
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.errormsg = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestJoinFriendData instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinFriendData=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinFriendData} CMsgGCCStrike15_v2_ClientRequestJoinFriendData instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestJoinFriendData(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestJoinFriendData message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestJoinFriendData.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinFriendData} message CMsgGCCStrike15_v2_ClientRequestJoinFriendData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_id);
            if (message.join_token != null && message.hasOwnProperty("join_token"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.join_token);
            if (message.join_ipp != null && message.hasOwnProperty("join_ipp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.join_ipp);
            if (message.res != null && message.hasOwnProperty("res"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encode(message.res, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.errormsg);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestJoinFriendData message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestJoinFriendData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinFriendData} message CMsgGCCStrike15_v2_ClientRequestJoinFriendData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestJoinFriendData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinFriendData} CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.version = reader.uint32();
                    break;
                case 2:
                    message.account_id = reader.uint32();
                    break;
                case 3:
                    message.join_token = reader.uint32();
                    break;
                case 4:
                    message.join_ipp = reader.uint32();
                    break;
                case 5:
                    message.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.errormsg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestJoinFriendData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinFriendData} CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestJoinFriendData message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.join_token != null && message.hasOwnProperty("join_token"))
                if (!$util.isInteger(message.join_token))
                    return "join_token: integer expected";
            if (message.join_ipp != null && message.hasOwnProperty("join_ipp"))
                if (!$util.isInteger(message.join_ipp))
                    return "join_ipp: integer expected";
            if (message.res != null && message.hasOwnProperty("res")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify(message.res);
                if (error)
                    return "res." + error;
            }
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                if (!$util.isString(message.errormsg))
                    return "errormsg: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestJoinFriendData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinFriendData} CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientRequestJoinFriendData();
            if (object.version != null)
                message.version = object.version >>> 0;
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.join_token != null)
                message.join_token = object.join_token >>> 0;
            if (object.join_ipp != null)
                message.join_ipp = object.join_ipp >>> 0;
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_ClientRequestJoinFriendData.res: object expected");
                message.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.fromObject(object.res);
            }
            if (object.errormsg != null)
                message.errormsg = String(object.errormsg);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestJoinFriendData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestJoinFriendData} message CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.version = 0;
                object.account_id = 0;
                object.join_token = 0;
                object.join_ipp = 0;
                object.res = null;
                object.errormsg = "";
            }
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.join_token != null && message.hasOwnProperty("join_token"))
                object.join_token = message.join_token;
            if (message.join_ipp != null && message.hasOwnProperty("join_ipp"))
                object.join_ipp = message.join_ipp;
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.toObject(message.res, options);
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                object.errormsg = message.errormsg;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestJoinFriendData to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinFriendData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestJoinFriendData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestJoinFriendData;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestJoinServerData = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestJoinServerData.
         * @exports ICMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @interface ICMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @property {number|null} [version] CMsgGCCStrike15_v2_ClientRequestJoinServerData version
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientRequestJoinServerData account_id
         * @property {number|Long|null} [serverid] CMsgGCCStrike15_v2_ClientRequestJoinServerData serverid
         * @property {number|null} [server_ip] CMsgGCCStrike15_v2_ClientRequestJoinServerData server_ip
         * @property {number|null} [server_port] CMsgGCCStrike15_v2_ClientRequestJoinServerData server_port
         * @property {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null} [res] CMsgGCCStrike15_v2_ClientRequestJoinServerData res
         * @property {string|null} [errormsg] CMsgGCCStrike15_v2_ClientRequestJoinServerData errormsg
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestJoinServerData.
         * @exports CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestJoinServerData.
         * @implements ICMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinServerData=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestJoinServerData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData version.
         * @member {number} version
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.version = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData serverid.
         * @member {number|Long} serverid
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.serverid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData server_ip.
         * @member {number} server_ip
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.server_ip = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData server_port.
         * @member {number} server_port
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.server_port = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData res.
         * @member {ICMsgGCCStrike15_v2_MatchmakingGC2ClientReserve|null|undefined} res
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.res = null;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestJoinServerData errormsg.
         * @member {string} errormsg
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.errormsg = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestJoinServerData instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinServerData=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinServerData} CMsgGCCStrike15_v2_ClientRequestJoinServerData instance
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestJoinServerData(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestJoinServerData message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestJoinServerData.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinServerData} message CMsgGCCStrike15_v2_ClientRequestJoinServerData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_id);
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.serverid);
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.server_ip);
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.server_port);
            if (message.res != null && message.hasOwnProperty("res"))
                $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.encode(message.res, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.errormsg);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestJoinServerData message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestJoinServerData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestJoinServerData} message CMsgGCCStrike15_v2_ClientRequestJoinServerData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestJoinServerData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinServerData} CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestJoinServerData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.version = reader.uint32();
                    break;
                case 2:
                    message.account_id = reader.uint32();
                    break;
                case 3:
                    message.serverid = reader.uint64();
                    break;
                case 4:
                    message.server_ip = reader.uint32();
                    break;
                case 5:
                    message.server_port = reader.uint32();
                    break;
                case 6:
                    message.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.errormsg = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestJoinServerData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinServerData} CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestJoinServerData message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (!$util.isInteger(message.serverid) && !(message.serverid && $util.isInteger(message.serverid.low) && $util.isInteger(message.serverid.high)))
                    return "serverid: integer|Long expected";
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                if (!$util.isInteger(message.server_ip))
                    return "server_ip: integer expected";
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                if (!$util.isInteger(message.server_port))
                    return "server_port: integer expected";
            if (message.res != null && message.hasOwnProperty("res")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.verify(message.res);
                if (error)
                    return "res." + error;
            }
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                if (!$util.isString(message.errormsg))
                    return "errormsg: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestJoinServerData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestJoinServerData} CMsgGCCStrike15_v2_ClientRequestJoinServerData
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestJoinServerData)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientRequestJoinServerData();
            if (object.version != null)
                message.version = object.version >>> 0;
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.serverid != null)
                if ($util.Long)
                    (message.serverid = $util.Long.fromValue(object.serverid)).unsigned = true;
                else if (typeof object.serverid === "string")
                    message.serverid = parseInt(object.serverid, 10);
                else if (typeof object.serverid === "number")
                    message.serverid = object.serverid;
                else if (typeof object.serverid === "object")
                    message.serverid = new $util.LongBits(object.serverid.low >>> 0, object.serverid.high >>> 0).toNumber(true);
            if (object.server_ip != null)
                message.server_ip = object.server_ip >>> 0;
            if (object.server_port != null)
                message.server_port = object.server_port >>> 0;
            if (object.res != null) {
                if (typeof object.res !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_ClientRequestJoinServerData.res: object expected");
                message.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.fromObject(object.res);
            }
            if (object.errormsg != null)
                message.errormsg = String(object.errormsg);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestJoinServerData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestJoinServerData} message CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.version = 0;
                object.account_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.serverid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverid = options.longs === String ? "0" : 0;
                object.server_ip = 0;
                object.server_port = 0;
                object.res = null;
                object.errormsg = "";
            }
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.serverid != null && message.hasOwnProperty("serverid"))
                if (typeof message.serverid === "number")
                    object.serverid = options.longs === String ? String(message.serverid) : message.serverid;
                else
                    object.serverid = options.longs === String ? $util.Long.prototype.toString.call(message.serverid) : options.longs === Number ? new $util.LongBits(message.serverid.low >>> 0, message.serverid.high >>> 0).toNumber(true) : message.serverid;
            if (message.server_ip != null && message.hasOwnProperty("server_ip"))
                object.server_ip = message.server_ip;
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                object.server_port = message.server_port;
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.toObject(message.res, options);
            if (message.errormsg != null && message.hasOwnProperty("errormsg"))
                object.errormsg = message.errormsg;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestJoinServerData to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestJoinServerData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestJoinServerData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestJoinServerData;
    })();
    
    $root.CMsgGCCstrike15_v2_ClientRequestNewMission = (function() {
    
        /**
         * Properties of a CMsgGCCstrike15_v2_ClientRequestNewMission.
         * @exports ICMsgGCCstrike15_v2_ClientRequestNewMission
         * @interface ICMsgGCCstrike15_v2_ClientRequestNewMission
         * @property {number|null} [mission_id] CMsgGCCstrike15_v2_ClientRequestNewMission mission_id
         * @property {number|null} [campaign_id] CMsgGCCstrike15_v2_ClientRequestNewMission campaign_id
         */
    
        /**
         * Constructs a new CMsgGCCstrike15_v2_ClientRequestNewMission.
         * @exports CMsgGCCstrike15_v2_ClientRequestNewMission
         * @classdesc Represents a CMsgGCCstrike15_v2_ClientRequestNewMission.
         * @implements ICMsgGCCstrike15_v2_ClientRequestNewMission
         * @constructor
         * @param {ICMsgGCCstrike15_v2_ClientRequestNewMission=} [properties] Properties to set
         */
        function CMsgGCCstrike15_v2_ClientRequestNewMission(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCstrike15_v2_ClientRequestNewMission mission_id.
         * @member {number} mission_id
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @instance
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.prototype.mission_id = 0;
    
        /**
         * CMsgGCCstrike15_v2_ClientRequestNewMission campaign_id.
         * @member {number} campaign_id
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @instance
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.prototype.campaign_id = 0;
    
        /**
         * Creates a new CMsgGCCstrike15_v2_ClientRequestNewMission instance using the specified properties.
         * @function create
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {ICMsgGCCstrike15_v2_ClientRequestNewMission=} [properties] Properties to set
         * @returns {CMsgGCCstrike15_v2_ClientRequestNewMission} CMsgGCCstrike15_v2_ClientRequestNewMission instance
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.create = function create(properties) {
            return new CMsgGCCstrike15_v2_ClientRequestNewMission(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCstrike15_v2_ClientRequestNewMission message. Does not implicitly {@link CMsgGCCstrike15_v2_ClientRequestNewMission.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {ICMsgGCCstrike15_v2_ClientRequestNewMission} message CMsgGCCstrike15_v2_ClientRequestNewMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mission_id);
            if (message.campaign_id != null && message.hasOwnProperty("campaign_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.campaign_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCstrike15_v2_ClientRequestNewMission message, length delimited. Does not implicitly {@link CMsgGCCstrike15_v2_ClientRequestNewMission.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {ICMsgGCCstrike15_v2_ClientRequestNewMission} message CMsgGCCstrike15_v2_ClientRequestNewMission message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCstrike15_v2_ClientRequestNewMission message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCstrike15_v2_ClientRequestNewMission} CMsgGCCstrike15_v2_ClientRequestNewMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCstrike15_v2_ClientRequestNewMission();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.mission_id = reader.uint32();
                    break;
                case 3:
                    message.campaign_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCstrike15_v2_ClientRequestNewMission message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCstrike15_v2_ClientRequestNewMission} CMsgGCCstrike15_v2_ClientRequestNewMission
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCstrike15_v2_ClientRequestNewMission message.
         * @function verify
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                if (!$util.isInteger(message.mission_id))
                    return "mission_id: integer expected";
            if (message.campaign_id != null && message.hasOwnProperty("campaign_id"))
                if (!$util.isInteger(message.campaign_id))
                    return "campaign_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCstrike15_v2_ClientRequestNewMission message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCstrike15_v2_ClientRequestNewMission} CMsgGCCstrike15_v2_ClientRequestNewMission
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCstrike15_v2_ClientRequestNewMission)
                return object;
            var message = new $root.CMsgGCCstrike15_v2_ClientRequestNewMission();
            if (object.mission_id != null)
                message.mission_id = object.mission_id >>> 0;
            if (object.campaign_id != null)
                message.campaign_id = object.campaign_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCstrike15_v2_ClientRequestNewMission message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @static
         * @param {CMsgGCCstrike15_v2_ClientRequestNewMission} message CMsgGCCstrike15_v2_ClientRequestNewMission
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mission_id = 0;
                object.campaign_id = 0;
            }
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                object.mission_id = message.mission_id;
            if (message.campaign_id != null && message.hasOwnProperty("campaign_id"))
                object.campaign_id = message.campaign_id;
            return object;
        };
    
        /**
         * Converts this CMsgGCCstrike15_v2_ClientRequestNewMission to JSON.
         * @function toJSON
         * @memberof CMsgGCCstrike15_v2_ClientRequestNewMission
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCstrike15_v2_ClientRequestNewMission.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCstrike15_v2_ClientRequestNewMission;
    })();
    
    $root.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded = (function() {
    
        /**
         * Properties of a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.
         * @exports ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @interface ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @property {Array.<IXpProgressData>|null} [xp_progress_data] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded xp_progress_data
         * @property {number|null} [account_id] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded account_id
         * @property {number|null} [current_xp] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded current_xp
         * @property {number|null} [current_level] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded current_level
         * @property {number|null} [upgraded_defidx] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded upgraded_defidx
         * @property {number|null} [operation_points_awarded] CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded operation_points_awarded
         */
    
        /**
         * Constructs a new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.
         * @exports CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @classdesc Represents a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.
         * @implements ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @constructor
         * @param {ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded=} [properties] Properties to set
         */
        function CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(properties) {
            this.xp_progress_data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded xp_progress_data.
         * @member {Array.<IXpProgressData>} xp_progress_data
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.xp_progress_data = $util.emptyArray;
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded account_id.
         * @member {number} account_id
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.account_id = 0;
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded current_xp.
         * @member {number} current_xp
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.current_xp = 0;
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded current_level.
         * @member {number} current_level
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.current_level = 0;
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded upgraded_defidx.
         * @member {number} upgraded_defidx
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.upgraded_defidx = 0;
    
        /**
         * CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded operation_points_awarded.
         * @member {number} operation_points_awarded
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.operation_points_awarded = 0;
    
        /**
         * Creates a new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded instance using the specified properties.
         * @function create
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded=} [properties] Properties to set
         * @returns {CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded instance
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.create = function create(properties) {
            return new CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message. Does not implicitly {@link CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.xp_progress_data != null && message.xp_progress_data.length)
                for (var i = 0; i < message.xp_progress_data.length; ++i)
                    $root.XpProgressData.encode(message.xp_progress_data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_id);
            if (message.current_xp != null && message.hasOwnProperty("current_xp"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.current_xp);
            if (message.current_level != null && message.hasOwnProperty("current_level"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.current_level);
            if (message.upgraded_defidx != null && message.hasOwnProperty("upgraded_defidx"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.upgraded_defidx);
            if (message.operation_points_awarded != null && message.hasOwnProperty("operation_points_awarded"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.operation_points_awarded);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message, length delimited. Does not implicitly {@link CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {ICMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.xp_progress_data && message.xp_progress_data.length))
                        message.xp_progress_data = [];
                    message.xp_progress_data.push($root.XpProgressData.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.account_id = reader.uint32();
                    break;
                case 3:
                    message.current_xp = reader.uint32();
                    break;
                case 4:
                    message.current_level = reader.uint32();
                    break;
                case 5:
                    message.upgraded_defidx = reader.uint32();
                    break;
                case 6:
                    message.operation_points_awarded = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message.
         * @function verify
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.xp_progress_data != null && message.hasOwnProperty("xp_progress_data")) {
                if (!Array.isArray(message.xp_progress_data))
                    return "xp_progress_data: array expected";
                for (var i = 0; i < message.xp_progress_data.length; ++i) {
                    var error = $root.XpProgressData.verify(message.xp_progress_data[i]);
                    if (error)
                        return "xp_progress_data." + error;
                }
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.current_xp != null && message.hasOwnProperty("current_xp"))
                if (!$util.isInteger(message.current_xp))
                    return "current_xp: integer expected";
            if (message.current_level != null && message.hasOwnProperty("current_level"))
                if (!$util.isInteger(message.current_level))
                    return "current_level: integer expected";
            if (message.upgraded_defidx != null && message.hasOwnProperty("upgraded_defidx"))
                if (!$util.isInteger(message.upgraded_defidx))
                    return "upgraded_defidx: integer expected";
            if (message.operation_points_awarded != null && message.hasOwnProperty("operation_points_awarded"))
                if (!$util.isInteger(message.operation_points_awarded))
                    return "operation_points_awarded: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
                return object;
            var message = new $root.CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded();
            if (object.xp_progress_data) {
                if (!Array.isArray(object.xp_progress_data))
                    throw TypeError(".CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data: array expected");
                message.xp_progress_data = [];
                for (var i = 0; i < object.xp_progress_data.length; ++i) {
                    if (typeof object.xp_progress_data[i] !== "object")
                        throw TypeError(".CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.xp_progress_data: object expected");
                    message.xp_progress_data[i] = $root.XpProgressData.fromObject(object.xp_progress_data[i]);
                }
            }
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.current_xp != null)
                message.current_xp = object.current_xp >>> 0;
            if (object.current_level != null)
                message.current_level = object.current_level >>> 0;
            if (object.upgraded_defidx != null)
                message.upgraded_defidx = object.upgraded_defidx >>> 0;
            if (object.operation_points_awarded != null)
                message.operation_points_awarded = object.operation_points_awarded >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @static
         * @param {CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded} message CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.xp_progress_data = [];
            if (options.defaults) {
                object.account_id = 0;
                object.current_xp = 0;
                object.current_level = 0;
                object.upgraded_defidx = 0;
                object.operation_points_awarded = 0;
            }
            if (message.xp_progress_data && message.xp_progress_data.length) {
                object.xp_progress_data = [];
                for (var j = 0; j < message.xp_progress_data.length; ++j)
                    object.xp_progress_data[j] = $root.XpProgressData.toObject(message.xp_progress_data[j], options);
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.current_xp != null && message.hasOwnProperty("current_xp"))
                object.current_xp = message.current_xp;
            if (message.current_level != null && message.hasOwnProperty("current_level"))
                object.current_level = message.current_level;
            if (message.upgraded_defidx != null && message.hasOwnProperty("upgraded_defidx"))
                object.upgraded_defidx = message.upgraded_defidx;
            if (message.operation_points_awarded != null && message.hasOwnProperty("operation_points_awarded"))
                object.operation_points_awarded = message.operation_points_awarded;
            return object;
        };
    
        /**
         * Converts this CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded to JSON.
         * @function toJSON
         * @memberof CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded;
    })();
    
    $root.CMsgGCCStrike15_v2_WatchInfoUsers = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_WatchInfoUsers.
         * @exports ICMsgGCCStrike15_v2_WatchInfoUsers
         * @interface ICMsgGCCStrike15_v2_WatchInfoUsers
         * @property {number|null} [request_id] CMsgGCCStrike15_v2_WatchInfoUsers request_id
         * @property {Array.<number>|null} [account_ids] CMsgGCCStrike15_v2_WatchInfoUsers account_ids
         * @property {Array.<IWatchableMatchInfo>|null} [watchable_match_infos] CMsgGCCStrike15_v2_WatchInfoUsers watchable_match_infos
         * @property {number|null} [extended_timeout] CMsgGCCStrike15_v2_WatchInfoUsers extended_timeout
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_WatchInfoUsers.
         * @exports CMsgGCCStrike15_v2_WatchInfoUsers
         * @classdesc Represents a CMsgGCCStrike15_v2_WatchInfoUsers.
         * @implements ICMsgGCCStrike15_v2_WatchInfoUsers
         * @constructor
         * @param {ICMsgGCCStrike15_v2_WatchInfoUsers=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_WatchInfoUsers(properties) {
            this.account_ids = [];
            this.watchable_match_infos = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_WatchInfoUsers request_id.
         * @member {number} request_id
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @instance
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.prototype.request_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_WatchInfoUsers account_ids.
         * @member {Array.<number>} account_ids
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @instance
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.prototype.account_ids = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_WatchInfoUsers watchable_match_infos.
         * @member {Array.<IWatchableMatchInfo>} watchable_match_infos
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @instance
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.prototype.watchable_match_infos = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_WatchInfoUsers extended_timeout.
         * @member {number} extended_timeout
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @instance
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.prototype.extended_timeout = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_WatchInfoUsers instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {ICMsgGCCStrike15_v2_WatchInfoUsers=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_WatchInfoUsers} CMsgGCCStrike15_v2_WatchInfoUsers instance
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.create = function create(properties) {
            return new CMsgGCCStrike15_v2_WatchInfoUsers(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_WatchInfoUsers message. Does not implicitly {@link CMsgGCCStrike15_v2_WatchInfoUsers.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {ICMsgGCCStrike15_v2_WatchInfoUsers} message CMsgGCCStrike15_v2_WatchInfoUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_id);
            if (message.account_ids != null && message.account_ids.length)
                for (var i = 0; i < message.account_ids.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_ids[i]);
            if (message.watchable_match_infos != null && message.watchable_match_infos.length)
                for (var i = 0; i < message.watchable_match_infos.length; ++i)
                    $root.WatchableMatchInfo.encode(message.watchable_match_infos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.extended_timeout != null && message.hasOwnProperty("extended_timeout"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.extended_timeout);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_WatchInfoUsers message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_WatchInfoUsers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {ICMsgGCCStrike15_v2_WatchInfoUsers} message CMsgGCCStrike15_v2_WatchInfoUsers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_WatchInfoUsers message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_WatchInfoUsers} CMsgGCCStrike15_v2_WatchInfoUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_WatchInfoUsers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.account_ids && message.account_ids.length))
                        message.account_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.account_ids.push(reader.uint32());
                    } else
                        message.account_ids.push(reader.uint32());
                    break;
                case 3:
                    if (!(message.watchable_match_infos && message.watchable_match_infos.length))
                        message.watchable_match_infos = [];
                    message.watchable_match_infos.push($root.WatchableMatchInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.extended_timeout = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_WatchInfoUsers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_WatchInfoUsers} CMsgGCCStrike15_v2_WatchInfoUsers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_WatchInfoUsers message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                if (!$util.isInteger(message.request_id))
                    return "request_id: integer expected";
            if (message.account_ids != null && message.hasOwnProperty("account_ids")) {
                if (!Array.isArray(message.account_ids))
                    return "account_ids: array expected";
                for (var i = 0; i < message.account_ids.length; ++i)
                    if (!$util.isInteger(message.account_ids[i]))
                        return "account_ids: integer[] expected";
            }
            if (message.watchable_match_infos != null && message.hasOwnProperty("watchable_match_infos")) {
                if (!Array.isArray(message.watchable_match_infos))
                    return "watchable_match_infos: array expected";
                for (var i = 0; i < message.watchable_match_infos.length; ++i) {
                    var error = $root.WatchableMatchInfo.verify(message.watchable_match_infos[i]);
                    if (error)
                        return "watchable_match_infos." + error;
                }
            }
            if (message.extended_timeout != null && message.hasOwnProperty("extended_timeout"))
                if (!$util.isInteger(message.extended_timeout))
                    return "extended_timeout: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_WatchInfoUsers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_WatchInfoUsers} CMsgGCCStrike15_v2_WatchInfoUsers
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_WatchInfoUsers)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_WatchInfoUsers();
            if (object.request_id != null)
                message.request_id = object.request_id >>> 0;
            if (object.account_ids) {
                if (!Array.isArray(object.account_ids))
                    throw TypeError(".CMsgGCCStrike15_v2_WatchInfoUsers.account_ids: array expected");
                message.account_ids = [];
                for (var i = 0; i < object.account_ids.length; ++i)
                    message.account_ids[i] = object.account_ids[i] >>> 0;
            }
            if (object.watchable_match_infos) {
                if (!Array.isArray(object.watchable_match_infos))
                    throw TypeError(".CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos: array expected");
                message.watchable_match_infos = [];
                for (var i = 0; i < object.watchable_match_infos.length; ++i) {
                    if (typeof object.watchable_match_infos[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_WatchInfoUsers.watchable_match_infos: object expected");
                    message.watchable_match_infos[i] = $root.WatchableMatchInfo.fromObject(object.watchable_match_infos[i]);
                }
            }
            if (object.extended_timeout != null)
                message.extended_timeout = object.extended_timeout >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_WatchInfoUsers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @static
         * @param {CMsgGCCStrike15_v2_WatchInfoUsers} message CMsgGCCStrike15_v2_WatchInfoUsers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.account_ids = [];
                object.watchable_match_infos = [];
            }
            if (options.defaults) {
                object.request_id = 0;
                object.extended_timeout = 0;
            }
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                object.request_id = message.request_id;
            if (message.account_ids && message.account_ids.length) {
                object.account_ids = [];
                for (var j = 0; j < message.account_ids.length; ++j)
                    object.account_ids[j] = message.account_ids[j];
            }
            if (message.watchable_match_infos && message.watchable_match_infos.length) {
                object.watchable_match_infos = [];
                for (var j = 0; j < message.watchable_match_infos.length; ++j)
                    object.watchable_match_infos[j] = $root.WatchableMatchInfo.toObject(message.watchable_match_infos[j], options);
            }
            if (message.extended_timeout != null && message.hasOwnProperty("extended_timeout"))
                object.extended_timeout = message.extended_timeout;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_WatchInfoUsers to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_WatchInfoUsers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_WatchInfoUsers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_WatchInfoUsers;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestPlayersProfile = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestPlayersProfile.
         * @exports ICMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @interface ICMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @property {number|null} [request_id__deprecated] CMsgGCCStrike15_v2_ClientRequestPlayersProfile request_id__deprecated
         * @property {Array.<number>|null} [account_ids__deprecated] CMsgGCCStrike15_v2_ClientRequestPlayersProfile account_ids__deprecated
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_ClientRequestPlayersProfile account_id
         * @property {number|null} [request_level] CMsgGCCStrike15_v2_ClientRequestPlayersProfile request_level
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestPlayersProfile.
         * @exports CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestPlayersProfile.
         * @implements ICMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestPlayersProfile=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestPlayersProfile(properties) {
            this.account_ids__deprecated = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestPlayersProfile request_id__deprecated.
         * @member {number} request_id__deprecated
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.prototype.request_id__deprecated = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestPlayersProfile account_ids__deprecated.
         * @member {Array.<number>} account_ids__deprecated
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.prototype.account_ids__deprecated = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestPlayersProfile account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestPlayersProfile request_level.
         * @member {number} request_level
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.prototype.request_level = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestPlayersProfile instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestPlayersProfile=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestPlayersProfile} CMsgGCCStrike15_v2_ClientRequestPlayersProfile instance
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestPlayersProfile(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestPlayersProfile message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestPlayersProfile.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestPlayersProfile} message CMsgGCCStrike15_v2_ClientRequestPlayersProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_id__deprecated != null && message.hasOwnProperty("request_id__deprecated"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_id__deprecated);
            if (message.account_ids__deprecated != null && message.account_ids__deprecated.length)
                for (var i = 0; i < message.account_ids__deprecated.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_ids__deprecated[i]);
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.account_id);
            if (message.request_level != null && message.hasOwnProperty("request_level"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.request_level);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestPlayersProfile message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestPlayersProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestPlayersProfile} message CMsgGCCStrike15_v2_ClientRequestPlayersProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestPlayersProfile message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestPlayersProfile} CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_id__deprecated = reader.uint32();
                    break;
                case 2:
                    if (!(message.account_ids__deprecated && message.account_ids__deprecated.length))
                        message.account_ids__deprecated = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.account_ids__deprecated.push(reader.uint32());
                    } else
                        message.account_ids__deprecated.push(reader.uint32());
                    break;
                case 3:
                    message.account_id = reader.uint32();
                    break;
                case 4:
                    message.request_level = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestPlayersProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestPlayersProfile} CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestPlayersProfile message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_id__deprecated != null && message.hasOwnProperty("request_id__deprecated"))
                if (!$util.isInteger(message.request_id__deprecated))
                    return "request_id__deprecated: integer expected";
            if (message.account_ids__deprecated != null && message.hasOwnProperty("account_ids__deprecated")) {
                if (!Array.isArray(message.account_ids__deprecated))
                    return "account_ids__deprecated: array expected";
                for (var i = 0; i < message.account_ids__deprecated.length; ++i)
                    if (!$util.isInteger(message.account_ids__deprecated[i]))
                        return "account_ids__deprecated: integer[] expected";
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.request_level != null && message.hasOwnProperty("request_level"))
                if (!$util.isInteger(message.request_level))
                    return "request_level: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestPlayersProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestPlayersProfile} CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
            if (object.request_id__deprecated != null)
                message.request_id__deprecated = object.request_id__deprecated >>> 0;
            if (object.account_ids__deprecated) {
                if (!Array.isArray(object.account_ids__deprecated))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientRequestPlayersProfile.account_ids__deprecated: array expected");
                message.account_ids__deprecated = [];
                for (var i = 0; i < object.account_ids__deprecated.length; ++i)
                    message.account_ids__deprecated[i] = object.account_ids__deprecated[i] >>> 0;
            }
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.request_level != null)
                message.request_level = object.request_level >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestPlayersProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestPlayersProfile} message CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.account_ids__deprecated = [];
            if (options.defaults) {
                object.request_id__deprecated = 0;
                object.account_id = 0;
                object.request_level = 0;
            }
            if (message.request_id__deprecated != null && message.hasOwnProperty("request_id__deprecated"))
                object.request_id__deprecated = message.request_id__deprecated;
            if (message.account_ids__deprecated && message.account_ids__deprecated.length) {
                object.account_ids__deprecated = [];
                for (var j = 0; j < message.account_ids__deprecated.length; ++j)
                    object.account_ids__deprecated[j] = message.account_ids__deprecated[j];
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.request_level != null && message.hasOwnProperty("request_level"))
                object.request_level = message.request_level;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestPlayersProfile to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestPlayersProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestPlayersProfile;
    })();
    
    $root.CMsgGCCStrike15_v2_PlayersProfile = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_PlayersProfile.
         * @exports ICMsgGCCStrike15_v2_PlayersProfile
         * @interface ICMsgGCCStrike15_v2_PlayersProfile
         * @property {number|null} [request_id] CMsgGCCStrike15_v2_PlayersProfile request_id
         * @property {Array.<ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello>|null} [account_profiles] CMsgGCCStrike15_v2_PlayersProfile account_profiles
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_PlayersProfile.
         * @exports CMsgGCCStrike15_v2_PlayersProfile
         * @classdesc Represents a CMsgGCCStrike15_v2_PlayersProfile.
         * @implements ICMsgGCCStrike15_v2_PlayersProfile
         * @constructor
         * @param {ICMsgGCCStrike15_v2_PlayersProfile=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_PlayersProfile(properties) {
            this.account_profiles = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_PlayersProfile request_id.
         * @member {number} request_id
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_PlayersProfile.prototype.request_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayersProfile account_profiles.
         * @member {Array.<ICMsgGCCStrike15_v2_MatchmakingGC2ClientHello>} account_profiles
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @instance
         */
        CMsgGCCStrike15_v2_PlayersProfile.prototype.account_profiles = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_PlayersProfile instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayersProfile=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_PlayersProfile} CMsgGCCStrike15_v2_PlayersProfile instance
         */
        CMsgGCCStrike15_v2_PlayersProfile.create = function create(properties) {
            return new CMsgGCCStrike15_v2_PlayersProfile(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayersProfile message. Does not implicitly {@link CMsgGCCStrike15_v2_PlayersProfile.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayersProfile} message CMsgGCCStrike15_v2_PlayersProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayersProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_id);
            if (message.account_profiles != null && message.account_profiles.length)
                for (var i = 0; i < message.account_profiles.length; ++i)
                    $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.encode(message.account_profiles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayersProfile message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_PlayersProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayersProfile} message CMsgGCCStrike15_v2_PlayersProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayersProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayersProfile message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_PlayersProfile} CMsgGCCStrike15_v2_PlayersProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayersProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_PlayersProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.account_profiles && message.account_profiles.length))
                        message.account_profiles = [];
                    message.account_profiles.push($root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayersProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_PlayersProfile} CMsgGCCStrike15_v2_PlayersProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayersProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_PlayersProfile message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_PlayersProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                if (!$util.isInteger(message.request_id))
                    return "request_id: integer expected";
            if (message.account_profiles != null && message.hasOwnProperty("account_profiles")) {
                if (!Array.isArray(message.account_profiles))
                    return "account_profiles: array expected";
                for (var i = 0; i < message.account_profiles.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.verify(message.account_profiles[i]);
                    if (error)
                        return "account_profiles." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_PlayersProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_PlayersProfile} CMsgGCCStrike15_v2_PlayersProfile
         */
        CMsgGCCStrike15_v2_PlayersProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_PlayersProfile)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_PlayersProfile();
            if (object.request_id != null)
                message.request_id = object.request_id >>> 0;
            if (object.account_profiles) {
                if (!Array.isArray(object.account_profiles))
                    throw TypeError(".CMsgGCCStrike15_v2_PlayersProfile.account_profiles: array expected");
                message.account_profiles = [];
                for (var i = 0; i < object.account_profiles.length; ++i) {
                    if (typeof object.account_profiles[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_PlayersProfile.account_profiles: object expected");
                    message.account_profiles[i] = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.fromObject(object.account_profiles[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_PlayersProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @static
         * @param {CMsgGCCStrike15_v2_PlayersProfile} message CMsgGCCStrike15_v2_PlayersProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_PlayersProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.account_profiles = [];
            if (options.defaults)
                object.request_id = 0;
            if (message.request_id != null && message.hasOwnProperty("request_id"))
                object.request_id = message.request_id;
            if (message.account_profiles && message.account_profiles.length) {
                object.account_profiles = [];
                for (var j = 0; j < message.account_profiles.length; ++j)
                    object.account_profiles[j] = $root.CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.toObject(message.account_profiles[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_PlayersProfile to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_PlayersProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_PlayersProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_PlayersProfile;
    })();
    
    $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.
         * @exports ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @interface ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @property {number|Long|null} [caseid] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate caseid
         * @property {number|null} [suspectid] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate suspectid
         * @property {number|null} [fractionid] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate fractionid
         * @property {number|null} [rpt_aimbot] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_aimbot
         * @property {number|null} [rpt_wallhack] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_wallhack
         * @property {number|null} [rpt_speedhack] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_speedhack
         * @property {number|null} [rpt_teamharm] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_teamharm
         * @property {number|null} [reason] CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate reason
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.
         * @exports CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @classdesc Represents a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.
         * @implements ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate caseid.
         * @member {number|Long} caseid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.caseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate suspectid.
         * @member {number} suspectid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.suspectid = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate fractionid.
         * @member {number} fractionid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.fractionid = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_aimbot.
         * @member {number} rpt_aimbot
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.rpt_aimbot = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_wallhack.
         * @member {number} rpt_wallhack
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.rpt_wallhack = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_speedhack.
         * @member {number} rpt_speedhack
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.rpt_speedhack = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate rpt_teamharm.
         * @member {number} rpt_teamharm
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.rpt_teamharm = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate reason.
         * @member {number} reason
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.reason = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.caseid);
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.suspectid);
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.fractionid);
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rpt_aimbot);
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.rpt_wallhack);
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.rpt_speedhack);
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rpt_teamharm);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.reason);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.caseid = reader.uint64();
                    break;
                case 3:
                    message.suspectid = reader.uint32();
                    break;
                case 4:
                    message.fractionid = reader.uint32();
                    break;
                case 5:
                    message.rpt_aimbot = reader.uint32();
                    break;
                case 6:
                    message.rpt_wallhack = reader.uint32();
                    break;
                case 7:
                    message.rpt_speedhack = reader.uint32();
                    break;
                case 8:
                    message.rpt_teamharm = reader.uint32();
                    break;
                case 9:
                    message.reason = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (!$util.isInteger(message.caseid) && !(message.caseid && $util.isInteger(message.caseid.low) && $util.isInteger(message.caseid.high)))
                    return "caseid: integer|Long expected";
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                if (!$util.isInteger(message.suspectid))
                    return "suspectid: integer expected";
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                if (!$util.isInteger(message.fractionid))
                    return "fractionid: integer expected";
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                if (!$util.isInteger(message.rpt_aimbot))
                    return "rpt_aimbot: integer expected";
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                if (!$util.isInteger(message.rpt_wallhack))
                    return "rpt_wallhack: integer expected";
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                if (!$util.isInteger(message.rpt_speedhack))
                    return "rpt_speedhack: integer expected";
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                if (!$util.isInteger(message.rpt_teamharm))
                    return "rpt_teamharm: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isInteger(message.reason))
                    return "reason: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
            if (object.caseid != null)
                if ($util.Long)
                    (message.caseid = $util.Long.fromValue(object.caseid)).unsigned = true;
                else if (typeof object.caseid === "string")
                    message.caseid = parseInt(object.caseid, 10);
                else if (typeof object.caseid === "number")
                    message.caseid = object.caseid;
                else if (typeof object.caseid === "object")
                    message.caseid = new $util.LongBits(object.caseid.low >>> 0, object.caseid.high >>> 0).toNumber(true);
            if (object.suspectid != null)
                message.suspectid = object.suspectid >>> 0;
            if (object.fractionid != null)
                message.fractionid = object.fractionid >>> 0;
            if (object.rpt_aimbot != null)
                message.rpt_aimbot = object.rpt_aimbot >>> 0;
            if (object.rpt_wallhack != null)
                message.rpt_wallhack = object.rpt_wallhack >>> 0;
            if (object.rpt_speedhack != null)
                message.rpt_speedhack = object.rpt_speedhack >>> 0;
            if (object.rpt_teamharm != null)
                message.rpt_teamharm = object.rpt_teamharm >>> 0;
            if (object.reason != null)
                message.reason = object.reason >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @static
         * @param {CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate} message CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caseid = options.longs === String ? "0" : 0;
                object.suspectid = 0;
                object.fractionid = 0;
                object.rpt_aimbot = 0;
                object.rpt_wallhack = 0;
                object.rpt_speedhack = 0;
                object.rpt_teamharm = 0;
                object.reason = 0;
            }
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (typeof message.caseid === "number")
                    object.caseid = options.longs === String ? String(message.caseid) : message.caseid;
                else
                    object.caseid = options.longs === String ? $util.Long.prototype.toString.call(message.caseid) : options.longs === Number ? new $util.LongBits(message.caseid.low >>> 0, message.caseid.high >>> 0).toNumber(true) : message.caseid;
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                object.suspectid = message.suspectid;
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                object.fractionid = message.fractionid;
            if (message.rpt_aimbot != null && message.hasOwnProperty("rpt_aimbot"))
                object.rpt_aimbot = message.rpt_aimbot;
            if (message.rpt_wallhack != null && message.hasOwnProperty("rpt_wallhack"))
                object.rpt_wallhack = message.rpt_wallhack;
            if (message.rpt_speedhack != null && message.hasOwnProperty("rpt_speedhack"))
                object.rpt_speedhack = message.rpt_speedhack;
            if (message.rpt_teamharm != null && message.hasOwnProperty("rpt_teamharm"))
                object.rpt_teamharm = message.rpt_teamharm;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate;
    })();
    
    $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.
         * @exports ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @interface ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @property {number|Long|null} [caseid] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment caseid
         * @property {string|null} [caseurl] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment caseurl
         * @property {number|null} [verdict] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment verdict
         * @property {number|null} [timestamp] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment timestamp
         * @property {number|null} [throttleseconds] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment throttleseconds
         * @property {number|null} [suspectid] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment suspectid
         * @property {number|null} [fractionid] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment fractionid
         * @property {number|null} [numrounds] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment numrounds
         * @property {number|null} [fractionrounds] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment fractionrounds
         * @property {number|null} [streakconvictions] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment streakconvictions
         * @property {number|null} [reason] CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment reason
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.
         * @exports CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @classdesc Represents a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.
         * @implements ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @constructor
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment caseid.
         * @member {number|Long} caseid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.caseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment caseurl.
         * @member {string} caseurl
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.caseurl = "";
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment verdict.
         * @member {number} verdict
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.verdict = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment timestamp.
         * @member {number} timestamp
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.timestamp = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment throttleseconds.
         * @member {number} throttleseconds
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.throttleseconds = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment suspectid.
         * @member {number} suspectid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.suspectid = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment fractionid.
         * @member {number} fractionid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.fractionid = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment numrounds.
         * @member {number} numrounds
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.numrounds = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment fractionrounds.
         * @member {number} fractionrounds
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.fractionrounds = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment streakconvictions.
         * @member {number} streakconvictions
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.streakconvictions = 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment reason.
         * @member {number} reason
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.reason = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.create = function create(properties) {
            return new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.caseid);
            if (message.caseurl != null && message.hasOwnProperty("caseurl"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.caseurl);
            if (message.verdict != null && message.hasOwnProperty("verdict"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.verdict);
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.timestamp);
            if (message.throttleseconds != null && message.hasOwnProperty("throttleseconds"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.throttleseconds);
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.suspectid);
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.fractionid);
            if (message.numrounds != null && message.hasOwnProperty("numrounds"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.numrounds);
            if (message.fractionrounds != null && message.hasOwnProperty("fractionrounds"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.fractionrounds);
            if (message.streakconvictions != null && message.hasOwnProperty("streakconvictions"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.streakconvictions);
            if (message.reason != null && message.hasOwnProperty("reason"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.reason);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.caseid = reader.uint64();
                    break;
                case 2:
                    message.caseurl = reader.string();
                    break;
                case 3:
                    message.verdict = reader.uint32();
                    break;
                case 4:
                    message.timestamp = reader.uint32();
                    break;
                case 5:
                    message.throttleseconds = reader.uint32();
                    break;
                case 6:
                    message.suspectid = reader.uint32();
                    break;
                case 7:
                    message.fractionid = reader.uint32();
                    break;
                case 8:
                    message.numrounds = reader.uint32();
                    break;
                case 9:
                    message.fractionrounds = reader.uint32();
                    break;
                case 10:
                    message.streakconvictions = reader.int32();
                    break;
                case 11:
                    message.reason = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (!$util.isInteger(message.caseid) && !(message.caseid && $util.isInteger(message.caseid.low) && $util.isInteger(message.caseid.high)))
                    return "caseid: integer|Long expected";
            if (message.caseurl != null && message.hasOwnProperty("caseurl"))
                if (!$util.isString(message.caseurl))
                    return "caseurl: string expected";
            if (message.verdict != null && message.hasOwnProperty("verdict"))
                if (!$util.isInteger(message.verdict))
                    return "verdict: integer expected";
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
            if (message.throttleseconds != null && message.hasOwnProperty("throttleseconds"))
                if (!$util.isInteger(message.throttleseconds))
                    return "throttleseconds: integer expected";
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                if (!$util.isInteger(message.suspectid))
                    return "suspectid: integer expected";
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                if (!$util.isInteger(message.fractionid))
                    return "fractionid: integer expected";
            if (message.numrounds != null && message.hasOwnProperty("numrounds"))
                if (!$util.isInteger(message.numrounds))
                    return "numrounds: integer expected";
            if (message.fractionrounds != null && message.hasOwnProperty("fractionrounds"))
                if (!$util.isInteger(message.fractionrounds))
                    return "fractionrounds: integer expected";
            if (message.streakconvictions != null && message.hasOwnProperty("streakconvictions"))
                if (!$util.isInteger(message.streakconvictions))
                    return "streakconvictions: integer expected";
            if (message.reason != null && message.hasOwnProperty("reason"))
                if (!$util.isInteger(message.reason))
                    return "reason: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
            if (object.caseid != null)
                if ($util.Long)
                    (message.caseid = $util.Long.fromValue(object.caseid)).unsigned = true;
                else if (typeof object.caseid === "string")
                    message.caseid = parseInt(object.caseid, 10);
                else if (typeof object.caseid === "number")
                    message.caseid = object.caseid;
                else if (typeof object.caseid === "object")
                    message.caseid = new $util.LongBits(object.caseid.low >>> 0, object.caseid.high >>> 0).toNumber(true);
            if (object.caseurl != null)
                message.caseurl = String(object.caseurl);
            if (object.verdict != null)
                message.verdict = object.verdict >>> 0;
            if (object.timestamp != null)
                message.timestamp = object.timestamp >>> 0;
            if (object.throttleseconds != null)
                message.throttleseconds = object.throttleseconds >>> 0;
            if (object.suspectid != null)
                message.suspectid = object.suspectid >>> 0;
            if (object.fractionid != null)
                message.fractionid = object.fractionid >>> 0;
            if (object.numrounds != null)
                message.numrounds = object.numrounds >>> 0;
            if (object.fractionrounds != null)
                message.fractionrounds = object.fractionrounds >>> 0;
            if (object.streakconvictions != null)
                message.streakconvictions = object.streakconvictions | 0;
            if (object.reason != null)
                message.reason = object.reason >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @static
         * @param {CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment} message CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caseid = options.longs === String ? "0" : 0;
                object.caseurl = "";
                object.verdict = 0;
                object.timestamp = 0;
                object.throttleseconds = 0;
                object.suspectid = 0;
                object.fractionid = 0;
                object.numrounds = 0;
                object.fractionrounds = 0;
                object.streakconvictions = 0;
                object.reason = 0;
            }
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (typeof message.caseid === "number")
                    object.caseid = options.longs === String ? String(message.caseid) : message.caseid;
                else
                    object.caseid = options.longs === String ? $util.Long.prototype.toString.call(message.caseid) : options.longs === Number ? new $util.LongBits(message.caseid.low >>> 0, message.caseid.high >>> 0).toNumber(true) : message.caseid;
            if (message.caseurl != null && message.hasOwnProperty("caseurl"))
                object.caseurl = message.caseurl;
            if (message.verdict != null && message.hasOwnProperty("verdict"))
                object.verdict = message.verdict;
            if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                object.timestamp = message.timestamp;
            if (message.throttleseconds != null && message.hasOwnProperty("throttleseconds"))
                object.throttleseconds = message.throttleseconds;
            if (message.suspectid != null && message.hasOwnProperty("suspectid"))
                object.suspectid = message.suspectid;
            if (message.fractionid != null && message.hasOwnProperty("fractionid"))
                object.fractionid = message.fractionid;
            if (message.numrounds != null && message.hasOwnProperty("numrounds"))
                object.numrounds = message.numrounds;
            if (message.fractionrounds != null && message.hasOwnProperty("fractionrounds"))
                object.fractionrounds = message.fractionrounds;
            if (message.streakconvictions != null && message.hasOwnProperty("streakconvictions"))
                object.streakconvictions = message.streakconvictions;
            if (message.reason != null && message.hasOwnProperty("reason"))
                object.reason = message.reason;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment;
    })();
    
    $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.
         * @exports ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @interface ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @property {number|Long|null} [caseid] CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus caseid
         * @property {number|null} [statusid] CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus statusid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.
         * @exports CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @classdesc Represents a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.
         * @implements ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @constructor
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus caseid.
         * @member {number|Long} caseid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.prototype.caseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus statusid.
         * @member {number} statusid
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.prototype.statusid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus instance
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.create = function create(properties) {
            return new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.caseid);
            if (message.statusid != null && message.hasOwnProperty("statusid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.statusid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {ICMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.caseid = reader.uint64();
                    break;
                case 2:
                    message.statusid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (!$util.isInteger(message.caseid) && !(message.caseid && $util.isInteger(message.caseid.low) && $util.isInteger(message.caseid.high)))
                    return "caseid: integer|Long expected";
            if (message.statusid != null && message.hasOwnProperty("statusid"))
                if (!$util.isInteger(message.statusid))
                    return "statusid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
            if (object.caseid != null)
                if ($util.Long)
                    (message.caseid = $util.Long.fromValue(object.caseid)).unsigned = true;
                else if (typeof object.caseid === "string")
                    message.caseid = parseInt(object.caseid, 10);
                else if (typeof object.caseid === "number")
                    message.caseid = object.caseid;
                else if (typeof object.caseid === "object")
                    message.caseid = new $util.LongBits(object.caseid.low >>> 0, object.caseid.high >>> 0).toNumber(true);
            if (object.statusid != null)
                message.statusid = object.statusid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @static
         * @param {CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus} message CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caseid = options.longs === String ? "0" : 0;
                object.statusid = 0;
            }
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (typeof message.caseid === "number")
                    object.caseid = options.longs === String ? String(message.caseid) : message.caseid;
                else
                    object.caseid = options.longs === String ? $util.Long.prototype.toString.call(message.caseid) : options.longs === Number ? new $util.LongBits(message.caseid.low >>> 0, message.caseid.high >>> 0).toNumber(true) : message.caseid;
            if (message.statusid != null && message.hasOwnProperty("statusid"))
                object.statusid = message.statusid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus;
    })();
    
    $root.CClientHeaderOverwatchEvidence = (function() {
    
        /**
         * Properties of a CClientHeaderOverwatchEvidence.
         * @exports ICClientHeaderOverwatchEvidence
         * @interface ICClientHeaderOverwatchEvidence
         * @property {number|null} [accountid] CClientHeaderOverwatchEvidence accountid
         * @property {number|Long|null} [caseid] CClientHeaderOverwatchEvidence caseid
         */
    
        /**
         * Constructs a new CClientHeaderOverwatchEvidence.
         * @exports CClientHeaderOverwatchEvidence
         * @classdesc Represents a CClientHeaderOverwatchEvidence.
         * @implements ICClientHeaderOverwatchEvidence
         * @constructor
         * @param {ICClientHeaderOverwatchEvidence=} [properties] Properties to set
         */
        function CClientHeaderOverwatchEvidence(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CClientHeaderOverwatchEvidence accountid.
         * @member {number} accountid
         * @memberof CClientHeaderOverwatchEvidence
         * @instance
         */
        CClientHeaderOverwatchEvidence.prototype.accountid = 0;
    
        /**
         * CClientHeaderOverwatchEvidence caseid.
         * @member {number|Long} caseid
         * @memberof CClientHeaderOverwatchEvidence
         * @instance
         */
        CClientHeaderOverwatchEvidence.prototype.caseid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CClientHeaderOverwatchEvidence instance using the specified properties.
         * @function create
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {ICClientHeaderOverwatchEvidence=} [properties] Properties to set
         * @returns {CClientHeaderOverwatchEvidence} CClientHeaderOverwatchEvidence instance
         */
        CClientHeaderOverwatchEvidence.create = function create(properties) {
            return new CClientHeaderOverwatchEvidence(properties);
        };
    
        /**
         * Encodes the specified CClientHeaderOverwatchEvidence message. Does not implicitly {@link CClientHeaderOverwatchEvidence.verify|verify} messages.
         * @function encode
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {ICClientHeaderOverwatchEvidence} message CClientHeaderOverwatchEvidence message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClientHeaderOverwatchEvidence.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.caseid);
            return writer;
        };
    
        /**
         * Encodes the specified CClientHeaderOverwatchEvidence message, length delimited. Does not implicitly {@link CClientHeaderOverwatchEvidence.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {ICClientHeaderOverwatchEvidence} message CClientHeaderOverwatchEvidence message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CClientHeaderOverwatchEvidence.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CClientHeaderOverwatchEvidence message from the specified reader or buffer.
         * @function decode
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CClientHeaderOverwatchEvidence} CClientHeaderOverwatchEvidence
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClientHeaderOverwatchEvidence.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CClientHeaderOverwatchEvidence();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.caseid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CClientHeaderOverwatchEvidence message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CClientHeaderOverwatchEvidence} CClientHeaderOverwatchEvidence
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CClientHeaderOverwatchEvidence.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CClientHeaderOverwatchEvidence message.
         * @function verify
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CClientHeaderOverwatchEvidence.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (!$util.isInteger(message.caseid) && !(message.caseid && $util.isInteger(message.caseid.low) && $util.isInteger(message.caseid.high)))
                    return "caseid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CClientHeaderOverwatchEvidence message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CClientHeaderOverwatchEvidence} CClientHeaderOverwatchEvidence
         */
        CClientHeaderOverwatchEvidence.fromObject = function fromObject(object) {
            if (object instanceof $root.CClientHeaderOverwatchEvidence)
                return object;
            var message = new $root.CClientHeaderOverwatchEvidence();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.caseid != null)
                if ($util.Long)
                    (message.caseid = $util.Long.fromValue(object.caseid)).unsigned = true;
                else if (typeof object.caseid === "string")
                    message.caseid = parseInt(object.caseid, 10);
                else if (typeof object.caseid === "number")
                    message.caseid = object.caseid;
                else if (typeof object.caseid === "object")
                    message.caseid = new $util.LongBits(object.caseid.low >>> 0, object.caseid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CClientHeaderOverwatchEvidence message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CClientHeaderOverwatchEvidence
         * @static
         * @param {CClientHeaderOverwatchEvidence} message CClientHeaderOverwatchEvidence
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CClientHeaderOverwatchEvidence.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.caseid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caseid = options.longs === String ? "0" : 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.caseid != null && message.hasOwnProperty("caseid"))
                if (typeof message.caseid === "number")
                    object.caseid = options.longs === String ? String(message.caseid) : message.caseid;
                else
                    object.caseid = options.longs === String ? $util.Long.prototype.toString.call(message.caseid) : options.longs === Number ? new $util.LongBits(message.caseid.low >>> 0, message.caseid.high >>> 0).toNumber(true) : message.caseid;
            return object;
        };
    
        /**
         * Converts this CClientHeaderOverwatchEvidence to JSON.
         * @function toJSON
         * @memberof CClientHeaderOverwatchEvidence
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CClientHeaderOverwatchEvidence.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CClientHeaderOverwatchEvidence;
    })();
    
    $root.CMsgGCCStrike15_v2_GC2ClientTextMsg = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GC2ClientTextMsg.
         * @exports ICMsgGCCStrike15_v2_GC2ClientTextMsg
         * @interface ICMsgGCCStrike15_v2_GC2ClientTextMsg
         * @property {number|null} [id] CMsgGCCStrike15_v2_GC2ClientTextMsg id
         * @property {number|null} [type] CMsgGCCStrike15_v2_GC2ClientTextMsg type
         * @property {Uint8Array|null} [payload] CMsgGCCStrike15_v2_GC2ClientTextMsg payload
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GC2ClientTextMsg.
         * @exports CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @classdesc Represents a CMsgGCCStrike15_v2_GC2ClientTextMsg.
         * @implements ICMsgGCCStrike15_v2_GC2ClientTextMsg
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GC2ClientTextMsg=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GC2ClientTextMsg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTextMsg id.
         * @member {number} id
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.prototype.id = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTextMsg type.
         * @member {number} type
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.prototype.type = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTextMsg payload.
         * @member {Uint8Array} payload
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.prototype.payload = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GC2ClientTextMsg instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTextMsg=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GC2ClientTextMsg} CMsgGCCStrike15_v2_GC2ClientTextMsg instance
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GC2ClientTextMsg(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ClientTextMsg message. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ClientTextMsg.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTextMsg} message CMsgGCCStrike15_v2_GC2ClientTextMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.type);
            if (message.payload != null && message.hasOwnProperty("payload"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.payload);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ClientTextMsg message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ClientTextMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTextMsg} message CMsgGCCStrike15_v2_GC2ClientTextMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ClientTextMsg message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GC2ClientTextMsg} CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GC2ClientTextMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.type = reader.uint32();
                    break;
                case 3:
                    message.payload = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ClientTextMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GC2ClientTextMsg} CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GC2ClientTextMsg message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.payload != null && message.hasOwnProperty("payload"))
                if (!(message.payload && typeof message.payload.length === "number" || $util.isString(message.payload)))
                    return "payload: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GC2ClientTextMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GC2ClientTextMsg} CMsgGCCStrike15_v2_GC2ClientTextMsg
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GC2ClientTextMsg)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GC2ClientTextMsg();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.type != null)
                message.type = object.type >>> 0;
            if (object.payload != null)
                if (typeof object.payload === "string")
                    $util.base64.decode(object.payload, message.payload = $util.newBuffer($util.base64.length(object.payload)), 0);
                else if (object.payload.length)
                    message.payload = object.payload;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GC2ClientTextMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @static
         * @param {CMsgGCCStrike15_v2_GC2ClientTextMsg} message CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.type = 0;
                if (options.bytes === String)
                    object.payload = "";
                else {
                    object.payload = [];
                    if (options.bytes !== Array)
                        object.payload = $util.newBuffer(object.payload);
                }
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = options.bytes === String ? $util.base64.encode(message.payload, 0, message.payload.length) : options.bytes === Array ? Array.prototype.slice.call(message.payload) : message.payload;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GC2ClientTextMsg to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GC2ClientTextMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GC2ClientTextMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GC2ClientTextMsg;
    })();
    
    $root.CMsgGCCStrike15_v2_Client2GCTextMsg = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Client2GCTextMsg.
         * @exports ICMsgGCCStrike15_v2_Client2GCTextMsg
         * @interface ICMsgGCCStrike15_v2_Client2GCTextMsg
         * @property {number|null} [id] CMsgGCCStrike15_v2_Client2GCTextMsg id
         * @property {Array.<Uint8Array>|null} [args] CMsgGCCStrike15_v2_Client2GCTextMsg args
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Client2GCTextMsg.
         * @exports CMsgGCCStrike15_v2_Client2GCTextMsg
         * @classdesc Represents a CMsgGCCStrike15_v2_Client2GCTextMsg.
         * @implements ICMsgGCCStrike15_v2_Client2GCTextMsg
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Client2GCTextMsg=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Client2GCTextMsg(properties) {
            this.args = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Client2GCTextMsg id.
         * @member {number} id
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.prototype.id = 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCTextMsg args.
         * @member {Array.<Uint8Array>} args
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.prototype.args = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Client2GCTextMsg instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCTextMsg=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Client2GCTextMsg} CMsgGCCStrike15_v2_Client2GCTextMsg instance
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Client2GCTextMsg(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCTextMsg message. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCTextMsg.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCTextMsg} message CMsgGCCStrike15_v2_Client2GCTextMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.args != null && message.args.length)
                for (var i = 0; i < message.args.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.args[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCTextMsg message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCTextMsg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCTextMsg} message CMsgGCCStrike15_v2_Client2GCTextMsg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCTextMsg message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Client2GCTextMsg} CMsgGCCStrike15_v2_Client2GCTextMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Client2GCTextMsg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    if (!(message.args && message.args.length))
                        message.args = [];
                    message.args.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCTextMsg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Client2GCTextMsg} CMsgGCCStrike15_v2_Client2GCTextMsg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Client2GCTextMsg message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.args != null && message.hasOwnProperty("args")) {
                if (!Array.isArray(message.args))
                    return "args: array expected";
                for (var i = 0; i < message.args.length; ++i)
                    if (!(message.args[i] && typeof message.args[i].length === "number" || $util.isString(message.args[i])))
                        return "args: buffer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Client2GCTextMsg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Client2GCTextMsg} CMsgGCCStrike15_v2_Client2GCTextMsg
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Client2GCTextMsg)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Client2GCTextMsg();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.args) {
                if (!Array.isArray(object.args))
                    throw TypeError(".CMsgGCCStrike15_v2_Client2GCTextMsg.args: array expected");
                message.args = [];
                for (var i = 0; i < object.args.length; ++i)
                    if (typeof object.args[i] === "string")
                        $util.base64.decode(object.args[i], message.args[i] = $util.newBuffer($util.base64.length(object.args[i])), 0);
                    else if (object.args[i].length)
                        message.args[i] = object.args[i];
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Client2GCTextMsg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @static
         * @param {CMsgGCCStrike15_v2_Client2GCTextMsg} message CMsgGCCStrike15_v2_Client2GCTextMsg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.args = [];
            if (options.defaults)
                object.id = 0;
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.args && message.args.length) {
                object.args = [];
                for (var j = 0; j < message.args.length; ++j)
                    object.args[j] = options.bytes === String ? $util.base64.encode(message.args[j], 0, message.args[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.args[j]) : message.args[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Client2GCTextMsg to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Client2GCTextMsg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Client2GCTextMsg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Client2GCTextMsg;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchEndRunRewardDrops = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchEndRunRewardDrops.
         * @exports ICMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @interface ICMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @property {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse|null} [serverinfo] CMsgGCCStrike15_v2_MatchEndRunRewardDrops serverinfo
         * @property {ICMsgGC_ServerQuestUpdateData|null} [match_end_quest_data] CMsgGCCStrike15_v2_MatchEndRunRewardDrops match_end_quest_data
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchEndRunRewardDrops.
         * @exports CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchEndRunRewardDrops.
         * @implements ICMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchEndRunRewardDrops=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchEndRunRewardDrops(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchEndRunRewardDrops serverinfo.
         * @member {ICMsgGCCStrike15_v2_MatchmakingServerReservationResponse|null|undefined} serverinfo
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @instance
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.prototype.serverinfo = null;
    
        /**
         * CMsgGCCStrike15_v2_MatchEndRunRewardDrops match_end_quest_data.
         * @member {ICMsgGC_ServerQuestUpdateData|null|undefined} match_end_quest_data
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @instance
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.prototype.match_end_quest_data = null;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchEndRunRewardDrops instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRunRewardDrops=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchEndRunRewardDrops} CMsgGCCStrike15_v2_MatchEndRunRewardDrops instance
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchEndRunRewardDrops(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchEndRunRewardDrops message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchEndRunRewardDrops.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRunRewardDrops} message CMsgGCCStrike15_v2_MatchEndRunRewardDrops message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serverinfo != null && message.hasOwnProperty("serverinfo"))
                $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.encode(message.serverinfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data"))
                $root.CMsgGC_ServerQuestUpdateData.encode(message.match_end_quest_data, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchEndRunRewardDrops message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchEndRunRewardDrops.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRunRewardDrops} message CMsgGCCStrike15_v2_MatchEndRunRewardDrops message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchEndRunRewardDrops message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchEndRunRewardDrops} CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.serverinfo = $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchEndRunRewardDrops message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchEndRunRewardDrops} CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchEndRunRewardDrops message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serverinfo != null && message.hasOwnProperty("serverinfo")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.verify(message.serverinfo);
                if (error)
                    return "serverinfo." + error;
            }
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data")) {
                var error = $root.CMsgGC_ServerQuestUpdateData.verify(message.match_end_quest_data);
                if (error)
                    return "match_end_quest_data." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchEndRunRewardDrops message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchEndRunRewardDrops} CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
            if (object.serverinfo != null) {
                if (typeof object.serverinfo !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchEndRunRewardDrops.serverinfo: object expected");
                message.serverinfo = $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.fromObject(object.serverinfo);
            }
            if (object.match_end_quest_data != null) {
                if (typeof object.match_end_quest_data !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchEndRunRewardDrops.match_end_quest_data: object expected");
                message.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.fromObject(object.match_end_quest_data);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchEndRunRewardDrops message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @static
         * @param {CMsgGCCStrike15_v2_MatchEndRunRewardDrops} message CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.serverinfo = null;
                object.match_end_quest_data = null;
            }
            if (message.serverinfo != null && message.hasOwnProperty("serverinfo"))
                object.serverinfo = $root.CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.toObject(message.serverinfo, options);
            if (message.match_end_quest_data != null && message.hasOwnProperty("match_end_quest_data"))
                object.match_end_quest_data = $root.CMsgGC_ServerQuestUpdateData.toObject(message.match_end_quest_data, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchEndRunRewardDrops to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchEndRunRewardDrops
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchEndRunRewardDrops;
    })();
    
    $root.CEconItemPreviewDataBlock = (function() {
    
        /**
         * Properties of a CEconItemPreviewDataBlock.
         * @exports ICEconItemPreviewDataBlock
         * @interface ICEconItemPreviewDataBlock
         * @property {number|null} [accountid] CEconItemPreviewDataBlock accountid
         * @property {number|Long|null} [itemid] CEconItemPreviewDataBlock itemid
         * @property {number|null} [defindex] CEconItemPreviewDataBlock defindex
         * @property {number|null} [paintindex] CEconItemPreviewDataBlock paintindex
         * @property {number|null} [rarity] CEconItemPreviewDataBlock rarity
         * @property {number|null} [quality] CEconItemPreviewDataBlock quality
         * @property {number|null} [paintwear] CEconItemPreviewDataBlock paintwear
         * @property {number|null} [paintseed] CEconItemPreviewDataBlock paintseed
         * @property {number|null} [killeaterscoretype] CEconItemPreviewDataBlock killeaterscoretype
         * @property {number|null} [killeatervalue] CEconItemPreviewDataBlock killeatervalue
         * @property {string|null} [customname] CEconItemPreviewDataBlock customname
         * @property {Array.<CEconItemPreviewDataBlock.ISticker>|null} [stickers] CEconItemPreviewDataBlock stickers
         * @property {number|null} [inventory] CEconItemPreviewDataBlock inventory
         * @property {number|null} [origin] CEconItemPreviewDataBlock origin
         * @property {number|null} [questid] CEconItemPreviewDataBlock questid
         * @property {number|null} [dropreason] CEconItemPreviewDataBlock dropreason
         * @property {number|null} [musicindex] CEconItemPreviewDataBlock musicindex
         * @property {number|null} [entindex] CEconItemPreviewDataBlock entindex
         */
    
        /**
         * Constructs a new CEconItemPreviewDataBlock.
         * @exports CEconItemPreviewDataBlock
         * @classdesc Represents a CEconItemPreviewDataBlock.
         * @implements ICEconItemPreviewDataBlock
         * @constructor
         * @param {ICEconItemPreviewDataBlock=} [properties] Properties to set
         */
        function CEconItemPreviewDataBlock(properties) {
            this.stickers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CEconItemPreviewDataBlock accountid.
         * @member {number} accountid
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.accountid = 0;
    
        /**
         * CEconItemPreviewDataBlock itemid.
         * @member {number|Long} itemid
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.itemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CEconItemPreviewDataBlock defindex.
         * @member {number} defindex
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.defindex = 0;
    
        /**
         * CEconItemPreviewDataBlock paintindex.
         * @member {number} paintindex
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.paintindex = 0;
    
        /**
         * CEconItemPreviewDataBlock rarity.
         * @member {number} rarity
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.rarity = 0;
    
        /**
         * CEconItemPreviewDataBlock quality.
         * @member {number} quality
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.quality = 0;
    
        /**
         * CEconItemPreviewDataBlock paintwear.
         * @member {number} paintwear
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.paintwear = 0;
    
        /**
         * CEconItemPreviewDataBlock paintseed.
         * @member {number} paintseed
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.paintseed = 0;
    
        /**
         * CEconItemPreviewDataBlock killeaterscoretype.
         * @member {number} killeaterscoretype
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.killeaterscoretype = 0;
    
        /**
         * CEconItemPreviewDataBlock killeatervalue.
         * @member {number} killeatervalue
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.killeatervalue = 0;
    
        /**
         * CEconItemPreviewDataBlock customname.
         * @member {string} customname
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.customname = "";
    
        /**
         * CEconItemPreviewDataBlock stickers.
         * @member {Array.<CEconItemPreviewDataBlock.ISticker>} stickers
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.stickers = $util.emptyArray;
    
        /**
         * CEconItemPreviewDataBlock inventory.
         * @member {number} inventory
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.inventory = 0;
    
        /**
         * CEconItemPreviewDataBlock origin.
         * @member {number} origin
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.origin = 0;
    
        /**
         * CEconItemPreviewDataBlock questid.
         * @member {number} questid
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.questid = 0;
    
        /**
         * CEconItemPreviewDataBlock dropreason.
         * @member {number} dropreason
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.dropreason = 0;
    
        /**
         * CEconItemPreviewDataBlock musicindex.
         * @member {number} musicindex
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.musicindex = 0;
    
        /**
         * CEconItemPreviewDataBlock entindex.
         * @member {number} entindex
         * @memberof CEconItemPreviewDataBlock
         * @instance
         */
        CEconItemPreviewDataBlock.prototype.entindex = 0;
    
        /**
         * Creates a new CEconItemPreviewDataBlock instance using the specified properties.
         * @function create
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {ICEconItemPreviewDataBlock=} [properties] Properties to set
         * @returns {CEconItemPreviewDataBlock} CEconItemPreviewDataBlock instance
         */
        CEconItemPreviewDataBlock.create = function create(properties) {
            return new CEconItemPreviewDataBlock(properties);
        };
    
        /**
         * Encodes the specified CEconItemPreviewDataBlock message. Does not implicitly {@link CEconItemPreviewDataBlock.verify|verify} messages.
         * @function encode
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {ICEconItemPreviewDataBlock} message CEconItemPreviewDataBlock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CEconItemPreviewDataBlock.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.itemid);
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.defindex);
            if (message.paintindex != null && message.hasOwnProperty("paintindex"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.paintindex);
            if (message.rarity != null && message.hasOwnProperty("rarity"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rarity);
            if (message.quality != null && message.hasOwnProperty("quality"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.quality);
            if (message.paintwear != null && message.hasOwnProperty("paintwear"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.paintwear);
            if (message.paintseed != null && message.hasOwnProperty("paintseed"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.paintseed);
            if (message.killeaterscoretype != null && message.hasOwnProperty("killeaterscoretype"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.killeaterscoretype);
            if (message.killeatervalue != null && message.hasOwnProperty("killeatervalue"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.killeatervalue);
            if (message.customname != null && message.hasOwnProperty("customname"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.customname);
            if (message.stickers != null && message.stickers.length)
                for (var i = 0; i < message.stickers.length; ++i)
                    $root.CEconItemPreviewDataBlock.Sticker.encode(message.stickers[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.inventory != null && message.hasOwnProperty("inventory"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.inventory);
            if (message.origin != null && message.hasOwnProperty("origin"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.origin);
            if (message.questid != null && message.hasOwnProperty("questid"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.questid);
            if (message.dropreason != null && message.hasOwnProperty("dropreason"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.dropreason);
            if (message.musicindex != null && message.hasOwnProperty("musicindex"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.musicindex);
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.entindex);
            return writer;
        };
    
        /**
         * Encodes the specified CEconItemPreviewDataBlock message, length delimited. Does not implicitly {@link CEconItemPreviewDataBlock.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {ICEconItemPreviewDataBlock} message CEconItemPreviewDataBlock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CEconItemPreviewDataBlock.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CEconItemPreviewDataBlock message from the specified reader or buffer.
         * @function decode
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CEconItemPreviewDataBlock} CEconItemPreviewDataBlock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CEconItemPreviewDataBlock.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CEconItemPreviewDataBlock();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.itemid = reader.uint64();
                    break;
                case 3:
                    message.defindex = reader.uint32();
                    break;
                case 4:
                    message.paintindex = reader.uint32();
                    break;
                case 5:
                    message.rarity = reader.uint32();
                    break;
                case 6:
                    message.quality = reader.uint32();
                    break;
                case 7:
                    message.paintwear = reader.uint32();
                    break;
                case 8:
                    message.paintseed = reader.uint32();
                    break;
                case 9:
                    message.killeaterscoretype = reader.uint32();
                    break;
                case 10:
                    message.killeatervalue = reader.uint32();
                    break;
                case 11:
                    message.customname = reader.string();
                    break;
                case 12:
                    if (!(message.stickers && message.stickers.length))
                        message.stickers = [];
                    message.stickers.push($root.CEconItemPreviewDataBlock.Sticker.decode(reader, reader.uint32()));
                    break;
                case 13:
                    message.inventory = reader.uint32();
                    break;
                case 14:
                    message.origin = reader.uint32();
                    break;
                case 15:
                    message.questid = reader.uint32();
                    break;
                case 16:
                    message.dropreason = reader.uint32();
                    break;
                case 17:
                    message.musicindex = reader.uint32();
                    break;
                case 18:
                    message.entindex = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CEconItemPreviewDataBlock message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CEconItemPreviewDataBlock} CEconItemPreviewDataBlock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CEconItemPreviewDataBlock.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CEconItemPreviewDataBlock message.
         * @function verify
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CEconItemPreviewDataBlock.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid) && !(message.itemid && $util.isInteger(message.itemid.low) && $util.isInteger(message.itemid.high)))
                    return "itemid: integer|Long expected";
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                if (!$util.isInteger(message.defindex))
                    return "defindex: integer expected";
            if (message.paintindex != null && message.hasOwnProperty("paintindex"))
                if (!$util.isInteger(message.paintindex))
                    return "paintindex: integer expected";
            if (message.rarity != null && message.hasOwnProperty("rarity"))
                if (!$util.isInteger(message.rarity))
                    return "rarity: integer expected";
            if (message.quality != null && message.hasOwnProperty("quality"))
                if (!$util.isInteger(message.quality))
                    return "quality: integer expected";
            if (message.paintwear != null && message.hasOwnProperty("paintwear"))
                if (!$util.isInteger(message.paintwear))
                    return "paintwear: integer expected";
            if (message.paintseed != null && message.hasOwnProperty("paintseed"))
                if (!$util.isInteger(message.paintseed))
                    return "paintseed: integer expected";
            if (message.killeaterscoretype != null && message.hasOwnProperty("killeaterscoretype"))
                if (!$util.isInteger(message.killeaterscoretype))
                    return "killeaterscoretype: integer expected";
            if (message.killeatervalue != null && message.hasOwnProperty("killeatervalue"))
                if (!$util.isInteger(message.killeatervalue))
                    return "killeatervalue: integer expected";
            if (message.customname != null && message.hasOwnProperty("customname"))
                if (!$util.isString(message.customname))
                    return "customname: string expected";
            if (message.stickers != null && message.hasOwnProperty("stickers")) {
                if (!Array.isArray(message.stickers))
                    return "stickers: array expected";
                for (var i = 0; i < message.stickers.length; ++i) {
                    var error = $root.CEconItemPreviewDataBlock.Sticker.verify(message.stickers[i]);
                    if (error)
                        return "stickers." + error;
                }
            }
            if (message.inventory != null && message.hasOwnProperty("inventory"))
                if (!$util.isInteger(message.inventory))
                    return "inventory: integer expected";
            if (message.origin != null && message.hasOwnProperty("origin"))
                if (!$util.isInteger(message.origin))
                    return "origin: integer expected";
            if (message.questid != null && message.hasOwnProperty("questid"))
                if (!$util.isInteger(message.questid))
                    return "questid: integer expected";
            if (message.dropreason != null && message.hasOwnProperty("dropreason"))
                if (!$util.isInteger(message.dropreason))
                    return "dropreason: integer expected";
            if (message.musicindex != null && message.hasOwnProperty("musicindex"))
                if (!$util.isInteger(message.musicindex))
                    return "musicindex: integer expected";
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                if (!$util.isInteger(message.entindex))
                    return "entindex: integer expected";
            return null;
        };
    
        /**
         * Creates a CEconItemPreviewDataBlock message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CEconItemPreviewDataBlock} CEconItemPreviewDataBlock
         */
        CEconItemPreviewDataBlock.fromObject = function fromObject(object) {
            if (object instanceof $root.CEconItemPreviewDataBlock)
                return object;
            var message = new $root.CEconItemPreviewDataBlock();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.itemid != null)
                if ($util.Long)
                    (message.itemid = $util.Long.fromValue(object.itemid)).unsigned = true;
                else if (typeof object.itemid === "string")
                    message.itemid = parseInt(object.itemid, 10);
                else if (typeof object.itemid === "number")
                    message.itemid = object.itemid;
                else if (typeof object.itemid === "object")
                    message.itemid = new $util.LongBits(object.itemid.low >>> 0, object.itemid.high >>> 0).toNumber(true);
            if (object.defindex != null)
                message.defindex = object.defindex >>> 0;
            if (object.paintindex != null)
                message.paintindex = object.paintindex >>> 0;
            if (object.rarity != null)
                message.rarity = object.rarity >>> 0;
            if (object.quality != null)
                message.quality = object.quality >>> 0;
            if (object.paintwear != null)
                message.paintwear = object.paintwear >>> 0;
            if (object.paintseed != null)
                message.paintseed = object.paintseed >>> 0;
            if (object.killeaterscoretype != null)
                message.killeaterscoretype = object.killeaterscoretype >>> 0;
            if (object.killeatervalue != null)
                message.killeatervalue = object.killeatervalue >>> 0;
            if (object.customname != null)
                message.customname = String(object.customname);
            if (object.stickers) {
                if (!Array.isArray(object.stickers))
                    throw TypeError(".CEconItemPreviewDataBlock.stickers: array expected");
                message.stickers = [];
                for (var i = 0; i < object.stickers.length; ++i) {
                    if (typeof object.stickers[i] !== "object")
                        throw TypeError(".CEconItemPreviewDataBlock.stickers: object expected");
                    message.stickers[i] = $root.CEconItemPreviewDataBlock.Sticker.fromObject(object.stickers[i]);
                }
            }
            if (object.inventory != null)
                message.inventory = object.inventory >>> 0;
            if (object.origin != null)
                message.origin = object.origin >>> 0;
            if (object.questid != null)
                message.questid = object.questid >>> 0;
            if (object.dropreason != null)
                message.dropreason = object.dropreason >>> 0;
            if (object.musicindex != null)
                message.musicindex = object.musicindex >>> 0;
            if (object.entindex != null)
                message.entindex = object.entindex | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CEconItemPreviewDataBlock message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CEconItemPreviewDataBlock
         * @static
         * @param {CEconItemPreviewDataBlock} message CEconItemPreviewDataBlock
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CEconItemPreviewDataBlock.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.stickers = [];
            if (options.defaults) {
                object.accountid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.itemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemid = options.longs === String ? "0" : 0;
                object.defindex = 0;
                object.paintindex = 0;
                object.rarity = 0;
                object.quality = 0;
                object.paintwear = 0;
                object.paintseed = 0;
                object.killeaterscoretype = 0;
                object.killeatervalue = 0;
                object.customname = "";
                object.inventory = 0;
                object.origin = 0;
                object.questid = 0;
                object.dropreason = 0;
                object.musicindex = 0;
                object.entindex = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (typeof message.itemid === "number")
                    object.itemid = options.longs === String ? String(message.itemid) : message.itemid;
                else
                    object.itemid = options.longs === String ? $util.Long.prototype.toString.call(message.itemid) : options.longs === Number ? new $util.LongBits(message.itemid.low >>> 0, message.itemid.high >>> 0).toNumber(true) : message.itemid;
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                object.defindex = message.defindex;
            if (message.paintindex != null && message.hasOwnProperty("paintindex"))
                object.paintindex = message.paintindex;
            if (message.rarity != null && message.hasOwnProperty("rarity"))
                object.rarity = message.rarity;
            if (message.quality != null && message.hasOwnProperty("quality"))
                object.quality = message.quality;
            if (message.paintwear != null && message.hasOwnProperty("paintwear"))
                object.paintwear = message.paintwear;
            if (message.paintseed != null && message.hasOwnProperty("paintseed"))
                object.paintseed = message.paintseed;
            if (message.killeaterscoretype != null && message.hasOwnProperty("killeaterscoretype"))
                object.killeaterscoretype = message.killeaterscoretype;
            if (message.killeatervalue != null && message.hasOwnProperty("killeatervalue"))
                object.killeatervalue = message.killeatervalue;
            if (message.customname != null && message.hasOwnProperty("customname"))
                object.customname = message.customname;
            if (message.stickers && message.stickers.length) {
                object.stickers = [];
                for (var j = 0; j < message.stickers.length; ++j)
                    object.stickers[j] = $root.CEconItemPreviewDataBlock.Sticker.toObject(message.stickers[j], options);
            }
            if (message.inventory != null && message.hasOwnProperty("inventory"))
                object.inventory = message.inventory;
            if (message.origin != null && message.hasOwnProperty("origin"))
                object.origin = message.origin;
            if (message.questid != null && message.hasOwnProperty("questid"))
                object.questid = message.questid;
            if (message.dropreason != null && message.hasOwnProperty("dropreason"))
                object.dropreason = message.dropreason;
            if (message.musicindex != null && message.hasOwnProperty("musicindex"))
                object.musicindex = message.musicindex;
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                object.entindex = message.entindex;
            return object;
        };
    
        /**
         * Converts this CEconItemPreviewDataBlock to JSON.
         * @function toJSON
         * @memberof CEconItemPreviewDataBlock
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CEconItemPreviewDataBlock.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CEconItemPreviewDataBlock.Sticker = (function() {
    
            /**
             * Properties of a Sticker.
             * @memberof CEconItemPreviewDataBlock
             * @interface ISticker
             * @property {number|null} [slot] Sticker slot
             * @property {number|null} [sticker_id] Sticker sticker_id
             * @property {number|null} [wear] Sticker wear
             * @property {number|null} [scale] Sticker scale
             * @property {number|null} [rotation] Sticker rotation
             * @property {number|null} [tint_id] Sticker tint_id
             */
    
            /**
             * Constructs a new Sticker.
             * @memberof CEconItemPreviewDataBlock
             * @classdesc Represents a Sticker.
             * @implements ISticker
             * @constructor
             * @param {CEconItemPreviewDataBlock.ISticker=} [properties] Properties to set
             */
            function Sticker(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Sticker slot.
             * @member {number} slot
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.slot = 0;
    
            /**
             * Sticker sticker_id.
             * @member {number} sticker_id
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.sticker_id = 0;
    
            /**
             * Sticker wear.
             * @member {number} wear
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.wear = 0;
    
            /**
             * Sticker scale.
             * @member {number} scale
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.scale = 0;
    
            /**
             * Sticker rotation.
             * @member {number} rotation
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.rotation = 0;
    
            /**
             * Sticker tint_id.
             * @member {number} tint_id
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             */
            Sticker.prototype.tint_id = 0;
    
            /**
             * Creates a new Sticker instance using the specified properties.
             * @function create
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {CEconItemPreviewDataBlock.ISticker=} [properties] Properties to set
             * @returns {CEconItemPreviewDataBlock.Sticker} Sticker instance
             */
            Sticker.create = function create(properties) {
                return new Sticker(properties);
            };
    
            /**
             * Encodes the specified Sticker message. Does not implicitly {@link CEconItemPreviewDataBlock.Sticker.verify|verify} messages.
             * @function encode
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {CEconItemPreviewDataBlock.ISticker} message Sticker message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sticker.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.slot != null && message.hasOwnProperty("slot"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.slot);
                if (message.sticker_id != null && message.hasOwnProperty("sticker_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sticker_id);
                if (message.wear != null && message.hasOwnProperty("wear"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.wear);
                if (message.scale != null && message.hasOwnProperty("scale"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.scale);
                if (message.rotation != null && message.hasOwnProperty("rotation"))
                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.rotation);
                if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tint_id);
                return writer;
            };
    
            /**
             * Encodes the specified Sticker message, length delimited. Does not implicitly {@link CEconItemPreviewDataBlock.Sticker.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {CEconItemPreviewDataBlock.ISticker} message Sticker message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Sticker.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Sticker message from the specified reader or buffer.
             * @function decode
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CEconItemPreviewDataBlock.Sticker} Sticker
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sticker.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CEconItemPreviewDataBlock.Sticker();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.slot = reader.uint32();
                        break;
                    case 2:
                        message.sticker_id = reader.uint32();
                        break;
                    case 3:
                        message.wear = reader.float();
                        break;
                    case 4:
                        message.scale = reader.float();
                        break;
                    case 5:
                        message.rotation = reader.float();
                        break;
                    case 6:
                        message.tint_id = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Sticker message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CEconItemPreviewDataBlock.Sticker} Sticker
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Sticker.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Sticker message.
             * @function verify
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Sticker.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.slot != null && message.hasOwnProperty("slot"))
                    if (!$util.isInteger(message.slot))
                        return "slot: integer expected";
                if (message.sticker_id != null && message.hasOwnProperty("sticker_id"))
                    if (!$util.isInteger(message.sticker_id))
                        return "sticker_id: integer expected";
                if (message.wear != null && message.hasOwnProperty("wear"))
                    if (typeof message.wear !== "number")
                        return "wear: number expected";
                if (message.scale != null && message.hasOwnProperty("scale"))
                    if (typeof message.scale !== "number")
                        return "scale: number expected";
                if (message.rotation != null && message.hasOwnProperty("rotation"))
                    if (typeof message.rotation !== "number")
                        return "rotation: number expected";
                if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                    if (!$util.isInteger(message.tint_id))
                        return "tint_id: integer expected";
                return null;
            };
    
            /**
             * Creates a Sticker message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CEconItemPreviewDataBlock.Sticker} Sticker
             */
            Sticker.fromObject = function fromObject(object) {
                if (object instanceof $root.CEconItemPreviewDataBlock.Sticker)
                    return object;
                var message = new $root.CEconItemPreviewDataBlock.Sticker();
                if (object.slot != null)
                    message.slot = object.slot >>> 0;
                if (object.sticker_id != null)
                    message.sticker_id = object.sticker_id >>> 0;
                if (object.wear != null)
                    message.wear = Number(object.wear);
                if (object.scale != null)
                    message.scale = Number(object.scale);
                if (object.rotation != null)
                    message.rotation = Number(object.rotation);
                if (object.tint_id != null)
                    message.tint_id = object.tint_id >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Sticker message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @static
             * @param {CEconItemPreviewDataBlock.Sticker} message Sticker
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Sticker.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.slot = 0;
                    object.sticker_id = 0;
                    object.wear = 0;
                    object.scale = 0;
                    object.rotation = 0;
                    object.tint_id = 0;
                }
                if (message.slot != null && message.hasOwnProperty("slot"))
                    object.slot = message.slot;
                if (message.sticker_id != null && message.hasOwnProperty("sticker_id"))
                    object.sticker_id = message.sticker_id;
                if (message.wear != null && message.hasOwnProperty("wear"))
                    object.wear = options.json && !isFinite(message.wear) ? String(message.wear) : message.wear;
                if (message.scale != null && message.hasOwnProperty("scale"))
                    object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;
                if (message.rotation != null && message.hasOwnProperty("rotation"))
                    object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
                if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                    object.tint_id = message.tint_id;
                return object;
            };
    
            /**
             * Converts this Sticker to JSON.
             * @function toJSON
             * @memberof CEconItemPreviewDataBlock.Sticker
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Sticker.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Sticker;
        })();
    
        return CEconItemPreviewDataBlock;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.
         * @exports ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @interface ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @property {ICEconItemPreviewDataBlock|null} [iteminfo] CMsgGCCStrike15_v2_MatchEndRewardDropsNotification iteminfo
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.
         * @exports CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.
         * @implements ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchEndRewardDropsNotification iteminfo.
         * @member {ICEconItemPreviewDataBlock|null|undefined} iteminfo
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @instance
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.prototype.iteminfo = null;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchEndRewardDropsNotification} CMsgGCCStrike15_v2_MatchEndRewardDropsNotification instance
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification} message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                $root.CEconItemPreviewDataBlock.encode(message.iteminfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchEndRewardDropsNotification} message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchEndRewardDropsNotification} CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 6:
                    message.iteminfo = $root.CEconItemPreviewDataBlock.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchEndRewardDropsNotification} CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo")) {
                var error = $root.CEconItemPreviewDataBlock.verify(message.iteminfo);
                if (error)
                    return "iteminfo." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchEndRewardDropsNotification} CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
            if (object.iteminfo != null) {
                if (typeof object.iteminfo !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.iteminfo: object expected");
                message.iteminfo = $root.CEconItemPreviewDataBlock.fromObject(object.iteminfo);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchEndRewardDropsNotification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @static
         * @param {CMsgGCCStrike15_v2_MatchEndRewardDropsNotification} message CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.iteminfo = null;
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                object.iteminfo = $root.CEconItemPreviewDataBlock.toObject(message.iteminfo, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchEndRewardDropsNotification to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchEndRewardDropsNotification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchEndRewardDropsNotification;
    })();
    
    $root.CMsgItemAcknowledged = (function() {
    
        /**
         * Properties of a CMsgItemAcknowledged.
         * @exports ICMsgItemAcknowledged
         * @interface ICMsgItemAcknowledged
         * @property {ICEconItemPreviewDataBlock|null} [iteminfo] CMsgItemAcknowledged iteminfo
         */
    
        /**
         * Constructs a new CMsgItemAcknowledged.
         * @exports CMsgItemAcknowledged
         * @classdesc Represents a CMsgItemAcknowledged.
         * @implements ICMsgItemAcknowledged
         * @constructor
         * @param {ICMsgItemAcknowledged=} [properties] Properties to set
         */
        function CMsgItemAcknowledged(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgItemAcknowledged iteminfo.
         * @member {ICEconItemPreviewDataBlock|null|undefined} iteminfo
         * @memberof CMsgItemAcknowledged
         * @instance
         */
        CMsgItemAcknowledged.prototype.iteminfo = null;
    
        /**
         * Creates a new CMsgItemAcknowledged instance using the specified properties.
         * @function create
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {ICMsgItemAcknowledged=} [properties] Properties to set
         * @returns {CMsgItemAcknowledged} CMsgItemAcknowledged instance
         */
        CMsgItemAcknowledged.create = function create(properties) {
            return new CMsgItemAcknowledged(properties);
        };
    
        /**
         * Encodes the specified CMsgItemAcknowledged message. Does not implicitly {@link CMsgItemAcknowledged.verify|verify} messages.
         * @function encode
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {ICMsgItemAcknowledged} message CMsgItemAcknowledged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgItemAcknowledged.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                $root.CEconItemPreviewDataBlock.encode(message.iteminfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgItemAcknowledged message, length delimited. Does not implicitly {@link CMsgItemAcknowledged.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {ICMsgItemAcknowledged} message CMsgItemAcknowledged message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgItemAcknowledged.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgItemAcknowledged message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgItemAcknowledged} CMsgItemAcknowledged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgItemAcknowledged.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgItemAcknowledged();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.iteminfo = $root.CEconItemPreviewDataBlock.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgItemAcknowledged message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgItemAcknowledged} CMsgItemAcknowledged
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgItemAcknowledged.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgItemAcknowledged message.
         * @function verify
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgItemAcknowledged.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo")) {
                var error = $root.CEconItemPreviewDataBlock.verify(message.iteminfo);
                if (error)
                    return "iteminfo." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgItemAcknowledged message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgItemAcknowledged} CMsgItemAcknowledged
         */
        CMsgItemAcknowledged.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgItemAcknowledged)
                return object;
            var message = new $root.CMsgItemAcknowledged();
            if (object.iteminfo != null) {
                if (typeof object.iteminfo !== "object")
                    throw TypeError(".CMsgItemAcknowledged.iteminfo: object expected");
                message.iteminfo = $root.CEconItemPreviewDataBlock.fromObject(object.iteminfo);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgItemAcknowledged message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgItemAcknowledged
         * @static
         * @param {CMsgItemAcknowledged} message CMsgItemAcknowledged
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgItemAcknowledged.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.iteminfo = null;
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                object.iteminfo = $root.CEconItemPreviewDataBlock.toObject(message.iteminfo, options);
            return object;
        };
    
        /**
         * Converts this CMsgItemAcknowledged to JSON.
         * @function toJSON
         * @memberof CMsgItemAcknowledged
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgItemAcknowledged.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgItemAcknowledged;
    })();
    
    $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.
         * @exports ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @interface ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @property {number|Long|null} [param_s] CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_s
         * @property {number|Long|null} [param_a] CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_a
         * @property {number|Long|null} [param_d] CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_d
         * @property {number|Long|null} [param_m] CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_m
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.
         * @exports CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @classdesc Represents a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.
         * @implements ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_s.
         * @member {number|Long} param_s
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.prototype.param_s = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_a.
         * @member {number|Long} param_a
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.prototype.param_a = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_d.
         * @member {number|Long} param_d
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.prototype.param_d = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest param_m.
         * @member {number|Long} param_m
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.prototype.param_m = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.param_s != null && message.hasOwnProperty("param_s"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.param_s);
            if (message.param_a != null && message.hasOwnProperty("param_a"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.param_a);
            if (message.param_d != null && message.hasOwnProperty("param_d"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.param_d);
            if (message.param_m != null && message.hasOwnProperty("param_m"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.param_m);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.param_s = reader.uint64();
                    break;
                case 2:
                    message.param_a = reader.uint64();
                    break;
                case 3:
                    message.param_d = reader.uint64();
                    break;
                case 4:
                    message.param_m = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.param_s != null && message.hasOwnProperty("param_s"))
                if (!$util.isInteger(message.param_s) && !(message.param_s && $util.isInteger(message.param_s.low) && $util.isInteger(message.param_s.high)))
                    return "param_s: integer|Long expected";
            if (message.param_a != null && message.hasOwnProperty("param_a"))
                if (!$util.isInteger(message.param_a) && !(message.param_a && $util.isInteger(message.param_a.low) && $util.isInteger(message.param_a.high)))
                    return "param_a: integer|Long expected";
            if (message.param_d != null && message.hasOwnProperty("param_d"))
                if (!$util.isInteger(message.param_d) && !(message.param_d && $util.isInteger(message.param_d.low) && $util.isInteger(message.param_d.high)))
                    return "param_d: integer|Long expected";
            if (message.param_m != null && message.hasOwnProperty("param_m"))
                if (!$util.isInteger(message.param_m) && !(message.param_m && $util.isInteger(message.param_m.low) && $util.isInteger(message.param_m.high)))
                    return "param_m: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
            if (object.param_s != null)
                if ($util.Long)
                    (message.param_s = $util.Long.fromValue(object.param_s)).unsigned = true;
                else if (typeof object.param_s === "string")
                    message.param_s = parseInt(object.param_s, 10);
                else if (typeof object.param_s === "number")
                    message.param_s = object.param_s;
                else if (typeof object.param_s === "object")
                    message.param_s = new $util.LongBits(object.param_s.low >>> 0, object.param_s.high >>> 0).toNumber(true);
            if (object.param_a != null)
                if ($util.Long)
                    (message.param_a = $util.Long.fromValue(object.param_a)).unsigned = true;
                else if (typeof object.param_a === "string")
                    message.param_a = parseInt(object.param_a, 10);
                else if (typeof object.param_a === "number")
                    message.param_a = object.param_a;
                else if (typeof object.param_a === "object")
                    message.param_a = new $util.LongBits(object.param_a.low >>> 0, object.param_a.high >>> 0).toNumber(true);
            if (object.param_d != null)
                if ($util.Long)
                    (message.param_d = $util.Long.fromValue(object.param_d)).unsigned = true;
                else if (typeof object.param_d === "string")
                    message.param_d = parseInt(object.param_d, 10);
                else if (typeof object.param_d === "number")
                    message.param_d = object.param_d;
                else if (typeof object.param_d === "object")
                    message.param_d = new $util.LongBits(object.param_d.low >>> 0, object.param_d.high >>> 0).toNumber(true);
            if (object.param_m != null)
                if ($util.Long)
                    (message.param_m = $util.Long.fromValue(object.param_m)).unsigned = true;
                else if (typeof object.param_m === "string")
                    message.param_m = parseInt(object.param_m, 10);
                else if (typeof object.param_m === "number")
                    message.param_m = object.param_m;
                else if (typeof object.param_m === "object")
                    message.param_m = new $util.LongBits(object.param_m.low >>> 0, object.param_m.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @static
         * @param {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.param_s = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.param_s = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.param_a = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.param_a = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.param_d = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.param_d = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.param_m = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.param_m = options.longs === String ? "0" : 0;
            }
            if (message.param_s != null && message.hasOwnProperty("param_s"))
                if (typeof message.param_s === "number")
                    object.param_s = options.longs === String ? String(message.param_s) : message.param_s;
                else
                    object.param_s = options.longs === String ? $util.Long.prototype.toString.call(message.param_s) : options.longs === Number ? new $util.LongBits(message.param_s.low >>> 0, message.param_s.high >>> 0).toNumber(true) : message.param_s;
            if (message.param_a != null && message.hasOwnProperty("param_a"))
                if (typeof message.param_a === "number")
                    object.param_a = options.longs === String ? String(message.param_a) : message.param_a;
                else
                    object.param_a = options.longs === String ? $util.Long.prototype.toString.call(message.param_a) : options.longs === Number ? new $util.LongBits(message.param_a.low >>> 0, message.param_a.high >>> 0).toNumber(true) : message.param_a;
            if (message.param_d != null && message.hasOwnProperty("param_d"))
                if (typeof message.param_d === "number")
                    object.param_d = options.longs === String ? String(message.param_d) : message.param_d;
                else
                    object.param_d = options.longs === String ? $util.Long.prototype.toString.call(message.param_d) : options.longs === Number ? new $util.LongBits(message.param_d.low >>> 0, message.param_d.high >>> 0).toNumber(true) : message.param_d;
            if (message.param_m != null && message.hasOwnProperty("param_m"))
                if (typeof message.param_m === "number")
                    object.param_m = options.longs === String ? String(message.param_m) : message.param_m;
                else
                    object.param_m = options.longs === String ? $util.Long.prototype.toString.call(message.param_m) : options.longs === Number ? new $util.LongBits(message.param_m.low >>> 0, message.param_m.high >>> 0).toNumber(true) : message.param_m;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest;
    })();
    
    $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.
         * @exports ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @interface ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @property {ICEconItemPreviewDataBlock|null} [iteminfo] CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse iteminfo
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.
         * @exports CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @classdesc Represents a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.
         * @implements ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse iteminfo.
         * @member {ICEconItemPreviewDataBlock|null|undefined} iteminfo
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.prototype.iteminfo = null;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse instance
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                $root.CEconItemPreviewDataBlock.encode(message.iteminfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.iteminfo = $root.CEconItemPreviewDataBlock.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo")) {
                var error = $root.CEconItemPreviewDataBlock.verify(message.iteminfo);
                if (error)
                    return "iteminfo." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
            if (object.iteminfo != null) {
                if (typeof object.iteminfo !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.iteminfo: object expected");
                message.iteminfo = $root.CEconItemPreviewDataBlock.fromObject(object.iteminfo);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @static
         * @param {CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse} message CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.iteminfo = null;
            if (message.iteminfo != null && message.hasOwnProperty("iteminfo"))
                object.iteminfo = $root.CEconItemPreviewDataBlock.toObject(message.iteminfo, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse;
    })();
    
    $root.CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.
         * @exports ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @interface ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification match_id
         * @property {number|null} [defindex] CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification defindex
         * @property {Array.<number>|null} [accountids] CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification accountids
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.
         * @exports CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @classdesc Represents a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.
         * @implements ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @constructor
         * @param {ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(properties) {
            this.accountids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @instance
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification defindex.
         * @member {number} defindex
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @instance
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.prototype.defindex = 0;
    
        /**
         * CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification accountids.
         * @member {Array.<number>} accountids
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @instance
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.prototype.accountids = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification instance
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.create = function create(properties) {
            return new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message. Does not implicitly {@link CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} message CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.match_id);
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.defindex);
            if (message.accountids != null && message.accountids.length)
                for (var i = 0; i < message.accountids.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.accountids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {ICMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} message CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.match_id = reader.uint64();
                    break;
                case 2:
                    message.defindex = reader.uint32();
                    break;
                case 3:
                    if (!(message.accountids && message.accountids.length))
                        message.accountids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.accountids.push(reader.uint32());
                    } else
                        message.accountids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                if (!$util.isInteger(message.defindex))
                    return "defindex: integer expected";
            if (message.accountids != null && message.hasOwnProperty("accountids")) {
                if (!Array.isArray(message.accountids))
                    return "accountids: array expected";
                for (var i = 0; i < message.accountids.length; ++i)
                    if (!$util.isInteger(message.accountids[i]))
                        return "accountids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.defindex != null)
                message.defindex = object.defindex >>> 0;
            if (object.accountids) {
                if (!Array.isArray(object.accountids))
                    throw TypeError(".CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.accountids: array expected");
                message.accountids = [];
                for (var i = 0; i < object.accountids.length; ++i)
                    message.accountids[i] = object.accountids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @static
         * @param {CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification} message CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.accountids = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                object.defindex = 0;
            }
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                object.defindex = message.defindex;
            if (message.accountids && message.accountids.length) {
                object.accountids = [];
                for (var j = 0; j < message.accountids.length; ++j)
                    object.accountids[j] = message.accountids[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.
         * @exports ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @interface ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.
         * @exports CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.
         * @implements ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames instance
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
                return object;
            return new $root.CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @static
         * @param {CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames} message CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.
         * @exports ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @interface ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser accountid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.
         * @exports CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.
         * @implements ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.prototype.accountid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser instance
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @static
         * @param {CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser} message CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.accountid = 0;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchListRequestRecentUserGames = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.
         * @exports ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @interface ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_MatchListRequestRecentUserGames accountid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.
         * @exports CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.
         * @implements ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestRecentUserGames accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.prototype.accountid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchListRequestRecentUserGames} CMsgGCCStrike15_v2_MatchListRequestRecentUserGames instance
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames} message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestRecentUserGames} message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchListRequestRecentUserGames} CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchListRequestRecentUserGames} CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchListRequestRecentUserGames} CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchListRequestRecentUserGames message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @static
         * @param {CMsgGCCStrike15_v2_MatchListRequestRecentUserGames} message CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.accountid = 0;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchListRequestRecentUserGames to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchListRequestRecentUserGames
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchListRequestRecentUserGames;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchListRequestTournamentGames = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchListRequestTournamentGames.
         * @exports ICMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @interface ICMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @property {number|null} [eventid] CMsgGCCStrike15_v2_MatchListRequestTournamentGames eventid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchListRequestTournamentGames.
         * @exports CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchListRequestTournamentGames.
         * @implements ICMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchListRequestTournamentGames=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchListRequestTournamentGames(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestTournamentGames eventid.
         * @member {number} eventid
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.prototype.eventid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchListRequestTournamentGames instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestTournamentGames=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchListRequestTournamentGames} CMsgGCCStrike15_v2_MatchListRequestTournamentGames instance
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchListRequestTournamentGames(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestTournamentGames message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestTournamentGames.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestTournamentGames} message CMsgGCCStrike15_v2_MatchListRequestTournamentGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eventid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestTournamentGames message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestTournamentGames.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestTournamentGames} message CMsgGCCStrike15_v2_MatchListRequestTournamentGames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestTournamentGames message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchListRequestTournamentGames} CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestTournamentGames message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchListRequestTournamentGames} CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchListRequestTournamentGames message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (!$util.isInteger(message.eventid))
                    return "eventid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchListRequestTournamentGames message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchListRequestTournamentGames} CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
            if (object.eventid != null)
                message.eventid = object.eventid | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchListRequestTournamentGames message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @static
         * @param {CMsgGCCStrike15_v2_MatchListRequestTournamentGames} message CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eventid = 0;
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                object.eventid = message.eventid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchListRequestTournamentGames to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchListRequestTournamentGames
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchListRequestTournamentGames;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchListRequestFullGameInfo = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.
         * @exports ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @interface ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @property {number|Long|null} [matchid] CMsgGCCStrike15_v2_MatchListRequestFullGameInfo matchid
         * @property {number|Long|null} [outcomeid] CMsgGCCStrike15_v2_MatchListRequestFullGameInfo outcomeid
         * @property {number|null} [token] CMsgGCCStrike15_v2_MatchListRequestFullGameInfo token
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.
         * @exports CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.
         * @implements ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestFullGameInfo matchid.
         * @member {number|Long} matchid
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.prototype.matchid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestFullGameInfo outcomeid.
         * @member {number|Long} outcomeid
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.prototype.outcomeid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchListRequestFullGameInfo token.
         * @member {number} token
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @instance
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.prototype.token = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchListRequestFullGameInfo} CMsgGCCStrike15_v2_MatchListRequestFullGameInfo instance
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo} message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.matchid);
            if (message.outcomeid != null && message.hasOwnProperty("outcomeid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.outcomeid);
            if (message.token != null && message.hasOwnProperty("token"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.token);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchListRequestFullGameInfo} message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchListRequestFullGameInfo} CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.matchid = reader.uint64();
                    break;
                case 2:
                    message.outcomeid = reader.uint64();
                    break;
                case 3:
                    message.token = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchListRequestFullGameInfo} CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (!$util.isInteger(message.matchid) && !(message.matchid && $util.isInteger(message.matchid.low) && $util.isInteger(message.matchid.high)))
                    return "matchid: integer|Long expected";
            if (message.outcomeid != null && message.hasOwnProperty("outcomeid"))
                if (!$util.isInteger(message.outcomeid) && !(message.outcomeid && $util.isInteger(message.outcomeid.low) && $util.isInteger(message.outcomeid.high)))
                    return "outcomeid: integer|Long expected";
            if (message.token != null && message.hasOwnProperty("token"))
                if (!$util.isInteger(message.token))
                    return "token: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchListRequestFullGameInfo} CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
            if (object.matchid != null)
                if ($util.Long)
                    (message.matchid = $util.Long.fromValue(object.matchid)).unsigned = true;
                else if (typeof object.matchid === "string")
                    message.matchid = parseInt(object.matchid, 10);
                else if (typeof object.matchid === "number")
                    message.matchid = object.matchid;
                else if (typeof object.matchid === "object")
                    message.matchid = new $util.LongBits(object.matchid.low >>> 0, object.matchid.high >>> 0).toNumber(true);
            if (object.outcomeid != null)
                if ($util.Long)
                    (message.outcomeid = $util.Long.fromValue(object.outcomeid)).unsigned = true;
                else if (typeof object.outcomeid === "string")
                    message.outcomeid = parseInt(object.outcomeid, 10);
                else if (typeof object.outcomeid === "number")
                    message.outcomeid = object.outcomeid;
                else if (typeof object.outcomeid === "object")
                    message.outcomeid = new $util.LongBits(object.outcomeid.low >>> 0, object.outcomeid.high >>> 0).toNumber(true);
            if (object.token != null)
                message.token = object.token >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchListRequestFullGameInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @static
         * @param {CMsgGCCStrike15_v2_MatchListRequestFullGameInfo} message CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.matchid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.matchid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.outcomeid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.outcomeid = options.longs === String ? "0" : 0;
                object.token = 0;
            }
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (typeof message.matchid === "number")
                    object.matchid = options.longs === String ? String(message.matchid) : message.matchid;
                else
                    object.matchid = options.longs === String ? $util.Long.prototype.toString.call(message.matchid) : options.longs === Number ? new $util.LongBits(message.matchid.low >>> 0, message.matchid.high >>> 0).toNumber(true) : message.matchid;
            if (message.outcomeid != null && message.hasOwnProperty("outcomeid"))
                if (typeof message.outcomeid === "number")
                    object.outcomeid = options.longs === String ? String(message.outcomeid) : message.outcomeid;
                else
                    object.outcomeid = options.longs === String ? $util.Long.prototype.toString.call(message.outcomeid) : options.longs === Number ? new $util.LongBits(message.outcomeid.low >>> 0, message.outcomeid.high >>> 0).toNumber(true) : message.outcomeid;
            if (message.token != null && message.hasOwnProperty("token"))
                object.token = message.token;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchListRequestFullGameInfo to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchListRequestFullGameInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchListRequestFullGameInfo;
    })();
    
    $root.CDataGCCStrike15_v2_MatchInfo = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_MatchInfo.
         * @exports ICDataGCCStrike15_v2_MatchInfo
         * @interface ICDataGCCStrike15_v2_MatchInfo
         * @property {number|Long|null} [matchid] CDataGCCStrike15_v2_MatchInfo matchid
         * @property {number|null} [matchtime] CDataGCCStrike15_v2_MatchInfo matchtime
         * @property {IWatchableMatchInfo|null} [watchablematchinfo] CDataGCCStrike15_v2_MatchInfo watchablematchinfo
         * @property {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats|null} [roundstats_legacy] CDataGCCStrike15_v2_MatchInfo roundstats_legacy
         * @property {Array.<ICMsgGCCStrike15_v2_MatchmakingServerRoundStats>|null} [roundstatsall] CDataGCCStrike15_v2_MatchInfo roundstatsall
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_MatchInfo.
         * @exports CDataGCCStrike15_v2_MatchInfo
         * @classdesc Represents a CDataGCCStrike15_v2_MatchInfo.
         * @implements ICDataGCCStrike15_v2_MatchInfo
         * @constructor
         * @param {ICDataGCCStrike15_v2_MatchInfo=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_MatchInfo(properties) {
            this.roundstatsall = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_MatchInfo matchid.
         * @member {number|Long} matchid
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.matchid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CDataGCCStrike15_v2_MatchInfo matchtime.
         * @member {number} matchtime
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.matchtime = 0;
    
        /**
         * CDataGCCStrike15_v2_MatchInfo watchablematchinfo.
         * @member {IWatchableMatchInfo|null|undefined} watchablematchinfo
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.watchablematchinfo = null;
    
        /**
         * CDataGCCStrike15_v2_MatchInfo roundstats_legacy.
         * @member {ICMsgGCCStrike15_v2_MatchmakingServerRoundStats|null|undefined} roundstats_legacy
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.roundstats_legacy = null;
    
        /**
         * CDataGCCStrike15_v2_MatchInfo roundstatsall.
         * @member {Array.<ICMsgGCCStrike15_v2_MatchmakingServerRoundStats>} roundstatsall
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.roundstatsall = $util.emptyArray;
    
        /**
         * Creates a new CDataGCCStrike15_v2_MatchInfo instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {ICDataGCCStrike15_v2_MatchInfo=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_MatchInfo} CDataGCCStrike15_v2_MatchInfo instance
         */
        CDataGCCStrike15_v2_MatchInfo.create = function create(properties) {
            return new CDataGCCStrike15_v2_MatchInfo(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_MatchInfo message. Does not implicitly {@link CDataGCCStrike15_v2_MatchInfo.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {ICDataGCCStrike15_v2_MatchInfo} message CDataGCCStrike15_v2_MatchInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_MatchInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.matchid);
            if (message.matchtime != null && message.hasOwnProperty("matchtime"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.matchtime);
            if (message.watchablematchinfo != null && message.hasOwnProperty("watchablematchinfo"))
                $root.WatchableMatchInfo.encode(message.watchablematchinfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.roundstats_legacy != null && message.hasOwnProperty("roundstats_legacy"))
                $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.encode(message.roundstats_legacy, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.roundstatsall != null && message.roundstatsall.length)
                for (var i = 0; i < message.roundstatsall.length; ++i)
                    $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.encode(message.roundstatsall[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_MatchInfo message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_MatchInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {ICDataGCCStrike15_v2_MatchInfo} message CDataGCCStrike15_v2_MatchInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_MatchInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_MatchInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_MatchInfo} CDataGCCStrike15_v2_MatchInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_MatchInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_MatchInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.matchid = reader.uint64();
                    break;
                case 2:
                    message.matchtime = reader.uint32();
                    break;
                case 3:
                    message.watchablematchinfo = $root.WatchableMatchInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.roundstats_legacy = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.decode(reader, reader.uint32());
                    break;
                case 5:
                    if (!(message.roundstatsall && message.roundstatsall.length))
                        message.roundstatsall = [];
                    message.roundstatsall.push($root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_MatchInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_MatchInfo} CDataGCCStrike15_v2_MatchInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_MatchInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_MatchInfo message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_MatchInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (!$util.isInteger(message.matchid) && !(message.matchid && $util.isInteger(message.matchid.low) && $util.isInteger(message.matchid.high)))
                    return "matchid: integer|Long expected";
            if (message.matchtime != null && message.hasOwnProperty("matchtime"))
                if (!$util.isInteger(message.matchtime))
                    return "matchtime: integer expected";
            if (message.watchablematchinfo != null && message.hasOwnProperty("watchablematchinfo")) {
                var error = $root.WatchableMatchInfo.verify(message.watchablematchinfo);
                if (error)
                    return "watchablematchinfo." + error;
            }
            if (message.roundstats_legacy != null && message.hasOwnProperty("roundstats_legacy")) {
                var error = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify(message.roundstats_legacy);
                if (error)
                    return "roundstats_legacy." + error;
            }
            if (message.roundstatsall != null && message.hasOwnProperty("roundstatsall")) {
                if (!Array.isArray(message.roundstatsall))
                    return "roundstatsall: array expected";
                for (var i = 0; i < message.roundstatsall.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.verify(message.roundstatsall[i]);
                    if (error)
                        return "roundstatsall." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_MatchInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_MatchInfo} CDataGCCStrike15_v2_MatchInfo
         */
        CDataGCCStrike15_v2_MatchInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_MatchInfo)
                return object;
            var message = new $root.CDataGCCStrike15_v2_MatchInfo();
            if (object.matchid != null)
                if ($util.Long)
                    (message.matchid = $util.Long.fromValue(object.matchid)).unsigned = true;
                else if (typeof object.matchid === "string")
                    message.matchid = parseInt(object.matchid, 10);
                else if (typeof object.matchid === "number")
                    message.matchid = object.matchid;
                else if (typeof object.matchid === "object")
                    message.matchid = new $util.LongBits(object.matchid.low >>> 0, object.matchid.high >>> 0).toNumber(true);
            if (object.matchtime != null)
                message.matchtime = object.matchtime >>> 0;
            if (object.watchablematchinfo != null) {
                if (typeof object.watchablematchinfo !== "object")
                    throw TypeError(".CDataGCCStrike15_v2_MatchInfo.watchablematchinfo: object expected");
                message.watchablematchinfo = $root.WatchableMatchInfo.fromObject(object.watchablematchinfo);
            }
            if (object.roundstats_legacy != null) {
                if (typeof object.roundstats_legacy !== "object")
                    throw TypeError(".CDataGCCStrike15_v2_MatchInfo.roundstats_legacy: object expected");
                message.roundstats_legacy = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.fromObject(object.roundstats_legacy);
            }
            if (object.roundstatsall) {
                if (!Array.isArray(object.roundstatsall))
                    throw TypeError(".CDataGCCStrike15_v2_MatchInfo.roundstatsall: array expected");
                message.roundstatsall = [];
                for (var i = 0; i < object.roundstatsall.length; ++i) {
                    if (typeof object.roundstatsall[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_MatchInfo.roundstatsall: object expected");
                    message.roundstatsall[i] = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.fromObject(object.roundstatsall[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_MatchInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @static
         * @param {CDataGCCStrike15_v2_MatchInfo} message CDataGCCStrike15_v2_MatchInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_MatchInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.roundstatsall = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.matchid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.matchid = options.longs === String ? "0" : 0;
                object.matchtime = 0;
                object.watchablematchinfo = null;
                object.roundstats_legacy = null;
            }
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (typeof message.matchid === "number")
                    object.matchid = options.longs === String ? String(message.matchid) : message.matchid;
                else
                    object.matchid = options.longs === String ? $util.Long.prototype.toString.call(message.matchid) : options.longs === Number ? new $util.LongBits(message.matchid.low >>> 0, message.matchid.high >>> 0).toNumber(true) : message.matchid;
            if (message.matchtime != null && message.hasOwnProperty("matchtime"))
                object.matchtime = message.matchtime;
            if (message.watchablematchinfo != null && message.hasOwnProperty("watchablematchinfo"))
                object.watchablematchinfo = $root.WatchableMatchInfo.toObject(message.watchablematchinfo, options);
            if (message.roundstats_legacy != null && message.hasOwnProperty("roundstats_legacy"))
                object.roundstats_legacy = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.toObject(message.roundstats_legacy, options);
            if (message.roundstatsall && message.roundstatsall.length) {
                object.roundstatsall = [];
                for (var j = 0; j < message.roundstatsall.length; ++j)
                    object.roundstatsall[j] = $root.CMsgGCCStrike15_v2_MatchmakingServerRoundStats.toObject(message.roundstatsall[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_MatchInfo to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_MatchInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_MatchInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CDataGCCStrike15_v2_MatchInfo;
    })();
    
    $root.CDataGCCStrike15_v2_TournamentGroupTeam = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_TournamentGroupTeam.
         * @exports ICDataGCCStrike15_v2_TournamentGroupTeam
         * @interface ICDataGCCStrike15_v2_TournamentGroupTeam
         * @property {number|null} [team_id] CDataGCCStrike15_v2_TournamentGroupTeam team_id
         * @property {number|null} [score] CDataGCCStrike15_v2_TournamentGroupTeam score
         * @property {boolean|null} [correctpick] CDataGCCStrike15_v2_TournamentGroupTeam correctpick
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_TournamentGroupTeam.
         * @exports CDataGCCStrike15_v2_TournamentGroupTeam
         * @classdesc Represents a CDataGCCStrike15_v2_TournamentGroupTeam.
         * @implements ICDataGCCStrike15_v2_TournamentGroupTeam
         * @constructor
         * @param {ICDataGCCStrike15_v2_TournamentGroupTeam=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_TournamentGroupTeam(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_TournamentGroupTeam team_id.
         * @member {number} team_id
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.prototype.team_id = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroupTeam score.
         * @member {number} score
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.prototype.score = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroupTeam correctpick.
         * @member {boolean} correctpick
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.prototype.correctpick = false;
    
        /**
         * Creates a new CDataGCCStrike15_v2_TournamentGroupTeam instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroupTeam=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_TournamentGroupTeam} CDataGCCStrike15_v2_TournamentGroupTeam instance
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.create = function create(properties) {
            return new CDataGCCStrike15_v2_TournamentGroupTeam(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentGroupTeam message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroupTeam.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroupTeam} message CDataGCCStrike15_v2_TournamentGroupTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.team_id);
            if (message.score != null && message.hasOwnProperty("score"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.score);
            if (message.correctpick != null && message.hasOwnProperty("correctpick"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.correctpick);
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentGroupTeam message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroupTeam.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroupTeam} message CDataGCCStrike15_v2_TournamentGroupTeam message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentGroupTeam message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_TournamentGroupTeam} CDataGCCStrike15_v2_TournamentGroupTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentGroupTeam();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.team_id = reader.int32();
                    break;
                case 2:
                    message.score = reader.int32();
                    break;
                case 3:
                    message.correctpick = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentGroupTeam message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_TournamentGroupTeam} CDataGCCStrike15_v2_TournamentGroupTeam
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_TournamentGroupTeam message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                if (!$util.isInteger(message.team_id))
                    return "team_id: integer expected";
            if (message.score != null && message.hasOwnProperty("score"))
                if (!$util.isInteger(message.score))
                    return "score: integer expected";
            if (message.correctpick != null && message.hasOwnProperty("correctpick"))
                if (typeof message.correctpick !== "boolean")
                    return "correctpick: boolean expected";
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_TournamentGroupTeam message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_TournamentGroupTeam} CDataGCCStrike15_v2_TournamentGroupTeam
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_TournamentGroupTeam)
                return object;
            var message = new $root.CDataGCCStrike15_v2_TournamentGroupTeam();
            if (object.team_id != null)
                message.team_id = object.team_id | 0;
            if (object.score != null)
                message.score = object.score | 0;
            if (object.correctpick != null)
                message.correctpick = Boolean(object.correctpick);
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_TournamentGroupTeam message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @static
         * @param {CDataGCCStrike15_v2_TournamentGroupTeam} message CDataGCCStrike15_v2_TournamentGroupTeam
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.team_id = 0;
                object.score = 0;
                object.correctpick = false;
            }
            if (message.team_id != null && message.hasOwnProperty("team_id"))
                object.team_id = message.team_id;
            if (message.score != null && message.hasOwnProperty("score"))
                object.score = message.score;
            if (message.correctpick != null && message.hasOwnProperty("correctpick"))
                object.correctpick = message.correctpick;
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_TournamentGroupTeam to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_TournamentGroupTeam
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_TournamentGroupTeam.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CDataGCCStrike15_v2_TournamentGroupTeam;
    })();
    
    $root.CDataGCCStrike15_v2_TournamentGroup = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_TournamentGroup.
         * @exports ICDataGCCStrike15_v2_TournamentGroup
         * @interface ICDataGCCStrike15_v2_TournamentGroup
         * @property {number|null} [groupid] CDataGCCStrike15_v2_TournamentGroup groupid
         * @property {string|null} [name] CDataGCCStrike15_v2_TournamentGroup name
         * @property {string|null} [desc] CDataGCCStrike15_v2_TournamentGroup desc
         * @property {number|null} [picks__deprecated] CDataGCCStrike15_v2_TournamentGroup picks__deprecated
         * @property {Array.<ICDataGCCStrike15_v2_TournamentGroupTeam>|null} [teams] CDataGCCStrike15_v2_TournamentGroup teams
         * @property {Array.<number>|null} [stage_ids] CDataGCCStrike15_v2_TournamentGroup stage_ids
         * @property {number|null} [picklockuntiltime] CDataGCCStrike15_v2_TournamentGroup picklockuntiltime
         * @property {number|null} [pickableteams] CDataGCCStrike15_v2_TournamentGroup pickableteams
         * @property {number|null} [points_per_pick] CDataGCCStrike15_v2_TournamentGroup points_per_pick
         * @property {Array.<CDataGCCStrike15_v2_TournamentGroup.IPicks>|null} [picks] CDataGCCStrike15_v2_TournamentGroup picks
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_TournamentGroup.
         * @exports CDataGCCStrike15_v2_TournamentGroup
         * @classdesc Represents a CDataGCCStrike15_v2_TournamentGroup.
         * @implements ICDataGCCStrike15_v2_TournamentGroup
         * @constructor
         * @param {ICDataGCCStrike15_v2_TournamentGroup=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_TournamentGroup(properties) {
            this.teams = [];
            this.stage_ids = [];
            this.picks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup groupid.
         * @member {number} groupid
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.groupid = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup name.
         * @member {string} name
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.name = "";
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup desc.
         * @member {string} desc
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.desc = "";
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup picks__deprecated.
         * @member {number} picks__deprecated
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.picks__deprecated = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup teams.
         * @member {Array.<ICDataGCCStrike15_v2_TournamentGroupTeam>} teams
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.teams = $util.emptyArray;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup stage_ids.
         * @member {Array.<number>} stage_ids
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.stage_ids = $util.emptyArray;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup picklockuntiltime.
         * @member {number} picklockuntiltime
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.picklockuntiltime = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup pickableteams.
         * @member {number} pickableteams
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.pickableteams = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup points_per_pick.
         * @member {number} points_per_pick
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.points_per_pick = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentGroup picks.
         * @member {Array.<CDataGCCStrike15_v2_TournamentGroup.IPicks>} picks
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.picks = $util.emptyArray;
    
        /**
         * Creates a new CDataGCCStrike15_v2_TournamentGroup instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroup=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_TournamentGroup} CDataGCCStrike15_v2_TournamentGroup instance
         */
        CDataGCCStrike15_v2_TournamentGroup.create = function create(properties) {
            return new CDataGCCStrike15_v2_TournamentGroup(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentGroup message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroup.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroup} message CDataGCCStrike15_v2_TournamentGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentGroup.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.groupid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.desc != null && message.hasOwnProperty("desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.desc);
            if (message.picks__deprecated != null && message.hasOwnProperty("picks__deprecated"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.picks__deprecated);
            if (message.teams != null && message.teams.length)
                for (var i = 0; i < message.teams.length; ++i)
                    $root.CDataGCCStrike15_v2_TournamentGroupTeam.encode(message.teams[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.stage_ids != null && message.stage_ids.length)
                for (var i = 0; i < message.stage_ids.length; ++i)
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.stage_ids[i]);
            if (message.picklockuntiltime != null && message.hasOwnProperty("picklockuntiltime"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.picklockuntiltime);
            if (message.pickableteams != null && message.hasOwnProperty("pickableteams"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.pickableteams);
            if (message.points_per_pick != null && message.hasOwnProperty("points_per_pick"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.points_per_pick);
            if (message.picks != null && message.picks.length)
                for (var i = 0; i < message.picks.length; ++i)
                    $root.CDataGCCStrike15_v2_TournamentGroup.Picks.encode(message.picks[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentGroup message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroup.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentGroup} message CDataGCCStrike15_v2_TournamentGroup message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentGroup.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentGroup message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_TournamentGroup} CDataGCCStrike15_v2_TournamentGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentGroup.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentGroup();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.groupid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.desc = reader.string();
                    break;
                case 4:
                    message.picks__deprecated = reader.uint32();
                    break;
                case 5:
                    if (!(message.teams && message.teams.length))
                        message.teams = [];
                    message.teams.push($root.CDataGCCStrike15_v2_TournamentGroupTeam.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.stage_ids && message.stage_ids.length))
                        message.stage_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.stage_ids.push(reader.int32());
                    } else
                        message.stage_ids.push(reader.int32());
                    break;
                case 7:
                    message.picklockuntiltime = reader.uint32();
                    break;
                case 8:
                    message.pickableteams = reader.uint32();
                    break;
                case 9:
                    message.points_per_pick = reader.uint32();
                    break;
                case 10:
                    if (!(message.picks && message.picks.length))
                        message.picks = [];
                    message.picks.push($root.CDataGCCStrike15_v2_TournamentGroup.Picks.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentGroup message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_TournamentGroup} CDataGCCStrike15_v2_TournamentGroup
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentGroup.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_TournamentGroup message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_TournamentGroup.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                if (!$util.isInteger(message.groupid))
                    return "groupid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.desc != null && message.hasOwnProperty("desc"))
                if (!$util.isString(message.desc))
                    return "desc: string expected";
            if (message.picks__deprecated != null && message.hasOwnProperty("picks__deprecated"))
                if (!$util.isInteger(message.picks__deprecated))
                    return "picks__deprecated: integer expected";
            if (message.teams != null && message.hasOwnProperty("teams")) {
                if (!Array.isArray(message.teams))
                    return "teams: array expected";
                for (var i = 0; i < message.teams.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_TournamentGroupTeam.verify(message.teams[i]);
                    if (error)
                        return "teams." + error;
                }
            }
            if (message.stage_ids != null && message.hasOwnProperty("stage_ids")) {
                if (!Array.isArray(message.stage_ids))
                    return "stage_ids: array expected";
                for (var i = 0; i < message.stage_ids.length; ++i)
                    if (!$util.isInteger(message.stage_ids[i]))
                        return "stage_ids: integer[] expected";
            }
            if (message.picklockuntiltime != null && message.hasOwnProperty("picklockuntiltime"))
                if (!$util.isInteger(message.picklockuntiltime))
                    return "picklockuntiltime: integer expected";
            if (message.pickableteams != null && message.hasOwnProperty("pickableteams"))
                if (!$util.isInteger(message.pickableteams))
                    return "pickableteams: integer expected";
            if (message.points_per_pick != null && message.hasOwnProperty("points_per_pick"))
                if (!$util.isInteger(message.points_per_pick))
                    return "points_per_pick: integer expected";
            if (message.picks != null && message.hasOwnProperty("picks")) {
                if (!Array.isArray(message.picks))
                    return "picks: array expected";
                for (var i = 0; i < message.picks.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_TournamentGroup.Picks.verify(message.picks[i]);
                    if (error)
                        return "picks." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_TournamentGroup message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_TournamentGroup} CDataGCCStrike15_v2_TournamentGroup
         */
        CDataGCCStrike15_v2_TournamentGroup.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_TournamentGroup)
                return object;
            var message = new $root.CDataGCCStrike15_v2_TournamentGroup();
            if (object.groupid != null)
                message.groupid = object.groupid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.desc != null)
                message.desc = String(object.desc);
            if (object.picks__deprecated != null)
                message.picks__deprecated = object.picks__deprecated >>> 0;
            if (object.teams) {
                if (!Array.isArray(object.teams))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.teams: array expected");
                message.teams = [];
                for (var i = 0; i < object.teams.length; ++i) {
                    if (typeof object.teams[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.teams: object expected");
                    message.teams[i] = $root.CDataGCCStrike15_v2_TournamentGroupTeam.fromObject(object.teams[i]);
                }
            }
            if (object.stage_ids) {
                if (!Array.isArray(object.stage_ids))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.stage_ids: array expected");
                message.stage_ids = [];
                for (var i = 0; i < object.stage_ids.length; ++i)
                    message.stage_ids[i] = object.stage_ids[i] | 0;
            }
            if (object.picklockuntiltime != null)
                message.picklockuntiltime = object.picklockuntiltime >>> 0;
            if (object.pickableteams != null)
                message.pickableteams = object.pickableteams >>> 0;
            if (object.points_per_pick != null)
                message.points_per_pick = object.points_per_pick >>> 0;
            if (object.picks) {
                if (!Array.isArray(object.picks))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.picks: array expected");
                message.picks = [];
                for (var i = 0; i < object.picks.length; ++i) {
                    if (typeof object.picks[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.picks: object expected");
                    message.picks[i] = $root.CDataGCCStrike15_v2_TournamentGroup.Picks.fromObject(object.picks[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_TournamentGroup message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @static
         * @param {CDataGCCStrike15_v2_TournamentGroup} message CDataGCCStrike15_v2_TournamentGroup
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_TournamentGroup.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.teams = [];
                object.stage_ids = [];
                object.picks = [];
            }
            if (options.defaults) {
                object.groupid = 0;
                object.name = "";
                object.desc = "";
                object.picks__deprecated = 0;
                object.picklockuntiltime = 0;
                object.pickableteams = 0;
                object.points_per_pick = 0;
            }
            if (message.groupid != null && message.hasOwnProperty("groupid"))
                object.groupid = message.groupid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.desc != null && message.hasOwnProperty("desc"))
                object.desc = message.desc;
            if (message.picks__deprecated != null && message.hasOwnProperty("picks__deprecated"))
                object.picks__deprecated = message.picks__deprecated;
            if (message.teams && message.teams.length) {
                object.teams = [];
                for (var j = 0; j < message.teams.length; ++j)
                    object.teams[j] = $root.CDataGCCStrike15_v2_TournamentGroupTeam.toObject(message.teams[j], options);
            }
            if (message.stage_ids && message.stage_ids.length) {
                object.stage_ids = [];
                for (var j = 0; j < message.stage_ids.length; ++j)
                    object.stage_ids[j] = message.stage_ids[j];
            }
            if (message.picklockuntiltime != null && message.hasOwnProperty("picklockuntiltime"))
                object.picklockuntiltime = message.picklockuntiltime;
            if (message.pickableteams != null && message.hasOwnProperty("pickableteams"))
                object.pickableteams = message.pickableteams;
            if (message.points_per_pick != null && message.hasOwnProperty("points_per_pick"))
                object.points_per_pick = message.points_per_pick;
            if (message.picks && message.picks.length) {
                object.picks = [];
                for (var j = 0; j < message.picks.length; ++j)
                    object.picks[j] = $root.CDataGCCStrike15_v2_TournamentGroup.Picks.toObject(message.picks[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_TournamentGroup to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_TournamentGroup
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_TournamentGroup.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CDataGCCStrike15_v2_TournamentGroup.Picks = (function() {
    
            /**
             * Properties of a Picks.
             * @memberof CDataGCCStrike15_v2_TournamentGroup
             * @interface IPicks
             * @property {Array.<number>|null} [pickids] Picks pickids
             */
    
            /**
             * Constructs a new Picks.
             * @memberof CDataGCCStrike15_v2_TournamentGroup
             * @classdesc Represents a Picks.
             * @implements IPicks
             * @constructor
             * @param {CDataGCCStrike15_v2_TournamentGroup.IPicks=} [properties] Properties to set
             */
            function Picks(properties) {
                this.pickids = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Picks pickids.
             * @member {Array.<number>} pickids
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @instance
             */
            Picks.prototype.pickids = $util.emptyArray;
    
            /**
             * Creates a new Picks instance using the specified properties.
             * @function create
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {CDataGCCStrike15_v2_TournamentGroup.IPicks=} [properties] Properties to set
             * @returns {CDataGCCStrike15_v2_TournamentGroup.Picks} Picks instance
             */
            Picks.create = function create(properties) {
                return new Picks(properties);
            };
    
            /**
             * Encodes the specified Picks message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroup.Picks.verify|verify} messages.
             * @function encode
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {CDataGCCStrike15_v2_TournamentGroup.IPicks} message Picks message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Picks.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pickids != null && message.pickids.length)
                    for (var i = 0; i < message.pickids.length; ++i)
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.pickids[i]);
                return writer;
            };
    
            /**
             * Encodes the specified Picks message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentGroup.Picks.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {CDataGCCStrike15_v2_TournamentGroup.IPicks} message Picks message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Picks.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Picks message from the specified reader or buffer.
             * @function decode
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CDataGCCStrike15_v2_TournamentGroup.Picks} Picks
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Picks.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentGroup.Picks();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.pickids && message.pickids.length))
                            message.pickids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.pickids.push(reader.int32());
                        } else
                            message.pickids.push(reader.int32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Picks message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CDataGCCStrike15_v2_TournamentGroup.Picks} Picks
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Picks.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Picks message.
             * @function verify
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Picks.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pickids != null && message.hasOwnProperty("pickids")) {
                    if (!Array.isArray(message.pickids))
                        return "pickids: array expected";
                    for (var i = 0; i < message.pickids.length; ++i)
                        if (!$util.isInteger(message.pickids[i]))
                            return "pickids: integer[] expected";
                }
                return null;
            };
    
            /**
             * Creates a Picks message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CDataGCCStrike15_v2_TournamentGroup.Picks} Picks
             */
            Picks.fromObject = function fromObject(object) {
                if (object instanceof $root.CDataGCCStrike15_v2_TournamentGroup.Picks)
                    return object;
                var message = new $root.CDataGCCStrike15_v2_TournamentGroup.Picks();
                if (object.pickids) {
                    if (!Array.isArray(object.pickids))
                        throw TypeError(".CDataGCCStrike15_v2_TournamentGroup.Picks.pickids: array expected");
                    message.pickids = [];
                    for (var i = 0; i < object.pickids.length; ++i)
                        message.pickids[i] = object.pickids[i] | 0;
                }
                return message;
            };
    
            /**
             * Creates a plain object from a Picks message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @static
             * @param {CDataGCCStrike15_v2_TournamentGroup.Picks} message Picks
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Picks.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.pickids = [];
                if (message.pickids && message.pickids.length) {
                    object.pickids = [];
                    for (var j = 0; j < message.pickids.length; ++j)
                        object.pickids[j] = message.pickids[j];
                }
                return object;
            };
    
            /**
             * Converts this Picks to JSON.
             * @function toJSON
             * @memberof CDataGCCStrike15_v2_TournamentGroup.Picks
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Picks.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Picks;
        })();
    
        return CDataGCCStrike15_v2_TournamentGroup;
    })();
    
    $root.CDataGCCStrike15_v2_TournamentSection = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_TournamentSection.
         * @exports ICDataGCCStrike15_v2_TournamentSection
         * @interface ICDataGCCStrike15_v2_TournamentSection
         * @property {number|null} [sectionid] CDataGCCStrike15_v2_TournamentSection sectionid
         * @property {string|null} [name] CDataGCCStrike15_v2_TournamentSection name
         * @property {string|null} [desc] CDataGCCStrike15_v2_TournamentSection desc
         * @property {Array.<ICDataGCCStrike15_v2_TournamentGroup>|null} [groups] CDataGCCStrike15_v2_TournamentSection groups
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_TournamentSection.
         * @exports CDataGCCStrike15_v2_TournamentSection
         * @classdesc Represents a CDataGCCStrike15_v2_TournamentSection.
         * @implements ICDataGCCStrike15_v2_TournamentSection
         * @constructor
         * @param {ICDataGCCStrike15_v2_TournamentSection=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_TournamentSection(properties) {
            this.groups = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_TournamentSection sectionid.
         * @member {number} sectionid
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @instance
         */
        CDataGCCStrike15_v2_TournamentSection.prototype.sectionid = 0;
    
        /**
         * CDataGCCStrike15_v2_TournamentSection name.
         * @member {string} name
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @instance
         */
        CDataGCCStrike15_v2_TournamentSection.prototype.name = "";
    
        /**
         * CDataGCCStrike15_v2_TournamentSection desc.
         * @member {string} desc
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @instance
         */
        CDataGCCStrike15_v2_TournamentSection.prototype.desc = "";
    
        /**
         * CDataGCCStrike15_v2_TournamentSection groups.
         * @member {Array.<ICDataGCCStrike15_v2_TournamentGroup>} groups
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @instance
         */
        CDataGCCStrike15_v2_TournamentSection.prototype.groups = $util.emptyArray;
    
        /**
         * Creates a new CDataGCCStrike15_v2_TournamentSection instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentSection=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_TournamentSection} CDataGCCStrike15_v2_TournamentSection instance
         */
        CDataGCCStrike15_v2_TournamentSection.create = function create(properties) {
            return new CDataGCCStrike15_v2_TournamentSection(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentSection message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentSection.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentSection} message CDataGCCStrike15_v2_TournamentSection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentSection.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sectionid);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
            if (message.desc != null && message.hasOwnProperty("desc"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.desc);
            if (message.groups != null && message.groups.length)
                for (var i = 0; i < message.groups.length; ++i)
                    $root.CDataGCCStrike15_v2_TournamentGroup.encode(message.groups[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentSection message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentSection.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentSection} message CDataGCCStrike15_v2_TournamentSection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentSection.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentSection message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_TournamentSection} CDataGCCStrike15_v2_TournamentSection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentSection.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentSection();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sectionid = reader.uint32();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.desc = reader.string();
                    break;
                case 4:
                    if (!(message.groups && message.groups.length))
                        message.groups = [];
                    message.groups.push($root.CDataGCCStrike15_v2_TournamentGroup.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentSection message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_TournamentSection} CDataGCCStrike15_v2_TournamentSection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentSection.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_TournamentSection message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_TournamentSection.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                if (!$util.isInteger(message.sectionid))
                    return "sectionid: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.desc != null && message.hasOwnProperty("desc"))
                if (!$util.isString(message.desc))
                    return "desc: string expected";
            if (message.groups != null && message.hasOwnProperty("groups")) {
                if (!Array.isArray(message.groups))
                    return "groups: array expected";
                for (var i = 0; i < message.groups.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_TournamentGroup.verify(message.groups[i]);
                    if (error)
                        return "groups." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_TournamentSection message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_TournamentSection} CDataGCCStrike15_v2_TournamentSection
         */
        CDataGCCStrike15_v2_TournamentSection.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_TournamentSection)
                return object;
            var message = new $root.CDataGCCStrike15_v2_TournamentSection();
            if (object.sectionid != null)
                message.sectionid = object.sectionid >>> 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.desc != null)
                message.desc = String(object.desc);
            if (object.groups) {
                if (!Array.isArray(object.groups))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentSection.groups: array expected");
                message.groups = [];
                for (var i = 0; i < object.groups.length; ++i) {
                    if (typeof object.groups[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentSection.groups: object expected");
                    message.groups[i] = $root.CDataGCCStrike15_v2_TournamentGroup.fromObject(object.groups[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_TournamentSection message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @static
         * @param {CDataGCCStrike15_v2_TournamentSection} message CDataGCCStrike15_v2_TournamentSection
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_TournamentSection.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.groups = [];
            if (options.defaults) {
                object.sectionid = 0;
                object.name = "";
                object.desc = "";
            }
            if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                object.sectionid = message.sectionid;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.desc != null && message.hasOwnProperty("desc"))
                object.desc = message.desc;
            if (message.groups && message.groups.length) {
                object.groups = [];
                for (var j = 0; j < message.groups.length; ++j)
                    object.groups[j] = $root.CDataGCCStrike15_v2_TournamentGroup.toObject(message.groups[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_TournamentSection to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_TournamentSection
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_TournamentSection.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CDataGCCStrike15_v2_TournamentSection;
    })();
    
    $root.CDataGCCStrike15_v2_TournamentInfo = (function() {
    
        /**
         * Properties of a CDataGCCStrike15_v2_TournamentInfo.
         * @exports ICDataGCCStrike15_v2_TournamentInfo
         * @interface ICDataGCCStrike15_v2_TournamentInfo
         * @property {Array.<ICDataGCCStrike15_v2_TournamentSection>|null} [sections] CDataGCCStrike15_v2_TournamentInfo sections
         * @property {ITournamentEvent|null} [tournament_event] CDataGCCStrike15_v2_TournamentInfo tournament_event
         * @property {Array.<ITournamentTeam>|null} [tournament_teams] CDataGCCStrike15_v2_TournamentInfo tournament_teams
         */
    
        /**
         * Constructs a new CDataGCCStrike15_v2_TournamentInfo.
         * @exports CDataGCCStrike15_v2_TournamentInfo
         * @classdesc Represents a CDataGCCStrike15_v2_TournamentInfo.
         * @implements ICDataGCCStrike15_v2_TournamentInfo
         * @constructor
         * @param {ICDataGCCStrike15_v2_TournamentInfo=} [properties] Properties to set
         */
        function CDataGCCStrike15_v2_TournamentInfo(properties) {
            this.sections = [];
            this.tournament_teams = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CDataGCCStrike15_v2_TournamentInfo sections.
         * @member {Array.<ICDataGCCStrike15_v2_TournamentSection>} sections
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @instance
         */
        CDataGCCStrike15_v2_TournamentInfo.prototype.sections = $util.emptyArray;
    
        /**
         * CDataGCCStrike15_v2_TournamentInfo tournament_event.
         * @member {ITournamentEvent|null|undefined} tournament_event
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @instance
         */
        CDataGCCStrike15_v2_TournamentInfo.prototype.tournament_event = null;
    
        /**
         * CDataGCCStrike15_v2_TournamentInfo tournament_teams.
         * @member {Array.<ITournamentTeam>} tournament_teams
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @instance
         */
        CDataGCCStrike15_v2_TournamentInfo.prototype.tournament_teams = $util.emptyArray;
    
        /**
         * Creates a new CDataGCCStrike15_v2_TournamentInfo instance using the specified properties.
         * @function create
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentInfo=} [properties] Properties to set
         * @returns {CDataGCCStrike15_v2_TournamentInfo} CDataGCCStrike15_v2_TournamentInfo instance
         */
        CDataGCCStrike15_v2_TournamentInfo.create = function create(properties) {
            return new CDataGCCStrike15_v2_TournamentInfo(properties);
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentInfo message. Does not implicitly {@link CDataGCCStrike15_v2_TournamentInfo.verify|verify} messages.
         * @function encode
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentInfo} message CDataGCCStrike15_v2_TournamentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sections != null && message.sections.length)
                for (var i = 0; i < message.sections.length; ++i)
                    $root.CDataGCCStrike15_v2_TournamentSection.encode(message.sections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event"))
                $root.TournamentEvent.encode(message.tournament_event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.tournament_teams != null && message.tournament_teams.length)
                for (var i = 0; i < message.tournament_teams.length; ++i)
                    $root.TournamentTeam.encode(message.tournament_teams[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CDataGCCStrike15_v2_TournamentInfo message, length delimited. Does not implicitly {@link CDataGCCStrike15_v2_TournamentInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {ICDataGCCStrike15_v2_TournamentInfo} message CDataGCCStrike15_v2_TournamentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CDataGCCStrike15_v2_TournamentInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CDataGCCStrike15_v2_TournamentInfo} CDataGCCStrike15_v2_TournamentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CDataGCCStrike15_v2_TournamentInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.sections && message.sections.length))
                        message.sections = [];
                    message.sections.push($root.CDataGCCStrike15_v2_TournamentSection.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.tournament_event = $root.TournamentEvent.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.tournament_teams && message.tournament_teams.length))
                        message.tournament_teams = [];
                    message.tournament_teams.push($root.TournamentTeam.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CDataGCCStrike15_v2_TournamentInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CDataGCCStrike15_v2_TournamentInfo} CDataGCCStrike15_v2_TournamentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CDataGCCStrike15_v2_TournamentInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CDataGCCStrike15_v2_TournamentInfo message.
         * @function verify
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CDataGCCStrike15_v2_TournamentInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sections != null && message.hasOwnProperty("sections")) {
                if (!Array.isArray(message.sections))
                    return "sections: array expected";
                for (var i = 0; i < message.sections.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_TournamentSection.verify(message.sections[i]);
                    if (error)
                        return "sections." + error;
                }
            }
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event")) {
                var error = $root.TournamentEvent.verify(message.tournament_event);
                if (error)
                    return "tournament_event." + error;
            }
            if (message.tournament_teams != null && message.hasOwnProperty("tournament_teams")) {
                if (!Array.isArray(message.tournament_teams))
                    return "tournament_teams: array expected";
                for (var i = 0; i < message.tournament_teams.length; ++i) {
                    var error = $root.TournamentTeam.verify(message.tournament_teams[i]);
                    if (error)
                        return "tournament_teams." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CDataGCCStrike15_v2_TournamentInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CDataGCCStrike15_v2_TournamentInfo} CDataGCCStrike15_v2_TournamentInfo
         */
        CDataGCCStrike15_v2_TournamentInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CDataGCCStrike15_v2_TournamentInfo)
                return object;
            var message = new $root.CDataGCCStrike15_v2_TournamentInfo();
            if (object.sections) {
                if (!Array.isArray(object.sections))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentInfo.sections: array expected");
                message.sections = [];
                for (var i = 0; i < object.sections.length; ++i) {
                    if (typeof object.sections[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentInfo.sections: object expected");
                    message.sections[i] = $root.CDataGCCStrike15_v2_TournamentSection.fromObject(object.sections[i]);
                }
            }
            if (object.tournament_event != null) {
                if (typeof object.tournament_event !== "object")
                    throw TypeError(".CDataGCCStrike15_v2_TournamentInfo.tournament_event: object expected");
                message.tournament_event = $root.TournamentEvent.fromObject(object.tournament_event);
            }
            if (object.tournament_teams) {
                if (!Array.isArray(object.tournament_teams))
                    throw TypeError(".CDataGCCStrike15_v2_TournamentInfo.tournament_teams: array expected");
                message.tournament_teams = [];
                for (var i = 0; i < object.tournament_teams.length; ++i) {
                    if (typeof object.tournament_teams[i] !== "object")
                        throw TypeError(".CDataGCCStrike15_v2_TournamentInfo.tournament_teams: object expected");
                    message.tournament_teams[i] = $root.TournamentTeam.fromObject(object.tournament_teams[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CDataGCCStrike15_v2_TournamentInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @static
         * @param {CDataGCCStrike15_v2_TournamentInfo} message CDataGCCStrike15_v2_TournamentInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CDataGCCStrike15_v2_TournamentInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.sections = [];
                object.tournament_teams = [];
            }
            if (options.defaults)
                object.tournament_event = null;
            if (message.sections && message.sections.length) {
                object.sections = [];
                for (var j = 0; j < message.sections.length; ++j)
                    object.sections[j] = $root.CDataGCCStrike15_v2_TournamentSection.toObject(message.sections[j], options);
            }
            if (message.tournament_event != null && message.hasOwnProperty("tournament_event"))
                object.tournament_event = $root.TournamentEvent.toObject(message.tournament_event, options);
            if (message.tournament_teams && message.tournament_teams.length) {
                object.tournament_teams = [];
                for (var j = 0; j < message.tournament_teams.length; ++j)
                    object.tournament_teams[j] = $root.TournamentTeam.toObject(message.tournament_teams[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CDataGCCStrike15_v2_TournamentInfo to JSON.
         * @function toJSON
         * @memberof CDataGCCStrike15_v2_TournamentInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CDataGCCStrike15_v2_TournamentInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CDataGCCStrike15_v2_TournamentInfo;
    })();
    
    $root.CMsgGCCStrike15_v2_MatchList = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_MatchList.
         * @exports ICMsgGCCStrike15_v2_MatchList
         * @interface ICMsgGCCStrike15_v2_MatchList
         * @property {number|null} [msgrequestid] CMsgGCCStrike15_v2_MatchList msgrequestid
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_MatchList accountid
         * @property {number|null} [servertime] CMsgGCCStrike15_v2_MatchList servertime
         * @property {Array.<ICDataGCCStrike15_v2_MatchInfo>|null} [matches] CMsgGCCStrike15_v2_MatchList matches
         * @property {Array.<ITournamentTeam>|null} [streams] CMsgGCCStrike15_v2_MatchList streams
         * @property {ICDataGCCStrike15_v2_TournamentInfo|null} [tournamentinfo] CMsgGCCStrike15_v2_MatchList tournamentinfo
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_MatchList.
         * @exports CMsgGCCStrike15_v2_MatchList
         * @classdesc Represents a CMsgGCCStrike15_v2_MatchList.
         * @implements ICMsgGCCStrike15_v2_MatchList
         * @constructor
         * @param {ICMsgGCCStrike15_v2_MatchList=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_MatchList(properties) {
            this.matches = [];
            this.streams = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_MatchList msgrequestid.
         * @member {number} msgrequestid
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.msgrequestid = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchList accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.accountid = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchList servertime.
         * @member {number} servertime
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.servertime = 0;
    
        /**
         * CMsgGCCStrike15_v2_MatchList matches.
         * @member {Array.<ICDataGCCStrike15_v2_MatchInfo>} matches
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.matches = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchList streams.
         * @member {Array.<ITournamentTeam>} streams
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.streams = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_MatchList tournamentinfo.
         * @member {ICDataGCCStrike15_v2_TournamentInfo|null|undefined} tournamentinfo
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         */
        CMsgGCCStrike15_v2_MatchList.prototype.tournamentinfo = null;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_MatchList instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchList=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_MatchList} CMsgGCCStrike15_v2_MatchList instance
         */
        CMsgGCCStrike15_v2_MatchList.create = function create(properties) {
            return new CMsgGCCStrike15_v2_MatchList(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchList message. Does not implicitly {@link CMsgGCCStrike15_v2_MatchList.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchList} message CMsgGCCStrike15_v2_MatchList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.msgrequestid != null && message.hasOwnProperty("msgrequestid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.msgrequestid);
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.accountid);
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.servertime);
            if (message.matches != null && message.matches.length)
                for (var i = 0; i < message.matches.length; ++i)
                    $root.CDataGCCStrike15_v2_MatchInfo.encode(message.matches[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.streams != null && message.streams.length)
                for (var i = 0; i < message.streams.length; ++i)
                    $root.TournamentTeam.encode(message.streams[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.tournamentinfo != null && message.hasOwnProperty("tournamentinfo"))
                $root.CDataGCCStrike15_v2_TournamentInfo.encode(message.tournamentinfo, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_MatchList message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_MatchList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {ICMsgGCCStrike15_v2_MatchList} message CMsgGCCStrike15_v2_MatchList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_MatchList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_MatchList} CMsgGCCStrike15_v2_MatchList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_MatchList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.msgrequestid = reader.uint32();
                    break;
                case 2:
                    message.accountid = reader.uint32();
                    break;
                case 3:
                    message.servertime = reader.uint32();
                    break;
                case 4:
                    if (!(message.matches && message.matches.length))
                        message.matches = [];
                    message.matches.push($root.CDataGCCStrike15_v2_MatchInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.streams && message.streams.length))
                        message.streams = [];
                    message.streams.push($root.TournamentTeam.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.tournamentinfo = $root.CDataGCCStrike15_v2_TournamentInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_MatchList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_MatchList} CMsgGCCStrike15_v2_MatchList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_MatchList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_MatchList message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_MatchList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.msgrequestid != null && message.hasOwnProperty("msgrequestid"))
                if (!$util.isInteger(message.msgrequestid))
                    return "msgrequestid: integer expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                if (!$util.isInteger(message.servertime))
                    return "servertime: integer expected";
            if (message.matches != null && message.hasOwnProperty("matches")) {
                if (!Array.isArray(message.matches))
                    return "matches: array expected";
                for (var i = 0; i < message.matches.length; ++i) {
                    var error = $root.CDataGCCStrike15_v2_MatchInfo.verify(message.matches[i]);
                    if (error)
                        return "matches." + error;
                }
            }
            if (message.streams != null && message.hasOwnProperty("streams")) {
                if (!Array.isArray(message.streams))
                    return "streams: array expected";
                for (var i = 0; i < message.streams.length; ++i) {
                    var error = $root.TournamentTeam.verify(message.streams[i]);
                    if (error)
                        return "streams." + error;
                }
            }
            if (message.tournamentinfo != null && message.hasOwnProperty("tournamentinfo")) {
                var error = $root.CDataGCCStrike15_v2_TournamentInfo.verify(message.tournamentinfo);
                if (error)
                    return "tournamentinfo." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_MatchList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_MatchList} CMsgGCCStrike15_v2_MatchList
         */
        CMsgGCCStrike15_v2_MatchList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_MatchList)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_MatchList();
            if (object.msgrequestid != null)
                message.msgrequestid = object.msgrequestid >>> 0;
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.servertime != null)
                message.servertime = object.servertime >>> 0;
            if (object.matches) {
                if (!Array.isArray(object.matches))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchList.matches: array expected");
                message.matches = [];
                for (var i = 0; i < object.matches.length; ++i) {
                    if (typeof object.matches[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchList.matches: object expected");
                    message.matches[i] = $root.CDataGCCStrike15_v2_MatchInfo.fromObject(object.matches[i]);
                }
            }
            if (object.streams) {
                if (!Array.isArray(object.streams))
                    throw TypeError(".CMsgGCCStrike15_v2_MatchList.streams: array expected");
                message.streams = [];
                for (var i = 0; i < object.streams.length; ++i) {
                    if (typeof object.streams[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_MatchList.streams: object expected");
                    message.streams[i] = $root.TournamentTeam.fromObject(object.streams[i]);
                }
            }
            if (object.tournamentinfo != null) {
                if (typeof object.tournamentinfo !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_MatchList.tournamentinfo: object expected");
                message.tournamentinfo = $root.CDataGCCStrike15_v2_TournamentInfo.fromObject(object.tournamentinfo);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_MatchList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @static
         * @param {CMsgGCCStrike15_v2_MatchList} message CMsgGCCStrike15_v2_MatchList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_MatchList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.matches = [];
                object.streams = [];
            }
            if (options.defaults) {
                object.msgrequestid = 0;
                object.accountid = 0;
                object.servertime = 0;
                object.tournamentinfo = null;
            }
            if (message.msgrequestid != null && message.hasOwnProperty("msgrequestid"))
                object.msgrequestid = message.msgrequestid;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                object.servertime = message.servertime;
            if (message.matches && message.matches.length) {
                object.matches = [];
                for (var j = 0; j < message.matches.length; ++j)
                    object.matches[j] = $root.CDataGCCStrike15_v2_MatchInfo.toObject(message.matches[j], options);
            }
            if (message.streams && message.streams.length) {
                object.streams = [];
                for (var j = 0; j < message.streams.length; ++j)
                    object.streams[j] = $root.TournamentTeam.toObject(message.streams[j], options);
            }
            if (message.tournamentinfo != null && message.hasOwnProperty("tournamentinfo"))
                object.tournamentinfo = $root.CDataGCCStrike15_v2_TournamentInfo.toObject(message.tournamentinfo, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_MatchList to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_MatchList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_MatchList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_MatchList;
    })();
    
    $root.CMsgGCCStrike15_v2_Predictions = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Predictions.
         * @exports ICMsgGCCStrike15_v2_Predictions
         * @interface ICMsgGCCStrike15_v2_Predictions
         * @property {number|null} [event_id] CMsgGCCStrike15_v2_Predictions event_id
         * @property {Array.<CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick>|null} [group_match_team_picks] CMsgGCCStrike15_v2_Predictions group_match_team_picks
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Predictions.
         * @exports CMsgGCCStrike15_v2_Predictions
         * @classdesc Represents a CMsgGCCStrike15_v2_Predictions.
         * @implements ICMsgGCCStrike15_v2_Predictions
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Predictions=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Predictions(properties) {
            this.group_match_team_picks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Predictions event_id.
         * @member {number} event_id
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @instance
         */
        CMsgGCCStrike15_v2_Predictions.prototype.event_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_Predictions group_match_team_picks.
         * @member {Array.<CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick>} group_match_team_picks
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @instance
         */
        CMsgGCCStrike15_v2_Predictions.prototype.group_match_team_picks = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Predictions instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {ICMsgGCCStrike15_v2_Predictions=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Predictions} CMsgGCCStrike15_v2_Predictions instance
         */
        CMsgGCCStrike15_v2_Predictions.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Predictions(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Predictions message. Does not implicitly {@link CMsgGCCStrike15_v2_Predictions.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {ICMsgGCCStrike15_v2_Predictions} message CMsgGCCStrike15_v2_Predictions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Predictions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.event_id);
            if (message.group_match_team_picks != null && message.group_match_team_picks.length)
                for (var i = 0; i < message.group_match_team_picks.length; ++i)
                    $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.encode(message.group_match_team_picks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Predictions message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Predictions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {ICMsgGCCStrike15_v2_Predictions} message CMsgGCCStrike15_v2_Predictions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Predictions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Predictions message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Predictions} CMsgGCCStrike15_v2_Predictions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Predictions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Predictions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.group_match_team_picks && message.group_match_team_picks.length))
                        message.group_match_team_picks = [];
                    message.group_match_team_picks.push($root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Predictions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Predictions} CMsgGCCStrike15_v2_Predictions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Predictions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Predictions message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Predictions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                if (!$util.isInteger(message.event_id))
                    return "event_id: integer expected";
            if (message.group_match_team_picks != null && message.hasOwnProperty("group_match_team_picks")) {
                if (!Array.isArray(message.group_match_team_picks))
                    return "group_match_team_picks: array expected";
                for (var i = 0; i < message.group_match_team_picks.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.verify(message.group_match_team_picks[i]);
                    if (error)
                        return "group_match_team_picks." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Predictions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Predictions} CMsgGCCStrike15_v2_Predictions
         */
        CMsgGCCStrike15_v2_Predictions.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Predictions)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Predictions();
            if (object.event_id != null)
                message.event_id = object.event_id >>> 0;
            if (object.group_match_team_picks) {
                if (!Array.isArray(object.group_match_team_picks))
                    throw TypeError(".CMsgGCCStrike15_v2_Predictions.group_match_team_picks: array expected");
                message.group_match_team_picks = [];
                for (var i = 0; i < object.group_match_team_picks.length; ++i) {
                    if (typeof object.group_match_team_picks[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_Predictions.group_match_team_picks: object expected");
                    message.group_match_team_picks[i] = $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.fromObject(object.group_match_team_picks[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Predictions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @static
         * @param {CMsgGCCStrike15_v2_Predictions} message CMsgGCCStrike15_v2_Predictions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Predictions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.group_match_team_picks = [];
            if (options.defaults)
                object.event_id = 0;
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                object.event_id = message.event_id;
            if (message.group_match_team_picks && message.group_match_team_picks.length) {
                object.group_match_team_picks = [];
                for (var j = 0; j < message.group_match_team_picks.length; ++j)
                    object.group_match_team_picks[j] = $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.toObject(message.group_match_team_picks[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Predictions to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Predictions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Predictions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick = (function() {
    
            /**
             * Properties of a GroupMatchTeamPick.
             * @memberof CMsgGCCStrike15_v2_Predictions
             * @interface IGroupMatchTeamPick
             * @property {number|null} [sectionid] GroupMatchTeamPick sectionid
             * @property {number|null} [groupid] GroupMatchTeamPick groupid
             * @property {number|null} [index] GroupMatchTeamPick index
             * @property {number|null} [teamid] GroupMatchTeamPick teamid
             * @property {number|Long|null} [itemid] GroupMatchTeamPick itemid
             */
    
            /**
             * Constructs a new GroupMatchTeamPick.
             * @memberof CMsgGCCStrike15_v2_Predictions
             * @classdesc Represents a GroupMatchTeamPick.
             * @implements IGroupMatchTeamPick
             * @constructor
             * @param {CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick=} [properties] Properties to set
             */
            function GroupMatchTeamPick(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GroupMatchTeamPick sectionid.
             * @member {number} sectionid
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             */
            GroupMatchTeamPick.prototype.sectionid = 0;
    
            /**
             * GroupMatchTeamPick groupid.
             * @member {number} groupid
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             */
            GroupMatchTeamPick.prototype.groupid = 0;
    
            /**
             * GroupMatchTeamPick index.
             * @member {number} index
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             */
            GroupMatchTeamPick.prototype.index = 0;
    
            /**
             * GroupMatchTeamPick teamid.
             * @member {number} teamid
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             */
            GroupMatchTeamPick.prototype.teamid = 0;
    
            /**
             * GroupMatchTeamPick itemid.
             * @member {number|Long} itemid
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             */
            GroupMatchTeamPick.prototype.itemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new GroupMatchTeamPick instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick} GroupMatchTeamPick instance
             */
            GroupMatchTeamPick.create = function create(properties) {
                return new GroupMatchTeamPick(properties);
            };
    
            /**
             * Encodes the specified GroupMatchTeamPick message. Does not implicitly {@link CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick} message GroupMatchTeamPick message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMatchTeamPick.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sectionid);
                if (message.groupid != null && message.hasOwnProperty("groupid"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.groupid);
                if (message.index != null && message.hasOwnProperty("index"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.index);
                if (message.teamid != null && message.hasOwnProperty("teamid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.teamid);
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.itemid);
                return writer;
            };
    
            /**
             * Encodes the specified GroupMatchTeamPick message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {CMsgGCCStrike15_v2_Predictions.IGroupMatchTeamPick} message GroupMatchTeamPick message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GroupMatchTeamPick.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GroupMatchTeamPick message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick} GroupMatchTeamPick
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMatchTeamPick.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sectionid = reader.int32();
                        break;
                    case 2:
                        message.groupid = reader.int32();
                        break;
                    case 3:
                        message.index = reader.int32();
                        break;
                    case 4:
                        message.teamid = reader.int32();
                        break;
                    case 5:
                        message.itemid = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GroupMatchTeamPick message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick} GroupMatchTeamPick
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GroupMatchTeamPick.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GroupMatchTeamPick message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GroupMatchTeamPick.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    if (!$util.isInteger(message.sectionid))
                        return "sectionid: integer expected";
                if (message.groupid != null && message.hasOwnProperty("groupid"))
                    if (!$util.isInteger(message.groupid))
                        return "groupid: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.teamid != null && message.hasOwnProperty("teamid"))
                    if (!$util.isInteger(message.teamid))
                        return "teamid: integer expected";
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    if (!$util.isInteger(message.itemid) && !(message.itemid && $util.isInteger(message.itemid.low) && $util.isInteger(message.itemid.high)))
                        return "itemid: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a GroupMatchTeamPick message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick} GroupMatchTeamPick
             */
            GroupMatchTeamPick.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick();
                if (object.sectionid != null)
                    message.sectionid = object.sectionid | 0;
                if (object.groupid != null)
                    message.groupid = object.groupid | 0;
                if (object.index != null)
                    message.index = object.index | 0;
                if (object.teamid != null)
                    message.teamid = object.teamid | 0;
                if (object.itemid != null)
                    if ($util.Long)
                        (message.itemid = $util.Long.fromValue(object.itemid)).unsigned = true;
                    else if (typeof object.itemid === "string")
                        message.itemid = parseInt(object.itemid, 10);
                    else if (typeof object.itemid === "number")
                        message.itemid = object.itemid;
                    else if (typeof object.itemid === "object")
                        message.itemid = new $util.LongBits(object.itemid.low >>> 0, object.itemid.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a GroupMatchTeamPick message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @static
             * @param {CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick} message GroupMatchTeamPick
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GroupMatchTeamPick.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sectionid = 0;
                    object.groupid = 0;
                    object.index = 0;
                    object.teamid = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.itemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.itemid = options.longs === String ? "0" : 0;
                }
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    object.sectionid = message.sectionid;
                if (message.groupid != null && message.hasOwnProperty("groupid"))
                    object.groupid = message.groupid;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.teamid != null && message.hasOwnProperty("teamid"))
                    object.teamid = message.teamid;
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    if (typeof message.itemid === "number")
                        object.itemid = options.longs === String ? String(message.itemid) : message.itemid;
                    else
                        object.itemid = options.longs === String ? $util.Long.prototype.toString.call(message.itemid) : options.longs === Number ? new $util.LongBits(message.itemid.low >>> 0, message.itemid.high >>> 0).toNumber(true) : message.itemid;
                return object;
            };
    
            /**
             * Converts this GroupMatchTeamPick to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GroupMatchTeamPick.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GroupMatchTeamPick;
        })();
    
        return CMsgGCCStrike15_v2_Predictions;
    })();
    
    $root.CMsgGCCStrike15_v2_Fantasy = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Fantasy.
         * @exports ICMsgGCCStrike15_v2_Fantasy
         * @interface ICMsgGCCStrike15_v2_Fantasy
         * @property {number|null} [event_id] CMsgGCCStrike15_v2_Fantasy event_id
         * @property {Array.<CMsgGCCStrike15_v2_Fantasy.IFantasyTeam>|null} [teams] CMsgGCCStrike15_v2_Fantasy teams
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Fantasy.
         * @exports CMsgGCCStrike15_v2_Fantasy
         * @classdesc Represents a CMsgGCCStrike15_v2_Fantasy.
         * @implements ICMsgGCCStrike15_v2_Fantasy
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Fantasy=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Fantasy(properties) {
            this.teams = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Fantasy event_id.
         * @member {number} event_id
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @instance
         */
        CMsgGCCStrike15_v2_Fantasy.prototype.event_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_Fantasy teams.
         * @member {Array.<CMsgGCCStrike15_v2_Fantasy.IFantasyTeam>} teams
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @instance
         */
        CMsgGCCStrike15_v2_Fantasy.prototype.teams = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Fantasy instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {ICMsgGCCStrike15_v2_Fantasy=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Fantasy} CMsgGCCStrike15_v2_Fantasy instance
         */
        CMsgGCCStrike15_v2_Fantasy.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Fantasy(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Fantasy message. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {ICMsgGCCStrike15_v2_Fantasy} message CMsgGCCStrike15_v2_Fantasy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Fantasy.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.event_id);
            if (message.teams != null && message.teams.length)
                for (var i = 0; i < message.teams.length; ++i)
                    $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.encode(message.teams[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Fantasy message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {ICMsgGCCStrike15_v2_Fantasy} message CMsgGCCStrike15_v2_Fantasy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Fantasy.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Fantasy message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Fantasy} CMsgGCCStrike15_v2_Fantasy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Fantasy.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Fantasy();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.event_id = reader.uint32();
                    break;
                case 2:
                    if (!(message.teams && message.teams.length))
                        message.teams = [];
                    message.teams.push($root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Fantasy message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Fantasy} CMsgGCCStrike15_v2_Fantasy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Fantasy.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Fantasy message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Fantasy.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                if (!$util.isInteger(message.event_id))
                    return "event_id: integer expected";
            if (message.teams != null && message.hasOwnProperty("teams")) {
                if (!Array.isArray(message.teams))
                    return "teams: array expected";
                for (var i = 0; i < message.teams.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.verify(message.teams[i]);
                    if (error)
                        return "teams." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Fantasy message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Fantasy} CMsgGCCStrike15_v2_Fantasy
         */
        CMsgGCCStrike15_v2_Fantasy.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Fantasy)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Fantasy();
            if (object.event_id != null)
                message.event_id = object.event_id >>> 0;
            if (object.teams) {
                if (!Array.isArray(object.teams))
                    throw TypeError(".CMsgGCCStrike15_v2_Fantasy.teams: array expected");
                message.teams = [];
                for (var i = 0; i < object.teams.length; ++i) {
                    if (typeof object.teams[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_Fantasy.teams: object expected");
                    message.teams[i] = $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.fromObject(object.teams[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Fantasy message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @static
         * @param {CMsgGCCStrike15_v2_Fantasy} message CMsgGCCStrike15_v2_Fantasy
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Fantasy.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.teams = [];
            if (options.defaults)
                object.event_id = 0;
            if (message.event_id != null && message.hasOwnProperty("event_id"))
                object.event_id = message.event_id;
            if (message.teams && message.teams.length) {
                object.teams = [];
                for (var j = 0; j < message.teams.length; ++j)
                    object.teams[j] = $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam.toObject(message.teams[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Fantasy to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Fantasy
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Fantasy.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_Fantasy.FantasySlot = (function() {
    
            /**
             * Properties of a FantasySlot.
             * @memberof CMsgGCCStrike15_v2_Fantasy
             * @interface IFantasySlot
             * @property {number|null} [type] FantasySlot type
             * @property {number|null} [pick] FantasySlot pick
             * @property {number|Long|null} [itemid] FantasySlot itemid
             */
    
            /**
             * Constructs a new FantasySlot.
             * @memberof CMsgGCCStrike15_v2_Fantasy
             * @classdesc Represents a FantasySlot.
             * @implements IFantasySlot
             * @constructor
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasySlot=} [properties] Properties to set
             */
            function FantasySlot(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FantasySlot type.
             * @member {number} type
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @instance
             */
            FantasySlot.prototype.type = 0;
    
            /**
             * FantasySlot pick.
             * @member {number} pick
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @instance
             */
            FantasySlot.prototype.pick = 0;
    
            /**
             * FantasySlot itemid.
             * @member {number|Long} itemid
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @instance
             */
            FantasySlot.prototype.itemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new FantasySlot instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasySlot=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasySlot} FantasySlot instance
             */
            FantasySlot.create = function create(properties) {
                return new FantasySlot(properties);
            };
    
            /**
             * Encodes the specified FantasySlot message. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.FantasySlot.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasySlot} message FantasySlot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FantasySlot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.pick != null && message.hasOwnProperty("pick"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pick);
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.itemid);
                return writer;
            };
    
            /**
             * Encodes the specified FantasySlot message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.FantasySlot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasySlot} message FantasySlot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FantasySlot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FantasySlot message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasySlot} FantasySlot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FantasySlot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.pick = reader.int32();
                        break;
                    case 3:
                        message.itemid = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FantasySlot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasySlot} FantasySlot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FantasySlot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FantasySlot message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FantasySlot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isInteger(message.type))
                        return "type: integer expected";
                if (message.pick != null && message.hasOwnProperty("pick"))
                    if (!$util.isInteger(message.pick))
                        return "pick: integer expected";
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    if (!$util.isInteger(message.itemid) && !(message.itemid && $util.isInteger(message.itemid.low) && $util.isInteger(message.itemid.high)))
                        return "itemid: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a FantasySlot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasySlot} FantasySlot
             */
            FantasySlot.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot();
                if (object.type != null)
                    message.type = object.type | 0;
                if (object.pick != null)
                    message.pick = object.pick | 0;
                if (object.itemid != null)
                    if ($util.Long)
                        (message.itemid = $util.Long.fromValue(object.itemid)).unsigned = true;
                    else if (typeof object.itemid === "string")
                        message.itemid = parseInt(object.itemid, 10);
                    else if (typeof object.itemid === "number")
                        message.itemid = object.itemid;
                    else if (typeof object.itemid === "object")
                        message.itemid = new $util.LongBits(object.itemid.low >>> 0, object.itemid.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a FantasySlot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.FantasySlot} message FantasySlot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FantasySlot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type = 0;
                    object.pick = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.itemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.itemid = options.longs === String ? "0" : 0;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.pick != null && message.hasOwnProperty("pick"))
                    object.pick = message.pick;
                if (message.itemid != null && message.hasOwnProperty("itemid"))
                    if (typeof message.itemid === "number")
                        object.itemid = options.longs === String ? String(message.itemid) : message.itemid;
                    else
                        object.itemid = options.longs === String ? $util.Long.prototype.toString.call(message.itemid) : options.longs === Number ? new $util.LongBits(message.itemid.low >>> 0, message.itemid.high >>> 0).toNumber(true) : message.itemid;
                return object;
            };
    
            /**
             * Converts this FantasySlot to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasySlot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FantasySlot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FantasySlot;
        })();
    
        CMsgGCCStrike15_v2_Fantasy.FantasyTeam = (function() {
    
            /**
             * Properties of a FantasyTeam.
             * @memberof CMsgGCCStrike15_v2_Fantasy
             * @interface IFantasyTeam
             * @property {number|null} [sectionid] FantasyTeam sectionid
             * @property {Array.<CMsgGCCStrike15_v2_Fantasy.IFantasySlot>|null} [slots] FantasyTeam slots
             */
    
            /**
             * Constructs a new FantasyTeam.
             * @memberof CMsgGCCStrike15_v2_Fantasy
             * @classdesc Represents a FantasyTeam.
             * @implements IFantasyTeam
             * @constructor
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasyTeam=} [properties] Properties to set
             */
            function FantasyTeam(properties) {
                this.slots = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * FantasyTeam sectionid.
             * @member {number} sectionid
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @instance
             */
            FantasyTeam.prototype.sectionid = 0;
    
            /**
             * FantasyTeam slots.
             * @member {Array.<CMsgGCCStrike15_v2_Fantasy.IFantasySlot>} slots
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @instance
             */
            FantasyTeam.prototype.slots = $util.emptyArray;
    
            /**
             * Creates a new FantasyTeam instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasyTeam=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasyTeam} FantasyTeam instance
             */
            FantasyTeam.create = function create(properties) {
                return new FantasyTeam(properties);
            };
    
            /**
             * Encodes the specified FantasyTeam message. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.FantasyTeam.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasyTeam} message FantasyTeam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FantasyTeam.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.sectionid);
                if (message.slots != null && message.slots.length)
                    for (var i = 0; i < message.slots.length; ++i)
                        $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot.encode(message.slots[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified FantasyTeam message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Fantasy.FantasyTeam.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.IFantasyTeam} message FantasyTeam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FantasyTeam.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a FantasyTeam message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasyTeam} FantasyTeam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FantasyTeam.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sectionid = reader.int32();
                        break;
                    case 2:
                        if (!(message.slots && message.slots.length))
                            message.slots = [];
                        message.slots.push($root.CMsgGCCStrike15_v2_Fantasy.FantasySlot.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a FantasyTeam message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasyTeam} FantasyTeam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FantasyTeam.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a FantasyTeam message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FantasyTeam.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    if (!$util.isInteger(message.sectionid))
                        return "sectionid: integer expected";
                if (message.slots != null && message.hasOwnProperty("slots")) {
                    if (!Array.isArray(message.slots))
                        return "slots: array expected";
                    for (var i = 0; i < message.slots.length; ++i) {
                        var error = $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot.verify(message.slots[i]);
                        if (error)
                            return "slots." + error;
                    }
                }
                return null;
            };
    
            /**
             * Creates a FantasyTeam message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_Fantasy.FantasyTeam} FantasyTeam
             */
            FantasyTeam.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_Fantasy.FantasyTeam();
                if (object.sectionid != null)
                    message.sectionid = object.sectionid | 0;
                if (object.slots) {
                    if (!Array.isArray(object.slots))
                        throw TypeError(".CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots: array expected");
                    message.slots = [];
                    for (var i = 0; i < object.slots.length; ++i) {
                        if (typeof object.slots[i] !== "object")
                            throw TypeError(".CMsgGCCStrike15_v2_Fantasy.FantasyTeam.slots: object expected");
                        message.slots[i] = $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot.fromObject(object.slots[i]);
                    }
                }
                return message;
            };
    
            /**
             * Creates a plain object from a FantasyTeam message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @static
             * @param {CMsgGCCStrike15_v2_Fantasy.FantasyTeam} message FantasyTeam
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FantasyTeam.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.slots = [];
                if (options.defaults)
                    object.sectionid = 0;
                if (message.sectionid != null && message.hasOwnProperty("sectionid"))
                    object.sectionid = message.sectionid;
                if (message.slots && message.slots.length) {
                    object.slots = [];
                    for (var j = 0; j < message.slots.length; ++j)
                        object.slots[j] = $root.CMsgGCCStrike15_v2_Fantasy.FantasySlot.toObject(message.slots[j], options);
                }
                return object;
            };
    
            /**
             * Converts this FantasyTeam to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_Fantasy.FantasyTeam
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FantasyTeam.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return FantasyTeam;
        })();
    
        return CMsgGCCStrike15_v2_Fantasy;
    })();
    
    $root.CAttribute_String = (function() {
    
        /**
         * Properties of a CAttribute_String.
         * @exports ICAttribute_String
         * @interface ICAttribute_String
         * @property {string|null} [value] CAttribute_String value
         */
    
        /**
         * Constructs a new CAttribute_String.
         * @exports CAttribute_String
         * @classdesc Represents a CAttribute_String.
         * @implements ICAttribute_String
         * @constructor
         * @param {ICAttribute_String=} [properties] Properties to set
         */
        function CAttribute_String(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CAttribute_String value.
         * @member {string} value
         * @memberof CAttribute_String
         * @instance
         */
        CAttribute_String.prototype.value = "";
    
        /**
         * Creates a new CAttribute_String instance using the specified properties.
         * @function create
         * @memberof CAttribute_String
         * @static
         * @param {ICAttribute_String=} [properties] Properties to set
         * @returns {CAttribute_String} CAttribute_String instance
         */
        CAttribute_String.create = function create(properties) {
            return new CAttribute_String(properties);
        };
    
        /**
         * Encodes the specified CAttribute_String message. Does not implicitly {@link CAttribute_String.verify|verify} messages.
         * @function encode
         * @memberof CAttribute_String
         * @static
         * @param {ICAttribute_String} message CAttribute_String message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CAttribute_String.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && message.hasOwnProperty("value"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
            return writer;
        };
    
        /**
         * Encodes the specified CAttribute_String message, length delimited. Does not implicitly {@link CAttribute_String.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CAttribute_String
         * @static
         * @param {ICAttribute_String} message CAttribute_String message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CAttribute_String.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CAttribute_String message from the specified reader or buffer.
         * @function decode
         * @memberof CAttribute_String
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CAttribute_String} CAttribute_String
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CAttribute_String.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CAttribute_String();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CAttribute_String message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CAttribute_String
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CAttribute_String} CAttribute_String
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CAttribute_String.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CAttribute_String message.
         * @function verify
         * @memberof CAttribute_String
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CAttribute_String.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!$util.isString(message.value))
                    return "value: string expected";
            return null;
        };
    
        /**
         * Creates a CAttribute_String message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CAttribute_String
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CAttribute_String} CAttribute_String
         */
        CAttribute_String.fromObject = function fromObject(object) {
            if (object instanceof $root.CAttribute_String)
                return object;
            var message = new $root.CAttribute_String();
            if (object.value != null)
                message.value = String(object.value);
            return message;
        };
    
        /**
         * Creates a plain object from a CAttribute_String message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CAttribute_String
         * @static
         * @param {CAttribute_String} message CAttribute_String
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CAttribute_String.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = "";
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
            return object;
        };
    
        /**
         * Converts this CAttribute_String to JSON.
         * @function toJSON
         * @memberof CAttribute_String
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CAttribute_String.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CAttribute_String;
    })();
    
    $root.CMsgGCToGCReloadVersions = (function() {
    
        /**
         * Properties of a CMsgGCToGCReloadVersions.
         * @exports ICMsgGCToGCReloadVersions
         * @interface ICMsgGCToGCReloadVersions
         */
    
        /**
         * Constructs a new CMsgGCToGCReloadVersions.
         * @exports CMsgGCToGCReloadVersions
         * @classdesc Represents a CMsgGCToGCReloadVersions.
         * @implements ICMsgGCToGCReloadVersions
         * @constructor
         * @param {ICMsgGCToGCReloadVersions=} [properties] Properties to set
         */
        function CMsgGCToGCReloadVersions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgGCToGCReloadVersions instance using the specified properties.
         * @function create
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {ICMsgGCToGCReloadVersions=} [properties] Properties to set
         * @returns {CMsgGCToGCReloadVersions} CMsgGCToGCReloadVersions instance
         */
        CMsgGCToGCReloadVersions.create = function create(properties) {
            return new CMsgGCToGCReloadVersions(properties);
        };
    
        /**
         * Encodes the specified CMsgGCToGCReloadVersions message. Does not implicitly {@link CMsgGCToGCReloadVersions.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {ICMsgGCToGCReloadVersions} message CMsgGCToGCReloadVersions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCToGCReloadVersions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCToGCReloadVersions message, length delimited. Does not implicitly {@link CMsgGCToGCReloadVersions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {ICMsgGCToGCReloadVersions} message CMsgGCToGCReloadVersions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCToGCReloadVersions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCToGCReloadVersions message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCToGCReloadVersions} CMsgGCToGCReloadVersions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCToGCReloadVersions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCToGCReloadVersions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCToGCReloadVersions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCToGCReloadVersions} CMsgGCToGCReloadVersions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCToGCReloadVersions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCToGCReloadVersions message.
         * @function verify
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCToGCReloadVersions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCToGCReloadVersions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCToGCReloadVersions} CMsgGCToGCReloadVersions
         */
        CMsgGCToGCReloadVersions.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCToGCReloadVersions)
                return object;
            return new $root.CMsgGCToGCReloadVersions();
        };
    
        /**
         * Creates a plain object from a CMsgGCToGCReloadVersions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCToGCReloadVersions
         * @static
         * @param {CMsgGCToGCReloadVersions} message CMsgGCToGCReloadVersions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCToGCReloadVersions.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgGCToGCReloadVersions to JSON.
         * @function toJSON
         * @memberof CMsgGCToGCReloadVersions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCToGCReloadVersions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCToGCReloadVersions;
    })();
    
    $root.CMsgCStrike15Welcome = (function() {
    
        /**
         * Properties of a CMsgCStrike15Welcome.
         * @exports ICMsgCStrike15Welcome
         * @interface ICMsgCStrike15Welcome
         * @property {number|null} [store_item_hash] CMsgCStrike15Welcome store_item_hash
         * @property {number|null} [timeplayedconsecutively] CMsgCStrike15Welcome timeplayedconsecutively
         * @property {number|null} [time_first_played] CMsgCStrike15Welcome time_first_played
         * @property {number|null} [last_time_played] CMsgCStrike15Welcome last_time_played
         * @property {number|null} [last_ip_address] CMsgCStrike15Welcome last_ip_address
         * @property {number|Long|null} [gscookieid] CMsgCStrike15Welcome gscookieid
         * @property {number|Long|null} [uniqueid] CMsgCStrike15Welcome uniqueid
         */
    
        /**
         * Constructs a new CMsgCStrike15Welcome.
         * @exports CMsgCStrike15Welcome
         * @classdesc Represents a CMsgCStrike15Welcome.
         * @implements ICMsgCStrike15Welcome
         * @constructor
         * @param {ICMsgCStrike15Welcome=} [properties] Properties to set
         */
        function CMsgCStrike15Welcome(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgCStrike15Welcome store_item_hash.
         * @member {number} store_item_hash
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.store_item_hash = 0;
    
        /**
         * CMsgCStrike15Welcome timeplayedconsecutively.
         * @member {number} timeplayedconsecutively
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.timeplayedconsecutively = 0;
    
        /**
         * CMsgCStrike15Welcome time_first_played.
         * @member {number} time_first_played
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.time_first_played = 0;
    
        /**
         * CMsgCStrike15Welcome last_time_played.
         * @member {number} last_time_played
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.last_time_played = 0;
    
        /**
         * CMsgCStrike15Welcome last_ip_address.
         * @member {number} last_ip_address
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.last_ip_address = 0;
    
        /**
         * CMsgCStrike15Welcome gscookieid.
         * @member {number|Long} gscookieid
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.gscookieid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgCStrike15Welcome uniqueid.
         * @member {number|Long} uniqueid
         * @memberof CMsgCStrike15Welcome
         * @instance
         */
        CMsgCStrike15Welcome.prototype.uniqueid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgCStrike15Welcome instance using the specified properties.
         * @function create
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {ICMsgCStrike15Welcome=} [properties] Properties to set
         * @returns {CMsgCStrike15Welcome} CMsgCStrike15Welcome instance
         */
        CMsgCStrike15Welcome.create = function create(properties) {
            return new CMsgCStrike15Welcome(properties);
        };
    
        /**
         * Encodes the specified CMsgCStrike15Welcome message. Does not implicitly {@link CMsgCStrike15Welcome.verify|verify} messages.
         * @function encode
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {ICMsgCStrike15Welcome} message CMsgCStrike15Welcome message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCStrike15Welcome.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.store_item_hash != null && message.hasOwnProperty("store_item_hash"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.store_item_hash);
            if (message.timeplayedconsecutively != null && message.hasOwnProperty("timeplayedconsecutively"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.timeplayedconsecutively);
            if (message.time_first_played != null && message.hasOwnProperty("time_first_played"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.time_first_played);
            if (message.last_time_played != null && message.hasOwnProperty("last_time_played"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.last_time_played);
            if (message.last_ip_address != null && message.hasOwnProperty("last_ip_address"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.last_ip_address);
            if (message.gscookieid != null && message.hasOwnProperty("gscookieid"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint64(message.gscookieid);
            if (message.uniqueid != null && message.hasOwnProperty("uniqueid"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.uniqueid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgCStrike15Welcome message, length delimited. Does not implicitly {@link CMsgCStrike15Welcome.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {ICMsgCStrike15Welcome} message CMsgCStrike15Welcome message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgCStrike15Welcome.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgCStrike15Welcome message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgCStrike15Welcome} CMsgCStrike15Welcome
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCStrike15Welcome.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgCStrike15Welcome();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 5:
                    message.store_item_hash = reader.uint32();
                    break;
                case 6:
                    message.timeplayedconsecutively = reader.uint32();
                    break;
                case 10:
                    message.time_first_played = reader.uint32();
                    break;
                case 12:
                    message.last_time_played = reader.uint32();
                    break;
                case 13:
                    message.last_ip_address = reader.uint32();
                    break;
                case 18:
                    message.gscookieid = reader.uint64();
                    break;
                case 19:
                    message.uniqueid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgCStrike15Welcome message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgCStrike15Welcome} CMsgCStrike15Welcome
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgCStrike15Welcome.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgCStrike15Welcome message.
         * @function verify
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgCStrike15Welcome.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.store_item_hash != null && message.hasOwnProperty("store_item_hash"))
                if (!$util.isInteger(message.store_item_hash))
                    return "store_item_hash: integer expected";
            if (message.timeplayedconsecutively != null && message.hasOwnProperty("timeplayedconsecutively"))
                if (!$util.isInteger(message.timeplayedconsecutively))
                    return "timeplayedconsecutively: integer expected";
            if (message.time_first_played != null && message.hasOwnProperty("time_first_played"))
                if (!$util.isInteger(message.time_first_played))
                    return "time_first_played: integer expected";
            if (message.last_time_played != null && message.hasOwnProperty("last_time_played"))
                if (!$util.isInteger(message.last_time_played))
                    return "last_time_played: integer expected";
            if (message.last_ip_address != null && message.hasOwnProperty("last_ip_address"))
                if (!$util.isInteger(message.last_ip_address))
                    return "last_ip_address: integer expected";
            if (message.gscookieid != null && message.hasOwnProperty("gscookieid"))
                if (!$util.isInteger(message.gscookieid) && !(message.gscookieid && $util.isInteger(message.gscookieid.low) && $util.isInteger(message.gscookieid.high)))
                    return "gscookieid: integer|Long expected";
            if (message.uniqueid != null && message.hasOwnProperty("uniqueid"))
                if (!$util.isInteger(message.uniqueid) && !(message.uniqueid && $util.isInteger(message.uniqueid.low) && $util.isInteger(message.uniqueid.high)))
                    return "uniqueid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgCStrike15Welcome message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgCStrike15Welcome} CMsgCStrike15Welcome
         */
        CMsgCStrike15Welcome.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgCStrike15Welcome)
                return object;
            var message = new $root.CMsgCStrike15Welcome();
            if (object.store_item_hash != null)
                message.store_item_hash = object.store_item_hash >>> 0;
            if (object.timeplayedconsecutively != null)
                message.timeplayedconsecutively = object.timeplayedconsecutively >>> 0;
            if (object.time_first_played != null)
                message.time_first_played = object.time_first_played >>> 0;
            if (object.last_time_played != null)
                message.last_time_played = object.last_time_played >>> 0;
            if (object.last_ip_address != null)
                message.last_ip_address = object.last_ip_address >>> 0;
            if (object.gscookieid != null)
                if ($util.Long)
                    (message.gscookieid = $util.Long.fromValue(object.gscookieid)).unsigned = true;
                else if (typeof object.gscookieid === "string")
                    message.gscookieid = parseInt(object.gscookieid, 10);
                else if (typeof object.gscookieid === "number")
                    message.gscookieid = object.gscookieid;
                else if (typeof object.gscookieid === "object")
                    message.gscookieid = new $util.LongBits(object.gscookieid.low >>> 0, object.gscookieid.high >>> 0).toNumber(true);
            if (object.uniqueid != null)
                if ($util.Long)
                    (message.uniqueid = $util.Long.fromValue(object.uniqueid)).unsigned = true;
                else if (typeof object.uniqueid === "string")
                    message.uniqueid = parseInt(object.uniqueid, 10);
                else if (typeof object.uniqueid === "number")
                    message.uniqueid = object.uniqueid;
                else if (typeof object.uniqueid === "object")
                    message.uniqueid = new $util.LongBits(object.uniqueid.low >>> 0, object.uniqueid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgCStrike15Welcome message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgCStrike15Welcome
         * @static
         * @param {CMsgCStrike15Welcome} message CMsgCStrike15Welcome
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgCStrike15Welcome.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.store_item_hash = 0;
                object.timeplayedconsecutively = 0;
                object.time_first_played = 0;
                object.last_time_played = 0;
                object.last_ip_address = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.gscookieid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gscookieid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.uniqueid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.uniqueid = options.longs === String ? "0" : 0;
            }
            if (message.store_item_hash != null && message.hasOwnProperty("store_item_hash"))
                object.store_item_hash = message.store_item_hash;
            if (message.timeplayedconsecutively != null && message.hasOwnProperty("timeplayedconsecutively"))
                object.timeplayedconsecutively = message.timeplayedconsecutively;
            if (message.time_first_played != null && message.hasOwnProperty("time_first_played"))
                object.time_first_played = message.time_first_played;
            if (message.last_time_played != null && message.hasOwnProperty("last_time_played"))
                object.last_time_played = message.last_time_played;
            if (message.last_ip_address != null && message.hasOwnProperty("last_ip_address"))
                object.last_ip_address = message.last_ip_address;
            if (message.gscookieid != null && message.hasOwnProperty("gscookieid"))
                if (typeof message.gscookieid === "number")
                    object.gscookieid = options.longs === String ? String(message.gscookieid) : message.gscookieid;
                else
                    object.gscookieid = options.longs === String ? $util.Long.prototype.toString.call(message.gscookieid) : options.longs === Number ? new $util.LongBits(message.gscookieid.low >>> 0, message.gscookieid.high >>> 0).toNumber(true) : message.gscookieid;
            if (message.uniqueid != null && message.hasOwnProperty("uniqueid"))
                if (typeof message.uniqueid === "number")
                    object.uniqueid = options.longs === String ? String(message.uniqueid) : message.uniqueid;
                else
                    object.uniqueid = options.longs === String ? $util.Long.prototype.toString.call(message.uniqueid) : options.longs === Number ? new $util.LongBits(message.uniqueid.low >>> 0, message.uniqueid.high >>> 0).toNumber(true) : message.uniqueid;
            return object;
        };
    
        /**
         * Converts this CMsgCStrike15Welcome to JSON.
         * @function toJSON
         * @memberof CMsgCStrike15Welcome
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgCStrike15Welcome.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgCStrike15Welcome;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientVarValueNotificationInfo = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.
         * @exports ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @interface ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @property {string|null} [value_name] CMsgGCCStrike15_v2_ClientVarValueNotificationInfo value_name
         * @property {number|null} [value_int] CMsgGCCStrike15_v2_ClientVarValueNotificationInfo value_int
         * @property {number|null} [server_addr] CMsgGCCStrike15_v2_ClientVarValueNotificationInfo server_addr
         * @property {number|null} [server_port] CMsgGCCStrike15_v2_ClientVarValueNotificationInfo server_port
         * @property {Array.<string>|null} [choked_blocks] CMsgGCCStrike15_v2_ClientVarValueNotificationInfo choked_blocks
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.
         * @exports CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.
         * @implements ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(properties) {
            this.choked_blocks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientVarValueNotificationInfo value_name.
         * @member {string} value_name
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.value_name = "";
    
        /**
         * CMsgGCCStrike15_v2_ClientVarValueNotificationInfo value_int.
         * @member {number} value_int
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.value_int = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientVarValueNotificationInfo server_addr.
         * @member {number} server_addr
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.server_addr = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientVarValueNotificationInfo server_port.
         * @member {number} server_port
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.server_port = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientVarValueNotificationInfo choked_blocks.
         * @member {Array.<string>} choked_blocks
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.choked_blocks = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientVarValueNotificationInfo} CMsgGCCStrike15_v2_ClientVarValueNotificationInfo instance
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo} message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value_name != null && message.hasOwnProperty("value_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.value_name);
            if (message.value_int != null && message.hasOwnProperty("value_int"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.value_int);
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.server_addr);
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.server_port);
            if (message.choked_blocks != null && message.choked_blocks.length)
                for (var i = 0; i < message.choked_blocks.length; ++i)
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.choked_blocks[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientVarValueNotificationInfo} message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientVarValueNotificationInfo} CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value_name = reader.string();
                    break;
                case 2:
                    message.value_int = reader.int32();
                    break;
                case 3:
                    message.server_addr = reader.uint32();
                    break;
                case 4:
                    message.server_port = reader.uint32();
                    break;
                case 5:
                    if (!(message.choked_blocks && message.choked_blocks.length))
                        message.choked_blocks = [];
                    message.choked_blocks.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientVarValueNotificationInfo} CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value_name != null && message.hasOwnProperty("value_name"))
                if (!$util.isString(message.value_name))
                    return "value_name: string expected";
            if (message.value_int != null && message.hasOwnProperty("value_int"))
                if (!$util.isInteger(message.value_int))
                    return "value_int: integer expected";
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                if (!$util.isInteger(message.server_addr))
                    return "server_addr: integer expected";
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                if (!$util.isInteger(message.server_port))
                    return "server_port: integer expected";
            if (message.choked_blocks != null && message.hasOwnProperty("choked_blocks")) {
                if (!Array.isArray(message.choked_blocks))
                    return "choked_blocks: array expected";
                for (var i = 0; i < message.choked_blocks.length; ++i)
                    if (!$util.isString(message.choked_blocks[i]))
                        return "choked_blocks: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientVarValueNotificationInfo} CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
            if (object.value_name != null)
                message.value_name = String(object.value_name);
            if (object.value_int != null)
                message.value_int = object.value_int | 0;
            if (object.server_addr != null)
                message.server_addr = object.server_addr >>> 0;
            if (object.server_port != null)
                message.server_port = object.server_port >>> 0;
            if (object.choked_blocks) {
                if (!Array.isArray(object.choked_blocks))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks: array expected");
                message.choked_blocks = [];
                for (var i = 0; i < object.choked_blocks.length; ++i)
                    message.choked_blocks[i] = String(object.choked_blocks[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientVarValueNotificationInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @static
         * @param {CMsgGCCStrike15_v2_ClientVarValueNotificationInfo} message CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.choked_blocks = [];
            if (options.defaults) {
                object.value_name = "";
                object.value_int = 0;
                object.server_addr = 0;
                object.server_port = 0;
            }
            if (message.value_name != null && message.hasOwnProperty("value_name"))
                object.value_name = message.value_name;
            if (message.value_int != null && message.hasOwnProperty("value_int"))
                object.value_int = message.value_int;
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                object.server_addr = message.server_addr;
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                object.server_port = message.server_port;
            if (message.choked_blocks && message.choked_blocks.length) {
                object.choked_blocks = [];
                for (var j = 0; j < message.choked_blocks.length; ++j)
                    object.choked_blocks[j] = message.choked_blocks[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientVarValueNotificationInfo to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientVarValueNotificationInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientVarValueNotificationInfo;
    })();
    
    $root.CMsgGCCStrike15_v2_ServerVarValueNotificationInfo = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.
         * @exports ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @interface ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_ServerVarValueNotificationInfo accountid
         * @property {Array.<number>|null} [viewangles] CMsgGCCStrike15_v2_ServerVarValueNotificationInfo viewangles
         * @property {number|null} [type] CMsgGCCStrike15_v2_ServerVarValueNotificationInfo type
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.
         * @exports CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @classdesc Represents a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.
         * @implements ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(properties) {
            this.viewangles = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ServerVarValueNotificationInfo accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.prototype.accountid = 0;
    
        /**
         * CMsgGCCStrike15_v2_ServerVarValueNotificationInfo viewangles.
         * @member {Array.<number>} viewangles
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.prototype.viewangles = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_ServerVarValueNotificationInfo type.
         * @member {number} type
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @instance
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.prototype.type = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ServerVarValueNotificationInfo} CMsgGCCStrike15_v2_ServerVarValueNotificationInfo instance
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message. Does not implicitly {@link CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo} message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.viewangles != null && message.viewangles.length)
                for (var i = 0; i < message.viewangles.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.viewangles[i]);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.type);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_ServerVarValueNotificationInfo} message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ServerVarValueNotificationInfo} CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    if (!(message.viewangles && message.viewangles.length))
                        message.viewangles = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.viewangles.push(reader.uint32());
                    } else
                        message.viewangles.push(reader.uint32());
                    break;
                case 3:
                    message.type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ServerVarValueNotificationInfo} CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.viewangles != null && message.hasOwnProperty("viewangles")) {
                if (!Array.isArray(message.viewangles))
                    return "viewangles: array expected";
                for (var i = 0; i < message.viewangles.length; ++i)
                    if (!$util.isInteger(message.viewangles[i]))
                        return "viewangles: integer[] expected";
            }
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ServerVarValueNotificationInfo} CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.viewangles) {
                if (!Array.isArray(object.viewangles))
                    throw TypeError(".CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.viewangles: array expected");
                message.viewangles = [];
                for (var i = 0; i < object.viewangles.length; ++i)
                    message.viewangles[i] = object.viewangles[i] >>> 0;
            }
            if (object.type != null)
                message.type = object.type >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ServerVarValueNotificationInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @static
         * @param {CMsgGCCStrike15_v2_ServerVarValueNotificationInfo} message CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.viewangles = [];
            if (options.defaults) {
                object.accountid = 0;
                object.type = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.viewangles && message.viewangles.length) {
                object.viewangles = [];
                for (var j = 0; j < message.viewangles.length; ++j)
                    object.viewangles[j] = message.viewangles[j];
            }
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ServerVarValueNotificationInfo to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ServerVarValueNotificationInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ServerVarValueNotificationInfo;
    })();
    
    $root.CMsgGCCStrike15_v2_GiftsLeaderboardRequest = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GiftsLeaderboardRequest.
         * @exports ICMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @interface ICMsgGCCStrike15_v2_GiftsLeaderboardRequest
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GiftsLeaderboardRequest.
         * @exports CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @classdesc Represents a CMsgGCCStrike15_v2_GiftsLeaderboardRequest.
         * @implements ICMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardRequest=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GiftsLeaderboardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GiftsLeaderboardRequest instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardRequest=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardRequest} CMsgGCCStrike15_v2_GiftsLeaderboardRequest instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GiftsLeaderboardRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GiftsLeaderboardRequest message. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardRequest} message CMsgGCCStrike15_v2_GiftsLeaderboardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GiftsLeaderboardRequest message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardRequest} message CMsgGCCStrike15_v2_GiftsLeaderboardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GiftsLeaderboardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardRequest} CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GiftsLeaderboardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardRequest} CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GiftsLeaderboardRequest message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GiftsLeaderboardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardRequest} CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
                return object;
            return new $root.CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GiftsLeaderboardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @static
         * @param {CMsgGCCStrike15_v2_GiftsLeaderboardRequest} message CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GiftsLeaderboardRequest to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GiftsLeaderboardRequest;
    })();
    
    $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GiftsLeaderboardResponse.
         * @exports ICMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @interface ICMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @property {number|null} [servertime] CMsgGCCStrike15_v2_GiftsLeaderboardResponse servertime
         * @property {number|null} [time_period_seconds] CMsgGCCStrike15_v2_GiftsLeaderboardResponse time_period_seconds
         * @property {number|null} [total_gifts_given] CMsgGCCStrike15_v2_GiftsLeaderboardResponse total_gifts_given
         * @property {number|null} [total_givers] CMsgGCCStrike15_v2_GiftsLeaderboardResponse total_givers
         * @property {Array.<CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry>|null} [entries] CMsgGCCStrike15_v2_GiftsLeaderboardResponse entries
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GiftsLeaderboardResponse.
         * @exports CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @classdesc Represents a CMsgGCCStrike15_v2_GiftsLeaderboardResponse.
         * @implements ICMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardResponse=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GiftsLeaderboardResponse(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GiftsLeaderboardResponse servertime.
         * @member {number} servertime
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.servertime = 0;
    
        /**
         * CMsgGCCStrike15_v2_GiftsLeaderboardResponse time_period_seconds.
         * @member {number} time_period_seconds
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.time_period_seconds = 0;
    
        /**
         * CMsgGCCStrike15_v2_GiftsLeaderboardResponse total_gifts_given.
         * @member {number} total_gifts_given
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.total_gifts_given = 0;
    
        /**
         * CMsgGCCStrike15_v2_GiftsLeaderboardResponse total_givers.
         * @member {number} total_givers
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.total_givers = 0;
    
        /**
         * CMsgGCCStrike15_v2_GiftsLeaderboardResponse entries.
         * @member {Array.<CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry>} entries
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GiftsLeaderboardResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardResponse=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse} CMsgGCCStrike15_v2_GiftsLeaderboardResponse instance
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GiftsLeaderboardResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GiftsLeaderboardResponse message. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardResponse} message CMsgGCCStrike15_v2_GiftsLeaderboardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.servertime);
            if (message.time_period_seconds != null && message.hasOwnProperty("time_period_seconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time_period_seconds);
            if (message.total_gifts_given != null && message.hasOwnProperty("total_gifts_given"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.total_gifts_given);
            if (message.total_givers != null && message.hasOwnProperty("total_givers"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.total_givers);
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.encode(message.entries[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GiftsLeaderboardResponse message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {ICMsgGCCStrike15_v2_GiftsLeaderboardResponse} message CMsgGCCStrike15_v2_GiftsLeaderboardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GiftsLeaderboardResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse} CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.servertime = reader.uint32();
                    break;
                case 2:
                    message.time_period_seconds = reader.uint32();
                    break;
                case 3:
                    message.total_gifts_given = reader.uint32();
                    break;
                case 4:
                    message.total_givers = reader.uint32();
                    break;
                case 5:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GiftsLeaderboardResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse} CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GiftsLeaderboardResponse message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                if (!$util.isInteger(message.servertime))
                    return "servertime: integer expected";
            if (message.time_period_seconds != null && message.hasOwnProperty("time_period_seconds"))
                if (!$util.isInteger(message.time_period_seconds))
                    return "time_period_seconds: integer expected";
            if (message.total_gifts_given != null && message.hasOwnProperty("total_gifts_given"))
                if (!$util.isInteger(message.total_gifts_given))
                    return "total_gifts_given: integer expected";
            if (message.total_givers != null && message.hasOwnProperty("total_givers"))
                if (!$util.isInteger(message.total_givers))
                    return "total_givers: integer expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GiftsLeaderboardResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse} CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
            if (object.servertime != null)
                message.servertime = object.servertime >>> 0;
            if (object.time_period_seconds != null)
                message.time_period_seconds = object.time_period_seconds >>> 0;
            if (object.total_gifts_given != null)
                message.total_gifts_given = object.total_gifts_given >>> 0;
            if (object.total_givers != null)
                message.total_givers = object.total_givers >>> 0;
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_GiftsLeaderboardResponse.entries: object expected");
                    message.entries[i] = $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GiftsLeaderboardResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @static
         * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse} message CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (options.defaults) {
                object.servertime = 0;
                object.time_period_seconds = 0;
                object.total_gifts_given = 0;
                object.total_givers = 0;
            }
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                object.servertime = message.servertime;
            if (message.time_period_seconds != null && message.hasOwnProperty("time_period_seconds"))
                object.time_period_seconds = message.time_period_seconds;
            if (message.total_gifts_given != null && message.hasOwnProperty("total_gifts_given"))
                object.total_gifts_given = message.total_gifts_given;
            if (message.total_givers != null && message.hasOwnProperty("total_givers"))
                object.total_givers = message.total_givers;
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GiftsLeaderboardResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry = (function() {
    
            /**
             * Properties of a GiftLeaderboardEntry.
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
             * @interface IGiftLeaderboardEntry
             * @property {number|null} [accountid] GiftLeaderboardEntry accountid
             * @property {number|null} [gifts] GiftLeaderboardEntry gifts
             */
    
            /**
             * Constructs a new GiftLeaderboardEntry.
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse
             * @classdesc Represents a GiftLeaderboardEntry.
             * @implements IGiftLeaderboardEntry
             * @constructor
             * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry=} [properties] Properties to set
             */
            function GiftLeaderboardEntry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * GiftLeaderboardEntry accountid.
             * @member {number} accountid
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @instance
             */
            GiftLeaderboardEntry.prototype.accountid = 0;
    
            /**
             * GiftLeaderboardEntry gifts.
             * @member {number} gifts
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @instance
             */
            GiftLeaderboardEntry.prototype.gifts = 0;
    
            /**
             * Creates a new GiftLeaderboardEntry instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry} GiftLeaderboardEntry instance
             */
            GiftLeaderboardEntry.create = function create(properties) {
                return new GiftLeaderboardEntry(properties);
            };
    
            /**
             * Encodes the specified GiftLeaderboardEntry message. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry} message GiftLeaderboardEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiftLeaderboardEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
                if (message.gifts != null && message.hasOwnProperty("gifts"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gifts);
                return writer;
            };
    
            /**
             * Encodes the specified GiftLeaderboardEntry message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.IGiftLeaderboardEntry} message GiftLeaderboardEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GiftLeaderboardEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a GiftLeaderboardEntry message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry} GiftLeaderboardEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiftLeaderboardEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.accountid = reader.uint32();
                        break;
                    case 2:
                        message.gifts = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a GiftLeaderboardEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry} GiftLeaderboardEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GiftLeaderboardEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a GiftLeaderboardEntry message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GiftLeaderboardEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    if (!$util.isInteger(message.accountid))
                        return "accountid: integer expected";
                if (message.gifts != null && message.hasOwnProperty("gifts"))
                    if (!$util.isInteger(message.gifts))
                        return "gifts: integer expected";
                return null;
            };
    
            /**
             * Creates a GiftLeaderboardEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry} GiftLeaderboardEntry
             */
            GiftLeaderboardEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry();
                if (object.accountid != null)
                    message.accountid = object.accountid >>> 0;
                if (object.gifts != null)
                    message.gifts = object.gifts >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a GiftLeaderboardEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @static
             * @param {CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry} message GiftLeaderboardEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GiftLeaderboardEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accountid = 0;
                    object.gifts = 0;
                }
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    object.accountid = message.accountid;
                if (message.gifts != null && message.hasOwnProperty("gifts"))
                    object.gifts = message.gifts;
                return object;
            };
    
            /**
             * Converts this GiftLeaderboardEntry to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GiftLeaderboardEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return GiftLeaderboardEntry;
        })();
    
        return CMsgGCCStrike15_v2_GiftsLeaderboardResponse;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientSubmitSurveyVote = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientSubmitSurveyVote.
         * @exports ICMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @interface ICMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @property {number|null} [survey_id] CMsgGCCStrike15_v2_ClientSubmitSurveyVote survey_id
         * @property {number|null} [vote] CMsgGCCStrike15_v2_ClientSubmitSurveyVote vote
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientSubmitSurveyVote.
         * @exports CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientSubmitSurveyVote.
         * @implements ICMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientSubmitSurveyVote=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientSubmitSurveyVote(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientSubmitSurveyVote survey_id.
         * @member {number} survey_id
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @instance
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.prototype.survey_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientSubmitSurveyVote vote.
         * @member {number} vote
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @instance
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.prototype.vote = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientSubmitSurveyVote instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientSubmitSurveyVote=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientSubmitSurveyVote} CMsgGCCStrike15_v2_ClientSubmitSurveyVote instance
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientSubmitSurveyVote(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientSubmitSurveyVote message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientSubmitSurveyVote.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientSubmitSurveyVote} message CMsgGCCStrike15_v2_ClientSubmitSurveyVote message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.survey_id != null && message.hasOwnProperty("survey_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.survey_id);
            if (message.vote != null && message.hasOwnProperty("vote"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.vote);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientSubmitSurveyVote message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientSubmitSurveyVote.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientSubmitSurveyVote} message CMsgGCCStrike15_v2_ClientSubmitSurveyVote message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientSubmitSurveyVote message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientSubmitSurveyVote} CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.survey_id = reader.uint32();
                    break;
                case 2:
                    message.vote = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientSubmitSurveyVote message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientSubmitSurveyVote} CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientSubmitSurveyVote message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.survey_id != null && message.hasOwnProperty("survey_id"))
                if (!$util.isInteger(message.survey_id))
                    return "survey_id: integer expected";
            if (message.vote != null && message.hasOwnProperty("vote"))
                if (!$util.isInteger(message.vote))
                    return "vote: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientSubmitSurveyVote message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientSubmitSurveyVote} CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
            if (object.survey_id != null)
                message.survey_id = object.survey_id >>> 0;
            if (object.vote != null)
                message.vote = object.vote >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientSubmitSurveyVote message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @static
         * @param {CMsgGCCStrike15_v2_ClientSubmitSurveyVote} message CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.survey_id = 0;
                object.vote = 0;
            }
            if (message.survey_id != null && message.hasOwnProperty("survey_id"))
                object.survey_id = message.survey_id;
            if (message.vote != null && message.hasOwnProperty("vote"))
                object.vote = message.vote;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientSubmitSurveyVote to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientSubmitSurveyVote
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientSubmitSurveyVote;
    })();
    
    $root.CMsgGCCStrike15_v2_Server2GCClientValidate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Server2GCClientValidate.
         * @exports ICMsgGCCStrike15_v2_Server2GCClientValidate
         * @interface ICMsgGCCStrike15_v2_Server2GCClientValidate
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_Server2GCClientValidate accountid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Server2GCClientValidate.
         * @exports CMsgGCCStrike15_v2_Server2GCClientValidate
         * @classdesc Represents a CMsgGCCStrike15_v2_Server2GCClientValidate.
         * @implements ICMsgGCCStrike15_v2_Server2GCClientValidate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Server2GCClientValidate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Server2GCClientValidate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Server2GCClientValidate accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.prototype.accountid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Server2GCClientValidate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCClientValidate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Server2GCClientValidate} CMsgGCCStrike15_v2_Server2GCClientValidate instance
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Server2GCClientValidate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Server2GCClientValidate message. Does not implicitly {@link CMsgGCCStrike15_v2_Server2GCClientValidate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCClientValidate} message CMsgGCCStrike15_v2_Server2GCClientValidate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Server2GCClientValidate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Server2GCClientValidate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCClientValidate} message CMsgGCCStrike15_v2_Server2GCClientValidate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Server2GCClientValidate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Server2GCClientValidate} CMsgGCCStrike15_v2_Server2GCClientValidate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Server2GCClientValidate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Server2GCClientValidate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Server2GCClientValidate} CMsgGCCStrike15_v2_Server2GCClientValidate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Server2GCClientValidate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Server2GCClientValidate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Server2GCClientValidate} CMsgGCCStrike15_v2_Server2GCClientValidate
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Server2GCClientValidate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Server2GCClientValidate();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Server2GCClientValidate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @static
         * @param {CMsgGCCStrike15_v2_Server2GCClientValidate} message CMsgGCCStrike15_v2_Server2GCClientValidate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.accountid = 0;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Server2GCClientValidate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Server2GCClientValidate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Server2GCClientValidate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Server2GCClientValidate;
    })();
    
    $root.CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.
         * @exports ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @interface ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure accountid
         * @property {string|null} [path] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure path
         * @property {string|null} [file] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure file
         * @property {number|null} [crc] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure crc
         * @property {number|null} [hash] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure hash
         * @property {number|null} [len] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure len
         * @property {number|null} [pack_number] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure pack_number
         * @property {number|null} [pack_file_id] CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure pack_file_id
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.
         * @exports CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @classdesc Represents a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.
         * @implements ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.accountid = 0;
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure path.
         * @member {string} path
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.path = "";
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure file.
         * @member {string} file
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.file = "";
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure crc.
         * @member {number} crc
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.crc = 0;
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure hash.
         * @member {number} hash
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.hash = 0;
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure len.
         * @member {number} len
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.len = 0;
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure pack_number.
         * @member {number} pack_number
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.pack_number = 0;
    
        /**
         * CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure pack_file_id.
         * @member {number} pack_file_id
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.pack_file_id = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure instance
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message. Does not implicitly {@link CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} message CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.path != null && message.hasOwnProperty("path"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
            if (message.file != null && message.hasOwnProperty("file"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.file);
            if (message.crc != null && message.hasOwnProperty("crc"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.crc);
            if (message.hash != null && message.hasOwnProperty("hash"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.hash);
            if (message.len != null && message.hasOwnProperty("len"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.len);
            if (message.pack_number != null && message.hasOwnProperty("pack_number"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.pack_number);
            if (message.pack_file_id != null && message.hasOwnProperty("pack_file_id"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pack_file_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {ICMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} message CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.path = reader.string();
                    break;
                case 3:
                    message.file = reader.string();
                    break;
                case 4:
                    message.crc = reader.uint32();
                    break;
                case 5:
                    message.hash = reader.int32();
                    break;
                case 6:
                    message.len = reader.int32();
                    break;
                case 7:
                    message.pack_number = reader.int32();
                    break;
                case 8:
                    message.pack_file_id = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.path != null && message.hasOwnProperty("path"))
                if (!$util.isString(message.path))
                    return "path: string expected";
            if (message.file != null && message.hasOwnProperty("file"))
                if (!$util.isString(message.file))
                    return "file: string expected";
            if (message.crc != null && message.hasOwnProperty("crc"))
                if (!$util.isInteger(message.crc))
                    return "crc: integer expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                if (!$util.isInteger(message.hash))
                    return "hash: integer expected";
            if (message.len != null && message.hasOwnProperty("len"))
                if (!$util.isInteger(message.len))
                    return "len: integer expected";
            if (message.pack_number != null && message.hasOwnProperty("pack_number"))
                if (!$util.isInteger(message.pack_number))
                    return "pack_number: integer expected";
            if (message.pack_file_id != null && message.hasOwnProperty("pack_file_id"))
                if (!$util.isInteger(message.pack_file_id))
                    return "pack_file_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.path != null)
                message.path = String(object.path);
            if (object.file != null)
                message.file = String(object.file);
            if (object.crc != null)
                message.crc = object.crc >>> 0;
            if (object.hash != null)
                message.hash = object.hash | 0;
            if (object.len != null)
                message.len = object.len | 0;
            if (object.pack_number != null)
                message.pack_number = object.pack_number | 0;
            if (object.pack_file_id != null)
                message.pack_file_id = object.pack_file_id | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @static
         * @param {CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure} message CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.path = "";
                object.file = "";
                object.crc = 0;
                object.hash = 0;
                object.len = 0;
                object.pack_number = 0;
                object.pack_file_id = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
            if (message.file != null && message.hasOwnProperty("file"))
                object.file = message.file;
            if (message.crc != null && message.hasOwnProperty("crc"))
                object.crc = message.crc;
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = message.hash;
            if (message.len != null && message.hasOwnProperty("len"))
                object.len = message.len;
            if (message.pack_number != null && message.hasOwnProperty("pack_number"))
                object.pack_number = message.pack_number;
            if (message.pack_file_id != null && message.hasOwnProperty("pack_file_id"))
                object.pack_file_id = message.pack_file_id;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure;
    })();
    
    $root.CMsgGCCStrike15_v2_GC2ClientTournamentInfo = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GC2ClientTournamentInfo.
         * @exports ICMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @interface ICMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @property {number|null} [eventid] CMsgGCCStrike15_v2_GC2ClientTournamentInfo eventid
         * @property {number|null} [stageid] CMsgGCCStrike15_v2_GC2ClientTournamentInfo stageid
         * @property {number|null} [game_type] CMsgGCCStrike15_v2_GC2ClientTournamentInfo game_type
         * @property {Array.<number>|null} [teamids] CMsgGCCStrike15_v2_GC2ClientTournamentInfo teamids
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GC2ClientTournamentInfo.
         * @exports CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @classdesc Represents a CMsgGCCStrike15_v2_GC2ClientTournamentInfo.
         * @implements ICMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GC2ClientTournamentInfo=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GC2ClientTournamentInfo(properties) {
            this.teamids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTournamentInfo eventid.
         * @member {number} eventid
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.prototype.eventid = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTournamentInfo stageid.
         * @member {number} stageid
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.prototype.stageid = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTournamentInfo game_type.
         * @member {number} game_type
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.prototype.game_type = 0;
    
        /**
         * CMsgGCCStrike15_v2_GC2ClientTournamentInfo teamids.
         * @member {Array.<number>} teamids
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @instance
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.prototype.teamids = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GC2ClientTournamentInfo instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTournamentInfo=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GC2ClientTournamentInfo} CMsgGCCStrike15_v2_GC2ClientTournamentInfo instance
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GC2ClientTournamentInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ClientTournamentInfo message. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ClientTournamentInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTournamentInfo} message CMsgGCCStrike15_v2_GC2ClientTournamentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eventid);
            if (message.stageid != null && message.hasOwnProperty("stageid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.stageid);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.game_type);
            if (message.teamids != null && message.teamids.length)
                for (var i = 0; i < message.teamids.length; ++i)
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.teamids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GC2ClientTournamentInfo message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GC2ClientTournamentInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {ICMsgGCCStrike15_v2_GC2ClientTournamentInfo} message CMsgGCCStrike15_v2_GC2ClientTournamentInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ClientTournamentInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GC2ClientTournamentInfo} CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventid = reader.uint32();
                    break;
                case 2:
                    message.stageid = reader.uint32();
                    break;
                case 3:
                    message.game_type = reader.uint32();
                    break;
                case 4:
                    if (!(message.teamids && message.teamids.length))
                        message.teamids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.teamids.push(reader.uint32());
                    } else
                        message.teamids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GC2ClientTournamentInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GC2ClientTournamentInfo} CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GC2ClientTournamentInfo message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (!$util.isInteger(message.eventid))
                    return "eventid: integer expected";
            if (message.stageid != null && message.hasOwnProperty("stageid"))
                if (!$util.isInteger(message.stageid))
                    return "stageid: integer expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            if (message.teamids != null && message.hasOwnProperty("teamids")) {
                if (!Array.isArray(message.teamids))
                    return "teamids: array expected";
                for (var i = 0; i < message.teamids.length; ++i)
                    if (!$util.isInteger(message.teamids[i]))
                        return "teamids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GC2ClientTournamentInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GC2ClientTournamentInfo} CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GC2ClientTournamentInfo();
            if (object.eventid != null)
                message.eventid = object.eventid >>> 0;
            if (object.stageid != null)
                message.stageid = object.stageid >>> 0;
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            if (object.teamids) {
                if (!Array.isArray(object.teamids))
                    throw TypeError(".CMsgGCCStrike15_v2_GC2ClientTournamentInfo.teamids: array expected");
                message.teamids = [];
                for (var i = 0; i < object.teamids.length; ++i)
                    message.teamids[i] = object.teamids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GC2ClientTournamentInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @static
         * @param {CMsgGCCStrike15_v2_GC2ClientTournamentInfo} message CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.teamids = [];
            if (options.defaults) {
                object.eventid = 0;
                object.stageid = 0;
                object.game_type = 0;
            }
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                object.eventid = message.eventid;
            if (message.stageid != null && message.hasOwnProperty("stageid"))
                object.stageid = message.stageid;
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            if (message.teamids && message.teamids.length) {
                object.teamids = [];
                for (var j = 0; j < message.teamids.length; ++j)
                    object.teamids[j] = message.teamids[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GC2ClientTournamentInfo to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GC2ClientTournamentInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GC2ClientTournamentInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GC2ClientTournamentInfo;
    })();
    
    $root.CSOEconCoupon = (function() {
    
        /**
         * Properties of a CSOEconCoupon.
         * @exports ICSOEconCoupon
         * @interface ICSOEconCoupon
         * @property {number|null} [entryid] CSOEconCoupon entryid
         * @property {number|null} [defidx] CSOEconCoupon defidx
         * @property {number|null} [expiration_date] CSOEconCoupon expiration_date
         */
    
        /**
         * Constructs a new CSOEconCoupon.
         * @exports CSOEconCoupon
         * @classdesc Represents a CSOEconCoupon.
         * @implements ICSOEconCoupon
         * @constructor
         * @param {ICSOEconCoupon=} [properties] Properties to set
         */
        function CSOEconCoupon(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSOEconCoupon entryid.
         * @member {number} entryid
         * @memberof CSOEconCoupon
         * @instance
         */
        CSOEconCoupon.prototype.entryid = 0;
    
        /**
         * CSOEconCoupon defidx.
         * @member {number} defidx
         * @memberof CSOEconCoupon
         * @instance
         */
        CSOEconCoupon.prototype.defidx = 0;
    
        /**
         * CSOEconCoupon expiration_date.
         * @member {number} expiration_date
         * @memberof CSOEconCoupon
         * @instance
         */
        CSOEconCoupon.prototype.expiration_date = 0;
    
        /**
         * Creates a new CSOEconCoupon instance using the specified properties.
         * @function create
         * @memberof CSOEconCoupon
         * @static
         * @param {ICSOEconCoupon=} [properties] Properties to set
         * @returns {CSOEconCoupon} CSOEconCoupon instance
         */
        CSOEconCoupon.create = function create(properties) {
            return new CSOEconCoupon(properties);
        };
    
        /**
         * Encodes the specified CSOEconCoupon message. Does not implicitly {@link CSOEconCoupon.verify|verify} messages.
         * @function encode
         * @memberof CSOEconCoupon
         * @static
         * @param {ICSOEconCoupon} message CSOEconCoupon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOEconCoupon.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entryid != null && message.hasOwnProperty("entryid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.entryid);
            if (message.defidx != null && message.hasOwnProperty("defidx"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.defidx);
            if (message.expiration_date != null && message.hasOwnProperty("expiration_date"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.expiration_date);
            return writer;
        };
    
        /**
         * Encodes the specified CSOEconCoupon message, length delimited. Does not implicitly {@link CSOEconCoupon.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSOEconCoupon
         * @static
         * @param {ICSOEconCoupon} message CSOEconCoupon message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOEconCoupon.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSOEconCoupon message from the specified reader or buffer.
         * @function decode
         * @memberof CSOEconCoupon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSOEconCoupon} CSOEconCoupon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOEconCoupon.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSOEconCoupon();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entryid = reader.uint32();
                    break;
                case 2:
                    message.defidx = reader.uint32();
                    break;
                case 3:
                    message.expiration_date = reader.fixed32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSOEconCoupon message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSOEconCoupon
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSOEconCoupon} CSOEconCoupon
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOEconCoupon.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSOEconCoupon message.
         * @function verify
         * @memberof CSOEconCoupon
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSOEconCoupon.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entryid != null && message.hasOwnProperty("entryid"))
                if (!$util.isInteger(message.entryid))
                    return "entryid: integer expected";
            if (message.defidx != null && message.hasOwnProperty("defidx"))
                if (!$util.isInteger(message.defidx))
                    return "defidx: integer expected";
            if (message.expiration_date != null && message.hasOwnProperty("expiration_date"))
                if (!$util.isInteger(message.expiration_date))
                    return "expiration_date: integer expected";
            return null;
        };
    
        /**
         * Creates a CSOEconCoupon message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSOEconCoupon
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSOEconCoupon} CSOEconCoupon
         */
        CSOEconCoupon.fromObject = function fromObject(object) {
            if (object instanceof $root.CSOEconCoupon)
                return object;
            var message = new $root.CSOEconCoupon();
            if (object.entryid != null)
                message.entryid = object.entryid >>> 0;
            if (object.defidx != null)
                message.defidx = object.defidx >>> 0;
            if (object.expiration_date != null)
                message.expiration_date = object.expiration_date >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSOEconCoupon message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSOEconCoupon
         * @static
         * @param {CSOEconCoupon} message CSOEconCoupon
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSOEconCoupon.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entryid = 0;
                object.defidx = 0;
                object.expiration_date = 0;
            }
            if (message.entryid != null && message.hasOwnProperty("entryid"))
                object.entryid = message.entryid;
            if (message.defidx != null && message.hasOwnProperty("defidx"))
                object.defidx = message.defidx;
            if (message.expiration_date != null && message.hasOwnProperty("expiration_date"))
                object.expiration_date = message.expiration_date;
            return object;
        };
    
        /**
         * Converts this CSOEconCoupon to JSON.
         * @function toJSON
         * @memberof CSOEconCoupon
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSOEconCoupon.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSOEconCoupon;
    })();
    
    $root.CSOQuestProgress = (function() {
    
        /**
         * Properties of a CSOQuestProgress.
         * @exports ICSOQuestProgress
         * @interface ICSOQuestProgress
         * @property {number|null} [questid] CSOQuestProgress questid
         * @property {number|null} [points_remaining] CSOQuestProgress points_remaining
         * @property {number|null} [bonus_points] CSOQuestProgress bonus_points
         */
    
        /**
         * Constructs a new CSOQuestProgress.
         * @exports CSOQuestProgress
         * @classdesc Represents a CSOQuestProgress.
         * @implements ICSOQuestProgress
         * @constructor
         * @param {ICSOQuestProgress=} [properties] Properties to set
         */
        function CSOQuestProgress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSOQuestProgress questid.
         * @member {number} questid
         * @memberof CSOQuestProgress
         * @instance
         */
        CSOQuestProgress.prototype.questid = 0;
    
        /**
         * CSOQuestProgress points_remaining.
         * @member {number} points_remaining
         * @memberof CSOQuestProgress
         * @instance
         */
        CSOQuestProgress.prototype.points_remaining = 0;
    
        /**
         * CSOQuestProgress bonus_points.
         * @member {number} bonus_points
         * @memberof CSOQuestProgress
         * @instance
         */
        CSOQuestProgress.prototype.bonus_points = 0;
    
        /**
         * Creates a new CSOQuestProgress instance using the specified properties.
         * @function create
         * @memberof CSOQuestProgress
         * @static
         * @param {ICSOQuestProgress=} [properties] Properties to set
         * @returns {CSOQuestProgress} CSOQuestProgress instance
         */
        CSOQuestProgress.create = function create(properties) {
            return new CSOQuestProgress(properties);
        };
    
        /**
         * Encodes the specified CSOQuestProgress message. Does not implicitly {@link CSOQuestProgress.verify|verify} messages.
         * @function encode
         * @memberof CSOQuestProgress
         * @static
         * @param {ICSOQuestProgress} message CSOQuestProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOQuestProgress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.questid != null && message.hasOwnProperty("questid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.questid);
            if (message.points_remaining != null && message.hasOwnProperty("points_remaining"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.points_remaining);
            if (message.bonus_points != null && message.hasOwnProperty("bonus_points"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bonus_points);
            return writer;
        };
    
        /**
         * Encodes the specified CSOQuestProgress message, length delimited. Does not implicitly {@link CSOQuestProgress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSOQuestProgress
         * @static
         * @param {ICSOQuestProgress} message CSOQuestProgress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOQuestProgress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSOQuestProgress message from the specified reader or buffer.
         * @function decode
         * @memberof CSOQuestProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSOQuestProgress} CSOQuestProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOQuestProgress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSOQuestProgress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.questid = reader.uint32();
                    break;
                case 2:
                    message.points_remaining = reader.uint32();
                    break;
                case 3:
                    message.bonus_points = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSOQuestProgress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSOQuestProgress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSOQuestProgress} CSOQuestProgress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOQuestProgress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSOQuestProgress message.
         * @function verify
         * @memberof CSOQuestProgress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSOQuestProgress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.questid != null && message.hasOwnProperty("questid"))
                if (!$util.isInteger(message.questid))
                    return "questid: integer expected";
            if (message.points_remaining != null && message.hasOwnProperty("points_remaining"))
                if (!$util.isInteger(message.points_remaining))
                    return "points_remaining: integer expected";
            if (message.bonus_points != null && message.hasOwnProperty("bonus_points"))
                if (!$util.isInteger(message.bonus_points))
                    return "bonus_points: integer expected";
            return null;
        };
    
        /**
         * Creates a CSOQuestProgress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSOQuestProgress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSOQuestProgress} CSOQuestProgress
         */
        CSOQuestProgress.fromObject = function fromObject(object) {
            if (object instanceof $root.CSOQuestProgress)
                return object;
            var message = new $root.CSOQuestProgress();
            if (object.questid != null)
                message.questid = object.questid >>> 0;
            if (object.points_remaining != null)
                message.points_remaining = object.points_remaining >>> 0;
            if (object.bonus_points != null)
                message.bonus_points = object.bonus_points >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSOQuestProgress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSOQuestProgress
         * @static
         * @param {CSOQuestProgress} message CSOQuestProgress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSOQuestProgress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.questid = 0;
                object.points_remaining = 0;
                object.bonus_points = 0;
            }
            if (message.questid != null && message.hasOwnProperty("questid"))
                object.questid = message.questid;
            if (message.points_remaining != null && message.hasOwnProperty("points_remaining"))
                object.points_remaining = message.points_remaining;
            if (message.bonus_points != null && message.hasOwnProperty("bonus_points"))
                object.bonus_points = message.bonus_points;
            return object;
        };
    
        /**
         * Converts this CSOQuestProgress to JSON.
         * @function toJSON
         * @memberof CSOQuestProgress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSOQuestProgress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSOQuestProgress;
    })();
    
    $root.CSOAccountSeasonalOperation = (function() {
    
        /**
         * Properties of a CSOAccountSeasonalOperation.
         * @exports ICSOAccountSeasonalOperation
         * @interface ICSOAccountSeasonalOperation
         * @property {number|null} [season_value] CSOAccountSeasonalOperation season_value
         * @property {number|null} [tier_unlocked] CSOAccountSeasonalOperation tier_unlocked
         * @property {number|null} [premium_tiers] CSOAccountSeasonalOperation premium_tiers
         * @property {number|null} [mission_id] CSOAccountSeasonalOperation mission_id
         * @property {number|null} [missions_completed] CSOAccountSeasonalOperation missions_completed
         */
    
        /**
         * Constructs a new CSOAccountSeasonalOperation.
         * @exports CSOAccountSeasonalOperation
         * @classdesc Represents a CSOAccountSeasonalOperation.
         * @implements ICSOAccountSeasonalOperation
         * @constructor
         * @param {ICSOAccountSeasonalOperation=} [properties] Properties to set
         */
        function CSOAccountSeasonalOperation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSOAccountSeasonalOperation season_value.
         * @member {number} season_value
         * @memberof CSOAccountSeasonalOperation
         * @instance
         */
        CSOAccountSeasonalOperation.prototype.season_value = 0;
    
        /**
         * CSOAccountSeasonalOperation tier_unlocked.
         * @member {number} tier_unlocked
         * @memberof CSOAccountSeasonalOperation
         * @instance
         */
        CSOAccountSeasonalOperation.prototype.tier_unlocked = 0;
    
        /**
         * CSOAccountSeasonalOperation premium_tiers.
         * @member {number} premium_tiers
         * @memberof CSOAccountSeasonalOperation
         * @instance
         */
        CSOAccountSeasonalOperation.prototype.premium_tiers = 0;
    
        /**
         * CSOAccountSeasonalOperation mission_id.
         * @member {number} mission_id
         * @memberof CSOAccountSeasonalOperation
         * @instance
         */
        CSOAccountSeasonalOperation.prototype.mission_id = 0;
    
        /**
         * CSOAccountSeasonalOperation missions_completed.
         * @member {number} missions_completed
         * @memberof CSOAccountSeasonalOperation
         * @instance
         */
        CSOAccountSeasonalOperation.prototype.missions_completed = 0;
    
        /**
         * Creates a new CSOAccountSeasonalOperation instance using the specified properties.
         * @function create
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {ICSOAccountSeasonalOperation=} [properties] Properties to set
         * @returns {CSOAccountSeasonalOperation} CSOAccountSeasonalOperation instance
         */
        CSOAccountSeasonalOperation.create = function create(properties) {
            return new CSOAccountSeasonalOperation(properties);
        };
    
        /**
         * Encodes the specified CSOAccountSeasonalOperation message. Does not implicitly {@link CSOAccountSeasonalOperation.verify|verify} messages.
         * @function encode
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {ICSOAccountSeasonalOperation} message CSOAccountSeasonalOperation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOAccountSeasonalOperation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.season_value != null && message.hasOwnProperty("season_value"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.season_value);
            if (message.tier_unlocked != null && message.hasOwnProperty("tier_unlocked"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tier_unlocked);
            if (message.premium_tiers != null && message.hasOwnProperty("premium_tiers"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.premium_tiers);
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mission_id);
            if (message.missions_completed != null && message.hasOwnProperty("missions_completed"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.missions_completed);
            return writer;
        };
    
        /**
         * Encodes the specified CSOAccountSeasonalOperation message, length delimited. Does not implicitly {@link CSOAccountSeasonalOperation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {ICSOAccountSeasonalOperation} message CSOAccountSeasonalOperation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOAccountSeasonalOperation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSOAccountSeasonalOperation message from the specified reader or buffer.
         * @function decode
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSOAccountSeasonalOperation} CSOAccountSeasonalOperation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOAccountSeasonalOperation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSOAccountSeasonalOperation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.season_value = reader.uint32();
                    break;
                case 2:
                    message.tier_unlocked = reader.uint32();
                    break;
                case 3:
                    message.premium_tiers = reader.uint32();
                    break;
                case 4:
                    message.mission_id = reader.uint32();
                    break;
                case 5:
                    message.missions_completed = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSOAccountSeasonalOperation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSOAccountSeasonalOperation} CSOAccountSeasonalOperation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOAccountSeasonalOperation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSOAccountSeasonalOperation message.
         * @function verify
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSOAccountSeasonalOperation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.season_value != null && message.hasOwnProperty("season_value"))
                if (!$util.isInteger(message.season_value))
                    return "season_value: integer expected";
            if (message.tier_unlocked != null && message.hasOwnProperty("tier_unlocked"))
                if (!$util.isInteger(message.tier_unlocked))
                    return "tier_unlocked: integer expected";
            if (message.premium_tiers != null && message.hasOwnProperty("premium_tiers"))
                if (!$util.isInteger(message.premium_tiers))
                    return "premium_tiers: integer expected";
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                if (!$util.isInteger(message.mission_id))
                    return "mission_id: integer expected";
            if (message.missions_completed != null && message.hasOwnProperty("missions_completed"))
                if (!$util.isInteger(message.missions_completed))
                    return "missions_completed: integer expected";
            return null;
        };
    
        /**
         * Creates a CSOAccountSeasonalOperation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSOAccountSeasonalOperation} CSOAccountSeasonalOperation
         */
        CSOAccountSeasonalOperation.fromObject = function fromObject(object) {
            if (object instanceof $root.CSOAccountSeasonalOperation)
                return object;
            var message = new $root.CSOAccountSeasonalOperation();
            if (object.season_value != null)
                message.season_value = object.season_value >>> 0;
            if (object.tier_unlocked != null)
                message.tier_unlocked = object.tier_unlocked >>> 0;
            if (object.premium_tiers != null)
                message.premium_tiers = object.premium_tiers >>> 0;
            if (object.mission_id != null)
                message.mission_id = object.mission_id >>> 0;
            if (object.missions_completed != null)
                message.missions_completed = object.missions_completed >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CSOAccountSeasonalOperation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSOAccountSeasonalOperation
         * @static
         * @param {CSOAccountSeasonalOperation} message CSOAccountSeasonalOperation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSOAccountSeasonalOperation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.season_value = 0;
                object.tier_unlocked = 0;
                object.premium_tiers = 0;
                object.mission_id = 0;
                object.missions_completed = 0;
            }
            if (message.season_value != null && message.hasOwnProperty("season_value"))
                object.season_value = message.season_value;
            if (message.tier_unlocked != null && message.hasOwnProperty("tier_unlocked"))
                object.tier_unlocked = message.tier_unlocked;
            if (message.premium_tiers != null && message.hasOwnProperty("premium_tiers"))
                object.premium_tiers = message.premium_tiers;
            if (message.mission_id != null && message.hasOwnProperty("mission_id"))
                object.mission_id = message.mission_id;
            if (message.missions_completed != null && message.hasOwnProperty("missions_completed"))
                object.missions_completed = message.missions_completed;
            return object;
        };
    
        /**
         * Converts this CSOAccountSeasonalOperation to JSON.
         * @function toJSON
         * @memberof CSOAccountSeasonalOperation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSOAccountSeasonalOperation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSOAccountSeasonalOperation;
    })();
    
    $root.CSOPersonaDataPublic = (function() {
    
        /**
         * Properties of a CSOPersonaDataPublic.
         * @exports ICSOPersonaDataPublic
         * @interface ICSOPersonaDataPublic
         * @property {number|null} [player_level] CSOPersonaDataPublic player_level
         * @property {IPlayerCommendationInfo|null} [commendation] CSOPersonaDataPublic commendation
         * @property {boolean|null} [elevated_state] CSOPersonaDataPublic elevated_state
         */
    
        /**
         * Constructs a new CSOPersonaDataPublic.
         * @exports CSOPersonaDataPublic
         * @classdesc Represents a CSOPersonaDataPublic.
         * @implements ICSOPersonaDataPublic
         * @constructor
         * @param {ICSOPersonaDataPublic=} [properties] Properties to set
         */
        function CSOPersonaDataPublic(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CSOPersonaDataPublic player_level.
         * @member {number} player_level
         * @memberof CSOPersonaDataPublic
         * @instance
         */
        CSOPersonaDataPublic.prototype.player_level = 0;
    
        /**
         * CSOPersonaDataPublic commendation.
         * @member {IPlayerCommendationInfo|null|undefined} commendation
         * @memberof CSOPersonaDataPublic
         * @instance
         */
        CSOPersonaDataPublic.prototype.commendation = null;
    
        /**
         * CSOPersonaDataPublic elevated_state.
         * @member {boolean} elevated_state
         * @memberof CSOPersonaDataPublic
         * @instance
         */
        CSOPersonaDataPublic.prototype.elevated_state = false;
    
        /**
         * Creates a new CSOPersonaDataPublic instance using the specified properties.
         * @function create
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {ICSOPersonaDataPublic=} [properties] Properties to set
         * @returns {CSOPersonaDataPublic} CSOPersonaDataPublic instance
         */
        CSOPersonaDataPublic.create = function create(properties) {
            return new CSOPersonaDataPublic(properties);
        };
    
        /**
         * Encodes the specified CSOPersonaDataPublic message. Does not implicitly {@link CSOPersonaDataPublic.verify|verify} messages.
         * @function encode
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {ICSOPersonaDataPublic} message CSOPersonaDataPublic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOPersonaDataPublic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.player_level);
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                $root.PlayerCommendationInfo.encode(message.commendation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.elevated_state != null && message.hasOwnProperty("elevated_state"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.elevated_state);
            return writer;
        };
    
        /**
         * Encodes the specified CSOPersonaDataPublic message, length delimited. Does not implicitly {@link CSOPersonaDataPublic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {ICSOPersonaDataPublic} message CSOPersonaDataPublic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CSOPersonaDataPublic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CSOPersonaDataPublic message from the specified reader or buffer.
         * @function decode
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CSOPersonaDataPublic} CSOPersonaDataPublic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOPersonaDataPublic.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CSOPersonaDataPublic();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.player_level = reader.int32();
                    break;
                case 2:
                    message.commendation = $root.PlayerCommendationInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.elevated_state = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CSOPersonaDataPublic message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CSOPersonaDataPublic} CSOPersonaDataPublic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CSOPersonaDataPublic.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CSOPersonaDataPublic message.
         * @function verify
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CSOPersonaDataPublic.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                if (!$util.isInteger(message.player_level))
                    return "player_level: integer expected";
            if (message.commendation != null && message.hasOwnProperty("commendation")) {
                var error = $root.PlayerCommendationInfo.verify(message.commendation);
                if (error)
                    return "commendation." + error;
            }
            if (message.elevated_state != null && message.hasOwnProperty("elevated_state"))
                if (typeof message.elevated_state !== "boolean")
                    return "elevated_state: boolean expected";
            return null;
        };
    
        /**
         * Creates a CSOPersonaDataPublic message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CSOPersonaDataPublic} CSOPersonaDataPublic
         */
        CSOPersonaDataPublic.fromObject = function fromObject(object) {
            if (object instanceof $root.CSOPersonaDataPublic)
                return object;
            var message = new $root.CSOPersonaDataPublic();
            if (object.player_level != null)
                message.player_level = object.player_level | 0;
            if (object.commendation != null) {
                if (typeof object.commendation !== "object")
                    throw TypeError(".CSOPersonaDataPublic.commendation: object expected");
                message.commendation = $root.PlayerCommendationInfo.fromObject(object.commendation);
            }
            if (object.elevated_state != null)
                message.elevated_state = Boolean(object.elevated_state);
            return message;
        };
    
        /**
         * Creates a plain object from a CSOPersonaDataPublic message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CSOPersonaDataPublic
         * @static
         * @param {CSOPersonaDataPublic} message CSOPersonaDataPublic
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CSOPersonaDataPublic.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.player_level = 0;
                object.commendation = null;
                object.elevated_state = false;
            }
            if (message.player_level != null && message.hasOwnProperty("player_level"))
                object.player_level = message.player_level;
            if (message.commendation != null && message.hasOwnProperty("commendation"))
                object.commendation = $root.PlayerCommendationInfo.toObject(message.commendation, options);
            if (message.elevated_state != null && message.hasOwnProperty("elevated_state"))
                object.elevated_state = message.elevated_state;
            return object;
        };
    
        /**
         * Converts this CSOPersonaDataPublic to JSON.
         * @function toJSON
         * @memberof CSOPersonaDataPublic
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CSOPersonaDataPublic.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CSOPersonaDataPublic;
    })();
    
    $root.CMsgGC_GlobalGame_Subscribe = (function() {
    
        /**
         * Properties of a CMsgGC_GlobalGame_Subscribe.
         * @exports ICMsgGC_GlobalGame_Subscribe
         * @interface ICMsgGC_GlobalGame_Subscribe
         * @property {number|Long|null} [ticket] CMsgGC_GlobalGame_Subscribe ticket
         */
    
        /**
         * Constructs a new CMsgGC_GlobalGame_Subscribe.
         * @exports CMsgGC_GlobalGame_Subscribe
         * @classdesc Represents a CMsgGC_GlobalGame_Subscribe.
         * @implements ICMsgGC_GlobalGame_Subscribe
         * @constructor
         * @param {ICMsgGC_GlobalGame_Subscribe=} [properties] Properties to set
         */
        function CMsgGC_GlobalGame_Subscribe(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGC_GlobalGame_Subscribe ticket.
         * @member {number|Long} ticket
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @instance
         */
        CMsgGC_GlobalGame_Subscribe.prototype.ticket = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGC_GlobalGame_Subscribe instance using the specified properties.
         * @function create
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Subscribe=} [properties] Properties to set
         * @returns {CMsgGC_GlobalGame_Subscribe} CMsgGC_GlobalGame_Subscribe instance
         */
        CMsgGC_GlobalGame_Subscribe.create = function create(properties) {
            return new CMsgGC_GlobalGame_Subscribe(properties);
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Subscribe message. Does not implicitly {@link CMsgGC_GlobalGame_Subscribe.verify|verify} messages.
         * @function encode
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Subscribe} message CMsgGC_GlobalGame_Subscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Subscribe.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ticket);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Subscribe message, length delimited. Does not implicitly {@link CMsgGC_GlobalGame_Subscribe.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Subscribe} message CMsgGC_GlobalGame_Subscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Subscribe.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Subscribe message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGC_GlobalGame_Subscribe} CMsgGC_GlobalGame_Subscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Subscribe.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGC_GlobalGame_Subscribe();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ticket = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Subscribe message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGC_GlobalGame_Subscribe} CMsgGC_GlobalGame_Subscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Subscribe.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGC_GlobalGame_Subscribe message.
         * @function verify
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGC_GlobalGame_Subscribe.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!$util.isInteger(message.ticket) && !(message.ticket && $util.isInteger(message.ticket.low) && $util.isInteger(message.ticket.high)))
                    return "ticket: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGC_GlobalGame_Subscribe message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGC_GlobalGame_Subscribe} CMsgGC_GlobalGame_Subscribe
         */
        CMsgGC_GlobalGame_Subscribe.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGC_GlobalGame_Subscribe)
                return object;
            var message = new $root.CMsgGC_GlobalGame_Subscribe();
            if (object.ticket != null)
                if ($util.Long)
                    (message.ticket = $util.Long.fromValue(object.ticket)).unsigned = true;
                else if (typeof object.ticket === "string")
                    message.ticket = parseInt(object.ticket, 10);
                else if (typeof object.ticket === "number")
                    message.ticket = object.ticket;
                else if (typeof object.ticket === "object")
                    message.ticket = new $util.LongBits(object.ticket.low >>> 0, object.ticket.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGC_GlobalGame_Subscribe message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @static
         * @param {CMsgGC_GlobalGame_Subscribe} message CMsgGC_GlobalGame_Subscribe
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGC_GlobalGame_Subscribe.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ticket = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ticket = options.longs === String ? "0" : 0;
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (typeof message.ticket === "number")
                    object.ticket = options.longs === String ? String(message.ticket) : message.ticket;
                else
                    object.ticket = options.longs === String ? $util.Long.prototype.toString.call(message.ticket) : options.longs === Number ? new $util.LongBits(message.ticket.low >>> 0, message.ticket.high >>> 0).toNumber(true) : message.ticket;
            return object;
        };
    
        /**
         * Converts this CMsgGC_GlobalGame_Subscribe to JSON.
         * @function toJSON
         * @memberof CMsgGC_GlobalGame_Subscribe
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGC_GlobalGame_Subscribe.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGC_GlobalGame_Subscribe;
    })();
    
    $root.CMsgGC_GlobalGame_Unsubscribe = (function() {
    
        /**
         * Properties of a CMsgGC_GlobalGame_Unsubscribe.
         * @exports ICMsgGC_GlobalGame_Unsubscribe
         * @interface ICMsgGC_GlobalGame_Unsubscribe
         * @property {number|null} [timeleft] CMsgGC_GlobalGame_Unsubscribe timeleft
         */
    
        /**
         * Constructs a new CMsgGC_GlobalGame_Unsubscribe.
         * @exports CMsgGC_GlobalGame_Unsubscribe
         * @classdesc Represents a CMsgGC_GlobalGame_Unsubscribe.
         * @implements ICMsgGC_GlobalGame_Unsubscribe
         * @constructor
         * @param {ICMsgGC_GlobalGame_Unsubscribe=} [properties] Properties to set
         */
        function CMsgGC_GlobalGame_Unsubscribe(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGC_GlobalGame_Unsubscribe timeleft.
         * @member {number} timeleft
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @instance
         */
        CMsgGC_GlobalGame_Unsubscribe.prototype.timeleft = 0;
    
        /**
         * Creates a new CMsgGC_GlobalGame_Unsubscribe instance using the specified properties.
         * @function create
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Unsubscribe=} [properties] Properties to set
         * @returns {CMsgGC_GlobalGame_Unsubscribe} CMsgGC_GlobalGame_Unsubscribe instance
         */
        CMsgGC_GlobalGame_Unsubscribe.create = function create(properties) {
            return new CMsgGC_GlobalGame_Unsubscribe(properties);
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Unsubscribe message. Does not implicitly {@link CMsgGC_GlobalGame_Unsubscribe.verify|verify} messages.
         * @function encode
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Unsubscribe} message CMsgGC_GlobalGame_Unsubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Unsubscribe.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.timeleft != null && message.hasOwnProperty("timeleft"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.timeleft);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Unsubscribe message, length delimited. Does not implicitly {@link CMsgGC_GlobalGame_Unsubscribe.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {ICMsgGC_GlobalGame_Unsubscribe} message CMsgGC_GlobalGame_Unsubscribe message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Unsubscribe.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Unsubscribe message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGC_GlobalGame_Unsubscribe} CMsgGC_GlobalGame_Unsubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Unsubscribe.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGC_GlobalGame_Unsubscribe();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.timeleft = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Unsubscribe message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGC_GlobalGame_Unsubscribe} CMsgGC_GlobalGame_Unsubscribe
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Unsubscribe.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGC_GlobalGame_Unsubscribe message.
         * @function verify
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGC_GlobalGame_Unsubscribe.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.timeleft != null && message.hasOwnProperty("timeleft"))
                if (!$util.isInteger(message.timeleft))
                    return "timeleft: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGC_GlobalGame_Unsubscribe message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGC_GlobalGame_Unsubscribe} CMsgGC_GlobalGame_Unsubscribe
         */
        CMsgGC_GlobalGame_Unsubscribe.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGC_GlobalGame_Unsubscribe)
                return object;
            var message = new $root.CMsgGC_GlobalGame_Unsubscribe();
            if (object.timeleft != null)
                message.timeleft = object.timeleft | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGC_GlobalGame_Unsubscribe message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @static
         * @param {CMsgGC_GlobalGame_Unsubscribe} message CMsgGC_GlobalGame_Unsubscribe
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGC_GlobalGame_Unsubscribe.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.timeleft = 0;
            if (message.timeleft != null && message.hasOwnProperty("timeleft"))
                object.timeleft = message.timeleft;
            return object;
        };
    
        /**
         * Converts this CMsgGC_GlobalGame_Unsubscribe to JSON.
         * @function toJSON
         * @memberof CMsgGC_GlobalGame_Unsubscribe
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGC_GlobalGame_Unsubscribe.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGC_GlobalGame_Unsubscribe;
    })();
    
    $root.CMsgGC_GlobalGame_Play = (function() {
    
        /**
         * Properties of a CMsgGC_GlobalGame_Play.
         * @exports ICMsgGC_GlobalGame_Play
         * @interface ICMsgGC_GlobalGame_Play
         * @property {number|Long|null} [ticket] CMsgGC_GlobalGame_Play ticket
         * @property {number|null} [gametimems] CMsgGC_GlobalGame_Play gametimems
         * @property {number|null} [msperpoint] CMsgGC_GlobalGame_Play msperpoint
         */
    
        /**
         * Constructs a new CMsgGC_GlobalGame_Play.
         * @exports CMsgGC_GlobalGame_Play
         * @classdesc Represents a CMsgGC_GlobalGame_Play.
         * @implements ICMsgGC_GlobalGame_Play
         * @constructor
         * @param {ICMsgGC_GlobalGame_Play=} [properties] Properties to set
         */
        function CMsgGC_GlobalGame_Play(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGC_GlobalGame_Play ticket.
         * @member {number|Long} ticket
         * @memberof CMsgGC_GlobalGame_Play
         * @instance
         */
        CMsgGC_GlobalGame_Play.prototype.ticket = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGC_GlobalGame_Play gametimems.
         * @member {number} gametimems
         * @memberof CMsgGC_GlobalGame_Play
         * @instance
         */
        CMsgGC_GlobalGame_Play.prototype.gametimems = 0;
    
        /**
         * CMsgGC_GlobalGame_Play msperpoint.
         * @member {number} msperpoint
         * @memberof CMsgGC_GlobalGame_Play
         * @instance
         */
        CMsgGC_GlobalGame_Play.prototype.msperpoint = 0;
    
        /**
         * Creates a new CMsgGC_GlobalGame_Play instance using the specified properties.
         * @function create
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {ICMsgGC_GlobalGame_Play=} [properties] Properties to set
         * @returns {CMsgGC_GlobalGame_Play} CMsgGC_GlobalGame_Play instance
         */
        CMsgGC_GlobalGame_Play.create = function create(properties) {
            return new CMsgGC_GlobalGame_Play(properties);
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Play message. Does not implicitly {@link CMsgGC_GlobalGame_Play.verify|verify} messages.
         * @function encode
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {ICMsgGC_GlobalGame_Play} message CMsgGC_GlobalGame_Play message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Play.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ticket);
            if (message.gametimems != null && message.hasOwnProperty("gametimems"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gametimems);
            if (message.msperpoint != null && message.hasOwnProperty("msperpoint"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.msperpoint);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGC_GlobalGame_Play message, length delimited. Does not implicitly {@link CMsgGC_GlobalGame_Play.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {ICMsgGC_GlobalGame_Play} message CMsgGC_GlobalGame_Play message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGC_GlobalGame_Play.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Play message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGC_GlobalGame_Play} CMsgGC_GlobalGame_Play
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Play.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGC_GlobalGame_Play();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ticket = reader.uint64();
                    break;
                case 2:
                    message.gametimems = reader.uint32();
                    break;
                case 3:
                    message.msperpoint = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGC_GlobalGame_Play message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGC_GlobalGame_Play} CMsgGC_GlobalGame_Play
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGC_GlobalGame_Play.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGC_GlobalGame_Play message.
         * @function verify
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGC_GlobalGame_Play.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!$util.isInteger(message.ticket) && !(message.ticket && $util.isInteger(message.ticket.low) && $util.isInteger(message.ticket.high)))
                    return "ticket: integer|Long expected";
            if (message.gametimems != null && message.hasOwnProperty("gametimems"))
                if (!$util.isInteger(message.gametimems))
                    return "gametimems: integer expected";
            if (message.msperpoint != null && message.hasOwnProperty("msperpoint"))
                if (!$util.isInteger(message.msperpoint))
                    return "msperpoint: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGC_GlobalGame_Play message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGC_GlobalGame_Play} CMsgGC_GlobalGame_Play
         */
        CMsgGC_GlobalGame_Play.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGC_GlobalGame_Play)
                return object;
            var message = new $root.CMsgGC_GlobalGame_Play();
            if (object.ticket != null)
                if ($util.Long)
                    (message.ticket = $util.Long.fromValue(object.ticket)).unsigned = true;
                else if (typeof object.ticket === "string")
                    message.ticket = parseInt(object.ticket, 10);
                else if (typeof object.ticket === "number")
                    message.ticket = object.ticket;
                else if (typeof object.ticket === "object")
                    message.ticket = new $util.LongBits(object.ticket.low >>> 0, object.ticket.high >>> 0).toNumber(true);
            if (object.gametimems != null)
                message.gametimems = object.gametimems >>> 0;
            if (object.msperpoint != null)
                message.msperpoint = object.msperpoint >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGC_GlobalGame_Play message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGC_GlobalGame_Play
         * @static
         * @param {CMsgGC_GlobalGame_Play} message CMsgGC_GlobalGame_Play
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGC_GlobalGame_Play.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ticket = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ticket = options.longs === String ? "0" : 0;
                object.gametimems = 0;
                object.msperpoint = 0;
            }
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (typeof message.ticket === "number")
                    object.ticket = options.longs === String ? String(message.ticket) : message.ticket;
                else
                    object.ticket = options.longs === String ? $util.Long.prototype.toString.call(message.ticket) : options.longs === Number ? new $util.LongBits(message.ticket.low >>> 0, message.ticket.high >>> 0).toNumber(true) : message.ticket;
            if (message.gametimems != null && message.hasOwnProperty("gametimems"))
                object.gametimems = message.gametimems;
            if (message.msperpoint != null && message.hasOwnProperty("msperpoint"))
                object.msperpoint = message.msperpoint;
            return object;
        };
    
        /**
         * Converts this CMsgGC_GlobalGame_Play to JSON.
         * @function toJSON
         * @memberof CMsgGC_GlobalGame_Play
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGC_GlobalGame_Play.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGC_GlobalGame_Play;
    })();
    
    $root.CMsgGCCStrike15_v2_AcknowledgePenalty = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_AcknowledgePenalty.
         * @exports ICMsgGCCStrike15_v2_AcknowledgePenalty
         * @interface ICMsgGCCStrike15_v2_AcknowledgePenalty
         * @property {number|null} [acknowledged] CMsgGCCStrike15_v2_AcknowledgePenalty acknowledged
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_AcknowledgePenalty.
         * @exports CMsgGCCStrike15_v2_AcknowledgePenalty
         * @classdesc Represents a CMsgGCCStrike15_v2_AcknowledgePenalty.
         * @implements ICMsgGCCStrike15_v2_AcknowledgePenalty
         * @constructor
         * @param {ICMsgGCCStrike15_v2_AcknowledgePenalty=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_AcknowledgePenalty(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_AcknowledgePenalty acknowledged.
         * @member {number} acknowledged
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @instance
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.prototype.acknowledged = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_AcknowledgePenalty instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_AcknowledgePenalty=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_AcknowledgePenalty} CMsgGCCStrike15_v2_AcknowledgePenalty instance
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.create = function create(properties) {
            return new CMsgGCCStrike15_v2_AcknowledgePenalty(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_AcknowledgePenalty message. Does not implicitly {@link CMsgGCCStrike15_v2_AcknowledgePenalty.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_AcknowledgePenalty} message CMsgGCCStrike15_v2_AcknowledgePenalty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.acknowledged != null && message.hasOwnProperty("acknowledged"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.acknowledged);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_AcknowledgePenalty message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_AcknowledgePenalty.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {ICMsgGCCStrike15_v2_AcknowledgePenalty} message CMsgGCCStrike15_v2_AcknowledgePenalty message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_AcknowledgePenalty message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_AcknowledgePenalty} CMsgGCCStrike15_v2_AcknowledgePenalty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_AcknowledgePenalty();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.acknowledged = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_AcknowledgePenalty message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_AcknowledgePenalty} CMsgGCCStrike15_v2_AcknowledgePenalty
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_AcknowledgePenalty message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.acknowledged != null && message.hasOwnProperty("acknowledged"))
                if (!$util.isInteger(message.acknowledged))
                    return "acknowledged: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_AcknowledgePenalty message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_AcknowledgePenalty} CMsgGCCStrike15_v2_AcknowledgePenalty
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_AcknowledgePenalty)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_AcknowledgePenalty();
            if (object.acknowledged != null)
                message.acknowledged = object.acknowledged | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_AcknowledgePenalty message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @static
         * @param {CMsgGCCStrike15_v2_AcknowledgePenalty} message CMsgGCCStrike15_v2_AcknowledgePenalty
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.acknowledged = 0;
            if (message.acknowledged != null && message.hasOwnProperty("acknowledged"))
                object.acknowledged = message.acknowledged;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_AcknowledgePenalty to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_AcknowledgePenalty
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_AcknowledgePenalty.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_AcknowledgePenalty;
    })();
    
    $root.CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.
         * @exports ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @interface ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @property {number|null} [defindex] CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin defindex
         * @property {number|Long|null} [upgradeid] CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin upgradeid
         * @property {number|null} [hours] CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin hours
         * @property {number|null} [prestigetime] CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin prestigetime
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.
         * @exports CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @classdesc Represents a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.
         * @implements ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin defindex.
         * @member {number} defindex
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.prototype.defindex = 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin upgradeid.
         * @member {number|Long} upgradeid
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.prototype.upgradeid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin hours.
         * @member {number} hours
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.prototype.hours = 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin prestigetime.
         * @member {number} prestigetime
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.prototype.prestigetime = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin instance
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.defindex);
            if (message.upgradeid != null && message.hasOwnProperty("upgradeid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.upgradeid);
            if (message.hours != null && message.hasOwnProperty("hours"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.hours);
            if (message.prestigetime != null && message.hasOwnProperty("prestigetime"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.prestigetime);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.defindex = reader.uint32();
                    break;
                case 2:
                    message.upgradeid = reader.uint64();
                    break;
                case 3:
                    message.hours = reader.uint32();
                    break;
                case 4:
                    message.prestigetime = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                if (!$util.isInteger(message.defindex))
                    return "defindex: integer expected";
            if (message.upgradeid != null && message.hasOwnProperty("upgradeid"))
                if (!$util.isInteger(message.upgradeid) && !(message.upgradeid && $util.isInteger(message.upgradeid.low) && $util.isInteger(message.upgradeid.high)))
                    return "upgradeid: integer|Long expected";
            if (message.hours != null && message.hasOwnProperty("hours"))
                if (!$util.isInteger(message.hours))
                    return "hours: integer expected";
            if (message.prestigetime != null && message.hasOwnProperty("prestigetime"))
                if (!$util.isInteger(message.prestigetime))
                    return "prestigetime: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin();
            if (object.defindex != null)
                message.defindex = object.defindex >>> 0;
            if (object.upgradeid != null)
                if ($util.Long)
                    (message.upgradeid = $util.Long.fromValue(object.upgradeid)).unsigned = true;
                else if (typeof object.upgradeid === "string")
                    message.upgradeid = parseInt(object.upgradeid, 10);
                else if (typeof object.upgradeid === "number")
                    message.upgradeid = object.upgradeid;
                else if (typeof object.upgradeid === "object")
                    message.upgradeid = new $util.LongBits(object.upgradeid.low >>> 0, object.upgradeid.high >>> 0).toNumber(true);
            if (object.hours != null)
                message.hours = object.hours >>> 0;
            if (object.prestigetime != null)
                message.prestigetime = object.prestigetime >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @static
         * @param {CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin} message CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.defindex = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.upgradeid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.upgradeid = options.longs === String ? "0" : 0;
                object.hours = 0;
                object.prestigetime = 0;
            }
            if (message.defindex != null && message.hasOwnProperty("defindex"))
                object.defindex = message.defindex;
            if (message.upgradeid != null && message.hasOwnProperty("upgradeid"))
                if (typeof message.upgradeid === "number")
                    object.upgradeid = options.longs === String ? String(message.upgradeid) : message.upgradeid;
                else
                    object.upgradeid = options.longs === String ? $util.Long.prototype.toString.call(message.upgradeid) : options.longs === Number ? new $util.LongBits(message.upgradeid.low >>> 0, message.upgradeid.high >>> 0).toNumber(true) : message.upgradeid;
            if (message.hours != null && message.hasOwnProperty("hours"))
                object.hours = message.hours;
            if (message.prestigetime != null && message.hasOwnProperty("prestigetime"))
                object.prestigetime = message.prestigetime;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin;
    })();
    
    $root.CMsgGCCStrike15_v2_Client2GCStreamUnlock = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Client2GCStreamUnlock.
         * @exports ICMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @interface ICMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @property {number|Long|null} [ticket] CMsgGCCStrike15_v2_Client2GCStreamUnlock ticket
         * @property {number|null} [os] CMsgGCCStrike15_v2_Client2GCStreamUnlock os
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Client2GCStreamUnlock.
         * @exports CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @classdesc Represents a CMsgGCCStrike15_v2_Client2GCStreamUnlock.
         * @implements ICMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Client2GCStreamUnlock=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Client2GCStreamUnlock(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Client2GCStreamUnlock ticket.
         * @member {number|Long} ticket
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.prototype.ticket = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_Client2GCStreamUnlock os.
         * @member {number} os
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @instance
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.prototype.os = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Client2GCStreamUnlock instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCStreamUnlock=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Client2GCStreamUnlock} CMsgGCCStrike15_v2_Client2GCStreamUnlock instance
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Client2GCStreamUnlock(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCStreamUnlock message. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCStreamUnlock.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCStreamUnlock} message CMsgGCCStrike15_v2_Client2GCStreamUnlock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ticket);
            if (message.os != null && message.hasOwnProperty("os"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.os);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Client2GCStreamUnlock message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Client2GCStreamUnlock.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {ICMsgGCCStrike15_v2_Client2GCStreamUnlock} message CMsgGCCStrike15_v2_Client2GCStreamUnlock message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCStreamUnlock message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Client2GCStreamUnlock} CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Client2GCStreamUnlock();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ticket = reader.uint64();
                    break;
                case 2:
                    message.os = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Client2GCStreamUnlock message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Client2GCStreamUnlock} CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Client2GCStreamUnlock message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!$util.isInteger(message.ticket) && !(message.ticket && $util.isInteger(message.ticket.low) && $util.isInteger(message.ticket.high)))
                    return "ticket: integer|Long expected";
            if (message.os != null && message.hasOwnProperty("os"))
                if (!$util.isInteger(message.os))
                    return "os: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Client2GCStreamUnlock message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Client2GCStreamUnlock} CMsgGCCStrike15_v2_Client2GCStreamUnlock
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Client2GCStreamUnlock)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Client2GCStreamUnlock();
            if (object.ticket != null)
                if ($util.Long)
                    (message.ticket = $util.Long.fromValue(object.ticket)).unsigned = true;
                else if (typeof object.ticket === "string")
                    message.ticket = parseInt(object.ticket, 10);
                else if (typeof object.ticket === "number")
                    message.ticket = object.ticket;
                else if (typeof object.ticket === "object")
                    message.ticket = new $util.LongBits(object.ticket.low >>> 0, object.ticket.high >>> 0).toNumber(true);
            if (object.os != null)
                message.os = object.os | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Client2GCStreamUnlock message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @static
         * @param {CMsgGCCStrike15_v2_Client2GCStreamUnlock} message CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.ticket = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.ticket = options.longs === String ? "0" : 0;
                object.os = 0;
            }
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (typeof message.ticket === "number")
                    object.ticket = options.longs === String ? String(message.ticket) : message.ticket;
                else
                    object.ticket = options.longs === String ? $util.Long.prototype.toString.call(message.ticket) : options.longs === Number ? new $util.LongBits(message.ticket.low >>> 0, message.ticket.high >>> 0).toNumber(true) : message.ticket;
            if (message.os != null && message.hasOwnProperty("os"))
                object.os = message.os;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Client2GCStreamUnlock to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Client2GCStreamUnlock
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Client2GCStreamUnlock.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Client2GCStreamUnlock;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientToGCRequestElevate = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientToGCRequestElevate.
         * @exports ICMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @interface ICMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @property {number|null} [stage] CMsgGCCStrike15_v2_ClientToGCRequestElevate stage
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientToGCRequestElevate.
         * @exports CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientToGCRequestElevate.
         * @implements ICMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestElevate=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientToGCRequestElevate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCRequestElevate stage.
         * @member {number} stage
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.prototype.stage = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientToGCRequestElevate instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestElevate=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestElevate} CMsgGCCStrike15_v2_ClientToGCRequestElevate instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientToGCRequestElevate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCRequestElevate message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCRequestElevate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestElevate} message CMsgGCCStrike15_v2_ClientToGCRequestElevate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stage != null && message.hasOwnProperty("stage"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.stage);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCRequestElevate message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCRequestElevate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestElevate} message CMsgGCCStrike15_v2_ClientToGCRequestElevate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCRequestElevate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestElevate} CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientToGCRequestElevate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.stage = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCRequestElevate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestElevate} CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientToGCRequestElevate message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stage != null && message.hasOwnProperty("stage"))
                if (!$util.isInteger(message.stage))
                    return "stage: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientToGCRequestElevate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestElevate} CMsgGCCStrike15_v2_ClientToGCRequestElevate
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientToGCRequestElevate)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientToGCRequestElevate();
            if (object.stage != null)
                message.stage = object.stage >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientToGCRequestElevate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @static
         * @param {CMsgGCCStrike15_v2_ClientToGCRequestElevate} message CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.stage = 0;
            if (message.stage != null && message.hasOwnProperty("stage"))
                object.stage = message.stage;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientToGCRequestElevate to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestElevate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientToGCRequestElevate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientToGCRequestElevate;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientToGCChat = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientToGCChat.
         * @exports ICMsgGCCStrike15_v2_ClientToGCChat
         * @interface ICMsgGCCStrike15_v2_ClientToGCChat
         * @property {number|Long|null} [match_id] CMsgGCCStrike15_v2_ClientToGCChat match_id
         * @property {string|null} [text] CMsgGCCStrike15_v2_ClientToGCChat text
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientToGCChat.
         * @exports CMsgGCCStrike15_v2_ClientToGCChat
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientToGCChat.
         * @implements ICMsgGCCStrike15_v2_ClientToGCChat
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientToGCChat=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientToGCChat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCChat match_id.
         * @member {number|Long} match_id
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCChat.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCChat text.
         * @member {string} text
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCChat.prototype.text = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientToGCChat instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCChat=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientToGCChat} CMsgGCCStrike15_v2_ClientToGCChat instance
         */
        CMsgGCCStrike15_v2_ClientToGCChat.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientToGCChat(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCChat message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCChat.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCChat} message CMsgGCCStrike15_v2_ClientToGCChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCChat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.match_id);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCChat message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCChat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCChat} message CMsgGCCStrike15_v2_ClientToGCChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCChat message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientToGCChat} CMsgGCCStrike15_v2_ClientToGCChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCChat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientToGCChat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.match_id = reader.uint64();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCChat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientToGCChat} CMsgGCCStrike15_v2_ClientToGCChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCChat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientToGCChat message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientToGCChat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientToGCChat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientToGCChat} CMsgGCCStrike15_v2_ClientToGCChat
         */
        CMsgGCCStrike15_v2_ClientToGCChat.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientToGCChat)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientToGCChat();
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientToGCChat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @static
         * @param {CMsgGCCStrike15_v2_ClientToGCChat} message CMsgGCCStrike15_v2_ClientToGCChat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientToGCChat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                object.text = "";
            }
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientToGCChat to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientToGCChat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientToGCChat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientToGCChat;
    })();
    
    $root.CMsgGCCStrike15_v2_GCToClientChat = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GCToClientChat.
         * @exports ICMsgGCCStrike15_v2_GCToClientChat
         * @interface ICMsgGCCStrike15_v2_GCToClientChat
         * @property {number|null} [account_id] CMsgGCCStrike15_v2_GCToClientChat account_id
         * @property {string|null} [text] CMsgGCCStrike15_v2_GCToClientChat text
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GCToClientChat.
         * @exports CMsgGCCStrike15_v2_GCToClientChat
         * @classdesc Represents a CMsgGCCStrike15_v2_GCToClientChat.
         * @implements ICMsgGCCStrike15_v2_GCToClientChat
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GCToClientChat=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GCToClientChat(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GCToClientChat account_id.
         * @member {number} account_id
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @instance
         */
        CMsgGCCStrike15_v2_GCToClientChat.prototype.account_id = 0;
    
        /**
         * CMsgGCCStrike15_v2_GCToClientChat text.
         * @member {string} text
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @instance
         */
        CMsgGCCStrike15_v2_GCToClientChat.prototype.text = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GCToClientChat instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {ICMsgGCCStrike15_v2_GCToClientChat=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GCToClientChat} CMsgGCCStrike15_v2_GCToClientChat instance
         */
        CMsgGCCStrike15_v2_GCToClientChat.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GCToClientChat(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GCToClientChat message. Does not implicitly {@link CMsgGCCStrike15_v2_GCToClientChat.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {ICMsgGCCStrike15_v2_GCToClientChat} message CMsgGCCStrike15_v2_GCToClientChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GCToClientChat.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.account_id);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GCToClientChat message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GCToClientChat.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {ICMsgGCCStrike15_v2_GCToClientChat} message CMsgGCCStrike15_v2_GCToClientChat message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GCToClientChat.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GCToClientChat message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GCToClientChat} CMsgGCCStrike15_v2_GCToClientChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GCToClientChat.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GCToClientChat();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.account_id = reader.uint32();
                    break;
                case 2:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GCToClientChat message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GCToClientChat} CMsgGCCStrike15_v2_GCToClientChat
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GCToClientChat.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GCToClientChat message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GCToClientChat.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GCToClientChat message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GCToClientChat} CMsgGCCStrike15_v2_GCToClientChat
         */
        CMsgGCCStrike15_v2_GCToClientChat.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GCToClientChat)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GCToClientChat();
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GCToClientChat message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @static
         * @param {CMsgGCCStrike15_v2_GCToClientChat} message CMsgGCCStrike15_v2_GCToClientChat
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GCToClientChat.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.account_id = 0;
                object.text = "";
            }
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GCToClientChat to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GCToClientChat
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GCToClientChat.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GCToClientChat;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientAuthKeyCode = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientAuthKeyCode.
         * @exports ICMsgGCCStrike15_v2_ClientAuthKeyCode
         * @interface ICMsgGCCStrike15_v2_ClientAuthKeyCode
         * @property {number|null} [eventid] CMsgGCCStrike15_v2_ClientAuthKeyCode eventid
         * @property {string|null} [code] CMsgGCCStrike15_v2_ClientAuthKeyCode code
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientAuthKeyCode.
         * @exports CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientAuthKeyCode.
         * @implements ICMsgGCCStrike15_v2_ClientAuthKeyCode
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientAuthKeyCode=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientAuthKeyCode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientAuthKeyCode eventid.
         * @member {number} eventid
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @instance
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.prototype.eventid = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientAuthKeyCode code.
         * @member {string} code
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @instance
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.prototype.code = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientAuthKeyCode instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAuthKeyCode=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientAuthKeyCode} CMsgGCCStrike15_v2_ClientAuthKeyCode instance
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientAuthKeyCode(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientAuthKeyCode message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientAuthKeyCode.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAuthKeyCode} message CMsgGCCStrike15_v2_ClientAuthKeyCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eventid);
            if (message.code != null && message.hasOwnProperty("code"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.code);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientAuthKeyCode message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientAuthKeyCode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAuthKeyCode} message CMsgGCCStrike15_v2_ClientAuthKeyCode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientAuthKeyCode message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientAuthKeyCode} CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientAuthKeyCode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventid = reader.uint32();
                    break;
                case 2:
                    message.code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientAuthKeyCode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientAuthKeyCode} CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientAuthKeyCode message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (!$util.isInteger(message.eventid))
                    return "eventid: integer expected";
            if (message.code != null && message.hasOwnProperty("code"))
                if (!$util.isString(message.code))
                    return "code: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientAuthKeyCode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientAuthKeyCode} CMsgGCCStrike15_v2_ClientAuthKeyCode
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientAuthKeyCode)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientAuthKeyCode();
            if (object.eventid != null)
                message.eventid = object.eventid >>> 0;
            if (object.code != null)
                message.code = String(object.code);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientAuthKeyCode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @static
         * @param {CMsgGCCStrike15_v2_ClientAuthKeyCode} message CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventid = 0;
                object.code = "";
            }
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                object.eventid = message.eventid;
            if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientAuthKeyCode to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientAuthKeyCode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientAuthKeyCode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientAuthKeyCode;
    })();
    
    $root.CMsgGCCStrike15_GotvSyncPacket = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_GotvSyncPacket.
         * @exports ICMsgGCCStrike15_GotvSyncPacket
         * @interface ICMsgGCCStrike15_GotvSyncPacket
         * @property {ICEngineGotvSyncPacket|null} [data] CMsgGCCStrike15_GotvSyncPacket data
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_GotvSyncPacket.
         * @exports CMsgGCCStrike15_GotvSyncPacket
         * @classdesc Represents a CMsgGCCStrike15_GotvSyncPacket.
         * @implements ICMsgGCCStrike15_GotvSyncPacket
         * @constructor
         * @param {ICMsgGCCStrike15_GotvSyncPacket=} [properties] Properties to set
         */
        function CMsgGCCStrike15_GotvSyncPacket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_GotvSyncPacket data.
         * @member {ICEngineGotvSyncPacket|null|undefined} data
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @instance
         */
        CMsgGCCStrike15_GotvSyncPacket.prototype.data = null;
    
        /**
         * Creates a new CMsgGCCStrike15_GotvSyncPacket instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {ICMsgGCCStrike15_GotvSyncPacket=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_GotvSyncPacket} CMsgGCCStrike15_GotvSyncPacket instance
         */
        CMsgGCCStrike15_GotvSyncPacket.create = function create(properties) {
            return new CMsgGCCStrike15_GotvSyncPacket(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_GotvSyncPacket message. Does not implicitly {@link CMsgGCCStrike15_GotvSyncPacket.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {ICMsgGCCStrike15_GotvSyncPacket} message CMsgGCCStrike15_GotvSyncPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_GotvSyncPacket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.data != null && message.hasOwnProperty("data"))
                $root.CEngineGotvSyncPacket.encode(message.data, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_GotvSyncPacket message, length delimited. Does not implicitly {@link CMsgGCCStrike15_GotvSyncPacket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {ICMsgGCCStrike15_GotvSyncPacket} message CMsgGCCStrike15_GotvSyncPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_GotvSyncPacket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_GotvSyncPacket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_GotvSyncPacket} CMsgGCCStrike15_GotvSyncPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_GotvSyncPacket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_GotvSyncPacket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.data = $root.CEngineGotvSyncPacket.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_GotvSyncPacket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_GotvSyncPacket} CMsgGCCStrike15_GotvSyncPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_GotvSyncPacket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_GotvSyncPacket message.
         * @function verify
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_GotvSyncPacket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.CEngineGotvSyncPacket.verify(message.data);
                if (error)
                    return "data." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_GotvSyncPacket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_GotvSyncPacket} CMsgGCCStrike15_GotvSyncPacket
         */
        CMsgGCCStrike15_GotvSyncPacket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_GotvSyncPacket)
                return object;
            var message = new $root.CMsgGCCStrike15_GotvSyncPacket();
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".CMsgGCCStrike15_GotvSyncPacket.data: object expected");
                message.data = $root.CEngineGotvSyncPacket.fromObject(object.data);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_GotvSyncPacket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @static
         * @param {CMsgGCCStrike15_GotvSyncPacket} message CMsgGCCStrike15_GotvSyncPacket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_GotvSyncPacket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.data = null;
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.CEngineGotvSyncPacket.toObject(message.data, options);
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_GotvSyncPacket to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_GotvSyncPacket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_GotvSyncPacket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_GotvSyncPacket;
    })();
    
    $root.PlayerDecalDigitalSignature = (function() {
    
        /**
         * Properties of a PlayerDecalDigitalSignature.
         * @exports IPlayerDecalDigitalSignature
         * @interface IPlayerDecalDigitalSignature
         * @property {Uint8Array|null} [signature] PlayerDecalDigitalSignature signature
         * @property {number|null} [accountid] PlayerDecalDigitalSignature accountid
         * @property {number|null} [rtime] PlayerDecalDigitalSignature rtime
         * @property {Array.<number>|null} [endpos] PlayerDecalDigitalSignature endpos
         * @property {Array.<number>|null} [startpos] PlayerDecalDigitalSignature startpos
         * @property {Array.<number>|null} [right] PlayerDecalDigitalSignature right
         * @property {number|null} [tx_defidx] PlayerDecalDigitalSignature tx_defidx
         * @property {number|null} [entindex] PlayerDecalDigitalSignature entindex
         * @property {number|null} [hitbox] PlayerDecalDigitalSignature hitbox
         * @property {number|null} [creationtime] PlayerDecalDigitalSignature creationtime
         * @property {number|null} [equipslot] PlayerDecalDigitalSignature equipslot
         * @property {number|null} [trace_id] PlayerDecalDigitalSignature trace_id
         * @property {Array.<number>|null} [normal] PlayerDecalDigitalSignature normal
         * @property {number|null} [tint_id] PlayerDecalDigitalSignature tint_id
         */
    
        /**
         * Constructs a new PlayerDecalDigitalSignature.
         * @exports PlayerDecalDigitalSignature
         * @classdesc Represents a PlayerDecalDigitalSignature.
         * @implements IPlayerDecalDigitalSignature
         * @constructor
         * @param {IPlayerDecalDigitalSignature=} [properties] Properties to set
         */
        function PlayerDecalDigitalSignature(properties) {
            this.endpos = [];
            this.startpos = [];
            this.right = [];
            this.normal = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * PlayerDecalDigitalSignature signature.
         * @member {Uint8Array} signature
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.signature = $util.newBuffer([]);
    
        /**
         * PlayerDecalDigitalSignature accountid.
         * @member {number} accountid
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.accountid = 0;
    
        /**
         * PlayerDecalDigitalSignature rtime.
         * @member {number} rtime
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.rtime = 0;
    
        /**
         * PlayerDecalDigitalSignature endpos.
         * @member {Array.<number>} endpos
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.endpos = $util.emptyArray;
    
        /**
         * PlayerDecalDigitalSignature startpos.
         * @member {Array.<number>} startpos
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.startpos = $util.emptyArray;
    
        /**
         * PlayerDecalDigitalSignature right.
         * @member {Array.<number>} right
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.right = $util.emptyArray;
    
        /**
         * PlayerDecalDigitalSignature tx_defidx.
         * @member {number} tx_defidx
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.tx_defidx = 0;
    
        /**
         * PlayerDecalDigitalSignature entindex.
         * @member {number} entindex
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.entindex = 0;
    
        /**
         * PlayerDecalDigitalSignature hitbox.
         * @member {number} hitbox
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.hitbox = 0;
    
        /**
         * PlayerDecalDigitalSignature creationtime.
         * @member {number} creationtime
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.creationtime = 0;
    
        /**
         * PlayerDecalDigitalSignature equipslot.
         * @member {number} equipslot
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.equipslot = 0;
    
        /**
         * PlayerDecalDigitalSignature trace_id.
         * @member {number} trace_id
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.trace_id = 0;
    
        /**
         * PlayerDecalDigitalSignature normal.
         * @member {Array.<number>} normal
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.normal = $util.emptyArray;
    
        /**
         * PlayerDecalDigitalSignature tint_id.
         * @member {number} tint_id
         * @memberof PlayerDecalDigitalSignature
         * @instance
         */
        PlayerDecalDigitalSignature.prototype.tint_id = 0;
    
        /**
         * Creates a new PlayerDecalDigitalSignature instance using the specified properties.
         * @function create
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {IPlayerDecalDigitalSignature=} [properties] Properties to set
         * @returns {PlayerDecalDigitalSignature} PlayerDecalDigitalSignature instance
         */
        PlayerDecalDigitalSignature.create = function create(properties) {
            return new PlayerDecalDigitalSignature(properties);
        };
    
        /**
         * Encodes the specified PlayerDecalDigitalSignature message. Does not implicitly {@link PlayerDecalDigitalSignature.verify|verify} messages.
         * @function encode
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {IPlayerDecalDigitalSignature} message PlayerDecalDigitalSignature message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerDecalDigitalSignature.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.signature != null && message.hasOwnProperty("signature"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.accountid);
            if (message.rtime != null && message.hasOwnProperty("rtime"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rtime);
            if (message.endpos != null && message.endpos.length)
                for (var i = 0; i < message.endpos.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.endpos[i]);
            if (message.startpos != null && message.startpos.length)
                for (var i = 0; i < message.startpos.length; ++i)
                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.startpos[i]);
            if (message.right != null && message.right.length)
                for (var i = 0; i < message.right.length; ++i)
                    writer.uint32(/* id 6, wireType 5 =*/53).float(message.right[i]);
            if (message.tx_defidx != null && message.hasOwnProperty("tx_defidx"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.tx_defidx);
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.entindex);
            if (message.hitbox != null && message.hasOwnProperty("hitbox"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.hitbox);
            if (message.creationtime != null && message.hasOwnProperty("creationtime"))
                writer.uint32(/* id 10, wireType 5 =*/85).float(message.creationtime);
            if (message.equipslot != null && message.hasOwnProperty("equipslot"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.equipslot);
            if (message.trace_id != null && message.hasOwnProperty("trace_id"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.trace_id);
            if (message.normal != null && message.normal.length)
                for (var i = 0; i < message.normal.length; ++i)
                    writer.uint32(/* id 13, wireType 5 =*/109).float(message.normal[i]);
            if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.tint_id);
            return writer;
        };
    
        /**
         * Encodes the specified PlayerDecalDigitalSignature message, length delimited. Does not implicitly {@link PlayerDecalDigitalSignature.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {IPlayerDecalDigitalSignature} message PlayerDecalDigitalSignature message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlayerDecalDigitalSignature.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a PlayerDecalDigitalSignature message from the specified reader or buffer.
         * @function decode
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PlayerDecalDigitalSignature} PlayerDecalDigitalSignature
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerDecalDigitalSignature.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PlayerDecalDigitalSignature();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.signature = reader.bytes();
                    break;
                case 2:
                    message.accountid = reader.uint32();
                    break;
                case 3:
                    message.rtime = reader.uint32();
                    break;
                case 4:
                    if (!(message.endpos && message.endpos.length))
                        message.endpos = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.endpos.push(reader.float());
                    } else
                        message.endpos.push(reader.float());
                    break;
                case 5:
                    if (!(message.startpos && message.startpos.length))
                        message.startpos = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.startpos.push(reader.float());
                    } else
                        message.startpos.push(reader.float());
                    break;
                case 6:
                    if (!(message.right && message.right.length))
                        message.right = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.right.push(reader.float());
                    } else
                        message.right.push(reader.float());
                    break;
                case 7:
                    message.tx_defidx = reader.uint32();
                    break;
                case 8:
                    message.entindex = reader.int32();
                    break;
                case 9:
                    message.hitbox = reader.uint32();
                    break;
                case 10:
                    message.creationtime = reader.float();
                    break;
                case 11:
                    message.equipslot = reader.uint32();
                    break;
                case 12:
                    message.trace_id = reader.uint32();
                    break;
                case 13:
                    if (!(message.normal && message.normal.length))
                        message.normal = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.normal.push(reader.float());
                    } else
                        message.normal.push(reader.float());
                    break;
                case 14:
                    message.tint_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a PlayerDecalDigitalSignature message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PlayerDecalDigitalSignature} PlayerDecalDigitalSignature
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlayerDecalDigitalSignature.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a PlayerDecalDigitalSignature message.
         * @function verify
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlayerDecalDigitalSignature.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.rtime != null && message.hasOwnProperty("rtime"))
                if (!$util.isInteger(message.rtime))
                    return "rtime: integer expected";
            if (message.endpos != null && message.hasOwnProperty("endpos")) {
                if (!Array.isArray(message.endpos))
                    return "endpos: array expected";
                for (var i = 0; i < message.endpos.length; ++i)
                    if (typeof message.endpos[i] !== "number")
                        return "endpos: number[] expected";
            }
            if (message.startpos != null && message.hasOwnProperty("startpos")) {
                if (!Array.isArray(message.startpos))
                    return "startpos: array expected";
                for (var i = 0; i < message.startpos.length; ++i)
                    if (typeof message.startpos[i] !== "number")
                        return "startpos: number[] expected";
            }
            if (message.right != null && message.hasOwnProperty("right")) {
                if (!Array.isArray(message.right))
                    return "right: array expected";
                for (var i = 0; i < message.right.length; ++i)
                    if (typeof message.right[i] !== "number")
                        return "right: number[] expected";
            }
            if (message.tx_defidx != null && message.hasOwnProperty("tx_defidx"))
                if (!$util.isInteger(message.tx_defidx))
                    return "tx_defidx: integer expected";
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                if (!$util.isInteger(message.entindex))
                    return "entindex: integer expected";
            if (message.hitbox != null && message.hasOwnProperty("hitbox"))
                if (!$util.isInteger(message.hitbox))
                    return "hitbox: integer expected";
            if (message.creationtime != null && message.hasOwnProperty("creationtime"))
                if (typeof message.creationtime !== "number")
                    return "creationtime: number expected";
            if (message.equipslot != null && message.hasOwnProperty("equipslot"))
                if (!$util.isInteger(message.equipslot))
                    return "equipslot: integer expected";
            if (message.trace_id != null && message.hasOwnProperty("trace_id"))
                if (!$util.isInteger(message.trace_id))
                    return "trace_id: integer expected";
            if (message.normal != null && message.hasOwnProperty("normal")) {
                if (!Array.isArray(message.normal))
                    return "normal: array expected";
                for (var i = 0; i < message.normal.length; ++i)
                    if (typeof message.normal[i] !== "number")
                        return "normal: number[] expected";
            }
            if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                if (!$util.isInteger(message.tint_id))
                    return "tint_id: integer expected";
            return null;
        };
    
        /**
         * Creates a PlayerDecalDigitalSignature message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PlayerDecalDigitalSignature} PlayerDecalDigitalSignature
         */
        PlayerDecalDigitalSignature.fromObject = function fromObject(object) {
            if (object instanceof $root.PlayerDecalDigitalSignature)
                return object;
            var message = new $root.PlayerDecalDigitalSignature();
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length)
                    message.signature = object.signature;
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.rtime != null)
                message.rtime = object.rtime >>> 0;
            if (object.endpos) {
                if (!Array.isArray(object.endpos))
                    throw TypeError(".PlayerDecalDigitalSignature.endpos: array expected");
                message.endpos = [];
                for (var i = 0; i < object.endpos.length; ++i)
                    message.endpos[i] = Number(object.endpos[i]);
            }
            if (object.startpos) {
                if (!Array.isArray(object.startpos))
                    throw TypeError(".PlayerDecalDigitalSignature.startpos: array expected");
                message.startpos = [];
                for (var i = 0; i < object.startpos.length; ++i)
                    message.startpos[i] = Number(object.startpos[i]);
            }
            if (object.right) {
                if (!Array.isArray(object.right))
                    throw TypeError(".PlayerDecalDigitalSignature.right: array expected");
                message.right = [];
                for (var i = 0; i < object.right.length; ++i)
                    message.right[i] = Number(object.right[i]);
            }
            if (object.tx_defidx != null)
                message.tx_defidx = object.tx_defidx >>> 0;
            if (object.entindex != null)
                message.entindex = object.entindex | 0;
            if (object.hitbox != null)
                message.hitbox = object.hitbox >>> 0;
            if (object.creationtime != null)
                message.creationtime = Number(object.creationtime);
            if (object.equipslot != null)
                message.equipslot = object.equipslot >>> 0;
            if (object.trace_id != null)
                message.trace_id = object.trace_id >>> 0;
            if (object.normal) {
                if (!Array.isArray(object.normal))
                    throw TypeError(".PlayerDecalDigitalSignature.normal: array expected");
                message.normal = [];
                for (var i = 0; i < object.normal.length; ++i)
                    message.normal[i] = Number(object.normal[i]);
            }
            if (object.tint_id != null)
                message.tint_id = object.tint_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a PlayerDecalDigitalSignature message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PlayerDecalDigitalSignature
         * @static
         * @param {PlayerDecalDigitalSignature} message PlayerDecalDigitalSignature
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlayerDecalDigitalSignature.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.endpos = [];
                object.startpos = [];
                object.right = [];
                object.normal = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
                object.accountid = 0;
                object.rtime = 0;
                object.tx_defidx = 0;
                object.entindex = 0;
                object.hitbox = 0;
                object.creationtime = 0;
                object.equipslot = 0;
                object.trace_id = 0;
                object.tint_id = 0;
            }
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.rtime != null && message.hasOwnProperty("rtime"))
                object.rtime = message.rtime;
            if (message.endpos && message.endpos.length) {
                object.endpos = [];
                for (var j = 0; j < message.endpos.length; ++j)
                    object.endpos[j] = options.json && !isFinite(message.endpos[j]) ? String(message.endpos[j]) : message.endpos[j];
            }
            if (message.startpos && message.startpos.length) {
                object.startpos = [];
                for (var j = 0; j < message.startpos.length; ++j)
                    object.startpos[j] = options.json && !isFinite(message.startpos[j]) ? String(message.startpos[j]) : message.startpos[j];
            }
            if (message.right && message.right.length) {
                object.right = [];
                for (var j = 0; j < message.right.length; ++j)
                    object.right[j] = options.json && !isFinite(message.right[j]) ? String(message.right[j]) : message.right[j];
            }
            if (message.tx_defidx != null && message.hasOwnProperty("tx_defidx"))
                object.tx_defidx = message.tx_defidx;
            if (message.entindex != null && message.hasOwnProperty("entindex"))
                object.entindex = message.entindex;
            if (message.hitbox != null && message.hasOwnProperty("hitbox"))
                object.hitbox = message.hitbox;
            if (message.creationtime != null && message.hasOwnProperty("creationtime"))
                object.creationtime = options.json && !isFinite(message.creationtime) ? String(message.creationtime) : message.creationtime;
            if (message.equipslot != null && message.hasOwnProperty("equipslot"))
                object.equipslot = message.equipslot;
            if (message.trace_id != null && message.hasOwnProperty("trace_id"))
                object.trace_id = message.trace_id;
            if (message.normal && message.normal.length) {
                object.normal = [];
                for (var j = 0; j < message.normal.length; ++j)
                    object.normal[j] = options.json && !isFinite(message.normal[j]) ? String(message.normal[j]) : message.normal[j];
            }
            if (message.tint_id != null && message.hasOwnProperty("tint_id"))
                object.tint_id = message.tint_id;
            return object;
        };
    
        /**
         * Converts this PlayerDecalDigitalSignature to JSON.
         * @function toJSON
         * @memberof PlayerDecalDigitalSignature
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlayerDecalDigitalSignature.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return PlayerDecalDigitalSignature;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientPlayerDecalSign = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientPlayerDecalSign.
         * @exports ICMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @interface ICMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @property {IPlayerDecalDigitalSignature|null} [data] CMsgGCCStrike15_v2_ClientPlayerDecalSign data
         * @property {number|Long|null} [itemid] CMsgGCCStrike15_v2_ClientPlayerDecalSign itemid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientPlayerDecalSign.
         * @exports CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientPlayerDecalSign.
         * @implements ICMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientPlayerDecalSign=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientPlayerDecalSign(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientPlayerDecalSign data.
         * @member {IPlayerDecalDigitalSignature|null|undefined} data
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.prototype.data = null;
    
        /**
         * CMsgGCCStrike15_v2_ClientPlayerDecalSign itemid.
         * @member {number|Long} itemid
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.prototype.itemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientPlayerDecalSign instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPlayerDecalSign=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientPlayerDecalSign} CMsgGCCStrike15_v2_ClientPlayerDecalSign instance
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientPlayerDecalSign(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPlayerDecalSign message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPlayerDecalSign.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPlayerDecalSign} message CMsgGCCStrike15_v2_ClientPlayerDecalSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.data != null && message.hasOwnProperty("data"))
                $root.PlayerDecalDigitalSignature.encode(message.data, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.itemid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPlayerDecalSign message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPlayerDecalSign.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPlayerDecalSign} message CMsgGCCStrike15_v2_ClientPlayerDecalSign message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPlayerDecalSign message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientPlayerDecalSign} CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientPlayerDecalSign();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.data = $root.PlayerDecalDigitalSignature.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.itemid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPlayerDecalSign message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientPlayerDecalSign} CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientPlayerDecalSign message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.data != null && message.hasOwnProperty("data")) {
                var error = $root.PlayerDecalDigitalSignature.verify(message.data);
                if (error)
                    return "data." + error;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid) && !(message.itemid && $util.isInteger(message.itemid.low) && $util.isInteger(message.itemid.high)))
                    return "itemid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientPlayerDecalSign message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientPlayerDecalSign} CMsgGCCStrike15_v2_ClientPlayerDecalSign
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientPlayerDecalSign)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientPlayerDecalSign();
            if (object.data != null) {
                if (typeof object.data !== "object")
                    throw TypeError(".CMsgGCCStrike15_v2_ClientPlayerDecalSign.data: object expected");
                message.data = $root.PlayerDecalDigitalSignature.fromObject(object.data);
            }
            if (object.itemid != null)
                if ($util.Long)
                    (message.itemid = $util.Long.fromValue(object.itemid)).unsigned = true;
                else if (typeof object.itemid === "string")
                    message.itemid = parseInt(object.itemid, 10);
                else if (typeof object.itemid === "number")
                    message.itemid = object.itemid;
                else if (typeof object.itemid === "object")
                    message.itemid = new $util.LongBits(object.itemid.low >>> 0, object.itemid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientPlayerDecalSign message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @static
         * @param {CMsgGCCStrike15_v2_ClientPlayerDecalSign} message CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.data = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.itemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemid = options.longs === String ? "0" : 0;
            }
            if (message.data != null && message.hasOwnProperty("data"))
                object.data = $root.PlayerDecalDigitalSignature.toObject(message.data, options);
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (typeof message.itemid === "number")
                    object.itemid = options.longs === String ? String(message.itemid) : message.itemid;
                else
                    object.itemid = options.longs === String ? $util.Long.prototype.toString.call(message.itemid) : options.longs === Number ? new $util.LongBits(message.itemid.low >>> 0, message.itemid.high >>> 0).toNumber(true) : message.itemid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientPlayerDecalSign to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientPlayerDecalSign
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientPlayerDecalSign.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientPlayerDecalSign;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientLogonFatalError = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientLogonFatalError.
         * @exports ICMsgGCCStrike15_v2_ClientLogonFatalError
         * @interface ICMsgGCCStrike15_v2_ClientLogonFatalError
         * @property {number|null} [errorcode] CMsgGCCStrike15_v2_ClientLogonFatalError errorcode
         * @property {string|null} [message] CMsgGCCStrike15_v2_ClientLogonFatalError message
         * @property {string|null} [country] CMsgGCCStrike15_v2_ClientLogonFatalError country
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientLogonFatalError.
         * @exports CMsgGCCStrike15_v2_ClientLogonFatalError
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientLogonFatalError.
         * @implements ICMsgGCCStrike15_v2_ClientLogonFatalError
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientLogonFatalError=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientLogonFatalError(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientLogonFatalError errorcode.
         * @member {number} errorcode
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @instance
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.prototype.errorcode = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientLogonFatalError message.
         * @member {string} message
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @instance
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.prototype.message = "";
    
        /**
         * CMsgGCCStrike15_v2_ClientLogonFatalError country.
         * @member {string} country
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @instance
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.prototype.country = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientLogonFatalError instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientLogonFatalError=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientLogonFatalError} CMsgGCCStrike15_v2_ClientLogonFatalError instance
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientLogonFatalError(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientLogonFatalError message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientLogonFatalError.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientLogonFatalError} message CMsgGCCStrike15_v2_ClientLogonFatalError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorcode != null && message.hasOwnProperty("errorcode"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.errorcode);
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            if (message.country != null && message.hasOwnProperty("country"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.country);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientLogonFatalError message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientLogonFatalError.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientLogonFatalError} message CMsgGCCStrike15_v2_ClientLogonFatalError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientLogonFatalError message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientLogonFatalError} CMsgGCCStrike15_v2_ClientLogonFatalError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientLogonFatalError();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.errorcode = reader.uint32();
                    break;
                case 2:
                    message.message = reader.string();
                    break;
                case 3:
                    message.country = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientLogonFatalError message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientLogonFatalError} CMsgGCCStrike15_v2_ClientLogonFatalError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientLogonFatalError message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorcode != null && message.hasOwnProperty("errorcode"))
                if (!$util.isInteger(message.errorcode))
                    return "errorcode: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            if (message.country != null && message.hasOwnProperty("country"))
                if (!$util.isString(message.country))
                    return "country: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientLogonFatalError message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientLogonFatalError} CMsgGCCStrike15_v2_ClientLogonFatalError
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientLogonFatalError)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientLogonFatalError();
            if (object.errorcode != null)
                message.errorcode = object.errorcode >>> 0;
            if (object.message != null)
                message.message = String(object.message);
            if (object.country != null)
                message.country = String(object.country);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientLogonFatalError message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @static
         * @param {CMsgGCCStrike15_v2_ClientLogonFatalError} message CMsgGCCStrike15_v2_ClientLogonFatalError
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorcode = 0;
                object.message = "";
                object.country = "";
            }
            if (message.errorcode != null && message.hasOwnProperty("errorcode"))
                object.errorcode = message.errorcode;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            if (message.country != null && message.hasOwnProperty("country"))
                object.country = message.country;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientLogonFatalError to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientLogonFatalError
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientLogonFatalError.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientLogonFatalError;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientPollState = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientPollState.
         * @exports ICMsgGCCStrike15_v2_ClientPollState
         * @interface ICMsgGCCStrike15_v2_ClientPollState
         * @property {number|null} [pollid] CMsgGCCStrike15_v2_ClientPollState pollid
         * @property {Array.<string>|null} [names] CMsgGCCStrike15_v2_ClientPollState names
         * @property {Array.<number>|null} [values] CMsgGCCStrike15_v2_ClientPollState values
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientPollState.
         * @exports CMsgGCCStrike15_v2_ClientPollState
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientPollState.
         * @implements ICMsgGCCStrike15_v2_ClientPollState
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientPollState=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientPollState(properties) {
            this.names = [];
            this.values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientPollState pollid.
         * @member {number} pollid
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPollState.prototype.pollid = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientPollState names.
         * @member {Array.<string>} names
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPollState.prototype.names = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_ClientPollState values.
         * @member {Array.<number>} values
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPollState.prototype.values = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientPollState instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPollState=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientPollState} CMsgGCCStrike15_v2_ClientPollState instance
         */
        CMsgGCCStrike15_v2_ClientPollState.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientPollState(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPollState message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPollState.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPollState} message CMsgGCCStrike15_v2_ClientPollState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPollState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pollid != null && message.hasOwnProperty("pollid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pollid);
            if (message.names != null && message.names.length)
                for (var i = 0; i < message.names.length; ++i)
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.names[i]);
            if (message.values != null && message.values.length)
                for (var i = 0; i < message.values.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.values[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPollState message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPollState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPollState} message CMsgGCCStrike15_v2_ClientPollState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPollState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPollState message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientPollState} CMsgGCCStrike15_v2_ClientPollState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPollState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientPollState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pollid = reader.uint32();
                    break;
                case 2:
                    if (!(message.names && message.names.length))
                        message.names = [];
                    message.names.push(reader.string());
                    break;
                case 3:
                    if (!(message.values && message.values.length))
                        message.values = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.values.push(reader.int32());
                    } else
                        message.values.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPollState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientPollState} CMsgGCCStrike15_v2_ClientPollState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPollState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientPollState message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientPollState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pollid != null && message.hasOwnProperty("pollid"))
                if (!$util.isInteger(message.pollid))
                    return "pollid: integer expected";
            if (message.names != null && message.hasOwnProperty("names")) {
                if (!Array.isArray(message.names))
                    return "names: array expected";
                for (var i = 0; i < message.names.length; ++i)
                    if (!$util.isString(message.names[i]))
                        return "names: string[] expected";
            }
            if (message.values != null && message.hasOwnProperty("values")) {
                if (!Array.isArray(message.values))
                    return "values: array expected";
                for (var i = 0; i < message.values.length; ++i)
                    if (!$util.isInteger(message.values[i]))
                        return "values: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientPollState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientPollState} CMsgGCCStrike15_v2_ClientPollState
         */
        CMsgGCCStrike15_v2_ClientPollState.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientPollState)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientPollState();
            if (object.pollid != null)
                message.pollid = object.pollid >>> 0;
            if (object.names) {
                if (!Array.isArray(object.names))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientPollState.names: array expected");
                message.names = [];
                for (var i = 0; i < object.names.length; ++i)
                    message.names[i] = String(object.names[i]);
            }
            if (object.values) {
                if (!Array.isArray(object.values))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientPollState.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i)
                    message.values[i] = object.values[i] | 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientPollState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @static
         * @param {CMsgGCCStrike15_v2_ClientPollState} message CMsgGCCStrike15_v2_ClientPollState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientPollState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.names = [];
                object.values = [];
            }
            if (options.defaults)
                object.pollid = 0;
            if (message.pollid != null && message.hasOwnProperty("pollid"))
                object.pollid = message.pollid;
            if (message.names && message.names.length) {
                object.names = [];
                for (var j = 0; j < message.names.length; ++j)
                    object.names[j] = message.names[j];
            }
            if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = message.values[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientPollState to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientPollState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientPollState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientPollState;
    })();
    
    $root.CMsgGCCStrike15_v2_Party_Register = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Party_Register.
         * @exports ICMsgGCCStrike15_v2_Party_Register
         * @interface ICMsgGCCStrike15_v2_Party_Register
         * @property {number|null} [id] CMsgGCCStrike15_v2_Party_Register id
         * @property {number|null} [ver] CMsgGCCStrike15_v2_Party_Register ver
         * @property {number|null} [apr] CMsgGCCStrike15_v2_Party_Register apr
         * @property {number|null} [ark] CMsgGCCStrike15_v2_Party_Register ark
         * @property {number|null} [nby] CMsgGCCStrike15_v2_Party_Register nby
         * @property {number|null} [grp] CMsgGCCStrike15_v2_Party_Register grp
         * @property {number|null} [slots] CMsgGCCStrike15_v2_Party_Register slots
         * @property {number|null} [launcher] CMsgGCCStrike15_v2_Party_Register launcher
         * @property {number|null} [game_type] CMsgGCCStrike15_v2_Party_Register game_type
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Party_Register.
         * @exports CMsgGCCStrike15_v2_Party_Register
         * @classdesc Represents a CMsgGCCStrike15_v2_Party_Register.
         * @implements ICMsgGCCStrike15_v2_Party_Register
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Party_Register=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Party_Register(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Party_Register id.
         * @member {number} id
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.id = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register ver.
         * @member {number} ver
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.ver = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register apr.
         * @member {number} apr
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.apr = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register ark.
         * @member {number} ark
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.ark = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register nby.
         * @member {number} nby
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.nby = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register grp.
         * @member {number} grp
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.grp = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register slots.
         * @member {number} slots
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.slots = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register launcher.
         * @member {number} launcher
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.launcher = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Register game_type.
         * @member {number} game_type
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.game_type = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Party_Register instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Register=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Party_Register} CMsgGCCStrike15_v2_Party_Register instance
         */
        CMsgGCCStrike15_v2_Party_Register.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Party_Register(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Register message. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Register.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Register} message CMsgGCCStrike15_v2_Party_Register message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Register.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.ver != null && message.hasOwnProperty("ver"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ver);
            if (message.apr != null && message.hasOwnProperty("apr"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.apr);
            if (message.ark != null && message.hasOwnProperty("ark"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ark);
            if (message.nby != null && message.hasOwnProperty("nby"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.nby);
            if (message.grp != null && message.hasOwnProperty("grp"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.grp);
            if (message.slots != null && message.hasOwnProperty("slots"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.slots);
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.launcher);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.game_type);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Register message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Register.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Register} message CMsgGCCStrike15_v2_Party_Register message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Register.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Register message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Party_Register} CMsgGCCStrike15_v2_Party_Register
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Register.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Party_Register();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.ver = reader.uint32();
                    break;
                case 3:
                    message.apr = reader.uint32();
                    break;
                case 4:
                    message.ark = reader.uint32();
                    break;
                case 5:
                    message.nby = reader.uint32();
                    break;
                case 6:
                    message.grp = reader.uint32();
                    break;
                case 7:
                    message.slots = reader.uint32();
                    break;
                case 8:
                    message.launcher = reader.uint32();
                    break;
                case 9:
                    message.game_type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Register message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Party_Register} CMsgGCCStrike15_v2_Party_Register
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Register.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Party_Register message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Party_Register.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.ver != null && message.hasOwnProperty("ver"))
                if (!$util.isInteger(message.ver))
                    return "ver: integer expected";
            if (message.apr != null && message.hasOwnProperty("apr"))
                if (!$util.isInteger(message.apr))
                    return "apr: integer expected";
            if (message.ark != null && message.hasOwnProperty("ark"))
                if (!$util.isInteger(message.ark))
                    return "ark: integer expected";
            if (message.nby != null && message.hasOwnProperty("nby"))
                if (!$util.isInteger(message.nby))
                    return "nby: integer expected";
            if (message.grp != null && message.hasOwnProperty("grp"))
                if (!$util.isInteger(message.grp))
                    return "grp: integer expected";
            if (message.slots != null && message.hasOwnProperty("slots"))
                if (!$util.isInteger(message.slots))
                    return "slots: integer expected";
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                if (!$util.isInteger(message.launcher))
                    return "launcher: integer expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Party_Register message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Party_Register} CMsgGCCStrike15_v2_Party_Register
         */
        CMsgGCCStrike15_v2_Party_Register.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Party_Register)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Party_Register();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.ver != null)
                message.ver = object.ver >>> 0;
            if (object.apr != null)
                message.apr = object.apr >>> 0;
            if (object.ark != null)
                message.ark = object.ark >>> 0;
            if (object.nby != null)
                message.nby = object.nby >>> 0;
            if (object.grp != null)
                message.grp = object.grp >>> 0;
            if (object.slots != null)
                message.slots = object.slots >>> 0;
            if (object.launcher != null)
                message.launcher = object.launcher >>> 0;
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Party_Register message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @static
         * @param {CMsgGCCStrike15_v2_Party_Register} message CMsgGCCStrike15_v2_Party_Register
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Party_Register.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.ver = 0;
                object.apr = 0;
                object.ark = 0;
                object.nby = 0;
                object.grp = 0;
                object.slots = 0;
                object.launcher = 0;
                object.game_type = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.ver != null && message.hasOwnProperty("ver"))
                object.ver = message.ver;
            if (message.apr != null && message.hasOwnProperty("apr"))
                object.apr = message.apr;
            if (message.ark != null && message.hasOwnProperty("ark"))
                object.ark = message.ark;
            if (message.nby != null && message.hasOwnProperty("nby"))
                object.nby = message.nby;
            if (message.grp != null && message.hasOwnProperty("grp"))
                object.grp = message.grp;
            if (message.slots != null && message.hasOwnProperty("slots"))
                object.slots = message.slots;
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                object.launcher = message.launcher;
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Party_Register to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Party_Register
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Party_Register.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Party_Register;
    })();
    
    $root.CMsgGCCStrike15_v2_Party_Search = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Party_Search.
         * @exports ICMsgGCCStrike15_v2_Party_Search
         * @interface ICMsgGCCStrike15_v2_Party_Search
         * @property {number|null} [ver] CMsgGCCStrike15_v2_Party_Search ver
         * @property {number|null} [apr] CMsgGCCStrike15_v2_Party_Search apr
         * @property {number|null} [ark] CMsgGCCStrike15_v2_Party_Search ark
         * @property {Array.<number>|null} [grps] CMsgGCCStrike15_v2_Party_Search grps
         * @property {number|null} [launcher] CMsgGCCStrike15_v2_Party_Search launcher
         * @property {number|null} [game_type] CMsgGCCStrike15_v2_Party_Search game_type
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Party_Search.
         * @exports CMsgGCCStrike15_v2_Party_Search
         * @classdesc Represents a CMsgGCCStrike15_v2_Party_Search.
         * @implements ICMsgGCCStrike15_v2_Party_Search
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Party_Search=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Party_Search(properties) {
            this.grps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Party_Search ver.
         * @member {number} ver
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.ver = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Search apr.
         * @member {number} apr
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.apr = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Search ark.
         * @member {number} ark
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.ark = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Search grps.
         * @member {Array.<number>} grps
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.grps = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_Party_Search launcher.
         * @member {number} launcher
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.launcher = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Search game_type.
         * @member {number} game_type
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.game_type = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Party_Search instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Search=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Party_Search} CMsgGCCStrike15_v2_Party_Search instance
         */
        CMsgGCCStrike15_v2_Party_Search.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Party_Search(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Search message. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Search.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Search} message CMsgGCCStrike15_v2_Party_Search message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Search.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ver != null && message.hasOwnProperty("ver"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ver);
            if (message.apr != null && message.hasOwnProperty("apr"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.apr);
            if (message.ark != null && message.hasOwnProperty("ark"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ark);
            if (message.grps != null && message.grps.length)
                for (var i = 0; i < message.grps.length; ++i)
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.grps[i]);
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.launcher);
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.game_type);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Search message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Search.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Search} message CMsgGCCStrike15_v2_Party_Search message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Search.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Search message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Party_Search} CMsgGCCStrike15_v2_Party_Search
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Search.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Party_Search();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ver = reader.uint32();
                    break;
                case 2:
                    message.apr = reader.uint32();
                    break;
                case 3:
                    message.ark = reader.uint32();
                    break;
                case 4:
                    if (!(message.grps && message.grps.length))
                        message.grps = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.grps.push(reader.uint32());
                    } else
                        message.grps.push(reader.uint32());
                    break;
                case 5:
                    message.launcher = reader.uint32();
                    break;
                case 6:
                    message.game_type = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Search message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Party_Search} CMsgGCCStrike15_v2_Party_Search
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Search.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Party_Search message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Party_Search.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ver != null && message.hasOwnProperty("ver"))
                if (!$util.isInteger(message.ver))
                    return "ver: integer expected";
            if (message.apr != null && message.hasOwnProperty("apr"))
                if (!$util.isInteger(message.apr))
                    return "apr: integer expected";
            if (message.ark != null && message.hasOwnProperty("ark"))
                if (!$util.isInteger(message.ark))
                    return "ark: integer expected";
            if (message.grps != null && message.hasOwnProperty("grps")) {
                if (!Array.isArray(message.grps))
                    return "grps: array expected";
                for (var i = 0; i < message.grps.length; ++i)
                    if (!$util.isInteger(message.grps[i]))
                        return "grps: integer[] expected";
            }
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                if (!$util.isInteger(message.launcher))
                    return "launcher: integer expected";
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                if (!$util.isInteger(message.game_type))
                    return "game_type: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Party_Search message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Party_Search} CMsgGCCStrike15_v2_Party_Search
         */
        CMsgGCCStrike15_v2_Party_Search.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Party_Search)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Party_Search();
            if (object.ver != null)
                message.ver = object.ver >>> 0;
            if (object.apr != null)
                message.apr = object.apr >>> 0;
            if (object.ark != null)
                message.ark = object.ark >>> 0;
            if (object.grps) {
                if (!Array.isArray(object.grps))
                    throw TypeError(".CMsgGCCStrike15_v2_Party_Search.grps: array expected");
                message.grps = [];
                for (var i = 0; i < object.grps.length; ++i)
                    message.grps[i] = object.grps[i] >>> 0;
            }
            if (object.launcher != null)
                message.launcher = object.launcher >>> 0;
            if (object.game_type != null)
                message.game_type = object.game_type >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Party_Search message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @static
         * @param {CMsgGCCStrike15_v2_Party_Search} message CMsgGCCStrike15_v2_Party_Search
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Party_Search.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.grps = [];
            if (options.defaults) {
                object.ver = 0;
                object.apr = 0;
                object.ark = 0;
                object.launcher = 0;
                object.game_type = 0;
            }
            if (message.ver != null && message.hasOwnProperty("ver"))
                object.ver = message.ver;
            if (message.apr != null && message.hasOwnProperty("apr"))
                object.apr = message.apr;
            if (message.ark != null && message.hasOwnProperty("ark"))
                object.ark = message.ark;
            if (message.grps && message.grps.length) {
                object.grps = [];
                for (var j = 0; j < message.grps.length; ++j)
                    object.grps[j] = message.grps[j];
            }
            if (message.launcher != null && message.hasOwnProperty("launcher"))
                object.launcher = message.launcher;
            if (message.game_type != null && message.hasOwnProperty("game_type"))
                object.game_type = message.game_type;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Party_Search to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Party_Search
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Party_Search.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Party_Search;
    })();
    
    $root.CMsgGCCStrike15_v2_Party_SearchResults = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Party_SearchResults.
         * @exports ICMsgGCCStrike15_v2_Party_SearchResults
         * @interface ICMsgGCCStrike15_v2_Party_SearchResults
         * @property {Array.<CMsgGCCStrike15_v2_Party_SearchResults.IEntry>|null} [entries] CMsgGCCStrike15_v2_Party_SearchResults entries
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Party_SearchResults.
         * @exports CMsgGCCStrike15_v2_Party_SearchResults
         * @classdesc Represents a CMsgGCCStrike15_v2_Party_SearchResults.
         * @implements ICMsgGCCStrike15_v2_Party_SearchResults
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Party_SearchResults=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Party_SearchResults(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Party_SearchResults entries.
         * @member {Array.<CMsgGCCStrike15_v2_Party_SearchResults.IEntry>} entries
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @instance
         */
        CMsgGCCStrike15_v2_Party_SearchResults.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Party_SearchResults instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_SearchResults=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Party_SearchResults} CMsgGCCStrike15_v2_Party_SearchResults instance
         */
        CMsgGCCStrike15_v2_Party_SearchResults.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Party_SearchResults(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_SearchResults message. Does not implicitly {@link CMsgGCCStrike15_v2_Party_SearchResults.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_SearchResults} message CMsgGCCStrike15_v2_Party_SearchResults message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_SearchResults.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_SearchResults message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Party_SearchResults.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_SearchResults} message CMsgGCCStrike15_v2_Party_SearchResults message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_SearchResults.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_SearchResults message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Party_SearchResults} CMsgGCCStrike15_v2_Party_SearchResults
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_SearchResults.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Party_SearchResults();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgGCCStrike15_v2_Party_SearchResults.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_SearchResults message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Party_SearchResults} CMsgGCCStrike15_v2_Party_SearchResults
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_SearchResults.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Party_SearchResults message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Party_SearchResults.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Party_SearchResults message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Party_SearchResults} CMsgGCCStrike15_v2_Party_SearchResults
         */
        CMsgGCCStrike15_v2_Party_SearchResults.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Party_SearchResults)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Party_SearchResults();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgGCCStrike15_v2_Party_SearchResults.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_Party_SearchResults.entries: object expected");
                    message.entries[i] = $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Party_SearchResults message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @static
         * @param {CMsgGCCStrike15_v2_Party_SearchResults} message CMsgGCCStrike15_v2_Party_SearchResults
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Party_SearchResults.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Party_SearchResults to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Party_SearchResults
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Party_SearchResults.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_Party_SearchResults.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults
             * @interface IEntry
             * @property {number|null} [id] Entry id
             * @property {number|null} [grp] Entry grp
             * @property {number|null} [game_type] Entry game_type
             * @property {number|null} [apr] Entry apr
             * @property {number|null} [ark] Entry ark
             * @property {number|null} [loc] Entry loc
             */
    
            /**
             * Constructs a new Entry.
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {CMsgGCCStrike15_v2_Party_SearchResults.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry id.
             * @member {number} id
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.id = 0;
    
            /**
             * Entry grp.
             * @member {number} grp
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.grp = 0;
    
            /**
             * Entry game_type.
             * @member {number} game_type
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.game_type = 0;
    
            /**
             * Entry apr.
             * @member {number} apr
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.apr = 0;
    
            /**
             * Entry ark.
             * @member {number} ark
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.ark = 0;
    
            /**
             * Entry loc.
             * @member {number} loc
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             */
            Entry.prototype.loc = 0;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_Party_SearchResults.IEntry=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_Party_SearchResults.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link CMsgGCCStrike15_v2_Party_SearchResults.Entry.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_Party_SearchResults.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                if (message.grp != null && message.hasOwnProperty("grp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.grp);
                if (message.game_type != null && message.hasOwnProperty("game_type"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.game_type);
                if (message.apr != null && message.hasOwnProperty("apr"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.apr);
                if (message.ark != null && message.hasOwnProperty("ark"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ark);
                if (message.loc != null && message.hasOwnProperty("loc"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.loc);
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Party_SearchResults.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_Party_SearchResults.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_Party_SearchResults.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.uint32();
                        break;
                    case 2:
                        message.grp = reader.uint32();
                        break;
                    case 3:
                        message.game_type = reader.uint32();
                        break;
                    case 4:
                        message.apr = reader.uint32();
                        break;
                    case 5:
                        message.ark = reader.uint32();
                        break;
                    case 6:
                        message.loc = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_Party_SearchResults.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isInteger(message.id))
                        return "id: integer expected";
                if (message.grp != null && message.hasOwnProperty("grp"))
                    if (!$util.isInteger(message.grp))
                        return "grp: integer expected";
                if (message.game_type != null && message.hasOwnProperty("game_type"))
                    if (!$util.isInteger(message.game_type))
                        return "game_type: integer expected";
                if (message.apr != null && message.hasOwnProperty("apr"))
                    if (!$util.isInteger(message.apr))
                        return "apr: integer expected";
                if (message.ark != null && message.hasOwnProperty("ark"))
                    if (!$util.isInteger(message.ark))
                        return "ark: integer expected";
                if (message.loc != null && message.hasOwnProperty("loc"))
                    if (!$util.isInteger(message.loc))
                        return "loc: integer expected";
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_Party_SearchResults.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_Party_SearchResults.Entry();
                if (object.id != null)
                    message.id = object.id >>> 0;
                if (object.grp != null)
                    message.grp = object.grp >>> 0;
                if (object.game_type != null)
                    message.game_type = object.game_type >>> 0;
                if (object.apr != null)
                    message.apr = object.apr >>> 0;
                if (object.ark != null)
                    message.ark = object.ark >>> 0;
                if (object.loc != null)
                    message.loc = object.loc >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_Party_SearchResults.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.id = 0;
                    object.grp = 0;
                    object.game_type = 0;
                    object.apr = 0;
                    object.ark = 0;
                    object.loc = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.grp != null && message.hasOwnProperty("grp"))
                    object.grp = message.grp;
                if (message.game_type != null && message.hasOwnProperty("game_type"))
                    object.game_type = message.game_type;
                if (message.apr != null && message.hasOwnProperty("apr"))
                    object.apr = message.apr;
                if (message.ark != null && message.hasOwnProperty("ark"))
                    object.ark = message.ark;
                if (message.loc != null && message.hasOwnProperty("loc"))
                    object.loc = message.loc;
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_Party_SearchResults.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        return CMsgGCCStrike15_v2_Party_SearchResults;
    })();
    
    $root.CMsgGCCStrike15_v2_Party_Invite = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Party_Invite.
         * @exports ICMsgGCCStrike15_v2_Party_Invite
         * @interface ICMsgGCCStrike15_v2_Party_Invite
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_Party_Invite accountid
         * @property {number|null} [lobbyid] CMsgGCCStrike15_v2_Party_Invite lobbyid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Party_Invite.
         * @exports CMsgGCCStrike15_v2_Party_Invite
         * @classdesc Represents a CMsgGCCStrike15_v2_Party_Invite.
         * @implements ICMsgGCCStrike15_v2_Party_Invite
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Party_Invite=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Party_Invite(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Party_Invite accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Invite.prototype.accountid = 0;
    
        /**
         * CMsgGCCStrike15_v2_Party_Invite lobbyid.
         * @member {number} lobbyid
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @instance
         */
        CMsgGCCStrike15_v2_Party_Invite.prototype.lobbyid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Party_Invite instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Invite=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Party_Invite} CMsgGCCStrike15_v2_Party_Invite instance
         */
        CMsgGCCStrike15_v2_Party_Invite.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Party_Invite(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Invite message. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Invite.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Invite} message CMsgGCCStrike15_v2_Party_Invite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Invite.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.lobbyid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Party_Invite message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Party_Invite.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {ICMsgGCCStrike15_v2_Party_Invite} message CMsgGCCStrike15_v2_Party_Invite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Party_Invite.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Invite message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Party_Invite} CMsgGCCStrike15_v2_Party_Invite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Invite.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Party_Invite();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.lobbyid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Party_Invite message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Party_Invite} CMsgGCCStrike15_v2_Party_Invite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Party_Invite.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Party_Invite message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Party_Invite.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                if (!$util.isInteger(message.lobbyid))
                    return "lobbyid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Party_Invite message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Party_Invite} CMsgGCCStrike15_v2_Party_Invite
         */
        CMsgGCCStrike15_v2_Party_Invite.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Party_Invite)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Party_Invite();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.lobbyid != null)
                message.lobbyid = object.lobbyid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Party_Invite message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @static
         * @param {CMsgGCCStrike15_v2_Party_Invite} message CMsgGCCStrike15_v2_Party_Invite
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Party_Invite.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                object.lobbyid = 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                object.lobbyid = message.lobbyid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Party_Invite to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Party_Invite
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Party_Invite.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_Party_Invite;
    })();
    
    $root.CMsgGCCStrike15_v2_Account_RequestCoPlays = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_Account_RequestCoPlays.
         * @exports ICMsgGCCStrike15_v2_Account_RequestCoPlays
         * @interface ICMsgGCCStrike15_v2_Account_RequestCoPlays
         * @property {Array.<CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer>|null} [players] CMsgGCCStrike15_v2_Account_RequestCoPlays players
         * @property {number|null} [servertime] CMsgGCCStrike15_v2_Account_RequestCoPlays servertime
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_Account_RequestCoPlays.
         * @exports CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @classdesc Represents a CMsgGCCStrike15_v2_Account_RequestCoPlays.
         * @implements ICMsgGCCStrike15_v2_Account_RequestCoPlays
         * @constructor
         * @param {ICMsgGCCStrike15_v2_Account_RequestCoPlays=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_Account_RequestCoPlays(properties) {
            this.players = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_Account_RequestCoPlays players.
         * @member {Array.<CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer>} players
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @instance
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.prototype.players = $util.emptyArray;
    
        /**
         * CMsgGCCStrike15_v2_Account_RequestCoPlays servertime.
         * @member {number} servertime
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @instance
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.prototype.servertime = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_Account_RequestCoPlays instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {ICMsgGCCStrike15_v2_Account_RequestCoPlays=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays} CMsgGCCStrike15_v2_Account_RequestCoPlays instance
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.create = function create(properties) {
            return new CMsgGCCStrike15_v2_Account_RequestCoPlays(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Account_RequestCoPlays message. Does not implicitly {@link CMsgGCCStrike15_v2_Account_RequestCoPlays.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {ICMsgGCCStrike15_v2_Account_RequestCoPlays} message CMsgGCCStrike15_v2_Account_RequestCoPlays message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.players != null && message.players.length)
                for (var i = 0; i < message.players.length; ++i)
                    $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.encode(message.players[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.servertime);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_Account_RequestCoPlays message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Account_RequestCoPlays.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {ICMsgGCCStrike15_v2_Account_RequestCoPlays} message CMsgGCCStrike15_v2_Account_RequestCoPlays message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Account_RequestCoPlays message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays} CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Account_RequestCoPlays();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.players && message.players.length))
                        message.players = [];
                    message.players.push($root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.servertime = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_Account_RequestCoPlays message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays} CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_Account_RequestCoPlays message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.players != null && message.hasOwnProperty("players")) {
                if (!Array.isArray(message.players))
                    return "players: array expected";
                for (var i = 0; i < message.players.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.verify(message.players[i]);
                    if (error)
                        return "players." + error;
                }
            }
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                if (!$util.isInteger(message.servertime))
                    return "servertime: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_Account_RequestCoPlays message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays} CMsgGCCStrike15_v2_Account_RequestCoPlays
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_Account_RequestCoPlays)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_Account_RequestCoPlays();
            if (object.players) {
                if (!Array.isArray(object.players))
                    throw TypeError(".CMsgGCCStrike15_v2_Account_RequestCoPlays.players: array expected");
                message.players = [];
                for (var i = 0; i < object.players.length; ++i) {
                    if (typeof object.players[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_Account_RequestCoPlays.players: object expected");
                    message.players[i] = $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.fromObject(object.players[i]);
                }
            }
            if (object.servertime != null)
                message.servertime = object.servertime >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_Account_RequestCoPlays message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @static
         * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays} message CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.players = [];
            if (options.defaults)
                object.servertime = 0;
            if (message.players && message.players.length) {
                object.players = [];
                for (var j = 0; j < message.players.length; ++j)
                    object.players[j] = $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.toObject(message.players[j], options);
            }
            if (message.servertime != null && message.hasOwnProperty("servertime"))
                object.servertime = message.servertime;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_Account_RequestCoPlays to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_Account_RequestCoPlays.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_Account_RequestCoPlays.Player = (function() {
    
            /**
             * Properties of a Player.
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
             * @interface IPlayer
             * @property {number|null} [accountid] Player accountid
             * @property {number|null} [rtcoplay] Player rtcoplay
             * @property {boolean|null} [online] Player online
             */
    
            /**
             * Constructs a new Player.
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays
             * @classdesc Represents a Player.
             * @implements IPlayer
             * @constructor
             * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer=} [properties] Properties to set
             */
            function Player(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Player accountid.
             * @member {number} accountid
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @instance
             */
            Player.prototype.accountid = 0;
    
            /**
             * Player rtcoplay.
             * @member {number} rtcoplay
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @instance
             */
            Player.prototype.rtcoplay = 0;
    
            /**
             * Player online.
             * @member {boolean} online
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @instance
             */
            Player.prototype.online = false;
    
            /**
             * Creates a new Player instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays.Player} Player instance
             */
            Player.create = function create(properties) {
                return new Player(properties);
            };
    
            /**
             * Encodes the specified Player message. Does not implicitly {@link CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
                if (message.rtcoplay != null && message.hasOwnProperty("rtcoplay"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rtcoplay);
                if (message.online != null && message.hasOwnProperty("online"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.online);
                return writer;
            };
    
            /**
             * Encodes the specified Player message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_Account_RequestCoPlays.Player.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays.IPlayer} message Player message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Player.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.accountid = reader.uint32();
                        break;
                    case 2:
                        message.rtcoplay = reader.uint32();
                        break;
                    case 3:
                        message.online = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Player message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays.Player} Player
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Player.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Player message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Player.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    if (!$util.isInteger(message.accountid))
                        return "accountid: integer expected";
                if (message.rtcoplay != null && message.hasOwnProperty("rtcoplay"))
                    if (!$util.isInteger(message.rtcoplay))
                        return "rtcoplay: integer expected";
                if (message.online != null && message.hasOwnProperty("online"))
                    if (typeof message.online !== "boolean")
                        return "online: boolean expected";
                return null;
            };
    
            /**
             * Creates a Player message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_Account_RequestCoPlays.Player} Player
             */
            Player.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_Account_RequestCoPlays.Player();
                if (object.accountid != null)
                    message.accountid = object.accountid >>> 0;
                if (object.rtcoplay != null)
                    message.rtcoplay = object.rtcoplay >>> 0;
                if (object.online != null)
                    message.online = Boolean(object.online);
                return message;
            };
    
            /**
             * Creates a plain object from a Player message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @static
             * @param {CMsgGCCStrike15_v2_Account_RequestCoPlays.Player} message Player
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Player.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accountid = 0;
                    object.rtcoplay = 0;
                    object.online = false;
                }
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    object.accountid = message.accountid;
                if (message.rtcoplay != null && message.hasOwnProperty("rtcoplay"))
                    object.rtcoplay = message.rtcoplay;
                if (message.online != null && message.hasOwnProperty("online"))
                    object.online = message.online;
                return object;
            };
    
            /**
             * Converts this Player to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_Account_RequestCoPlays.Player
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Player.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Player;
        })();
    
        return CMsgGCCStrike15_v2_Account_RequestCoPlays;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientToGCRequestTicket = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientToGCRequestTicket.
         * @exports ICMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @interface ICMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @property {number|Long|null} [authorized_steam_id] CMsgGCCStrike15_v2_ClientToGCRequestTicket authorized_steam_id
         * @property {number|null} [authorized_public_ip] CMsgGCCStrike15_v2_ClientToGCRequestTicket authorized_public_ip
         * @property {number|Long|null} [gameserver_steam_id] CMsgGCCStrike15_v2_ClientToGCRequestTicket gameserver_steam_id
         * @property {string|null} [gameserver_sdr_routing] CMsgGCCStrike15_v2_ClientToGCRequestTicket gameserver_sdr_routing
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientToGCRequestTicket.
         * @exports CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientToGCRequestTicket.
         * @implements ICMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestTicket=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientToGCRequestTicket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCRequestTicket authorized_steam_id.
         * @member {number|Long} authorized_steam_id
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.prototype.authorized_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCRequestTicket authorized_public_ip.
         * @member {number} authorized_public_ip
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.prototype.authorized_public_ip = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCRequestTicket gameserver_steam_id.
         * @member {number|Long} gameserver_steam_id
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.prototype.gameserver_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientToGCRequestTicket gameserver_sdr_routing.
         * @member {string} gameserver_sdr_routing
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.prototype.gameserver_sdr_routing = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientToGCRequestTicket instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestTicket=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestTicket} CMsgGCCStrike15_v2_ClientToGCRequestTicket instance
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientToGCRequestTicket(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCRequestTicket message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCRequestTicket.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestTicket} message CMsgGCCStrike15_v2_ClientToGCRequestTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.authorized_steam_id != null && message.hasOwnProperty("authorized_steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.authorized_steam_id);
            if (message.authorized_public_ip != null && message.hasOwnProperty("authorized_public_ip"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.authorized_public_ip);
            if (message.gameserver_steam_id != null && message.hasOwnProperty("gameserver_steam_id"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.gameserver_steam_id);
            if (message.gameserver_sdr_routing != null && message.hasOwnProperty("gameserver_sdr_routing"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.gameserver_sdr_routing);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientToGCRequestTicket message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientToGCRequestTicket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientToGCRequestTicket} message CMsgGCCStrike15_v2_ClientToGCRequestTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCRequestTicket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestTicket} CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientToGCRequestTicket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.authorized_steam_id = reader.fixed64();
                    break;
                case 2:
                    message.authorized_public_ip = reader.fixed32();
                    break;
                case 3:
                    message.gameserver_steam_id = reader.fixed64();
                    break;
                case 5:
                    message.gameserver_sdr_routing = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientToGCRequestTicket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestTicket} CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientToGCRequestTicket message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.authorized_steam_id != null && message.hasOwnProperty("authorized_steam_id"))
                if (!$util.isInteger(message.authorized_steam_id) && !(message.authorized_steam_id && $util.isInteger(message.authorized_steam_id.low) && $util.isInteger(message.authorized_steam_id.high)))
                    return "authorized_steam_id: integer|Long expected";
            if (message.authorized_public_ip != null && message.hasOwnProperty("authorized_public_ip"))
                if (!$util.isInteger(message.authorized_public_ip))
                    return "authorized_public_ip: integer expected";
            if (message.gameserver_steam_id != null && message.hasOwnProperty("gameserver_steam_id"))
                if (!$util.isInteger(message.gameserver_steam_id) && !(message.gameserver_steam_id && $util.isInteger(message.gameserver_steam_id.low) && $util.isInteger(message.gameserver_steam_id.high)))
                    return "gameserver_steam_id: integer|Long expected";
            if (message.gameserver_sdr_routing != null && message.hasOwnProperty("gameserver_sdr_routing"))
                if (!$util.isString(message.gameserver_sdr_routing))
                    return "gameserver_sdr_routing: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientToGCRequestTicket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientToGCRequestTicket} CMsgGCCStrike15_v2_ClientToGCRequestTicket
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientToGCRequestTicket)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientToGCRequestTicket();
            if (object.authorized_steam_id != null)
                if ($util.Long)
                    (message.authorized_steam_id = $util.Long.fromValue(object.authorized_steam_id)).unsigned = false;
                else if (typeof object.authorized_steam_id === "string")
                    message.authorized_steam_id = parseInt(object.authorized_steam_id, 10);
                else if (typeof object.authorized_steam_id === "number")
                    message.authorized_steam_id = object.authorized_steam_id;
                else if (typeof object.authorized_steam_id === "object")
                    message.authorized_steam_id = new $util.LongBits(object.authorized_steam_id.low >>> 0, object.authorized_steam_id.high >>> 0).toNumber();
            if (object.authorized_public_ip != null)
                message.authorized_public_ip = object.authorized_public_ip >>> 0;
            if (object.gameserver_steam_id != null)
                if ($util.Long)
                    (message.gameserver_steam_id = $util.Long.fromValue(object.gameserver_steam_id)).unsigned = false;
                else if (typeof object.gameserver_steam_id === "string")
                    message.gameserver_steam_id = parseInt(object.gameserver_steam_id, 10);
                else if (typeof object.gameserver_steam_id === "number")
                    message.gameserver_steam_id = object.gameserver_steam_id;
                else if (typeof object.gameserver_steam_id === "object")
                    message.gameserver_steam_id = new $util.LongBits(object.gameserver_steam_id.low >>> 0, object.gameserver_steam_id.high >>> 0).toNumber();
            if (object.gameserver_sdr_routing != null)
                message.gameserver_sdr_routing = String(object.gameserver_sdr_routing);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientToGCRequestTicket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @static
         * @param {CMsgGCCStrike15_v2_ClientToGCRequestTicket} message CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.authorized_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.authorized_steam_id = options.longs === String ? "0" : 0;
                object.authorized_public_ip = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.gameserver_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.gameserver_steam_id = options.longs === String ? "0" : 0;
                object.gameserver_sdr_routing = "";
            }
            if (message.authorized_steam_id != null && message.hasOwnProperty("authorized_steam_id"))
                if (typeof message.authorized_steam_id === "number")
                    object.authorized_steam_id = options.longs === String ? String(message.authorized_steam_id) : message.authorized_steam_id;
                else
                    object.authorized_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.authorized_steam_id) : options.longs === Number ? new $util.LongBits(message.authorized_steam_id.low >>> 0, message.authorized_steam_id.high >>> 0).toNumber() : message.authorized_steam_id;
            if (message.authorized_public_ip != null && message.hasOwnProperty("authorized_public_ip"))
                object.authorized_public_ip = message.authorized_public_ip;
            if (message.gameserver_steam_id != null && message.hasOwnProperty("gameserver_steam_id"))
                if (typeof message.gameserver_steam_id === "number")
                    object.gameserver_steam_id = options.longs === String ? String(message.gameserver_steam_id) : message.gameserver_steam_id;
                else
                    object.gameserver_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.gameserver_steam_id) : options.longs === Number ? new $util.LongBits(message.gameserver_steam_id.low >>> 0, message.gameserver_steam_id.high >>> 0).toNumber() : message.gameserver_steam_id;
            if (message.gameserver_sdr_routing != null && message.hasOwnProperty("gameserver_sdr_routing"))
                object.gameserver_sdr_routing = message.gameserver_sdr_routing;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientToGCRequestTicket to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientToGCRequestTicket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientToGCRequestTicket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientToGCRequestTicket;
    })();
    
    $root.CMsgGCToClientSteamDatagramTicket = (function() {
    
        /**
         * Properties of a CMsgGCToClientSteamDatagramTicket.
         * @exports ICMsgGCToClientSteamDatagramTicket
         * @interface ICMsgGCToClientSteamDatagramTicket
         * @property {Uint8Array|null} [serialized_ticket] CMsgGCToClientSteamDatagramTicket serialized_ticket
         */
    
        /**
         * Constructs a new CMsgGCToClientSteamDatagramTicket.
         * @exports CMsgGCToClientSteamDatagramTicket
         * @classdesc Represents a CMsgGCToClientSteamDatagramTicket.
         * @implements ICMsgGCToClientSteamDatagramTicket
         * @constructor
         * @param {ICMsgGCToClientSteamDatagramTicket=} [properties] Properties to set
         */
        function CMsgGCToClientSteamDatagramTicket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCToClientSteamDatagramTicket serialized_ticket.
         * @member {Uint8Array} serialized_ticket
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @instance
         */
        CMsgGCToClientSteamDatagramTicket.prototype.serialized_ticket = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgGCToClientSteamDatagramTicket instance using the specified properties.
         * @function create
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {ICMsgGCToClientSteamDatagramTicket=} [properties] Properties to set
         * @returns {CMsgGCToClientSteamDatagramTicket} CMsgGCToClientSteamDatagramTicket instance
         */
        CMsgGCToClientSteamDatagramTicket.create = function create(properties) {
            return new CMsgGCToClientSteamDatagramTicket(properties);
        };
    
        /**
         * Encodes the specified CMsgGCToClientSteamDatagramTicket message. Does not implicitly {@link CMsgGCToClientSteamDatagramTicket.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {ICMsgGCToClientSteamDatagramTicket} message CMsgGCToClientSteamDatagramTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCToClientSteamDatagramTicket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serialized_ticket != null && message.hasOwnProperty("serialized_ticket"))
                writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.serialized_ticket);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCToClientSteamDatagramTicket message, length delimited. Does not implicitly {@link CMsgGCToClientSteamDatagramTicket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {ICMsgGCToClientSteamDatagramTicket} message CMsgGCToClientSteamDatagramTicket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCToClientSteamDatagramTicket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCToClientSteamDatagramTicket message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCToClientSteamDatagramTicket} CMsgGCToClientSteamDatagramTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCToClientSteamDatagramTicket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCToClientSteamDatagramTicket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 16:
                    message.serialized_ticket = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCToClientSteamDatagramTicket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCToClientSteamDatagramTicket} CMsgGCToClientSteamDatagramTicket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCToClientSteamDatagramTicket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCToClientSteamDatagramTicket message.
         * @function verify
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCToClientSteamDatagramTicket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serialized_ticket != null && message.hasOwnProperty("serialized_ticket"))
                if (!(message.serialized_ticket && typeof message.serialized_ticket.length === "number" || $util.isString(message.serialized_ticket)))
                    return "serialized_ticket: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCToClientSteamDatagramTicket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCToClientSteamDatagramTicket} CMsgGCToClientSteamDatagramTicket
         */
        CMsgGCToClientSteamDatagramTicket.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCToClientSteamDatagramTicket)
                return object;
            var message = new $root.CMsgGCToClientSteamDatagramTicket();
            if (object.serialized_ticket != null)
                if (typeof object.serialized_ticket === "string")
                    $util.base64.decode(object.serialized_ticket, message.serialized_ticket = $util.newBuffer($util.base64.length(object.serialized_ticket)), 0);
                else if (object.serialized_ticket.length)
                    message.serialized_ticket = object.serialized_ticket;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCToClientSteamDatagramTicket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @static
         * @param {CMsgGCToClientSteamDatagramTicket} message CMsgGCToClientSteamDatagramTicket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCToClientSteamDatagramTicket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.serialized_ticket = "";
                else {
                    object.serialized_ticket = [];
                    if (options.bytes !== Array)
                        object.serialized_ticket = $util.newBuffer(object.serialized_ticket);
                }
            if (message.serialized_ticket != null && message.hasOwnProperty("serialized_ticket"))
                object.serialized_ticket = options.bytes === String ? $util.base64.encode(message.serialized_ticket, 0, message.serialized_ticket.length) : options.bytes === Array ? Array.prototype.slice.call(message.serialized_ticket) : message.serialized_ticket;
            return object;
        };
    
        /**
         * Converts this CMsgGCToClientSteamDatagramTicket to JSON.
         * @function toJSON
         * @memberof CMsgGCToClientSteamDatagramTicket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCToClientSteamDatagramTicket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCToClientSteamDatagramTicket;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestOffers = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestOffers.
         * @exports ICMsgGCCStrike15_v2_ClientRequestOffers
         * @interface ICMsgGCCStrike15_v2_ClientRequestOffers
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestOffers.
         * @exports CMsgGCCStrike15_v2_ClientRequestOffers
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestOffers.
         * @implements ICMsgGCCStrike15_v2_ClientRequestOffers
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestOffers=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestOffers(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestOffers instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestOffers=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestOffers} CMsgGCCStrike15_v2_ClientRequestOffers instance
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestOffers(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestOffers message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestOffers.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestOffers} message CMsgGCCStrike15_v2_ClientRequestOffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestOffers message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestOffers.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestOffers} message CMsgGCCStrike15_v2_ClientRequestOffers message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestOffers message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestOffers} CMsgGCCStrike15_v2_ClientRequestOffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestOffers();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestOffers message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestOffers} CMsgGCCStrike15_v2_ClientRequestOffers
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestOffers message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestOffers message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestOffers} CMsgGCCStrike15_v2_ClientRequestOffers
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestOffers)
                return object;
            return new $root.CMsgGCCStrike15_v2_ClientRequestOffers();
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestOffers message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestOffers} message CMsgGCCStrike15_v2_ClientRequestOffers
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestOffers to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestOffers
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestOffers.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestOffers;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientRequestSouvenir = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientRequestSouvenir.
         * @exports ICMsgGCCStrike15_v2_ClientRequestSouvenir
         * @interface ICMsgGCCStrike15_v2_ClientRequestSouvenir
         * @property {number|Long|null} [itemid] CMsgGCCStrike15_v2_ClientRequestSouvenir itemid
         * @property {number|Long|null} [matchid] CMsgGCCStrike15_v2_ClientRequestSouvenir matchid
         * @property {number|null} [eventid] CMsgGCCStrike15_v2_ClientRequestSouvenir eventid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientRequestSouvenir.
         * @exports CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientRequestSouvenir.
         * @implements ICMsgGCCStrike15_v2_ClientRequestSouvenir
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientRequestSouvenir=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientRequestSouvenir(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestSouvenir itemid.
         * @member {number|Long} itemid
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.prototype.itemid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestSouvenir matchid.
         * @member {number|Long} matchid
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.prototype.matchid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientRequestSouvenir eventid.
         * @member {number} eventid
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @instance
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.prototype.eventid = 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientRequestSouvenir instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestSouvenir=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientRequestSouvenir} CMsgGCCStrike15_v2_ClientRequestSouvenir instance
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientRequestSouvenir(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestSouvenir message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestSouvenir.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestSouvenir} message CMsgGCCStrike15_v2_ClientRequestSouvenir message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.itemid);
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.matchid);
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.eventid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientRequestSouvenir message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientRequestSouvenir.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientRequestSouvenir} message CMsgGCCStrike15_v2_ClientRequestSouvenir message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestSouvenir message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientRequestSouvenir} CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientRequestSouvenir();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.itemid = reader.uint64();
                    break;
                case 2:
                    message.matchid = reader.uint64();
                    break;
                case 3:
                    message.eventid = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientRequestSouvenir message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientRequestSouvenir} CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientRequestSouvenir message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (!$util.isInteger(message.itemid) && !(message.itemid && $util.isInteger(message.itemid.low) && $util.isInteger(message.itemid.high)))
                    return "itemid: integer|Long expected";
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (!$util.isInteger(message.matchid) && !(message.matchid && $util.isInteger(message.matchid.low) && $util.isInteger(message.matchid.high)))
                    return "matchid: integer|Long expected";
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (!$util.isInteger(message.eventid))
                    return "eventid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientRequestSouvenir message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientRequestSouvenir} CMsgGCCStrike15_v2_ClientRequestSouvenir
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientRequestSouvenir)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientRequestSouvenir();
            if (object.itemid != null)
                if ($util.Long)
                    (message.itemid = $util.Long.fromValue(object.itemid)).unsigned = true;
                else if (typeof object.itemid === "string")
                    message.itemid = parseInt(object.itemid, 10);
                else if (typeof object.itemid === "number")
                    message.itemid = object.itemid;
                else if (typeof object.itemid === "object")
                    message.itemid = new $util.LongBits(object.itemid.low >>> 0, object.itemid.high >>> 0).toNumber(true);
            if (object.matchid != null)
                if ($util.Long)
                    (message.matchid = $util.Long.fromValue(object.matchid)).unsigned = true;
                else if (typeof object.matchid === "string")
                    message.matchid = parseInt(object.matchid, 10);
                else if (typeof object.matchid === "number")
                    message.matchid = object.matchid;
                else if (typeof object.matchid === "object")
                    message.matchid = new $util.LongBits(object.matchid.low >>> 0, object.matchid.high >>> 0).toNumber(true);
            if (object.eventid != null)
                message.eventid = object.eventid | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientRequestSouvenir message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @static
         * @param {CMsgGCCStrike15_v2_ClientRequestSouvenir} message CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.itemid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.itemid = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.matchid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.matchid = options.longs === String ? "0" : 0;
                object.eventid = 0;
            }
            if (message.itemid != null && message.hasOwnProperty("itemid"))
                if (typeof message.itemid === "number")
                    object.itemid = options.longs === String ? String(message.itemid) : message.itemid;
                else
                    object.itemid = options.longs === String ? $util.Long.prototype.toString.call(message.itemid) : options.longs === Number ? new $util.LongBits(message.itemid.low >>> 0, message.itemid.high >>> 0).toNumber(true) : message.itemid;
            if (message.matchid != null && message.hasOwnProperty("matchid"))
                if (typeof message.matchid === "number")
                    object.matchid = options.longs === String ? String(message.matchid) : message.matchid;
                else
                    object.matchid = options.longs === String ? $util.Long.prototype.toString.call(message.matchid) : options.longs === Number ? new $util.LongBits(message.matchid.low >>> 0, message.matchid.high >>> 0).toNumber(true) : message.matchid;
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                object.eventid = message.eventid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientRequestSouvenir to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientRequestSouvenir
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientRequestSouvenir.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientRequestSouvenir;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientAccountBalance = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientAccountBalance.
         * @exports ICMsgGCCStrike15_v2_ClientAccountBalance
         * @interface ICMsgGCCStrike15_v2_ClientAccountBalance
         * @property {number|Long|null} [amount] CMsgGCCStrike15_v2_ClientAccountBalance amount
         * @property {string|null} [url] CMsgGCCStrike15_v2_ClientAccountBalance url
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientAccountBalance.
         * @exports CMsgGCCStrike15_v2_ClientAccountBalance
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientAccountBalance.
         * @implements ICMsgGCCStrike15_v2_ClientAccountBalance
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientAccountBalance=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientAccountBalance(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientAccountBalance amount.
         * @member {number|Long} amount
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @instance
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientAccountBalance url.
         * @member {string} url
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @instance
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.prototype.url = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientAccountBalance instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAccountBalance=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientAccountBalance} CMsgGCCStrike15_v2_ClientAccountBalance instance
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientAccountBalance(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientAccountBalance message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientAccountBalance.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAccountBalance} message CMsgGCCStrike15_v2_ClientAccountBalance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.amount != null && message.hasOwnProperty("amount"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.amount);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientAccountBalance message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientAccountBalance.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientAccountBalance} message CMsgGCCStrike15_v2_ClientAccountBalance message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientAccountBalance message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientAccountBalance} CMsgGCCStrike15_v2_ClientAccountBalance
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientAccountBalance();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.amount = reader.uint64();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientAccountBalance message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientAccountBalance} CMsgGCCStrike15_v2_ClientAccountBalance
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientAccountBalance message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                    return "amount: integer|Long expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientAccountBalance message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientAccountBalance} CMsgGCCStrike15_v2_ClientAccountBalance
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientAccountBalance)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientAccountBalance();
            if (object.amount != null)
                if ($util.Long)
                    (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                else if (typeof object.amount === "string")
                    message.amount = parseInt(object.amount, 10);
                else if (typeof object.amount === "number")
                    message.amount = object.amount;
                else if (typeof object.amount === "object")
                    message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
            if (object.url != null)
                message.url = String(object.url);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientAccountBalance message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @static
         * @param {CMsgGCCStrike15_v2_ClientAccountBalance} message CMsgGCCStrike15_v2_ClientAccountBalance
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.amount = options.longs === String ? "0" : 0;
                object.url = "";
            }
            if (message.amount != null && message.hasOwnProperty("amount"))
                if (typeof message.amount === "number")
                    object.amount = options.longs === String ? String(message.amount) : message.amount;
                else
                    object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientAccountBalance to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientAccountBalance
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientAccountBalance.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientAccountBalance;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientPartyJoinRelay = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientPartyJoinRelay.
         * @exports ICMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @interface ICMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @property {number|null} [accountid] CMsgGCCStrike15_v2_ClientPartyJoinRelay accountid
         * @property {number|Long|null} [lobbyid] CMsgGCCStrike15_v2_ClientPartyJoinRelay lobbyid
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientPartyJoinRelay.
         * @exports CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientPartyJoinRelay.
         * @implements ICMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientPartyJoinRelay=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientPartyJoinRelay(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientPartyJoinRelay accountid.
         * @member {number} accountid
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.prototype.accountid = 0;
    
        /**
         * CMsgGCCStrike15_v2_ClientPartyJoinRelay lobbyid.
         * @member {number|Long} lobbyid
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.prototype.lobbyid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientPartyJoinRelay instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyJoinRelay=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientPartyJoinRelay} CMsgGCCStrike15_v2_ClientPartyJoinRelay instance
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientPartyJoinRelay(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPartyJoinRelay message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyJoinRelay.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyJoinRelay} message CMsgGCCStrike15_v2_ClientPartyJoinRelay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.lobbyid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPartyJoinRelay message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyJoinRelay.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyJoinRelay} message CMsgGCCStrike15_v2_ClientPartyJoinRelay message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPartyJoinRelay message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientPartyJoinRelay} CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientPartyJoinRelay();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.accountid = reader.uint32();
                    break;
                case 2:
                    message.lobbyid = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPartyJoinRelay message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientPartyJoinRelay} CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientPartyJoinRelay message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                if (!$util.isInteger(message.lobbyid) && !(message.lobbyid && $util.isInteger(message.lobbyid.low) && $util.isInteger(message.lobbyid.high)))
                    return "lobbyid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientPartyJoinRelay message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientPartyJoinRelay} CMsgGCCStrike15_v2_ClientPartyJoinRelay
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientPartyJoinRelay)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientPartyJoinRelay();
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.lobbyid != null)
                if ($util.Long)
                    (message.lobbyid = $util.Long.fromValue(object.lobbyid)).unsigned = true;
                else if (typeof object.lobbyid === "string")
                    message.lobbyid = parseInt(object.lobbyid, 10);
                else if (typeof object.lobbyid === "number")
                    message.lobbyid = object.lobbyid;
                else if (typeof object.lobbyid === "object")
                    message.lobbyid = new $util.LongBits(object.lobbyid.low >>> 0, object.lobbyid.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientPartyJoinRelay message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @static
         * @param {CMsgGCCStrike15_v2_ClientPartyJoinRelay} message CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.accountid = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.lobbyid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lobbyid = options.longs === String ? "0" : 0;
            }
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.lobbyid != null && message.hasOwnProperty("lobbyid"))
                if (typeof message.lobbyid === "number")
                    object.lobbyid = options.longs === String ? String(message.lobbyid) : message.lobbyid;
                else
                    object.lobbyid = options.longs === String ? $util.Long.prototype.toString.call(message.lobbyid) : options.longs === Number ? new $util.LongBits(message.lobbyid.low >>> 0, message.lobbyid.high >>> 0).toNumber(true) : message.lobbyid;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientPartyJoinRelay to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientPartyJoinRelay
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientPartyJoinRelay.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_ClientPartyJoinRelay;
    })();
    
    $root.CMsgGCCStrike15_v2_ClientPartyWarning = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_ClientPartyWarning.
         * @exports ICMsgGCCStrike15_v2_ClientPartyWarning
         * @interface ICMsgGCCStrike15_v2_ClientPartyWarning
         * @property {Array.<CMsgGCCStrike15_v2_ClientPartyWarning.IEntry>|null} [entries] CMsgGCCStrike15_v2_ClientPartyWarning entries
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_ClientPartyWarning.
         * @exports CMsgGCCStrike15_v2_ClientPartyWarning
         * @classdesc Represents a CMsgGCCStrike15_v2_ClientPartyWarning.
         * @implements ICMsgGCCStrike15_v2_ClientPartyWarning
         * @constructor
         * @param {ICMsgGCCStrike15_v2_ClientPartyWarning=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_ClientPartyWarning(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_ClientPartyWarning entries.
         * @member {Array.<CMsgGCCStrike15_v2_ClientPartyWarning.IEntry>} entries
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @instance
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_ClientPartyWarning instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyWarning=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_ClientPartyWarning} CMsgGCCStrike15_v2_ClientPartyWarning instance
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.create = function create(properties) {
            return new CMsgGCCStrike15_v2_ClientPartyWarning(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPartyWarning message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyWarning.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyWarning} message CMsgGCCStrike15_v2_ClientPartyWarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_ClientPartyWarning message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyWarning.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {ICMsgGCCStrike15_v2_ClientPartyWarning} message CMsgGCCStrike15_v2_ClientPartyWarning message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPartyWarning message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_ClientPartyWarning} CMsgGCCStrike15_v2_ClientPartyWarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientPartyWarning();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_ClientPartyWarning message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_ClientPartyWarning} CMsgGCCStrike15_v2_ClientPartyWarning
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_ClientPartyWarning message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_ClientPartyWarning message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_ClientPartyWarning} CMsgGCCStrike15_v2_ClientPartyWarning
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_ClientPartyWarning)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_ClientPartyWarning();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgGCCStrike15_v2_ClientPartyWarning.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgGCCStrike15_v2_ClientPartyWarning.entries: object expected");
                    message.entries[i] = $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_ClientPartyWarning message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @static
         * @param {CMsgGCCStrike15_v2_ClientPartyWarning} message CMsgGCCStrike15_v2_ClientPartyWarning
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_ClientPartyWarning to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_ClientPartyWarning.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCCStrike15_v2_ClientPartyWarning.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
             * @interface IEntry
             * @property {number|null} [accountid] Entry accountid
             * @property {number|null} [warntype] Entry warntype
             */
    
            /**
             * Constructs a new Entry.
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {CMsgGCCStrike15_v2_ClientPartyWarning.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry accountid.
             * @member {number} accountid
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @instance
             */
            Entry.prototype.accountid = 0;
    
            /**
             * Entry warntype.
             * @member {number} warntype
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @instance
             */
            Entry.prototype.warntype = 0;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_ClientPartyWarning.IEntry=} [properties] Properties to set
             * @returns {CMsgGCCStrike15_v2_ClientPartyWarning.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyWarning.Entry.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_ClientPartyWarning.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.accountid);
                if (message.warntype != null && message.hasOwnProperty("warntype"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.warntype);
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_ClientPartyWarning.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_ClientPartyWarning.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCCStrike15_v2_ClientPartyWarning.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.accountid = reader.uint32();
                        break;
                    case 2:
                        message.warntype = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCCStrike15_v2_ClientPartyWarning.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    if (!$util.isInteger(message.accountid))
                        return "accountid: integer expected";
                if (message.warntype != null && message.hasOwnProperty("warntype"))
                    if (!$util.isInteger(message.warntype))
                        return "warntype: integer expected";
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCCStrike15_v2_ClientPartyWarning.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
                    return object;
                var message = new $root.CMsgGCCStrike15_v2_ClientPartyWarning.Entry();
                if (object.accountid != null)
                    message.accountid = object.accountid >>> 0;
                if (object.warntype != null)
                    message.warntype = object.warntype >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @static
             * @param {CMsgGCCStrike15_v2_ClientPartyWarning.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accountid = 0;
                    object.warntype = 0;
                }
                if (message.accountid != null && message.hasOwnProperty("accountid"))
                    object.accountid = message.accountid;
                if (message.warntype != null && message.hasOwnProperty("warntype"))
                    object.warntype = message.warntype;
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof CMsgGCCStrike15_v2_ClientPartyWarning.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        return CMsgGCCStrike15_v2_ClientPartyWarning;
    })();
    
    $root.CMsgGCCStrike15_v2_SetEventFavorite = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_SetEventFavorite.
         * @exports ICMsgGCCStrike15_v2_SetEventFavorite
         * @interface ICMsgGCCStrike15_v2_SetEventFavorite
         * @property {number|Long|null} [eventid] CMsgGCCStrike15_v2_SetEventFavorite eventid
         * @property {boolean|null} [is_favorite] CMsgGCCStrike15_v2_SetEventFavorite is_favorite
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_SetEventFavorite.
         * @exports CMsgGCCStrike15_v2_SetEventFavorite
         * @classdesc Represents a CMsgGCCStrike15_v2_SetEventFavorite.
         * @implements ICMsgGCCStrike15_v2_SetEventFavorite
         * @constructor
         * @param {ICMsgGCCStrike15_v2_SetEventFavorite=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_SetEventFavorite(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_SetEventFavorite eventid.
         * @member {number|Long} eventid
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @instance
         */
        CMsgGCCStrike15_v2_SetEventFavorite.prototype.eventid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgGCCStrike15_v2_SetEventFavorite is_favorite.
         * @member {boolean} is_favorite
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @instance
         */
        CMsgGCCStrike15_v2_SetEventFavorite.prototype.is_favorite = false;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_SetEventFavorite instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {ICMsgGCCStrike15_v2_SetEventFavorite=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_SetEventFavorite} CMsgGCCStrike15_v2_SetEventFavorite instance
         */
        CMsgGCCStrike15_v2_SetEventFavorite.create = function create(properties) {
            return new CMsgGCCStrike15_v2_SetEventFavorite(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_SetEventFavorite message. Does not implicitly {@link CMsgGCCStrike15_v2_SetEventFavorite.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {ICMsgGCCStrike15_v2_SetEventFavorite} message CMsgGCCStrike15_v2_SetEventFavorite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_SetEventFavorite.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.eventid);
            if (message.is_favorite != null && message.hasOwnProperty("is_favorite"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_favorite);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_SetEventFavorite message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_SetEventFavorite.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {ICMsgGCCStrike15_v2_SetEventFavorite} message CMsgGCCStrike15_v2_SetEventFavorite message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_SetEventFavorite.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_SetEventFavorite message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_SetEventFavorite} CMsgGCCStrike15_v2_SetEventFavorite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_SetEventFavorite.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_SetEventFavorite();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventid = reader.uint64();
                    break;
                case 2:
                    message.is_favorite = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_SetEventFavorite message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_SetEventFavorite} CMsgGCCStrike15_v2_SetEventFavorite
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_SetEventFavorite.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_SetEventFavorite message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_SetEventFavorite.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (!$util.isInteger(message.eventid) && !(message.eventid && $util.isInteger(message.eventid.low) && $util.isInteger(message.eventid.high)))
                    return "eventid: integer|Long expected";
            if (message.is_favorite != null && message.hasOwnProperty("is_favorite"))
                if (typeof message.is_favorite !== "boolean")
                    return "is_favorite: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_SetEventFavorite message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_SetEventFavorite} CMsgGCCStrike15_v2_SetEventFavorite
         */
        CMsgGCCStrike15_v2_SetEventFavorite.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_SetEventFavorite)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_SetEventFavorite();
            if (object.eventid != null)
                if ($util.Long)
                    (message.eventid = $util.Long.fromValue(object.eventid)).unsigned = true;
                else if (typeof object.eventid === "string")
                    message.eventid = parseInt(object.eventid, 10);
                else if (typeof object.eventid === "number")
                    message.eventid = object.eventid;
                else if (typeof object.eventid === "object")
                    message.eventid = new $util.LongBits(object.eventid.low >>> 0, object.eventid.high >>> 0).toNumber(true);
            if (object.is_favorite != null)
                message.is_favorite = Boolean(object.is_favorite);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_SetEventFavorite message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @static
         * @param {CMsgGCCStrike15_v2_SetEventFavorite} message CMsgGCCStrike15_v2_SetEventFavorite
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_SetEventFavorite.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.eventid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.eventid = options.longs === String ? "0" : 0;
                object.is_favorite = false;
            }
            if (message.eventid != null && message.hasOwnProperty("eventid"))
                if (typeof message.eventid === "number")
                    object.eventid = options.longs === String ? String(message.eventid) : message.eventid;
                else
                    object.eventid = options.longs === String ? $util.Long.prototype.toString.call(message.eventid) : options.longs === Number ? new $util.LongBits(message.eventid.low >>> 0, message.eventid.high >>> 0).toNumber(true) : message.eventid;
            if (message.is_favorite != null && message.hasOwnProperty("is_favorite"))
                object.is_favorite = message.is_favorite;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_SetEventFavorite to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_SetEventFavorite
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_SetEventFavorite.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_SetEventFavorite;
    })();
    
    $root.CMsgGCCStrike15_v2_GetEventFavorites_Request = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GetEventFavorites_Request.
         * @exports ICMsgGCCStrike15_v2_GetEventFavorites_Request
         * @interface ICMsgGCCStrike15_v2_GetEventFavorites_Request
         * @property {boolean|null} [all_events] CMsgGCCStrike15_v2_GetEventFavorites_Request all_events
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GetEventFavorites_Request.
         * @exports CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @classdesc Represents a CMsgGCCStrike15_v2_GetEventFavorites_Request.
         * @implements ICMsgGCCStrike15_v2_GetEventFavorites_Request
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Request=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GetEventFavorites_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GetEventFavorites_Request all_events.
         * @member {boolean} all_events
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.prototype.all_events = false;
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GetEventFavorites_Request instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Request=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Request} CMsgGCCStrike15_v2_GetEventFavorites_Request instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GetEventFavorites_Request(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GetEventFavorites_Request message. Does not implicitly {@link CMsgGCCStrike15_v2_GetEventFavorites_Request.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Request} message CMsgGCCStrike15_v2_GetEventFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.all_events);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GetEventFavorites_Request message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GetEventFavorites_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Request} message CMsgGCCStrike15_v2_GetEventFavorites_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GetEventFavorites_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Request} CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GetEventFavorites_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.all_events = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GetEventFavorites_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Request} CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GetEventFavorites_Request message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                if (typeof message.all_events !== "boolean")
                    return "all_events: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GetEventFavorites_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Request} CMsgGCCStrike15_v2_GetEventFavorites_Request
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GetEventFavorites_Request)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GetEventFavorites_Request();
            if (object.all_events != null)
                message.all_events = Boolean(object.all_events);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GetEventFavorites_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @static
         * @param {CMsgGCCStrike15_v2_GetEventFavorites_Request} message CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.all_events = false;
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                object.all_events = message.all_events;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GetEventFavorites_Request to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GetEventFavorites_Request;
    })();
    
    $root.CMsgGCCStrike15_v2_GetEventFavorites_Response = (function() {
    
        /**
         * Properties of a CMsgGCCStrike15_v2_GetEventFavorites_Response.
         * @exports ICMsgGCCStrike15_v2_GetEventFavorites_Response
         * @interface ICMsgGCCStrike15_v2_GetEventFavorites_Response
         * @property {boolean|null} [all_events] CMsgGCCStrike15_v2_GetEventFavorites_Response all_events
         * @property {string|null} [json_favorites] CMsgGCCStrike15_v2_GetEventFavorites_Response json_favorites
         * @property {string|null} [json_featured] CMsgGCCStrike15_v2_GetEventFavorites_Response json_featured
         */
    
        /**
         * Constructs a new CMsgGCCStrike15_v2_GetEventFavorites_Response.
         * @exports CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @classdesc Represents a CMsgGCCStrike15_v2_GetEventFavorites_Response.
         * @implements ICMsgGCCStrike15_v2_GetEventFavorites_Response
         * @constructor
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Response=} [properties] Properties to set
         */
        function CMsgGCCStrike15_v2_GetEventFavorites_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCStrike15_v2_GetEventFavorites_Response all_events.
         * @member {boolean} all_events
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.prototype.all_events = false;
    
        /**
         * CMsgGCCStrike15_v2_GetEventFavorites_Response json_favorites.
         * @member {string} json_favorites
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.prototype.json_favorites = "";
    
        /**
         * CMsgGCCStrike15_v2_GetEventFavorites_Response json_featured.
         * @member {string} json_featured
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.prototype.json_featured = "";
    
        /**
         * Creates a new CMsgGCCStrike15_v2_GetEventFavorites_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Response=} [properties] Properties to set
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Response} CMsgGCCStrike15_v2_GetEventFavorites_Response instance
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.create = function create(properties) {
            return new CMsgGCCStrike15_v2_GetEventFavorites_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GetEventFavorites_Response message. Does not implicitly {@link CMsgGCCStrike15_v2_GetEventFavorites_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Response} message CMsgGCCStrike15_v2_GetEventFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.all_events);
            if (message.json_favorites != null && message.hasOwnProperty("json_favorites"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.json_favorites);
            if (message.json_featured != null && message.hasOwnProperty("json_featured"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.json_featured);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCStrike15_v2_GetEventFavorites_Response message, length delimited. Does not implicitly {@link CMsgGCCStrike15_v2_GetEventFavorites_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {ICMsgGCCStrike15_v2_GetEventFavorites_Response} message CMsgGCCStrike15_v2_GetEventFavorites_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GetEventFavorites_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Response} CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCStrike15_v2_GetEventFavorites_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.all_events = reader.bool();
                    break;
                case 2:
                    message.json_favorites = reader.string();
                    break;
                case 3:
                    message.json_featured = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCStrike15_v2_GetEventFavorites_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Response} CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCStrike15_v2_GetEventFavorites_Response message.
         * @function verify
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                if (typeof message.all_events !== "boolean")
                    return "all_events: boolean expected";
            if (message.json_favorites != null && message.hasOwnProperty("json_favorites"))
                if (!$util.isString(message.json_favorites))
                    return "json_favorites: string expected";
            if (message.json_featured != null && message.hasOwnProperty("json_featured"))
                if (!$util.isString(message.json_featured))
                    return "json_featured: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCStrike15_v2_GetEventFavorites_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCStrike15_v2_GetEventFavorites_Response} CMsgGCCStrike15_v2_GetEventFavorites_Response
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCStrike15_v2_GetEventFavorites_Response)
                return object;
            var message = new $root.CMsgGCCStrike15_v2_GetEventFavorites_Response();
            if (object.all_events != null)
                message.all_events = Boolean(object.all_events);
            if (object.json_favorites != null)
                message.json_favorites = String(object.json_favorites);
            if (object.json_featured != null)
                message.json_featured = String(object.json_featured);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCStrike15_v2_GetEventFavorites_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @static
         * @param {CMsgGCCStrike15_v2_GetEventFavorites_Response} message CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.all_events = false;
                object.json_favorites = "";
                object.json_featured = "";
            }
            if (message.all_events != null && message.hasOwnProperty("all_events"))
                object.all_events = message.all_events;
            if (message.json_favorites != null && message.hasOwnProperty("json_favorites"))
                object.json_favorites = message.json_favorites;
            if (message.json_featured != null && message.hasOwnProperty("json_featured"))
                object.json_featured = message.json_featured;
            return object;
        };
    
        /**
         * Converts this CMsgGCCStrike15_v2_GetEventFavorites_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCCStrike15_v2_GetEventFavorites_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCStrike15_v2_GetEventFavorites_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCStrike15_v2_GetEventFavorites_Response;
    })();
    
    /**
     * GCProtoBufMsgSrc enum.
     * @exports GCProtoBufMsgSrc
     * @enum {string}
     * @property {number} GCProtoBufMsgSrc_Unspecified=0 GCProtoBufMsgSrc_Unspecified value
     * @property {number} GCProtoBufMsgSrc_FromSystem=1 GCProtoBufMsgSrc_FromSystem value
     * @property {number} GCProtoBufMsgSrc_FromSteamID=2 GCProtoBufMsgSrc_FromSteamID value
     * @property {number} GCProtoBufMsgSrc_FromGC=3 GCProtoBufMsgSrc_FromGC value
     * @property {number} GCProtoBufMsgSrc_ReplySystem=4 GCProtoBufMsgSrc_ReplySystem value
     */
    $root.GCProtoBufMsgSrc = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GCProtoBufMsgSrc_Unspecified"] = 0;
        values[valuesById[1] = "GCProtoBufMsgSrc_FromSystem"] = 1;
        values[valuesById[2] = "GCProtoBufMsgSrc_FromSteamID"] = 2;
        values[valuesById[3] = "GCProtoBufMsgSrc_FromGC"] = 3;
        values[valuesById[4] = "GCProtoBufMsgSrc_ReplySystem"] = 4;
        return values;
    })();
    
    $root.CMsgProtoBufHeader = (function() {
    
        /**
         * Properties of a CMsgProtoBufHeader.
         * @exports ICMsgProtoBufHeader
         * @interface ICMsgProtoBufHeader
         * @property {number|Long|null} [client_steam_id] CMsgProtoBufHeader client_steam_id
         * @property {number|null} [client_session_id] CMsgProtoBufHeader client_session_id
         * @property {number|null} [source_app_id] CMsgProtoBufHeader source_app_id
         * @property {number|Long|null} [job_id_source] CMsgProtoBufHeader job_id_source
         * @property {number|Long|null} [job_id_target] CMsgProtoBufHeader job_id_target
         * @property {string|null} [target_job_name] CMsgProtoBufHeader target_job_name
         * @property {number|null} [eresult] CMsgProtoBufHeader eresult
         * @property {string|null} [error_message] CMsgProtoBufHeader error_message
         * @property {number|null} [ip] CMsgProtoBufHeader ip
         * @property {GCProtoBufMsgSrc|null} [gc_msg_src] CMsgProtoBufHeader gc_msg_src
         * @property {number|null} [gc_dir_index_source] CMsgProtoBufHeader gc_dir_index_source
         */
    
        /**
         * Constructs a new CMsgProtoBufHeader.
         * @exports CMsgProtoBufHeader
         * @classdesc Represents a CMsgProtoBufHeader.
         * @implements ICMsgProtoBufHeader
         * @constructor
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         */
        function CMsgProtoBufHeader(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgProtoBufHeader client_steam_id.
         * @member {number|Long} client_steam_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.client_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgProtoBufHeader client_session_id.
         * @member {number} client_session_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.client_session_id = 0;
    
        /**
         * CMsgProtoBufHeader source_app_id.
         * @member {number} source_app_id
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.source_app_id = 0;
    
        /**
         * CMsgProtoBufHeader job_id_source.
         * @member {number|Long} job_id_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.job_id_source = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader job_id_target.
         * @member {number|Long} job_id_target
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.job_id_target = $util.Long ? $util.Long.fromBits(-1,2147483647,false) : 9223372036854776000;
    
        /**
         * CMsgProtoBufHeader target_job_name.
         * @member {string} target_job_name
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.target_job_name = "";
    
        /**
         * CMsgProtoBufHeader eresult.
         * @member {number} eresult
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.eresult = 2;
    
        /**
         * CMsgProtoBufHeader error_message.
         * @member {string} error_message
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.error_message = "";
    
        /**
         * CMsgProtoBufHeader ip.
         * @member {number} ip
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.ip = 0;
    
        /**
         * CMsgProtoBufHeader gc_msg_src.
         * @member {GCProtoBufMsgSrc} gc_msg_src
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.gc_msg_src = 0;
    
        /**
         * CMsgProtoBufHeader gc_dir_index_source.
         * @member {number} gc_dir_index_source
         * @memberof CMsgProtoBufHeader
         * @instance
         */
        CMsgProtoBufHeader.prototype.gc_dir_index_source = 0;
    
        /**
         * Creates a new CMsgProtoBufHeader instance using the specified properties.
         * @function create
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader=} [properties] Properties to set
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader instance
         */
        CMsgProtoBufHeader.create = function create(properties) {
            return new CMsgProtoBufHeader(properties);
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.client_steam_id != null && message.hasOwnProperty("client_steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.client_steam_id);
            if (message.client_session_id != null && message.hasOwnProperty("client_session_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.client_session_id);
            if (message.source_app_id != null && message.hasOwnProperty("source_app_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.source_app_id);
            if (message.job_id_source != null && message.hasOwnProperty("job_id_source"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.job_id_source);
            if (message.job_id_target != null && message.hasOwnProperty("job_id_target"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.job_id_target);
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.target_job_name);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.eresult);
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.error_message);
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.ip);
            if (message.gc_msg_src != null && message.hasOwnProperty("gc_msg_src"))
                writer.uint32(/* id 200, wireType 0 =*/1600).int32(message.gc_msg_src);
            if (message.gc_dir_index_source != null && message.hasOwnProperty("gc_dir_index_source"))
                writer.uint32(/* id 201, wireType 0 =*/1608).uint32(message.gc_dir_index_source);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgProtoBufHeader message, length delimited. Does not implicitly {@link CMsgProtoBufHeader.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {ICMsgProtoBufHeader} message CMsgProtoBufHeader message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgProtoBufHeader.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgProtoBufHeader();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.client_steam_id = reader.fixed64();
                    break;
                case 2:
                    message.client_session_id = reader.int32();
                    break;
                case 3:
                    message.source_app_id = reader.uint32();
                    break;
                case 10:
                    message.job_id_source = reader.fixed64();
                    break;
                case 11:
                    message.job_id_target = reader.fixed64();
                    break;
                case 12:
                    message.target_job_name = reader.string();
                    break;
                case 13:
                    message.eresult = reader.int32();
                    break;
                case 14:
                    message.error_message = reader.string();
                    break;
                case 15:
                    message.ip = reader.uint32();
                    break;
                case 200:
                    message.gc_msg_src = reader.int32();
                    break;
                case 201:
                    message.gc_dir_index_source = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgProtoBufHeader message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgProtoBufHeader.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgProtoBufHeader message.
         * @function verify
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgProtoBufHeader.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.client_steam_id != null && message.hasOwnProperty("client_steam_id"))
                if (!$util.isInteger(message.client_steam_id) && !(message.client_steam_id && $util.isInteger(message.client_steam_id.low) && $util.isInteger(message.client_steam_id.high)))
                    return "client_steam_id: integer|Long expected";
            if (message.client_session_id != null && message.hasOwnProperty("client_session_id"))
                if (!$util.isInteger(message.client_session_id))
                    return "client_session_id: integer expected";
            if (message.source_app_id != null && message.hasOwnProperty("source_app_id"))
                if (!$util.isInteger(message.source_app_id))
                    return "source_app_id: integer expected";
            if (message.job_id_source != null && message.hasOwnProperty("job_id_source"))
                if (!$util.isInteger(message.job_id_source) && !(message.job_id_source && $util.isInteger(message.job_id_source.low) && $util.isInteger(message.job_id_source.high)))
                    return "job_id_source: integer|Long expected";
            if (message.job_id_target != null && message.hasOwnProperty("job_id_target"))
                if (!$util.isInteger(message.job_id_target) && !(message.job_id_target && $util.isInteger(message.job_id_target.low) && $util.isInteger(message.job_id_target.high)))
                    return "job_id_target: integer|Long expected";
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                if (!$util.isString(message.target_job_name))
                    return "target_job_name: string expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                if (!$util.isString(message.error_message))
                    return "error_message: string expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            if (message.gc_msg_src != null && message.hasOwnProperty("gc_msg_src"))
                switch (message.gc_msg_src) {
                default:
                    return "gc_msg_src: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.gc_dir_index_source != null && message.hasOwnProperty("gc_dir_index_source"))
                if (!$util.isInteger(message.gc_dir_index_source))
                    return "gc_dir_index_source: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgProtoBufHeader message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgProtoBufHeader} CMsgProtoBufHeader
         */
        CMsgProtoBufHeader.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgProtoBufHeader)
                return object;
            var message = new $root.CMsgProtoBufHeader();
            if (object.client_steam_id != null)
                if ($util.Long)
                    (message.client_steam_id = $util.Long.fromValue(object.client_steam_id)).unsigned = false;
                else if (typeof object.client_steam_id === "string")
                    message.client_steam_id = parseInt(object.client_steam_id, 10);
                else if (typeof object.client_steam_id === "number")
                    message.client_steam_id = object.client_steam_id;
                else if (typeof object.client_steam_id === "object")
                    message.client_steam_id = new $util.LongBits(object.client_steam_id.low >>> 0, object.client_steam_id.high >>> 0).toNumber();
            if (object.client_session_id != null)
                message.client_session_id = object.client_session_id | 0;
            if (object.source_app_id != null)
                message.source_app_id = object.source_app_id >>> 0;
            if (object.job_id_source != null)
                if ($util.Long)
                    (message.job_id_source = $util.Long.fromValue(object.job_id_source)).unsigned = false;
                else if (typeof object.job_id_source === "string")
                    message.job_id_source = parseInt(object.job_id_source, 10);
                else if (typeof object.job_id_source === "number")
                    message.job_id_source = object.job_id_source;
                else if (typeof object.job_id_source === "object")
                    message.job_id_source = new $util.LongBits(object.job_id_source.low >>> 0, object.job_id_source.high >>> 0).toNumber();
            if (object.job_id_target != null)
                if ($util.Long)
                    (message.job_id_target = $util.Long.fromValue(object.job_id_target)).unsigned = false;
                else if (typeof object.job_id_target === "string")
                    message.job_id_target = parseInt(object.job_id_target, 10);
                else if (typeof object.job_id_target === "number")
                    message.job_id_target = object.job_id_target;
                else if (typeof object.job_id_target === "object")
                    message.job_id_target = new $util.LongBits(object.job_id_target.low >>> 0, object.job_id_target.high >>> 0).toNumber();
            if (object.target_job_name != null)
                message.target_job_name = String(object.target_job_name);
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.error_message != null)
                message.error_message = String(object.error_message);
            if (object.ip != null)
                message.ip = object.ip >>> 0;
            switch (object.gc_msg_src) {
            case "GCProtoBufMsgSrc_Unspecified":
            case 0:
                message.gc_msg_src = 0;
                break;
            case "GCProtoBufMsgSrc_FromSystem":
            case 1:
                message.gc_msg_src = 1;
                break;
            case "GCProtoBufMsgSrc_FromSteamID":
            case 2:
                message.gc_msg_src = 2;
                break;
            case "GCProtoBufMsgSrc_FromGC":
            case 3:
                message.gc_msg_src = 3;
                break;
            case "GCProtoBufMsgSrc_ReplySystem":
            case 4:
                message.gc_msg_src = 4;
                break;
            }
            if (object.gc_dir_index_source != null)
                message.gc_dir_index_source = object.gc_dir_index_source >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgProtoBufHeader message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgProtoBufHeader
         * @static
         * @param {CMsgProtoBufHeader} message CMsgProtoBufHeader
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgProtoBufHeader.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.client_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.client_steam_id = options.longs === String ? "0" : 0;
                object.client_session_id = 0;
                object.source_app_id = 0;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.job_id_source = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.job_id_source = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                if ($util.Long) {
                    var long = new $util.Long(-1, 2147483647, false);
                    object.job_id_target = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.job_id_target = options.longs === String ? "9223372036854775807" : 9223372036854776000;
                object.target_job_name = "";
                object.eresult = 2;
                object.error_message = "";
                object.ip = 0;
                object.gc_msg_src = options.enums === String ? "GCProtoBufMsgSrc_Unspecified" : 0;
                object.gc_dir_index_source = 0;
            }
            if (message.client_steam_id != null && message.hasOwnProperty("client_steam_id"))
                if (typeof message.client_steam_id === "number")
                    object.client_steam_id = options.longs === String ? String(message.client_steam_id) : message.client_steam_id;
                else
                    object.client_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.client_steam_id) : options.longs === Number ? new $util.LongBits(message.client_steam_id.low >>> 0, message.client_steam_id.high >>> 0).toNumber() : message.client_steam_id;
            if (message.client_session_id != null && message.hasOwnProperty("client_session_id"))
                object.client_session_id = message.client_session_id;
            if (message.source_app_id != null && message.hasOwnProperty("source_app_id"))
                object.source_app_id = message.source_app_id;
            if (message.job_id_source != null && message.hasOwnProperty("job_id_source"))
                if (typeof message.job_id_source === "number")
                    object.job_id_source = options.longs === String ? String(message.job_id_source) : message.job_id_source;
                else
                    object.job_id_source = options.longs === String ? $util.Long.prototype.toString.call(message.job_id_source) : options.longs === Number ? new $util.LongBits(message.job_id_source.low >>> 0, message.job_id_source.high >>> 0).toNumber() : message.job_id_source;
            if (message.job_id_target != null && message.hasOwnProperty("job_id_target"))
                if (typeof message.job_id_target === "number")
                    object.job_id_target = options.longs === String ? String(message.job_id_target) : message.job_id_target;
                else
                    object.job_id_target = options.longs === String ? $util.Long.prototype.toString.call(message.job_id_target) : options.longs === Number ? new $util.LongBits(message.job_id_target.low >>> 0, message.job_id_target.high >>> 0).toNumber() : message.job_id_target;
            if (message.target_job_name != null && message.hasOwnProperty("target_job_name"))
                object.target_job_name = message.target_job_name;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.error_message != null && message.hasOwnProperty("error_message"))
                object.error_message = message.error_message;
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.gc_msg_src != null && message.hasOwnProperty("gc_msg_src"))
                object.gc_msg_src = options.enums === String ? $root.GCProtoBufMsgSrc[message.gc_msg_src] : message.gc_msg_src;
            if (message.gc_dir_index_source != null && message.hasOwnProperty("gc_dir_index_source"))
                object.gc_dir_index_source = message.gc_dir_index_source;
            return object;
        };
    
        /**
         * Converts this CMsgProtoBufHeader to JSON.
         * @function toJSON
         * @memberof CMsgProtoBufHeader
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgProtoBufHeader.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgProtoBufHeader;
    })();
    
    $root.CMsgWebAPIKey = (function() {
    
        /**
         * Properties of a CMsgWebAPIKey.
         * @exports ICMsgWebAPIKey
         * @interface ICMsgWebAPIKey
         * @property {number|null} [status] CMsgWebAPIKey status
         * @property {number|null} [account_id] CMsgWebAPIKey account_id
         * @property {number|null} [publisher_group_id] CMsgWebAPIKey publisher_group_id
         * @property {number|null} [key_id] CMsgWebAPIKey key_id
         * @property {string|null} [domain] CMsgWebAPIKey domain
         */
    
        /**
         * Constructs a new CMsgWebAPIKey.
         * @exports CMsgWebAPIKey
         * @classdesc Represents a CMsgWebAPIKey.
         * @implements ICMsgWebAPIKey
         * @constructor
         * @param {ICMsgWebAPIKey=} [properties] Properties to set
         */
        function CMsgWebAPIKey(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgWebAPIKey status.
         * @member {number} status
         * @memberof CMsgWebAPIKey
         * @instance
         */
        CMsgWebAPIKey.prototype.status = 255;
    
        /**
         * CMsgWebAPIKey account_id.
         * @member {number} account_id
         * @memberof CMsgWebAPIKey
         * @instance
         */
        CMsgWebAPIKey.prototype.account_id = 0;
    
        /**
         * CMsgWebAPIKey publisher_group_id.
         * @member {number} publisher_group_id
         * @memberof CMsgWebAPIKey
         * @instance
         */
        CMsgWebAPIKey.prototype.publisher_group_id = 0;
    
        /**
         * CMsgWebAPIKey key_id.
         * @member {number} key_id
         * @memberof CMsgWebAPIKey
         * @instance
         */
        CMsgWebAPIKey.prototype.key_id = 0;
    
        /**
         * CMsgWebAPIKey domain.
         * @member {string} domain
         * @memberof CMsgWebAPIKey
         * @instance
         */
        CMsgWebAPIKey.prototype.domain = "";
    
        /**
         * Creates a new CMsgWebAPIKey instance using the specified properties.
         * @function create
         * @memberof CMsgWebAPIKey
         * @static
         * @param {ICMsgWebAPIKey=} [properties] Properties to set
         * @returns {CMsgWebAPIKey} CMsgWebAPIKey instance
         */
        CMsgWebAPIKey.create = function create(properties) {
            return new CMsgWebAPIKey(properties);
        };
    
        /**
         * Encodes the specified CMsgWebAPIKey message. Does not implicitly {@link CMsgWebAPIKey.verify|verify} messages.
         * @function encode
         * @memberof CMsgWebAPIKey
         * @static
         * @param {ICMsgWebAPIKey} message CMsgWebAPIKey message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWebAPIKey.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.status != null && message.hasOwnProperty("status"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.status);
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.account_id);
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.publisher_group_id);
            if (message.key_id != null && message.hasOwnProperty("key_id"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.key_id);
            if (message.domain != null && message.hasOwnProperty("domain"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.domain);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgWebAPIKey message, length delimited. Does not implicitly {@link CMsgWebAPIKey.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgWebAPIKey
         * @static
         * @param {ICMsgWebAPIKey} message CMsgWebAPIKey message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWebAPIKey.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgWebAPIKey message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgWebAPIKey
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgWebAPIKey} CMsgWebAPIKey
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWebAPIKey.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgWebAPIKey();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.account_id = reader.uint32();
                    break;
                case 3:
                    message.publisher_group_id = reader.uint32();
                    break;
                case 4:
                    message.key_id = reader.uint32();
                    break;
                case 5:
                    message.domain = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgWebAPIKey message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgWebAPIKey
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgWebAPIKey} CMsgWebAPIKey
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWebAPIKey.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgWebAPIKey message.
         * @function verify
         * @memberof CMsgWebAPIKey
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgWebAPIKey.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                if (!$util.isInteger(message.account_id))
                    return "account_id: integer expected";
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                if (!$util.isInteger(message.publisher_group_id))
                    return "publisher_group_id: integer expected";
            if (message.key_id != null && message.hasOwnProperty("key_id"))
                if (!$util.isInteger(message.key_id))
                    return "key_id: integer expected";
            if (message.domain != null && message.hasOwnProperty("domain"))
                if (!$util.isString(message.domain))
                    return "domain: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgWebAPIKey message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgWebAPIKey
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgWebAPIKey} CMsgWebAPIKey
         */
        CMsgWebAPIKey.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgWebAPIKey)
                return object;
            var message = new $root.CMsgWebAPIKey();
            if (object.status != null)
                message.status = object.status >>> 0;
            if (object.account_id != null)
                message.account_id = object.account_id >>> 0;
            if (object.publisher_group_id != null)
                message.publisher_group_id = object.publisher_group_id >>> 0;
            if (object.key_id != null)
                message.key_id = object.key_id >>> 0;
            if (object.domain != null)
                message.domain = String(object.domain);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgWebAPIKey message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgWebAPIKey
         * @static
         * @param {CMsgWebAPIKey} message CMsgWebAPIKey
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgWebAPIKey.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.status = 255;
                object.account_id = 0;
                object.publisher_group_id = 0;
                object.key_id = 0;
                object.domain = "";
            }
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            if (message.account_id != null && message.hasOwnProperty("account_id"))
                object.account_id = message.account_id;
            if (message.publisher_group_id != null && message.hasOwnProperty("publisher_group_id"))
                object.publisher_group_id = message.publisher_group_id;
            if (message.key_id != null && message.hasOwnProperty("key_id"))
                object.key_id = message.key_id;
            if (message.domain != null && message.hasOwnProperty("domain"))
                object.domain = message.domain;
            return object;
        };
    
        /**
         * Converts this CMsgWebAPIKey to JSON.
         * @function toJSON
         * @memberof CMsgWebAPIKey
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgWebAPIKey.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgWebAPIKey;
    })();
    
    $root.CMsgHttpRequest = (function() {
    
        /**
         * Properties of a CMsgHttpRequest.
         * @exports ICMsgHttpRequest
         * @interface ICMsgHttpRequest
         * @property {number|null} [request_method] CMsgHttpRequest request_method
         * @property {string|null} [hostname] CMsgHttpRequest hostname
         * @property {string|null} [url] CMsgHttpRequest url
         * @property {Array.<CMsgHttpRequest.IRequestHeader>|null} [headers] CMsgHttpRequest headers
         * @property {Array.<CMsgHttpRequest.IQueryParam>|null} [get_params] CMsgHttpRequest get_params
         * @property {Array.<CMsgHttpRequest.IQueryParam>|null} [post_params] CMsgHttpRequest post_params
         * @property {Uint8Array|null} [body] CMsgHttpRequest body
         * @property {number|null} [absolute_timeout] CMsgHttpRequest absolute_timeout
         */
    
        /**
         * Constructs a new CMsgHttpRequest.
         * @exports CMsgHttpRequest
         * @classdesc Represents a CMsgHttpRequest.
         * @implements ICMsgHttpRequest
         * @constructor
         * @param {ICMsgHttpRequest=} [properties] Properties to set
         */
        function CMsgHttpRequest(properties) {
            this.headers = [];
            this.get_params = [];
            this.post_params = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHttpRequest request_method.
         * @member {number} request_method
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.request_method = 0;
    
        /**
         * CMsgHttpRequest hostname.
         * @member {string} hostname
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.hostname = "";
    
        /**
         * CMsgHttpRequest url.
         * @member {string} url
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.url = "";
    
        /**
         * CMsgHttpRequest headers.
         * @member {Array.<CMsgHttpRequest.IRequestHeader>} headers
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.headers = $util.emptyArray;
    
        /**
         * CMsgHttpRequest get_params.
         * @member {Array.<CMsgHttpRequest.IQueryParam>} get_params
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.get_params = $util.emptyArray;
    
        /**
         * CMsgHttpRequest post_params.
         * @member {Array.<CMsgHttpRequest.IQueryParam>} post_params
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.post_params = $util.emptyArray;
    
        /**
         * CMsgHttpRequest body.
         * @member {Uint8Array} body
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.body = $util.newBuffer([]);
    
        /**
         * CMsgHttpRequest absolute_timeout.
         * @member {number} absolute_timeout
         * @memberof CMsgHttpRequest
         * @instance
         */
        CMsgHttpRequest.prototype.absolute_timeout = 0;
    
        /**
         * Creates a new CMsgHttpRequest instance using the specified properties.
         * @function create
         * @memberof CMsgHttpRequest
         * @static
         * @param {ICMsgHttpRequest=} [properties] Properties to set
         * @returns {CMsgHttpRequest} CMsgHttpRequest instance
         */
        CMsgHttpRequest.create = function create(properties) {
            return new CMsgHttpRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgHttpRequest message. Does not implicitly {@link CMsgHttpRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgHttpRequest
         * @static
         * @param {ICMsgHttpRequest} message CMsgHttpRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHttpRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.request_method != null && message.hasOwnProperty("request_method"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.request_method);
            if (message.hostname != null && message.hasOwnProperty("hostname"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.hostname);
            if (message.url != null && message.hasOwnProperty("url"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.url);
            if (message.headers != null && message.headers.length)
                for (var i = 0; i < message.headers.length; ++i)
                    $root.CMsgHttpRequest.RequestHeader.encode(message.headers[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.get_params != null && message.get_params.length)
                for (var i = 0; i < message.get_params.length; ++i)
                    $root.CMsgHttpRequest.QueryParam.encode(message.get_params[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.post_params != null && message.post_params.length)
                for (var i = 0; i < message.post_params.length; ++i)
                    $root.CMsgHttpRequest.QueryParam.encode(message.post_params[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.body != null && message.hasOwnProperty("body"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.body);
            if (message.absolute_timeout != null && message.hasOwnProperty("absolute_timeout"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.absolute_timeout);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHttpRequest message, length delimited. Does not implicitly {@link CMsgHttpRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHttpRequest
         * @static
         * @param {ICMsgHttpRequest} message CMsgHttpRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHttpRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHttpRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHttpRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHttpRequest} CMsgHttpRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHttpRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHttpRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.request_method = reader.uint32();
                    break;
                case 2:
                    message.hostname = reader.string();
                    break;
                case 3:
                    message.url = reader.string();
                    break;
                case 4:
                    if (!(message.headers && message.headers.length))
                        message.headers = [];
                    message.headers.push($root.CMsgHttpRequest.RequestHeader.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.get_params && message.get_params.length))
                        message.get_params = [];
                    message.get_params.push($root.CMsgHttpRequest.QueryParam.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.post_params && message.post_params.length))
                        message.post_params = [];
                    message.post_params.push($root.CMsgHttpRequest.QueryParam.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.body = reader.bytes();
                    break;
                case 8:
                    message.absolute_timeout = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHttpRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHttpRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHttpRequest} CMsgHttpRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHttpRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHttpRequest message.
         * @function verify
         * @memberof CMsgHttpRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHttpRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.request_method != null && message.hasOwnProperty("request_method"))
                if (!$util.isInteger(message.request_method))
                    return "request_method: integer expected";
            if (message.hostname != null && message.hasOwnProperty("hostname"))
                if (!$util.isString(message.hostname))
                    return "hostname: string expected";
            if (message.url != null && message.hasOwnProperty("url"))
                if (!$util.isString(message.url))
                    return "url: string expected";
            if (message.headers != null && message.hasOwnProperty("headers")) {
                if (!Array.isArray(message.headers))
                    return "headers: array expected";
                for (var i = 0; i < message.headers.length; ++i) {
                    var error = $root.CMsgHttpRequest.RequestHeader.verify(message.headers[i]);
                    if (error)
                        return "headers." + error;
                }
            }
            if (message.get_params != null && message.hasOwnProperty("get_params")) {
                if (!Array.isArray(message.get_params))
                    return "get_params: array expected";
                for (var i = 0; i < message.get_params.length; ++i) {
                    var error = $root.CMsgHttpRequest.QueryParam.verify(message.get_params[i]);
                    if (error)
                        return "get_params." + error;
                }
            }
            if (message.post_params != null && message.hasOwnProperty("post_params")) {
                if (!Array.isArray(message.post_params))
                    return "post_params: array expected";
                for (var i = 0; i < message.post_params.length; ++i) {
                    var error = $root.CMsgHttpRequest.QueryParam.verify(message.post_params[i]);
                    if (error)
                        return "post_params." + error;
                }
            }
            if (message.body != null && message.hasOwnProperty("body"))
                if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
                    return "body: buffer expected";
            if (message.absolute_timeout != null && message.hasOwnProperty("absolute_timeout"))
                if (!$util.isInteger(message.absolute_timeout))
                    return "absolute_timeout: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHttpRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHttpRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHttpRequest} CMsgHttpRequest
         */
        CMsgHttpRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHttpRequest)
                return object;
            var message = new $root.CMsgHttpRequest();
            if (object.request_method != null)
                message.request_method = object.request_method >>> 0;
            if (object.hostname != null)
                message.hostname = String(object.hostname);
            if (object.url != null)
                message.url = String(object.url);
            if (object.headers) {
                if (!Array.isArray(object.headers))
                    throw TypeError(".CMsgHttpRequest.headers: array expected");
                message.headers = [];
                for (var i = 0; i < object.headers.length; ++i) {
                    if (typeof object.headers[i] !== "object")
                        throw TypeError(".CMsgHttpRequest.headers: object expected");
                    message.headers[i] = $root.CMsgHttpRequest.RequestHeader.fromObject(object.headers[i]);
                }
            }
            if (object.get_params) {
                if (!Array.isArray(object.get_params))
                    throw TypeError(".CMsgHttpRequest.get_params: array expected");
                message.get_params = [];
                for (var i = 0; i < object.get_params.length; ++i) {
                    if (typeof object.get_params[i] !== "object")
                        throw TypeError(".CMsgHttpRequest.get_params: object expected");
                    message.get_params[i] = $root.CMsgHttpRequest.QueryParam.fromObject(object.get_params[i]);
                }
            }
            if (object.post_params) {
                if (!Array.isArray(object.post_params))
                    throw TypeError(".CMsgHttpRequest.post_params: array expected");
                message.post_params = [];
                for (var i = 0; i < object.post_params.length; ++i) {
                    if (typeof object.post_params[i] !== "object")
                        throw TypeError(".CMsgHttpRequest.post_params: object expected");
                    message.post_params[i] = $root.CMsgHttpRequest.QueryParam.fromObject(object.post_params[i]);
                }
            }
            if (object.body != null)
                if (typeof object.body === "string")
                    $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
                else if (object.body.length)
                    message.body = object.body;
            if (object.absolute_timeout != null)
                message.absolute_timeout = object.absolute_timeout >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHttpRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHttpRequest
         * @static
         * @param {CMsgHttpRequest} message CMsgHttpRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHttpRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.headers = [];
                object.get_params = [];
                object.post_params = [];
            }
            if (options.defaults) {
                object.request_method = 0;
                object.hostname = "";
                object.url = "";
                if (options.bytes === String)
                    object.body = "";
                else {
                    object.body = [];
                    if (options.bytes !== Array)
                        object.body = $util.newBuffer(object.body);
                }
                object.absolute_timeout = 0;
            }
            if (message.request_method != null && message.hasOwnProperty("request_method"))
                object.request_method = message.request_method;
            if (message.hostname != null && message.hasOwnProperty("hostname"))
                object.hostname = message.hostname;
            if (message.url != null && message.hasOwnProperty("url"))
                object.url = message.url;
            if (message.headers && message.headers.length) {
                object.headers = [];
                for (var j = 0; j < message.headers.length; ++j)
                    object.headers[j] = $root.CMsgHttpRequest.RequestHeader.toObject(message.headers[j], options);
            }
            if (message.get_params && message.get_params.length) {
                object.get_params = [];
                for (var j = 0; j < message.get_params.length; ++j)
                    object.get_params[j] = $root.CMsgHttpRequest.QueryParam.toObject(message.get_params[j], options);
            }
            if (message.post_params && message.post_params.length) {
                object.post_params = [];
                for (var j = 0; j < message.post_params.length; ++j)
                    object.post_params[j] = $root.CMsgHttpRequest.QueryParam.toObject(message.post_params[j], options);
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = options.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
            if (message.absolute_timeout != null && message.hasOwnProperty("absolute_timeout"))
                object.absolute_timeout = message.absolute_timeout;
            return object;
        };
    
        /**
         * Converts this CMsgHttpRequest to JSON.
         * @function toJSON
         * @memberof CMsgHttpRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHttpRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgHttpRequest.RequestHeader = (function() {
    
            /**
             * Properties of a RequestHeader.
             * @memberof CMsgHttpRequest
             * @interface IRequestHeader
             * @property {string|null} [name] RequestHeader name
             * @property {string|null} [value] RequestHeader value
             */
    
            /**
             * Constructs a new RequestHeader.
             * @memberof CMsgHttpRequest
             * @classdesc Represents a RequestHeader.
             * @implements IRequestHeader
             * @constructor
             * @param {CMsgHttpRequest.IRequestHeader=} [properties] Properties to set
             */
            function RequestHeader(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RequestHeader name.
             * @member {string} name
             * @memberof CMsgHttpRequest.RequestHeader
             * @instance
             */
            RequestHeader.prototype.name = "";
    
            /**
             * RequestHeader value.
             * @member {string} value
             * @memberof CMsgHttpRequest.RequestHeader
             * @instance
             */
            RequestHeader.prototype.value = "";
    
            /**
             * Creates a new RequestHeader instance using the specified properties.
             * @function create
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {CMsgHttpRequest.IRequestHeader=} [properties] Properties to set
             * @returns {CMsgHttpRequest.RequestHeader} RequestHeader instance
             */
            RequestHeader.create = function create(properties) {
                return new RequestHeader(properties);
            };
    
            /**
             * Encodes the specified RequestHeader message. Does not implicitly {@link CMsgHttpRequest.RequestHeader.verify|verify} messages.
             * @function encode
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {CMsgHttpRequest.IRequestHeader} message RequestHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified RequestHeader message, length delimited. Does not implicitly {@link CMsgHttpRequest.RequestHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {CMsgHttpRequest.IRequestHeader} message RequestHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RequestHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RequestHeader message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgHttpRequest.RequestHeader} RequestHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHttpRequest.RequestHeader();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RequestHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgHttpRequest.RequestHeader} RequestHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RequestHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RequestHeader message.
             * @function verify
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RequestHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a RequestHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgHttpRequest.RequestHeader} RequestHeader
             */
            RequestHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgHttpRequest.RequestHeader)
                    return object;
                var message = new $root.CMsgHttpRequest.RequestHeader();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a RequestHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgHttpRequest.RequestHeader
             * @static
             * @param {CMsgHttpRequest.RequestHeader} message RequestHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RequestHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this RequestHeader to JSON.
             * @function toJSON
             * @memberof CMsgHttpRequest.RequestHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RequestHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return RequestHeader;
        })();
    
        CMsgHttpRequest.QueryParam = (function() {
    
            /**
             * Properties of a QueryParam.
             * @memberof CMsgHttpRequest
             * @interface IQueryParam
             * @property {string|null} [name] QueryParam name
             * @property {Uint8Array|null} [value] QueryParam value
             */
    
            /**
             * Constructs a new QueryParam.
             * @memberof CMsgHttpRequest
             * @classdesc Represents a QueryParam.
             * @implements IQueryParam
             * @constructor
             * @param {CMsgHttpRequest.IQueryParam=} [properties] Properties to set
             */
            function QueryParam(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * QueryParam name.
             * @member {string} name
             * @memberof CMsgHttpRequest.QueryParam
             * @instance
             */
            QueryParam.prototype.name = "";
    
            /**
             * QueryParam value.
             * @member {Uint8Array} value
             * @memberof CMsgHttpRequest.QueryParam
             * @instance
             */
            QueryParam.prototype.value = $util.newBuffer([]);
    
            /**
             * Creates a new QueryParam instance using the specified properties.
             * @function create
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {CMsgHttpRequest.IQueryParam=} [properties] Properties to set
             * @returns {CMsgHttpRequest.QueryParam} QueryParam instance
             */
            QueryParam.create = function create(properties) {
                return new QueryParam(properties);
            };
    
            /**
             * Encodes the specified QueryParam message. Does not implicitly {@link CMsgHttpRequest.QueryParam.verify|verify} messages.
             * @function encode
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {CMsgHttpRequest.IQueryParam} message QueryParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParam.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified QueryParam message, length delimited. Does not implicitly {@link CMsgHttpRequest.QueryParam.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {CMsgHttpRequest.IQueryParam} message QueryParam message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            QueryParam.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a QueryParam message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgHttpRequest.QueryParam} QueryParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParam.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHttpRequest.QueryParam();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a QueryParam message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgHttpRequest.QueryParam} QueryParam
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            QueryParam.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a QueryParam message.
             * @function verify
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            QueryParam.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };
    
            /**
             * Creates a QueryParam message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgHttpRequest.QueryParam} QueryParam
             */
            QueryParam.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgHttpRequest.QueryParam)
                    return object;
                var message = new $root.CMsgHttpRequest.QueryParam();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };
    
            /**
             * Creates a plain object from a QueryParam message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgHttpRequest.QueryParam
             * @static
             * @param {CMsgHttpRequest.QueryParam} message QueryParam
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            QueryParam.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };
    
            /**
             * Converts this QueryParam to JSON.
             * @function toJSON
             * @memberof CMsgHttpRequest.QueryParam
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            QueryParam.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return QueryParam;
        })();
    
        return CMsgHttpRequest;
    })();
    
    $root.CMsgWebAPIRequest = (function() {
    
        /**
         * Properties of a CMsgWebAPIRequest.
         * @exports ICMsgWebAPIRequest
         * @interface ICMsgWebAPIRequest
         * @property {string|null} [UNUSED_job_name] CMsgWebAPIRequest UNUSED_job_name
         * @property {string|null} [interface_name] CMsgWebAPIRequest interface_name
         * @property {string|null} [method_name] CMsgWebAPIRequest method_name
         * @property {number|null} [version] CMsgWebAPIRequest version
         * @property {ICMsgWebAPIKey|null} [api_key] CMsgWebAPIRequest api_key
         * @property {ICMsgHttpRequest|null} [request] CMsgWebAPIRequest request
         * @property {number|null} [routing_app_id] CMsgWebAPIRequest routing_app_id
         */
    
        /**
         * Constructs a new CMsgWebAPIRequest.
         * @exports CMsgWebAPIRequest
         * @classdesc Represents a CMsgWebAPIRequest.
         * @implements ICMsgWebAPIRequest
         * @constructor
         * @param {ICMsgWebAPIRequest=} [properties] Properties to set
         */
        function CMsgWebAPIRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgWebAPIRequest UNUSED_job_name.
         * @member {string} UNUSED_job_name
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.UNUSED_job_name = "";
    
        /**
         * CMsgWebAPIRequest interface_name.
         * @member {string} interface_name
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.interface_name = "";
    
        /**
         * CMsgWebAPIRequest method_name.
         * @member {string} method_name
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.method_name = "";
    
        /**
         * CMsgWebAPIRequest version.
         * @member {number} version
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.version = 0;
    
        /**
         * CMsgWebAPIRequest api_key.
         * @member {ICMsgWebAPIKey|null|undefined} api_key
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.api_key = null;
    
        /**
         * CMsgWebAPIRequest request.
         * @member {ICMsgHttpRequest|null|undefined} request
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.request = null;
    
        /**
         * CMsgWebAPIRequest routing_app_id.
         * @member {number} routing_app_id
         * @memberof CMsgWebAPIRequest
         * @instance
         */
        CMsgWebAPIRequest.prototype.routing_app_id = 0;
    
        /**
         * Creates a new CMsgWebAPIRequest instance using the specified properties.
         * @function create
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {ICMsgWebAPIRequest=} [properties] Properties to set
         * @returns {CMsgWebAPIRequest} CMsgWebAPIRequest instance
         */
        CMsgWebAPIRequest.create = function create(properties) {
            return new CMsgWebAPIRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgWebAPIRequest message. Does not implicitly {@link CMsgWebAPIRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {ICMsgWebAPIRequest} message CMsgWebAPIRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWebAPIRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.UNUSED_job_name != null && message.hasOwnProperty("UNUSED_job_name"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.UNUSED_job_name);
            if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.interface_name);
            if (message.method_name != null && message.hasOwnProperty("method_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.method_name);
            if (message.version != null && message.hasOwnProperty("version"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.version);
            if (message.api_key != null && message.hasOwnProperty("api_key"))
                $root.CMsgWebAPIKey.encode(message.api_key, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.request != null && message.hasOwnProperty("request"))
                $root.CMsgHttpRequest.encode(message.request, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.routing_app_id != null && message.hasOwnProperty("routing_app_id"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.routing_app_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgWebAPIRequest message, length delimited. Does not implicitly {@link CMsgWebAPIRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {ICMsgWebAPIRequest} message CMsgWebAPIRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgWebAPIRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgWebAPIRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgWebAPIRequest} CMsgWebAPIRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWebAPIRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgWebAPIRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.UNUSED_job_name = reader.string();
                    break;
                case 2:
                    message.interface_name = reader.string();
                    break;
                case 3:
                    message.method_name = reader.string();
                    break;
                case 4:
                    message.version = reader.uint32();
                    break;
                case 5:
                    message.api_key = $root.CMsgWebAPIKey.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.request = $root.CMsgHttpRequest.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.routing_app_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgWebAPIRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgWebAPIRequest} CMsgWebAPIRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgWebAPIRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgWebAPIRequest message.
         * @function verify
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgWebAPIRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.UNUSED_job_name != null && message.hasOwnProperty("UNUSED_job_name"))
                if (!$util.isString(message.UNUSED_job_name))
                    return "UNUSED_job_name: string expected";
            if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                if (!$util.isString(message.interface_name))
                    return "interface_name: string expected";
            if (message.method_name != null && message.hasOwnProperty("method_name"))
                if (!$util.isString(message.method_name))
                    return "method_name: string expected";
            if (message.version != null && message.hasOwnProperty("version"))
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
            if (message.api_key != null && message.hasOwnProperty("api_key")) {
                var error = $root.CMsgWebAPIKey.verify(message.api_key);
                if (error)
                    return "api_key." + error;
            }
            if (message.request != null && message.hasOwnProperty("request")) {
                var error = $root.CMsgHttpRequest.verify(message.request);
                if (error)
                    return "request." + error;
            }
            if (message.routing_app_id != null && message.hasOwnProperty("routing_app_id"))
                if (!$util.isInteger(message.routing_app_id))
                    return "routing_app_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgWebAPIRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgWebAPIRequest} CMsgWebAPIRequest
         */
        CMsgWebAPIRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgWebAPIRequest)
                return object;
            var message = new $root.CMsgWebAPIRequest();
            if (object.UNUSED_job_name != null)
                message.UNUSED_job_name = String(object.UNUSED_job_name);
            if (object.interface_name != null)
                message.interface_name = String(object.interface_name);
            if (object.method_name != null)
                message.method_name = String(object.method_name);
            if (object.version != null)
                message.version = object.version >>> 0;
            if (object.api_key != null) {
                if (typeof object.api_key !== "object")
                    throw TypeError(".CMsgWebAPIRequest.api_key: object expected");
                message.api_key = $root.CMsgWebAPIKey.fromObject(object.api_key);
            }
            if (object.request != null) {
                if (typeof object.request !== "object")
                    throw TypeError(".CMsgWebAPIRequest.request: object expected");
                message.request = $root.CMsgHttpRequest.fromObject(object.request);
            }
            if (object.routing_app_id != null)
                message.routing_app_id = object.routing_app_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgWebAPIRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgWebAPIRequest
         * @static
         * @param {CMsgWebAPIRequest} message CMsgWebAPIRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgWebAPIRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.UNUSED_job_name = "";
                object.interface_name = "";
                object.method_name = "";
                object.version = 0;
                object.api_key = null;
                object.request = null;
                object.routing_app_id = 0;
            }
            if (message.UNUSED_job_name != null && message.hasOwnProperty("UNUSED_job_name"))
                object.UNUSED_job_name = message.UNUSED_job_name;
            if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                object.interface_name = message.interface_name;
            if (message.method_name != null && message.hasOwnProperty("method_name"))
                object.method_name = message.method_name;
            if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
            if (message.api_key != null && message.hasOwnProperty("api_key"))
                object.api_key = $root.CMsgWebAPIKey.toObject(message.api_key, options);
            if (message.request != null && message.hasOwnProperty("request"))
                object.request = $root.CMsgHttpRequest.toObject(message.request, options);
            if (message.routing_app_id != null && message.hasOwnProperty("routing_app_id"))
                object.routing_app_id = message.routing_app_id;
            return object;
        };
    
        /**
         * Converts this CMsgWebAPIRequest to JSON.
         * @function toJSON
         * @memberof CMsgWebAPIRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgWebAPIRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgWebAPIRequest;
    })();
    
    $root.CMsgHttpResponse = (function() {
    
        /**
         * Properties of a CMsgHttpResponse.
         * @exports ICMsgHttpResponse
         * @interface ICMsgHttpResponse
         * @property {number|null} [status_code] CMsgHttpResponse status_code
         * @property {Array.<CMsgHttpResponse.IResponseHeader>|null} [headers] CMsgHttpResponse headers
         * @property {Uint8Array|null} [body] CMsgHttpResponse body
         */
    
        /**
         * Constructs a new CMsgHttpResponse.
         * @exports CMsgHttpResponse
         * @classdesc Represents a CMsgHttpResponse.
         * @implements ICMsgHttpResponse
         * @constructor
         * @param {ICMsgHttpResponse=} [properties] Properties to set
         */
        function CMsgHttpResponse(properties) {
            this.headers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgHttpResponse status_code.
         * @member {number} status_code
         * @memberof CMsgHttpResponse
         * @instance
         */
        CMsgHttpResponse.prototype.status_code = 0;
    
        /**
         * CMsgHttpResponse headers.
         * @member {Array.<CMsgHttpResponse.IResponseHeader>} headers
         * @memberof CMsgHttpResponse
         * @instance
         */
        CMsgHttpResponse.prototype.headers = $util.emptyArray;
    
        /**
         * CMsgHttpResponse body.
         * @member {Uint8Array} body
         * @memberof CMsgHttpResponse
         * @instance
         */
        CMsgHttpResponse.prototype.body = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgHttpResponse instance using the specified properties.
         * @function create
         * @memberof CMsgHttpResponse
         * @static
         * @param {ICMsgHttpResponse=} [properties] Properties to set
         * @returns {CMsgHttpResponse} CMsgHttpResponse instance
         */
        CMsgHttpResponse.create = function create(properties) {
            return new CMsgHttpResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgHttpResponse message. Does not implicitly {@link CMsgHttpResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgHttpResponse
         * @static
         * @param {ICMsgHttpResponse} message CMsgHttpResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHttpResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.status_code != null && message.hasOwnProperty("status_code"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.status_code);
            if (message.headers != null && message.headers.length)
                for (var i = 0; i < message.headers.length; ++i)
                    $root.CMsgHttpResponse.ResponseHeader.encode(message.headers[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.body != null && message.hasOwnProperty("body"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.body);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgHttpResponse message, length delimited. Does not implicitly {@link CMsgHttpResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgHttpResponse
         * @static
         * @param {ICMsgHttpResponse} message CMsgHttpResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgHttpResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgHttpResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgHttpResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgHttpResponse} CMsgHttpResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHttpResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHttpResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.status_code = reader.uint32();
                    break;
                case 2:
                    if (!(message.headers && message.headers.length))
                        message.headers = [];
                    message.headers.push($root.CMsgHttpResponse.ResponseHeader.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgHttpResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgHttpResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgHttpResponse} CMsgHttpResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgHttpResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgHttpResponse message.
         * @function verify
         * @memberof CMsgHttpResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgHttpResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.status_code != null && message.hasOwnProperty("status_code"))
                if (!$util.isInteger(message.status_code))
                    return "status_code: integer expected";
            if (message.headers != null && message.hasOwnProperty("headers")) {
                if (!Array.isArray(message.headers))
                    return "headers: array expected";
                for (var i = 0; i < message.headers.length; ++i) {
                    var error = $root.CMsgHttpResponse.ResponseHeader.verify(message.headers[i]);
                    if (error)
                        return "headers." + error;
                }
            }
            if (message.body != null && message.hasOwnProperty("body"))
                if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
                    return "body: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgHttpResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgHttpResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgHttpResponse} CMsgHttpResponse
         */
        CMsgHttpResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgHttpResponse)
                return object;
            var message = new $root.CMsgHttpResponse();
            if (object.status_code != null)
                message.status_code = object.status_code >>> 0;
            if (object.headers) {
                if (!Array.isArray(object.headers))
                    throw TypeError(".CMsgHttpResponse.headers: array expected");
                message.headers = [];
                for (var i = 0; i < object.headers.length; ++i) {
                    if (typeof object.headers[i] !== "object")
                        throw TypeError(".CMsgHttpResponse.headers: object expected");
                    message.headers[i] = $root.CMsgHttpResponse.ResponseHeader.fromObject(object.headers[i]);
                }
            }
            if (object.body != null)
                if (typeof object.body === "string")
                    $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
                else if (object.body.length)
                    message.body = object.body;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgHttpResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgHttpResponse
         * @static
         * @param {CMsgHttpResponse} message CMsgHttpResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgHttpResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.headers = [];
            if (options.defaults) {
                object.status_code = 0;
                if (options.bytes === String)
                    object.body = "";
                else {
                    object.body = [];
                    if (options.bytes !== Array)
                        object.body = $util.newBuffer(object.body);
                }
            }
            if (message.status_code != null && message.hasOwnProperty("status_code"))
                object.status_code = message.status_code;
            if (message.headers && message.headers.length) {
                object.headers = [];
                for (var j = 0; j < message.headers.length; ++j)
                    object.headers[j] = $root.CMsgHttpResponse.ResponseHeader.toObject(message.headers[j], options);
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = options.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
            return object;
        };
    
        /**
         * Converts this CMsgHttpResponse to JSON.
         * @function toJSON
         * @memberof CMsgHttpResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgHttpResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgHttpResponse.ResponseHeader = (function() {
    
            /**
             * Properties of a ResponseHeader.
             * @memberof CMsgHttpResponse
             * @interface IResponseHeader
             * @property {string|null} [name] ResponseHeader name
             * @property {string|null} [value] ResponseHeader value
             */
    
            /**
             * Constructs a new ResponseHeader.
             * @memberof CMsgHttpResponse
             * @classdesc Represents a ResponseHeader.
             * @implements IResponseHeader
             * @constructor
             * @param {CMsgHttpResponse.IResponseHeader=} [properties] Properties to set
             */
            function ResponseHeader(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ResponseHeader name.
             * @member {string} name
             * @memberof CMsgHttpResponse.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.name = "";
    
            /**
             * ResponseHeader value.
             * @member {string} value
             * @memberof CMsgHttpResponse.ResponseHeader
             * @instance
             */
            ResponseHeader.prototype.value = "";
    
            /**
             * Creates a new ResponseHeader instance using the specified properties.
             * @function create
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {CMsgHttpResponse.IResponseHeader=} [properties] Properties to set
             * @returns {CMsgHttpResponse.ResponseHeader} ResponseHeader instance
             */
            ResponseHeader.create = function create(properties) {
                return new ResponseHeader(properties);
            };
    
            /**
             * Encodes the specified ResponseHeader message. Does not implicitly {@link CMsgHttpResponse.ResponseHeader.verify|verify} messages.
             * @function encode
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {CMsgHttpResponse.IResponseHeader} message ResponseHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified ResponseHeader message, length delimited. Does not implicitly {@link CMsgHttpResponse.ResponseHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {CMsgHttpResponse.IResponseHeader} message ResponseHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResponseHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ResponseHeader message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgHttpResponse.ResponseHeader} ResponseHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgHttpResponse.ResponseHeader();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ResponseHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgHttpResponse.ResponseHeader} ResponseHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResponseHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ResponseHeader message.
             * @function verify
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResponseHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates a ResponseHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgHttpResponse.ResponseHeader} ResponseHeader
             */
            ResponseHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgHttpResponse.ResponseHeader)
                    return object;
                var message = new $root.CMsgHttpResponse.ResponseHeader();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from a ResponseHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgHttpResponse.ResponseHeader
             * @static
             * @param {CMsgHttpResponse.ResponseHeader} message ResponseHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResponseHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this ResponseHeader to JSON.
             * @function toJSON
             * @memberof CMsgHttpResponse.ResponseHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResponseHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ResponseHeader;
        })();
    
        return CMsgHttpResponse;
    })();
    
    $root.CMsgAMFindAccounts = (function() {
    
        /**
         * Properties of a CMsgAMFindAccounts.
         * @exports ICMsgAMFindAccounts
         * @interface ICMsgAMFindAccounts
         * @property {number|null} [search_type] CMsgAMFindAccounts search_type
         * @property {string|null} [search_string] CMsgAMFindAccounts search_string
         */
    
        /**
         * Constructs a new CMsgAMFindAccounts.
         * @exports CMsgAMFindAccounts
         * @classdesc Represents a CMsgAMFindAccounts.
         * @implements ICMsgAMFindAccounts
         * @constructor
         * @param {ICMsgAMFindAccounts=} [properties] Properties to set
         */
        function CMsgAMFindAccounts(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMFindAccounts search_type.
         * @member {number} search_type
         * @memberof CMsgAMFindAccounts
         * @instance
         */
        CMsgAMFindAccounts.prototype.search_type = 0;
    
        /**
         * CMsgAMFindAccounts search_string.
         * @member {string} search_string
         * @memberof CMsgAMFindAccounts
         * @instance
         */
        CMsgAMFindAccounts.prototype.search_string = "";
    
        /**
         * Creates a new CMsgAMFindAccounts instance using the specified properties.
         * @function create
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {ICMsgAMFindAccounts=} [properties] Properties to set
         * @returns {CMsgAMFindAccounts} CMsgAMFindAccounts instance
         */
        CMsgAMFindAccounts.create = function create(properties) {
            return new CMsgAMFindAccounts(properties);
        };
    
        /**
         * Encodes the specified CMsgAMFindAccounts message. Does not implicitly {@link CMsgAMFindAccounts.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {ICMsgAMFindAccounts} message CMsgAMFindAccounts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMFindAccounts.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.search_type != null && message.hasOwnProperty("search_type"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.search_type);
            if (message.search_string != null && message.hasOwnProperty("search_string"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.search_string);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMFindAccounts message, length delimited. Does not implicitly {@link CMsgAMFindAccounts.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {ICMsgAMFindAccounts} message CMsgAMFindAccounts message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMFindAccounts.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMFindAccounts message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMFindAccounts} CMsgAMFindAccounts
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMFindAccounts.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMFindAccounts();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.search_type = reader.uint32();
                    break;
                case 2:
                    message.search_string = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMFindAccounts message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMFindAccounts} CMsgAMFindAccounts
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMFindAccounts.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMFindAccounts message.
         * @function verify
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMFindAccounts.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.search_type != null && message.hasOwnProperty("search_type"))
                if (!$util.isInteger(message.search_type))
                    return "search_type: integer expected";
            if (message.search_string != null && message.hasOwnProperty("search_string"))
                if (!$util.isString(message.search_string))
                    return "search_string: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMFindAccounts message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMFindAccounts} CMsgAMFindAccounts
         */
        CMsgAMFindAccounts.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMFindAccounts)
                return object;
            var message = new $root.CMsgAMFindAccounts();
            if (object.search_type != null)
                message.search_type = object.search_type >>> 0;
            if (object.search_string != null)
                message.search_string = String(object.search_string);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMFindAccounts message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMFindAccounts
         * @static
         * @param {CMsgAMFindAccounts} message CMsgAMFindAccounts
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMFindAccounts.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.search_type = 0;
                object.search_string = "";
            }
            if (message.search_type != null && message.hasOwnProperty("search_type"))
                object.search_type = message.search_type;
            if (message.search_string != null && message.hasOwnProperty("search_string"))
                object.search_string = message.search_string;
            return object;
        };
    
        /**
         * Converts this CMsgAMFindAccounts to JSON.
         * @function toJSON
         * @memberof CMsgAMFindAccounts
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMFindAccounts.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMFindAccounts;
    })();
    
    $root.CMsgAMFindAccountsResponse = (function() {
    
        /**
         * Properties of a CMsgAMFindAccountsResponse.
         * @exports ICMsgAMFindAccountsResponse
         * @interface ICMsgAMFindAccountsResponse
         * @property {Array.<number|Long>|null} [steam_id] CMsgAMFindAccountsResponse steam_id
         */
    
        /**
         * Constructs a new CMsgAMFindAccountsResponse.
         * @exports CMsgAMFindAccountsResponse
         * @classdesc Represents a CMsgAMFindAccountsResponse.
         * @implements ICMsgAMFindAccountsResponse
         * @constructor
         * @param {ICMsgAMFindAccountsResponse=} [properties] Properties to set
         */
        function CMsgAMFindAccountsResponse(properties) {
            this.steam_id = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMFindAccountsResponse steam_id.
         * @member {Array.<number|Long>} steam_id
         * @memberof CMsgAMFindAccountsResponse
         * @instance
         */
        CMsgAMFindAccountsResponse.prototype.steam_id = $util.emptyArray;
    
        /**
         * Creates a new CMsgAMFindAccountsResponse instance using the specified properties.
         * @function create
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {ICMsgAMFindAccountsResponse=} [properties] Properties to set
         * @returns {CMsgAMFindAccountsResponse} CMsgAMFindAccountsResponse instance
         */
        CMsgAMFindAccountsResponse.create = function create(properties) {
            return new CMsgAMFindAccountsResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgAMFindAccountsResponse message. Does not implicitly {@link CMsgAMFindAccountsResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {ICMsgAMFindAccountsResponse} message CMsgAMFindAccountsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMFindAccountsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.steam_id.length)
                for (var i = 0; i < message.steam_id.length; ++i)
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMFindAccountsResponse message, length delimited. Does not implicitly {@link CMsgAMFindAccountsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {ICMsgAMFindAccountsResponse} message CMsgAMFindAccountsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMFindAccountsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMFindAccountsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMFindAccountsResponse} CMsgAMFindAccountsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMFindAccountsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMFindAccountsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.steam_id && message.steam_id.length))
                        message.steam_id = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.steam_id.push(reader.fixed64());
                    } else
                        message.steam_id.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMFindAccountsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMFindAccountsResponse} CMsgAMFindAccountsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMFindAccountsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMFindAccountsResponse message.
         * @function verify
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMFindAccountsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id")) {
                if (!Array.isArray(message.steam_id))
                    return "steam_id: array expected";
                for (var i = 0; i < message.steam_id.length; ++i)
                    if (!$util.isInteger(message.steam_id[i]) && !(message.steam_id[i] && $util.isInteger(message.steam_id[i].low) && $util.isInteger(message.steam_id[i].high)))
                        return "steam_id: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgAMFindAccountsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMFindAccountsResponse} CMsgAMFindAccountsResponse
         */
        CMsgAMFindAccountsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMFindAccountsResponse)
                return object;
            var message = new $root.CMsgAMFindAccountsResponse();
            if (object.steam_id) {
                if (!Array.isArray(object.steam_id))
                    throw TypeError(".CMsgAMFindAccountsResponse.steam_id: array expected");
                message.steam_id = [];
                for (var i = 0; i < object.steam_id.length; ++i)
                    if ($util.Long)
                        (message.steam_id[i] = $util.Long.fromValue(object.steam_id[i])).unsigned = false;
                    else if (typeof object.steam_id[i] === "string")
                        message.steam_id[i] = parseInt(object.steam_id[i], 10);
                    else if (typeof object.steam_id[i] === "number")
                        message.steam_id[i] = object.steam_id[i];
                    else if (typeof object.steam_id[i] === "object")
                        message.steam_id[i] = new $util.LongBits(object.steam_id[i].low >>> 0, object.steam_id[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMFindAccountsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMFindAccountsResponse
         * @static
         * @param {CMsgAMFindAccountsResponse} message CMsgAMFindAccountsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMFindAccountsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.steam_id = [];
            if (message.steam_id && message.steam_id.length) {
                object.steam_id = [];
                for (var j = 0; j < message.steam_id.length; ++j)
                    if (typeof message.steam_id[j] === "number")
                        object.steam_id[j] = options.longs === String ? String(message.steam_id[j]) : message.steam_id[j];
                    else
                        object.steam_id[j] = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id[j]) : options.longs === Number ? new $util.LongBits(message.steam_id[j].low >>> 0, message.steam_id[j].high >>> 0).toNumber() : message.steam_id[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgAMFindAccountsResponse to JSON.
         * @function toJSON
         * @memberof CMsgAMFindAccountsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMFindAccountsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMFindAccountsResponse;
    })();
    
    $root.CMsgNotifyWatchdog = (function() {
    
        /**
         * Properties of a CMsgNotifyWatchdog.
         * @exports ICMsgNotifyWatchdog
         * @interface ICMsgNotifyWatchdog
         * @property {number|null} [source] CMsgNotifyWatchdog source
         * @property {number|null} [alert_type] CMsgNotifyWatchdog alert_type
         * @property {number|null} [alert_destination] CMsgNotifyWatchdog alert_destination
         * @property {boolean|null} [critical] CMsgNotifyWatchdog critical
         * @property {number|null} [time] CMsgNotifyWatchdog time
         * @property {number|null} [appid] CMsgNotifyWatchdog appid
         * @property {string|null} [text] CMsgNotifyWatchdog text
         */
    
        /**
         * Constructs a new CMsgNotifyWatchdog.
         * @exports CMsgNotifyWatchdog
         * @classdesc Represents a CMsgNotifyWatchdog.
         * @implements ICMsgNotifyWatchdog
         * @constructor
         * @param {ICMsgNotifyWatchdog=} [properties] Properties to set
         */
        function CMsgNotifyWatchdog(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNotifyWatchdog source.
         * @member {number} source
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.source = 0;
    
        /**
         * CMsgNotifyWatchdog alert_type.
         * @member {number} alert_type
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.alert_type = 0;
    
        /**
         * CMsgNotifyWatchdog alert_destination.
         * @member {number} alert_destination
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.alert_destination = 0;
    
        /**
         * CMsgNotifyWatchdog critical.
         * @member {boolean} critical
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.critical = false;
    
        /**
         * CMsgNotifyWatchdog time.
         * @member {number} time
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.time = 0;
    
        /**
         * CMsgNotifyWatchdog appid.
         * @member {number} appid
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.appid = 0;
    
        /**
         * CMsgNotifyWatchdog text.
         * @member {string} text
         * @memberof CMsgNotifyWatchdog
         * @instance
         */
        CMsgNotifyWatchdog.prototype.text = "";
    
        /**
         * Creates a new CMsgNotifyWatchdog instance using the specified properties.
         * @function create
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {ICMsgNotifyWatchdog=} [properties] Properties to set
         * @returns {CMsgNotifyWatchdog} CMsgNotifyWatchdog instance
         */
        CMsgNotifyWatchdog.create = function create(properties) {
            return new CMsgNotifyWatchdog(properties);
        };
    
        /**
         * Encodes the specified CMsgNotifyWatchdog message. Does not implicitly {@link CMsgNotifyWatchdog.verify|verify} messages.
         * @function encode
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {ICMsgNotifyWatchdog} message CMsgNotifyWatchdog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNotifyWatchdog.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.source);
            if (message.alert_type != null && message.hasOwnProperty("alert_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.alert_type);
            if (message.alert_destination != null && message.hasOwnProperty("alert_destination"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.alert_destination);
            if (message.critical != null && message.hasOwnProperty("critical"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.critical);
            if (message.time != null && message.hasOwnProperty("time"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.time);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.appid);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNotifyWatchdog message, length delimited. Does not implicitly {@link CMsgNotifyWatchdog.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {ICMsgNotifyWatchdog} message CMsgNotifyWatchdog message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNotifyWatchdog.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNotifyWatchdog message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNotifyWatchdog} CMsgNotifyWatchdog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNotifyWatchdog.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNotifyWatchdog();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.source = reader.uint32();
                    break;
                case 2:
                    message.alert_type = reader.uint32();
                    break;
                case 3:
                    message.alert_destination = reader.uint32();
                    break;
                case 4:
                    message.critical = reader.bool();
                    break;
                case 5:
                    message.time = reader.uint32();
                    break;
                case 6:
                    message.appid = reader.uint32();
                    break;
                case 7:
                    message.text = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNotifyWatchdog message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNotifyWatchdog} CMsgNotifyWatchdog
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNotifyWatchdog.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNotifyWatchdog message.
         * @function verify
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNotifyWatchdog.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.source != null && message.hasOwnProperty("source"))
                if (!$util.isInteger(message.source))
                    return "source: integer expected";
            if (message.alert_type != null && message.hasOwnProperty("alert_type"))
                if (!$util.isInteger(message.alert_type))
                    return "alert_type: integer expected";
            if (message.alert_destination != null && message.hasOwnProperty("alert_destination"))
                if (!$util.isInteger(message.alert_destination))
                    return "alert_destination: integer expected";
            if (message.critical != null && message.hasOwnProperty("critical"))
                if (typeof message.critical !== "boolean")
                    return "critical: boolean expected";
            if (message.time != null && message.hasOwnProperty("time"))
                if (!$util.isInteger(message.time))
                    return "time: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgNotifyWatchdog message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNotifyWatchdog} CMsgNotifyWatchdog
         */
        CMsgNotifyWatchdog.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNotifyWatchdog)
                return object;
            var message = new $root.CMsgNotifyWatchdog();
            if (object.source != null)
                message.source = object.source >>> 0;
            if (object.alert_type != null)
                message.alert_type = object.alert_type >>> 0;
            if (object.alert_destination != null)
                message.alert_destination = object.alert_destination >>> 0;
            if (object.critical != null)
                message.critical = Boolean(object.critical);
            if (object.time != null)
                message.time = object.time >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNotifyWatchdog message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNotifyWatchdog
         * @static
         * @param {CMsgNotifyWatchdog} message CMsgNotifyWatchdog
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNotifyWatchdog.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.source = 0;
                object.alert_type = 0;
                object.alert_destination = 0;
                object.critical = false;
                object.time = 0;
                object.appid = 0;
                object.text = "";
            }
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = message.source;
            if (message.alert_type != null && message.hasOwnProperty("alert_type"))
                object.alert_type = message.alert_type;
            if (message.alert_destination != null && message.hasOwnProperty("alert_destination"))
                object.alert_destination = message.alert_destination;
            if (message.critical != null && message.hasOwnProperty("critical"))
                object.critical = message.critical;
            if (message.time != null && message.hasOwnProperty("time"))
                object.time = message.time;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgNotifyWatchdog to JSON.
         * @function toJSON
         * @memberof CMsgNotifyWatchdog
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNotifyWatchdog.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgNotifyWatchdog;
    })();
    
    $root.CMsgAMGetLicenses = (function() {
    
        /**
         * Properties of a CMsgAMGetLicenses.
         * @exports ICMsgAMGetLicenses
         * @interface ICMsgAMGetLicenses
         * @property {number|Long|null} [steamid] CMsgAMGetLicenses steamid
         */
    
        /**
         * Constructs a new CMsgAMGetLicenses.
         * @exports CMsgAMGetLicenses
         * @classdesc Represents a CMsgAMGetLicenses.
         * @implements ICMsgAMGetLicenses
         * @constructor
         * @param {ICMsgAMGetLicenses=} [properties] Properties to set
         */
        function CMsgAMGetLicenses(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGetLicenses steamid.
         * @member {number|Long} steamid
         * @memberof CMsgAMGetLicenses
         * @instance
         */
        CMsgAMGetLicenses.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgAMGetLicenses instance using the specified properties.
         * @function create
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {ICMsgAMGetLicenses=} [properties] Properties to set
         * @returns {CMsgAMGetLicenses} CMsgAMGetLicenses instance
         */
        CMsgAMGetLicenses.create = function create(properties) {
            return new CMsgAMGetLicenses(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGetLicenses message. Does not implicitly {@link CMsgAMGetLicenses.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {ICMsgAMGetLicenses} message CMsgAMGetLicenses message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetLicenses.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGetLicenses message, length delimited. Does not implicitly {@link CMsgAMGetLicenses.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {ICMsgAMGetLicenses} message CMsgAMGetLicenses message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetLicenses.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGetLicenses message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGetLicenses} CMsgAMGetLicenses
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetLicenses.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetLicenses();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGetLicenses message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGetLicenses} CMsgAMGetLicenses
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetLicenses.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGetLicenses message.
         * @function verify
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGetLicenses.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMGetLicenses message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGetLicenses} CMsgAMGetLicenses
         */
        CMsgAMGetLicenses.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGetLicenses)
                return object;
            var message = new $root.CMsgAMGetLicenses();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGetLicenses message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGetLicenses
         * @static
         * @param {CMsgAMGetLicenses} message CMsgAMGetLicenses
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGetLicenses.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CMsgAMGetLicenses to JSON.
         * @function toJSON
         * @memberof CMsgAMGetLicenses
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGetLicenses.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMGetLicenses;
    })();
    
    $root.CMsgPackageLicense = (function() {
    
        /**
         * Properties of a CMsgPackageLicense.
         * @exports ICMsgPackageLicense
         * @interface ICMsgPackageLicense
         * @property {number|null} [package_id] CMsgPackageLicense package_id
         * @property {number|null} [time_created] CMsgPackageLicense time_created
         * @property {number|null} [owner_id] CMsgPackageLicense owner_id
         */
    
        /**
         * Constructs a new CMsgPackageLicense.
         * @exports CMsgPackageLicense
         * @classdesc Represents a CMsgPackageLicense.
         * @implements ICMsgPackageLicense
         * @constructor
         * @param {ICMsgPackageLicense=} [properties] Properties to set
         */
        function CMsgPackageLicense(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgPackageLicense package_id.
         * @member {number} package_id
         * @memberof CMsgPackageLicense
         * @instance
         */
        CMsgPackageLicense.prototype.package_id = 0;
    
        /**
         * CMsgPackageLicense time_created.
         * @member {number} time_created
         * @memberof CMsgPackageLicense
         * @instance
         */
        CMsgPackageLicense.prototype.time_created = 0;
    
        /**
         * CMsgPackageLicense owner_id.
         * @member {number} owner_id
         * @memberof CMsgPackageLicense
         * @instance
         */
        CMsgPackageLicense.prototype.owner_id = 0;
    
        /**
         * Creates a new CMsgPackageLicense instance using the specified properties.
         * @function create
         * @memberof CMsgPackageLicense
         * @static
         * @param {ICMsgPackageLicense=} [properties] Properties to set
         * @returns {CMsgPackageLicense} CMsgPackageLicense instance
         */
        CMsgPackageLicense.create = function create(properties) {
            return new CMsgPackageLicense(properties);
        };
    
        /**
         * Encodes the specified CMsgPackageLicense message. Does not implicitly {@link CMsgPackageLicense.verify|verify} messages.
         * @function encode
         * @memberof CMsgPackageLicense
         * @static
         * @param {ICMsgPackageLicense} message CMsgPackageLicense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPackageLicense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.package_id);
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time_created);
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.owner_id);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgPackageLicense message, length delimited. Does not implicitly {@link CMsgPackageLicense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgPackageLicense
         * @static
         * @param {ICMsgPackageLicense} message CMsgPackageLicense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgPackageLicense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgPackageLicense message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgPackageLicense
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgPackageLicense} CMsgPackageLicense
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPackageLicense.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgPackageLicense();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.package_id = reader.uint32();
                    break;
                case 2:
                    message.time_created = reader.uint32();
                    break;
                case 3:
                    message.owner_id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgPackageLicense message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgPackageLicense
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgPackageLicense} CMsgPackageLicense
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgPackageLicense.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgPackageLicense message.
         * @function verify
         * @memberof CMsgPackageLicense
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgPackageLicense.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                if (!$util.isInteger(message.package_id))
                    return "package_id: integer expected";
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                if (!$util.isInteger(message.time_created))
                    return "time_created: integer expected";
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                if (!$util.isInteger(message.owner_id))
                    return "owner_id: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgPackageLicense message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgPackageLicense
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgPackageLicense} CMsgPackageLicense
         */
        CMsgPackageLicense.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgPackageLicense)
                return object;
            var message = new $root.CMsgPackageLicense();
            if (object.package_id != null)
                message.package_id = object.package_id >>> 0;
            if (object.time_created != null)
                message.time_created = object.time_created >>> 0;
            if (object.owner_id != null)
                message.owner_id = object.owner_id >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgPackageLicense message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgPackageLicense
         * @static
         * @param {CMsgPackageLicense} message CMsgPackageLicense
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgPackageLicense.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.package_id = 0;
                object.time_created = 0;
                object.owner_id = 0;
            }
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                object.package_id = message.package_id;
            if (message.time_created != null && message.hasOwnProperty("time_created"))
                object.time_created = message.time_created;
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                object.owner_id = message.owner_id;
            return object;
        };
    
        /**
         * Converts this CMsgPackageLicense to JSON.
         * @function toJSON
         * @memberof CMsgPackageLicense
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgPackageLicense.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgPackageLicense;
    })();
    
    $root.CMsgAMGetLicensesResponse = (function() {
    
        /**
         * Properties of a CMsgAMGetLicensesResponse.
         * @exports ICMsgAMGetLicensesResponse
         * @interface ICMsgAMGetLicensesResponse
         * @property {Array.<ICMsgPackageLicense>|null} [license] CMsgAMGetLicensesResponse license
         * @property {number|null} [result] CMsgAMGetLicensesResponse result
         */
    
        /**
         * Constructs a new CMsgAMGetLicensesResponse.
         * @exports CMsgAMGetLicensesResponse
         * @classdesc Represents a CMsgAMGetLicensesResponse.
         * @implements ICMsgAMGetLicensesResponse
         * @constructor
         * @param {ICMsgAMGetLicensesResponse=} [properties] Properties to set
         */
        function CMsgAMGetLicensesResponse(properties) {
            this.license = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGetLicensesResponse license.
         * @member {Array.<ICMsgPackageLicense>} license
         * @memberof CMsgAMGetLicensesResponse
         * @instance
         */
        CMsgAMGetLicensesResponse.prototype.license = $util.emptyArray;
    
        /**
         * CMsgAMGetLicensesResponse result.
         * @member {number} result
         * @memberof CMsgAMGetLicensesResponse
         * @instance
         */
        CMsgAMGetLicensesResponse.prototype.result = 0;
    
        /**
         * Creates a new CMsgAMGetLicensesResponse instance using the specified properties.
         * @function create
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {ICMsgAMGetLicensesResponse=} [properties] Properties to set
         * @returns {CMsgAMGetLicensesResponse} CMsgAMGetLicensesResponse instance
         */
        CMsgAMGetLicensesResponse.create = function create(properties) {
            return new CMsgAMGetLicensesResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGetLicensesResponse message. Does not implicitly {@link CMsgAMGetLicensesResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {ICMsgAMGetLicensesResponse} message CMsgAMGetLicensesResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetLicensesResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.license != null && message.license.length)
                for (var i = 0; i < message.license.length; ++i)
                    $root.CMsgPackageLicense.encode(message.license[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.result);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGetLicensesResponse message, length delimited. Does not implicitly {@link CMsgAMGetLicensesResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {ICMsgAMGetLicensesResponse} message CMsgAMGetLicensesResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetLicensesResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGetLicensesResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGetLicensesResponse} CMsgAMGetLicensesResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetLicensesResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetLicensesResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.license && message.license.length))
                        message.license = [];
                    message.license.push($root.CMsgPackageLicense.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.result = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGetLicensesResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGetLicensesResponse} CMsgAMGetLicensesResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetLicensesResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGetLicensesResponse message.
         * @function verify
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGetLicensesResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.license != null && message.hasOwnProperty("license")) {
                if (!Array.isArray(message.license))
                    return "license: array expected";
                for (var i = 0; i < message.license.length; ++i) {
                    var error = $root.CMsgPackageLicense.verify(message.license[i]);
                    if (error)
                        return "license." + error;
                }
            }
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMGetLicensesResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGetLicensesResponse} CMsgAMGetLicensesResponse
         */
        CMsgAMGetLicensesResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGetLicensesResponse)
                return object;
            var message = new $root.CMsgAMGetLicensesResponse();
            if (object.license) {
                if (!Array.isArray(object.license))
                    throw TypeError(".CMsgAMGetLicensesResponse.license: array expected");
                message.license = [];
                for (var i = 0; i < object.license.length; ++i) {
                    if (typeof object.license[i] !== "object")
                        throw TypeError(".CMsgAMGetLicensesResponse.license: object expected");
                    message.license[i] = $root.CMsgPackageLicense.fromObject(object.license[i]);
                }
            }
            if (object.result != null)
                message.result = object.result >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGetLicensesResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGetLicensesResponse
         * @static
         * @param {CMsgAMGetLicensesResponse} message CMsgAMGetLicensesResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGetLicensesResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.license = [];
            if (options.defaults)
                object.result = 0;
            if (message.license && message.license.length) {
                object.license = [];
                for (var j = 0; j < message.license.length; ++j)
                    object.license[j] = $root.CMsgPackageLicense.toObject(message.license[j], options);
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };
    
        /**
         * Converts this CMsgAMGetLicensesResponse to JSON.
         * @function toJSON
         * @memberof CMsgAMGetLicensesResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGetLicensesResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMGetLicensesResponse;
    })();
    
    $root.CMsgAMGetUserGameStats = (function() {
    
        /**
         * Properties of a CMsgAMGetUserGameStats.
         * @exports ICMsgAMGetUserGameStats
         * @interface ICMsgAMGetUserGameStats
         * @property {number|Long|null} [steam_id] CMsgAMGetUserGameStats steam_id
         * @property {number|Long|null} [game_id] CMsgAMGetUserGameStats game_id
         * @property {Array.<number>|null} [stats] CMsgAMGetUserGameStats stats
         */
    
        /**
         * Constructs a new CMsgAMGetUserGameStats.
         * @exports CMsgAMGetUserGameStats
         * @classdesc Represents a CMsgAMGetUserGameStats.
         * @implements ICMsgAMGetUserGameStats
         * @constructor
         * @param {ICMsgAMGetUserGameStats=} [properties] Properties to set
         */
        function CMsgAMGetUserGameStats(properties) {
            this.stats = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGetUserGameStats steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgAMGetUserGameStats
         * @instance
         */
        CMsgAMGetUserGameStats.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMGetUserGameStats game_id.
         * @member {number|Long} game_id
         * @memberof CMsgAMGetUserGameStats
         * @instance
         */
        CMsgAMGetUserGameStats.prototype.game_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMGetUserGameStats stats.
         * @member {Array.<number>} stats
         * @memberof CMsgAMGetUserGameStats
         * @instance
         */
        CMsgAMGetUserGameStats.prototype.stats = $util.emptyArray;
    
        /**
         * Creates a new CMsgAMGetUserGameStats instance using the specified properties.
         * @function create
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {ICMsgAMGetUserGameStats=} [properties] Properties to set
         * @returns {CMsgAMGetUserGameStats} CMsgAMGetUserGameStats instance
         */
        CMsgAMGetUserGameStats.create = function create(properties) {
            return new CMsgAMGetUserGameStats(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGetUserGameStats message. Does not implicitly {@link CMsgAMGetUserGameStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {ICMsgAMGetUserGameStats} message CMsgAMGetUserGameStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetUserGameStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id);
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.game_id);
            if (message.stats != null && message.stats.length)
                for (var i = 0; i < message.stats.length; ++i)
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.stats[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGetUserGameStats message, length delimited. Does not implicitly {@link CMsgAMGetUserGameStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {ICMsgAMGetUserGameStats} message CMsgAMGetUserGameStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetUserGameStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGetUserGameStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGetUserGameStats} CMsgAMGetUserGameStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetUserGameStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetUserGameStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_id = reader.fixed64();
                    break;
                case 2:
                    message.game_id = reader.fixed64();
                    break;
                case 3:
                    if (!(message.stats && message.stats.length))
                        message.stats = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.stats.push(reader.uint32());
                    } else
                        message.stats.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGetUserGameStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGetUserGameStats} CMsgAMGetUserGameStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetUserGameStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGetUserGameStats message.
         * @function verify
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGetUserGameStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                if (!$util.isInteger(message.game_id) && !(message.game_id && $util.isInteger(message.game_id.low) && $util.isInteger(message.game_id.high)))
                    return "game_id: integer|Long expected";
            if (message.stats != null && message.hasOwnProperty("stats")) {
                if (!Array.isArray(message.stats))
                    return "stats: array expected";
                for (var i = 0; i < message.stats.length; ++i)
                    if (!$util.isInteger(message.stats[i]))
                        return "stats: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgAMGetUserGameStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGetUserGameStats} CMsgAMGetUserGameStats
         */
        CMsgAMGetUserGameStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGetUserGameStats)
                return object;
            var message = new $root.CMsgAMGetUserGameStats();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.game_id != null)
                if ($util.Long)
                    (message.game_id = $util.Long.fromValue(object.game_id)).unsigned = false;
                else if (typeof object.game_id === "string")
                    message.game_id = parseInt(object.game_id, 10);
                else if (typeof object.game_id === "number")
                    message.game_id = object.game_id;
                else if (typeof object.game_id === "object")
                    message.game_id = new $util.LongBits(object.game_id.low >>> 0, object.game_id.high >>> 0).toNumber();
            if (object.stats) {
                if (!Array.isArray(object.stats))
                    throw TypeError(".CMsgAMGetUserGameStats.stats: array expected");
                message.stats = [];
                for (var i = 0; i < object.stats.length; ++i)
                    message.stats[i] = object.stats[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGetUserGameStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGetUserGameStats
         * @static
         * @param {CMsgAMGetUserGameStats} message CMsgAMGetUserGameStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGetUserGameStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.stats = [];
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.game_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.game_id = options.longs === String ? "0" : 0;
            }
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                if (typeof message.game_id === "number")
                    object.game_id = options.longs === String ? String(message.game_id) : message.game_id;
                else
                    object.game_id = options.longs === String ? $util.Long.prototype.toString.call(message.game_id) : options.longs === Number ? new $util.LongBits(message.game_id.low >>> 0, message.game_id.high >>> 0).toNumber() : message.game_id;
            if (message.stats && message.stats.length) {
                object.stats = [];
                for (var j = 0; j < message.stats.length; ++j)
                    object.stats[j] = message.stats[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgAMGetUserGameStats to JSON.
         * @function toJSON
         * @memberof CMsgAMGetUserGameStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGetUserGameStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMGetUserGameStats;
    })();
    
    $root.CMsgAMGetUserGameStatsResponse = (function() {
    
        /**
         * Properties of a CMsgAMGetUserGameStatsResponse.
         * @exports ICMsgAMGetUserGameStatsResponse
         * @interface ICMsgAMGetUserGameStatsResponse
         * @property {number|Long|null} [steam_id] CMsgAMGetUserGameStatsResponse steam_id
         * @property {number|Long|null} [game_id] CMsgAMGetUserGameStatsResponse game_id
         * @property {number|null} [eresult] CMsgAMGetUserGameStatsResponse eresult
         * @property {Array.<CMsgAMGetUserGameStatsResponse.IStats>|null} [stats] CMsgAMGetUserGameStatsResponse stats
         * @property {Array.<CMsgAMGetUserGameStatsResponse.IAchievement_Blocks>|null} [achievement_blocks] CMsgAMGetUserGameStatsResponse achievement_blocks
         */
    
        /**
         * Constructs a new CMsgAMGetUserGameStatsResponse.
         * @exports CMsgAMGetUserGameStatsResponse
         * @classdesc Represents a CMsgAMGetUserGameStatsResponse.
         * @implements ICMsgAMGetUserGameStatsResponse
         * @constructor
         * @param {ICMsgAMGetUserGameStatsResponse=} [properties] Properties to set
         */
        function CMsgAMGetUserGameStatsResponse(properties) {
            this.stats = [];
            this.achievement_blocks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGetUserGameStatsResponse steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         */
        CMsgAMGetUserGameStatsResponse.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMGetUserGameStatsResponse game_id.
         * @member {number|Long} game_id
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         */
        CMsgAMGetUserGameStatsResponse.prototype.game_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMGetUserGameStatsResponse eresult.
         * @member {number} eresult
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         */
        CMsgAMGetUserGameStatsResponse.prototype.eresult = 2;
    
        /**
         * CMsgAMGetUserGameStatsResponse stats.
         * @member {Array.<CMsgAMGetUserGameStatsResponse.IStats>} stats
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         */
        CMsgAMGetUserGameStatsResponse.prototype.stats = $util.emptyArray;
    
        /**
         * CMsgAMGetUserGameStatsResponse achievement_blocks.
         * @member {Array.<CMsgAMGetUserGameStatsResponse.IAchievement_Blocks>} achievement_blocks
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         */
        CMsgAMGetUserGameStatsResponse.prototype.achievement_blocks = $util.emptyArray;
    
        /**
         * Creates a new CMsgAMGetUserGameStatsResponse instance using the specified properties.
         * @function create
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {ICMsgAMGetUserGameStatsResponse=} [properties] Properties to set
         * @returns {CMsgAMGetUserGameStatsResponse} CMsgAMGetUserGameStatsResponse instance
         */
        CMsgAMGetUserGameStatsResponse.create = function create(properties) {
            return new CMsgAMGetUserGameStatsResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGetUserGameStatsResponse message. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {ICMsgAMGetUserGameStatsResponse} message CMsgAMGetUserGameStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetUserGameStatsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id);
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.game_id);
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.eresult);
            if (message.stats != null && message.stats.length)
                for (var i = 0; i < message.stats.length; ++i)
                    $root.CMsgAMGetUserGameStatsResponse.Stats.encode(message.stats[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.achievement_blocks != null && message.achievement_blocks.length)
                for (var i = 0; i < message.achievement_blocks.length; ++i)
                    $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.encode(message.achievement_blocks[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGetUserGameStatsResponse message, length delimited. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {ICMsgAMGetUserGameStatsResponse} message CMsgAMGetUserGameStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGetUserGameStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGetUserGameStatsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGetUserGameStatsResponse} CMsgAMGetUserGameStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetUserGameStatsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetUserGameStatsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_id = reader.fixed64();
                    break;
                case 2:
                    message.game_id = reader.fixed64();
                    break;
                case 3:
                    message.eresult = reader.int32();
                    break;
                case 4:
                    if (!(message.stats && message.stats.length))
                        message.stats = [];
                    message.stats.push($root.CMsgAMGetUserGameStatsResponse.Stats.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.achievement_blocks && message.achievement_blocks.length))
                        message.achievement_blocks = [];
                    message.achievement_blocks.push($root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGetUserGameStatsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGetUserGameStatsResponse} CMsgAMGetUserGameStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGetUserGameStatsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGetUserGameStatsResponse message.
         * @function verify
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGetUserGameStatsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                if (!$util.isInteger(message.game_id) && !(message.game_id && $util.isInteger(message.game_id.low) && $util.isInteger(message.game_id.high)))
                    return "game_id: integer|Long expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.stats != null && message.hasOwnProperty("stats")) {
                if (!Array.isArray(message.stats))
                    return "stats: array expected";
                for (var i = 0; i < message.stats.length; ++i) {
                    var error = $root.CMsgAMGetUserGameStatsResponse.Stats.verify(message.stats[i]);
                    if (error)
                        return "stats." + error;
                }
            }
            if (message.achievement_blocks != null && message.hasOwnProperty("achievement_blocks")) {
                if (!Array.isArray(message.achievement_blocks))
                    return "achievement_blocks: array expected";
                for (var i = 0; i < message.achievement_blocks.length; ++i) {
                    var error = $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.verify(message.achievement_blocks[i]);
                    if (error)
                        return "achievement_blocks." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgAMGetUserGameStatsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGetUserGameStatsResponse} CMsgAMGetUserGameStatsResponse
         */
        CMsgAMGetUserGameStatsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGetUserGameStatsResponse)
                return object;
            var message = new $root.CMsgAMGetUserGameStatsResponse();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.game_id != null)
                if ($util.Long)
                    (message.game_id = $util.Long.fromValue(object.game_id)).unsigned = false;
                else if (typeof object.game_id === "string")
                    message.game_id = parseInt(object.game_id, 10);
                else if (typeof object.game_id === "number")
                    message.game_id = object.game_id;
                else if (typeof object.game_id === "object")
                    message.game_id = new $util.LongBits(object.game_id.low >>> 0, object.game_id.high >>> 0).toNumber();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.stats) {
                if (!Array.isArray(object.stats))
                    throw TypeError(".CMsgAMGetUserGameStatsResponse.stats: array expected");
                message.stats = [];
                for (var i = 0; i < object.stats.length; ++i) {
                    if (typeof object.stats[i] !== "object")
                        throw TypeError(".CMsgAMGetUserGameStatsResponse.stats: object expected");
                    message.stats[i] = $root.CMsgAMGetUserGameStatsResponse.Stats.fromObject(object.stats[i]);
                }
            }
            if (object.achievement_blocks) {
                if (!Array.isArray(object.achievement_blocks))
                    throw TypeError(".CMsgAMGetUserGameStatsResponse.achievement_blocks: array expected");
                message.achievement_blocks = [];
                for (var i = 0; i < object.achievement_blocks.length; ++i) {
                    if (typeof object.achievement_blocks[i] !== "object")
                        throw TypeError(".CMsgAMGetUserGameStatsResponse.achievement_blocks: object expected");
                    message.achievement_blocks[i] = $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.fromObject(object.achievement_blocks[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGetUserGameStatsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGetUserGameStatsResponse
         * @static
         * @param {CMsgAMGetUserGameStatsResponse} message CMsgAMGetUserGameStatsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGetUserGameStatsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.stats = [];
                object.achievement_blocks = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.game_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.game_id = options.longs === String ? "0" : 0;
                object.eresult = 2;
            }
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.game_id != null && message.hasOwnProperty("game_id"))
                if (typeof message.game_id === "number")
                    object.game_id = options.longs === String ? String(message.game_id) : message.game_id;
                else
                    object.game_id = options.longs === String ? $util.Long.prototype.toString.call(message.game_id) : options.longs === Number ? new $util.LongBits(message.game_id.low >>> 0, message.game_id.high >>> 0).toNumber() : message.game_id;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.stats && message.stats.length) {
                object.stats = [];
                for (var j = 0; j < message.stats.length; ++j)
                    object.stats[j] = $root.CMsgAMGetUserGameStatsResponse.Stats.toObject(message.stats[j], options);
            }
            if (message.achievement_blocks && message.achievement_blocks.length) {
                object.achievement_blocks = [];
                for (var j = 0; j < message.achievement_blocks.length; ++j)
                    object.achievement_blocks[j] = $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks.toObject(message.achievement_blocks[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgAMGetUserGameStatsResponse to JSON.
         * @function toJSON
         * @memberof CMsgAMGetUserGameStatsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGetUserGameStatsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgAMGetUserGameStatsResponse.Stats = (function() {
    
            /**
             * Properties of a Stats.
             * @memberof CMsgAMGetUserGameStatsResponse
             * @interface IStats
             * @property {number|null} [stat_id] Stats stat_id
             * @property {number|null} [stat_value] Stats stat_value
             */
    
            /**
             * Constructs a new Stats.
             * @memberof CMsgAMGetUserGameStatsResponse
             * @classdesc Represents a Stats.
             * @implements IStats
             * @constructor
             * @param {CMsgAMGetUserGameStatsResponse.IStats=} [properties] Properties to set
             */
            function Stats(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Stats stat_id.
             * @member {number} stat_id
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @instance
             */
            Stats.prototype.stat_id = 0;
    
            /**
             * Stats stat_value.
             * @member {number} stat_value
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @instance
             */
            Stats.prototype.stat_value = 0;
    
            /**
             * Creates a new Stats instance using the specified properties.
             * @function create
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IStats=} [properties] Properties to set
             * @returns {CMsgAMGetUserGameStatsResponse.Stats} Stats instance
             */
            Stats.create = function create(properties) {
                return new Stats(properties);
            };
    
            /**
             * Encodes the specified Stats message. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.Stats.verify|verify} messages.
             * @function encode
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IStats} message Stats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Stats.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.stat_id != null && message.hasOwnProperty("stat_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.stat_id);
                if (message.stat_value != null && message.hasOwnProperty("stat_value"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.stat_value);
                return writer;
            };
    
            /**
             * Encodes the specified Stats message, length delimited. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.Stats.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IStats} message Stats message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Stats.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Stats message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgAMGetUserGameStatsResponse.Stats} Stats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Stats.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetUserGameStatsResponse.Stats();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.stat_id = reader.uint32();
                        break;
                    case 2:
                        message.stat_value = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Stats message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgAMGetUserGameStatsResponse.Stats} Stats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Stats.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Stats message.
             * @function verify
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Stats.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.stat_id != null && message.hasOwnProperty("stat_id"))
                    if (!$util.isInteger(message.stat_id))
                        return "stat_id: integer expected";
                if (message.stat_value != null && message.hasOwnProperty("stat_value"))
                    if (!$util.isInteger(message.stat_value))
                        return "stat_value: integer expected";
                return null;
            };
    
            /**
             * Creates a Stats message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgAMGetUserGameStatsResponse.Stats} Stats
             */
            Stats.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgAMGetUserGameStatsResponse.Stats)
                    return object;
                var message = new $root.CMsgAMGetUserGameStatsResponse.Stats();
                if (object.stat_id != null)
                    message.stat_id = object.stat_id >>> 0;
                if (object.stat_value != null)
                    message.stat_value = object.stat_value >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Stats message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.Stats} message Stats
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Stats.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.stat_id = 0;
                    object.stat_value = 0;
                }
                if (message.stat_id != null && message.hasOwnProperty("stat_id"))
                    object.stat_id = message.stat_id;
                if (message.stat_value != null && message.hasOwnProperty("stat_value"))
                    object.stat_value = message.stat_value;
                return object;
            };
    
            /**
             * Converts this Stats to JSON.
             * @function toJSON
             * @memberof CMsgAMGetUserGameStatsResponse.Stats
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Stats.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Stats;
        })();
    
        CMsgAMGetUserGameStatsResponse.Achievement_Blocks = (function() {
    
            /**
             * Properties of an Achievement_Blocks.
             * @memberof CMsgAMGetUserGameStatsResponse
             * @interface IAchievement_Blocks
             * @property {number|null} [achievement_id] Achievement_Blocks achievement_id
             * @property {number|null} [achievement_bit_id] Achievement_Blocks achievement_bit_id
             * @property {number|null} [unlock_time] Achievement_Blocks unlock_time
             */
    
            /**
             * Constructs a new Achievement_Blocks.
             * @memberof CMsgAMGetUserGameStatsResponse
             * @classdesc Represents an Achievement_Blocks.
             * @implements IAchievement_Blocks
             * @constructor
             * @param {CMsgAMGetUserGameStatsResponse.IAchievement_Blocks=} [properties] Properties to set
             */
            function Achievement_Blocks(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Achievement_Blocks achievement_id.
             * @member {number} achievement_id
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @instance
             */
            Achievement_Blocks.prototype.achievement_id = 0;
    
            /**
             * Achievement_Blocks achievement_bit_id.
             * @member {number} achievement_bit_id
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @instance
             */
            Achievement_Blocks.prototype.achievement_bit_id = 0;
    
            /**
             * Achievement_Blocks unlock_time.
             * @member {number} unlock_time
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @instance
             */
            Achievement_Blocks.prototype.unlock_time = 0;
    
            /**
             * Creates a new Achievement_Blocks instance using the specified properties.
             * @function create
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IAchievement_Blocks=} [properties] Properties to set
             * @returns {CMsgAMGetUserGameStatsResponse.Achievement_Blocks} Achievement_Blocks instance
             */
            Achievement_Blocks.create = function create(properties) {
                return new Achievement_Blocks(properties);
            };
    
            /**
             * Encodes the specified Achievement_Blocks message. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.Achievement_Blocks.verify|verify} messages.
             * @function encode
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IAchievement_Blocks} message Achievement_Blocks message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Achievement_Blocks.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.achievement_id != null && message.hasOwnProperty("achievement_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.achievement_id);
                if (message.achievement_bit_id != null && message.hasOwnProperty("achievement_bit_id"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.achievement_bit_id);
                if (message.unlock_time != null && message.hasOwnProperty("unlock_time"))
                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.unlock_time);
                return writer;
            };
    
            /**
             * Encodes the specified Achievement_Blocks message, length delimited. Does not implicitly {@link CMsgAMGetUserGameStatsResponse.Achievement_Blocks.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.IAchievement_Blocks} message Achievement_Blocks message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Achievement_Blocks.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Achievement_Blocks message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgAMGetUserGameStatsResponse.Achievement_Blocks} Achievement_Blocks
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Achievement_Blocks.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.achievement_id = reader.uint32();
                        break;
                    case 2:
                        message.achievement_bit_id = reader.uint32();
                        break;
                    case 3:
                        message.unlock_time = reader.fixed32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Achievement_Blocks message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgAMGetUserGameStatsResponse.Achievement_Blocks} Achievement_Blocks
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Achievement_Blocks.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Achievement_Blocks message.
             * @function verify
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Achievement_Blocks.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.achievement_id != null && message.hasOwnProperty("achievement_id"))
                    if (!$util.isInteger(message.achievement_id))
                        return "achievement_id: integer expected";
                if (message.achievement_bit_id != null && message.hasOwnProperty("achievement_bit_id"))
                    if (!$util.isInteger(message.achievement_bit_id))
                        return "achievement_bit_id: integer expected";
                if (message.unlock_time != null && message.hasOwnProperty("unlock_time"))
                    if (!$util.isInteger(message.unlock_time))
                        return "unlock_time: integer expected";
                return null;
            };
    
            /**
             * Creates an Achievement_Blocks message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgAMGetUserGameStatsResponse.Achievement_Blocks} Achievement_Blocks
             */
            Achievement_Blocks.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
                    return object;
                var message = new $root.CMsgAMGetUserGameStatsResponse.Achievement_Blocks();
                if (object.achievement_id != null)
                    message.achievement_id = object.achievement_id >>> 0;
                if (object.achievement_bit_id != null)
                    message.achievement_bit_id = object.achievement_bit_id >>> 0;
                if (object.unlock_time != null)
                    message.unlock_time = object.unlock_time >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an Achievement_Blocks message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @static
             * @param {CMsgAMGetUserGameStatsResponse.Achievement_Blocks} message Achievement_Blocks
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Achievement_Blocks.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.achievement_id = 0;
                    object.achievement_bit_id = 0;
                    object.unlock_time = 0;
                }
                if (message.achievement_id != null && message.hasOwnProperty("achievement_id"))
                    object.achievement_id = message.achievement_id;
                if (message.achievement_bit_id != null && message.hasOwnProperty("achievement_bit_id"))
                    object.achievement_bit_id = message.achievement_bit_id;
                if (message.unlock_time != null && message.hasOwnProperty("unlock_time"))
                    object.unlock_time = message.unlock_time;
                return object;
            };
    
            /**
             * Converts this Achievement_Blocks to JSON.
             * @function toJSON
             * @memberof CMsgAMGetUserGameStatsResponse.Achievement_Blocks
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Achievement_Blocks.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Achievement_Blocks;
        })();
    
        return CMsgAMGetUserGameStatsResponse;
    })();
    
    $root.CMsgGCGetCommandList = (function() {
    
        /**
         * Properties of a CMsgGCGetCommandList.
         * @exports ICMsgGCGetCommandList
         * @interface ICMsgGCGetCommandList
         * @property {number|null} [app_id] CMsgGCGetCommandList app_id
         * @property {string|null} [command_prefix] CMsgGCGetCommandList command_prefix
         */
    
        /**
         * Constructs a new CMsgGCGetCommandList.
         * @exports CMsgGCGetCommandList
         * @classdesc Represents a CMsgGCGetCommandList.
         * @implements ICMsgGCGetCommandList
         * @constructor
         * @param {ICMsgGCGetCommandList=} [properties] Properties to set
         */
        function CMsgGCGetCommandList(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetCommandList app_id.
         * @member {number} app_id
         * @memberof CMsgGCGetCommandList
         * @instance
         */
        CMsgGCGetCommandList.prototype.app_id = 0;
    
        /**
         * CMsgGCGetCommandList command_prefix.
         * @member {string} command_prefix
         * @memberof CMsgGCGetCommandList
         * @instance
         */
        CMsgGCGetCommandList.prototype.command_prefix = "";
    
        /**
         * Creates a new CMsgGCGetCommandList instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {ICMsgGCGetCommandList=} [properties] Properties to set
         * @returns {CMsgGCGetCommandList} CMsgGCGetCommandList instance
         */
        CMsgGCGetCommandList.create = function create(properties) {
            return new CMsgGCGetCommandList(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetCommandList message. Does not implicitly {@link CMsgGCGetCommandList.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {ICMsgGCGetCommandList} message CMsgGCGetCommandList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetCommandList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.app_id);
            if (message.command_prefix != null && message.hasOwnProperty("command_prefix"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.command_prefix);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetCommandList message, length delimited. Does not implicitly {@link CMsgGCGetCommandList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {ICMsgGCGetCommandList} message CMsgGCGetCommandList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetCommandList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetCommandList message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetCommandList} CMsgGCGetCommandList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetCommandList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetCommandList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.app_id = reader.uint32();
                    break;
                case 2:
                    message.command_prefix = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetCommandList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetCommandList} CMsgGCGetCommandList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetCommandList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetCommandList message.
         * @function verify
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetCommandList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.command_prefix != null && message.hasOwnProperty("command_prefix"))
                if (!$util.isString(message.command_prefix))
                    return "command_prefix: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCGetCommandList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetCommandList} CMsgGCGetCommandList
         */
        CMsgGCGetCommandList.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetCommandList)
                return object;
            var message = new $root.CMsgGCGetCommandList();
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.command_prefix != null)
                message.command_prefix = String(object.command_prefix);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetCommandList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetCommandList
         * @static
         * @param {CMsgGCGetCommandList} message CMsgGCGetCommandList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetCommandList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.app_id = 0;
                object.command_prefix = "";
            }
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.command_prefix != null && message.hasOwnProperty("command_prefix"))
                object.command_prefix = message.command_prefix;
            return object;
        };
    
        /**
         * Converts this CMsgGCGetCommandList to JSON.
         * @function toJSON
         * @memberof CMsgGCGetCommandList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetCommandList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetCommandList;
    })();
    
    $root.CMsgGCGetCommandListResponse = (function() {
    
        /**
         * Properties of a CMsgGCGetCommandListResponse.
         * @exports ICMsgGCGetCommandListResponse
         * @interface ICMsgGCGetCommandListResponse
         * @property {Array.<string>|null} [command_name] CMsgGCGetCommandListResponse command_name
         */
    
        /**
         * Constructs a new CMsgGCGetCommandListResponse.
         * @exports CMsgGCGetCommandListResponse
         * @classdesc Represents a CMsgGCGetCommandListResponse.
         * @implements ICMsgGCGetCommandListResponse
         * @constructor
         * @param {ICMsgGCGetCommandListResponse=} [properties] Properties to set
         */
        function CMsgGCGetCommandListResponse(properties) {
            this.command_name = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetCommandListResponse command_name.
         * @member {Array.<string>} command_name
         * @memberof CMsgGCGetCommandListResponse
         * @instance
         */
        CMsgGCGetCommandListResponse.prototype.command_name = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCGetCommandListResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {ICMsgGCGetCommandListResponse=} [properties] Properties to set
         * @returns {CMsgGCGetCommandListResponse} CMsgGCGetCommandListResponse instance
         */
        CMsgGCGetCommandListResponse.create = function create(properties) {
            return new CMsgGCGetCommandListResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetCommandListResponse message. Does not implicitly {@link CMsgGCGetCommandListResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {ICMsgGCGetCommandListResponse} message CMsgGCGetCommandListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetCommandListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.command_name != null && message.command_name.length)
                for (var i = 0; i < message.command_name.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.command_name[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetCommandListResponse message, length delimited. Does not implicitly {@link CMsgGCGetCommandListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {ICMsgGCGetCommandListResponse} message CMsgGCGetCommandListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetCommandListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetCommandListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetCommandListResponse} CMsgGCGetCommandListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetCommandListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetCommandListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.command_name && message.command_name.length))
                        message.command_name = [];
                    message.command_name.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetCommandListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetCommandListResponse} CMsgGCGetCommandListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetCommandListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetCommandListResponse message.
         * @function verify
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetCommandListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.command_name != null && message.hasOwnProperty("command_name")) {
                if (!Array.isArray(message.command_name))
                    return "command_name: array expected";
                for (var i = 0; i < message.command_name.length; ++i)
                    if (!$util.isString(message.command_name[i]))
                        return "command_name: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCGetCommandListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetCommandListResponse} CMsgGCGetCommandListResponse
         */
        CMsgGCGetCommandListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetCommandListResponse)
                return object;
            var message = new $root.CMsgGCGetCommandListResponse();
            if (object.command_name) {
                if (!Array.isArray(object.command_name))
                    throw TypeError(".CMsgGCGetCommandListResponse.command_name: array expected");
                message.command_name = [];
                for (var i = 0; i < object.command_name.length; ++i)
                    message.command_name[i] = String(object.command_name[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetCommandListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetCommandListResponse
         * @static
         * @param {CMsgGCGetCommandListResponse} message CMsgGCGetCommandListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetCommandListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.command_name = [];
            if (message.command_name && message.command_name.length) {
                object.command_name = [];
                for (var j = 0; j < message.command_name.length; ++j)
                    object.command_name[j] = message.command_name[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCGetCommandListResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCGetCommandListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetCommandListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetCommandListResponse;
    })();
    
    $root.CGCMsgMemCachedGet = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedGet.
         * @exports ICGCMsgMemCachedGet
         * @interface ICGCMsgMemCachedGet
         * @property {Array.<string>|null} [keys] CGCMsgMemCachedGet keys
         */
    
        /**
         * Constructs a new CGCMsgMemCachedGet.
         * @exports CGCMsgMemCachedGet
         * @classdesc Represents a CGCMsgMemCachedGet.
         * @implements ICGCMsgMemCachedGet
         * @constructor
         * @param {ICGCMsgMemCachedGet=} [properties] Properties to set
         */
        function CGCMsgMemCachedGet(properties) {
            this.keys = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgMemCachedGet keys.
         * @member {Array.<string>} keys
         * @memberof CGCMsgMemCachedGet
         * @instance
         */
        CGCMsgMemCachedGet.prototype.keys = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgMemCachedGet instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {ICGCMsgMemCachedGet=} [properties] Properties to set
         * @returns {CGCMsgMemCachedGet} CGCMsgMemCachedGet instance
         */
        CGCMsgMemCachedGet.create = function create(properties) {
            return new CGCMsgMemCachedGet(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedGet message. Does not implicitly {@link CGCMsgMemCachedGet.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {ICGCMsgMemCachedGet} message CGCMsgMemCachedGet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedGet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keys != null && message.keys.length)
                for (var i = 0; i < message.keys.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.keys[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedGet message, length delimited. Does not implicitly {@link CGCMsgMemCachedGet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {ICGCMsgMemCachedGet} message CGCMsgMemCachedGet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedGet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedGet message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedGet} CGCMsgMemCachedGet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedGet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedGet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.keys && message.keys.length))
                        message.keys = [];
                    message.keys.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedGet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedGet} CGCMsgMemCachedGet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedGet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedGet message.
         * @function verify
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedGet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keys != null && message.hasOwnProperty("keys")) {
                if (!Array.isArray(message.keys))
                    return "keys: array expected";
                for (var i = 0; i < message.keys.length; ++i)
                    if (!$util.isString(message.keys[i]))
                        return "keys: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedGet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedGet} CGCMsgMemCachedGet
         */
        CGCMsgMemCachedGet.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedGet)
                return object;
            var message = new $root.CGCMsgMemCachedGet();
            if (object.keys) {
                if (!Array.isArray(object.keys))
                    throw TypeError(".CGCMsgMemCachedGet.keys: array expected");
                message.keys = [];
                for (var i = 0; i < object.keys.length; ++i)
                    message.keys[i] = String(object.keys[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedGet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedGet
         * @static
         * @param {CGCMsgMemCachedGet} message CGCMsgMemCachedGet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedGet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.keys = [];
            if (message.keys && message.keys.length) {
                object.keys = [];
                for (var j = 0; j < message.keys.length; ++j)
                    object.keys[j] = message.keys[j];
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgMemCachedGet to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedGet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedGet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgMemCachedGet;
    })();
    
    $root.CGCMsgMemCachedGetResponse = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedGetResponse.
         * @exports ICGCMsgMemCachedGetResponse
         * @interface ICGCMsgMemCachedGetResponse
         * @property {Array.<CGCMsgMemCachedGetResponse.IValueTag>|null} [values] CGCMsgMemCachedGetResponse values
         */
    
        /**
         * Constructs a new CGCMsgMemCachedGetResponse.
         * @exports CGCMsgMemCachedGetResponse
         * @classdesc Represents a CGCMsgMemCachedGetResponse.
         * @implements ICGCMsgMemCachedGetResponse
         * @constructor
         * @param {ICGCMsgMemCachedGetResponse=} [properties] Properties to set
         */
        function CGCMsgMemCachedGetResponse(properties) {
            this.values = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgMemCachedGetResponse values.
         * @member {Array.<CGCMsgMemCachedGetResponse.IValueTag>} values
         * @memberof CGCMsgMemCachedGetResponse
         * @instance
         */
        CGCMsgMemCachedGetResponse.prototype.values = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgMemCachedGetResponse instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {ICGCMsgMemCachedGetResponse=} [properties] Properties to set
         * @returns {CGCMsgMemCachedGetResponse} CGCMsgMemCachedGetResponse instance
         */
        CGCMsgMemCachedGetResponse.create = function create(properties) {
            return new CGCMsgMemCachedGetResponse(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedGetResponse message. Does not implicitly {@link CGCMsgMemCachedGetResponse.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {ICGCMsgMemCachedGetResponse} message CGCMsgMemCachedGetResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedGetResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.values != null && message.values.length)
                for (var i = 0; i < message.values.length; ++i)
                    $root.CGCMsgMemCachedGetResponse.ValueTag.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedGetResponse message, length delimited. Does not implicitly {@link CGCMsgMemCachedGetResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {ICGCMsgMemCachedGetResponse} message CGCMsgMemCachedGetResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedGetResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedGetResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedGetResponse} CGCMsgMemCachedGetResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedGetResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedGetResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.values && message.values.length))
                        message.values = [];
                    message.values.push($root.CGCMsgMemCachedGetResponse.ValueTag.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedGetResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedGetResponse} CGCMsgMemCachedGetResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedGetResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedGetResponse message.
         * @function verify
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedGetResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.values != null && message.hasOwnProperty("values")) {
                if (!Array.isArray(message.values))
                    return "values: array expected";
                for (var i = 0; i < message.values.length; ++i) {
                    var error = $root.CGCMsgMemCachedGetResponse.ValueTag.verify(message.values[i]);
                    if (error)
                        return "values." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedGetResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedGetResponse} CGCMsgMemCachedGetResponse
         */
        CGCMsgMemCachedGetResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedGetResponse)
                return object;
            var message = new $root.CGCMsgMemCachedGetResponse();
            if (object.values) {
                if (!Array.isArray(object.values))
                    throw TypeError(".CGCMsgMemCachedGetResponse.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i) {
                    if (typeof object.values[i] !== "object")
                        throw TypeError(".CGCMsgMemCachedGetResponse.values: object expected");
                    message.values[i] = $root.CGCMsgMemCachedGetResponse.ValueTag.fromObject(object.values[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedGetResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedGetResponse
         * @static
         * @param {CGCMsgMemCachedGetResponse} message CGCMsgMemCachedGetResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedGetResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.values = [];
            if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = $root.CGCMsgMemCachedGetResponse.ValueTag.toObject(message.values[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgMemCachedGetResponse to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedGetResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedGetResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CGCMsgMemCachedGetResponse.ValueTag = (function() {
    
            /**
             * Properties of a ValueTag.
             * @memberof CGCMsgMemCachedGetResponse
             * @interface IValueTag
             * @property {boolean|null} [found] ValueTag found
             * @property {Uint8Array|null} [value] ValueTag value
             */
    
            /**
             * Constructs a new ValueTag.
             * @memberof CGCMsgMemCachedGetResponse
             * @classdesc Represents a ValueTag.
             * @implements IValueTag
             * @constructor
             * @param {CGCMsgMemCachedGetResponse.IValueTag=} [properties] Properties to set
             */
            function ValueTag(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ValueTag found.
             * @member {boolean} found
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @instance
             */
            ValueTag.prototype.found = false;
    
            /**
             * ValueTag value.
             * @member {Uint8Array} value
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @instance
             */
            ValueTag.prototype.value = $util.newBuffer([]);
    
            /**
             * Creates a new ValueTag instance using the specified properties.
             * @function create
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {CGCMsgMemCachedGetResponse.IValueTag=} [properties] Properties to set
             * @returns {CGCMsgMemCachedGetResponse.ValueTag} ValueTag instance
             */
            ValueTag.create = function create(properties) {
                return new ValueTag(properties);
            };
    
            /**
             * Encodes the specified ValueTag message. Does not implicitly {@link CGCMsgMemCachedGetResponse.ValueTag.verify|verify} messages.
             * @function encode
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {CGCMsgMemCachedGetResponse.IValueTag} message ValueTag message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueTag.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.found != null && message.hasOwnProperty("found"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.found);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified ValueTag message, length delimited. Does not implicitly {@link CGCMsgMemCachedGetResponse.ValueTag.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {CGCMsgMemCachedGetResponse.IValueTag} message ValueTag message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueTag.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ValueTag message from the specified reader or buffer.
             * @function decode
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CGCMsgMemCachedGetResponse.ValueTag} ValueTag
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueTag.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedGetResponse.ValueTag();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.found = reader.bool();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ValueTag message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CGCMsgMemCachedGetResponse.ValueTag} ValueTag
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueTag.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ValueTag message.
             * @function verify
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValueTag.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.found != null && message.hasOwnProperty("found"))
                    if (typeof message.found !== "boolean")
                        return "found: boolean expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };
    
            /**
             * Creates a ValueTag message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CGCMsgMemCachedGetResponse.ValueTag} ValueTag
             */
            ValueTag.fromObject = function fromObject(object) {
                if (object instanceof $root.CGCMsgMemCachedGetResponse.ValueTag)
                    return object;
                var message = new $root.CGCMsgMemCachedGetResponse.ValueTag();
                if (object.found != null)
                    message.found = Boolean(object.found);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };
    
            /**
             * Creates a plain object from a ValueTag message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @static
             * @param {CGCMsgMemCachedGetResponse.ValueTag} message ValueTag
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValueTag.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.found = false;
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.found != null && message.hasOwnProperty("found"))
                    object.found = message.found;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };
    
            /**
             * Converts this ValueTag to JSON.
             * @function toJSON
             * @memberof CGCMsgMemCachedGetResponse.ValueTag
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValueTag.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ValueTag;
        })();
    
        return CGCMsgMemCachedGetResponse;
    })();
    
    $root.CGCMsgMemCachedSet = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedSet.
         * @exports ICGCMsgMemCachedSet
         * @interface ICGCMsgMemCachedSet
         * @property {Array.<CGCMsgMemCachedSet.IKeyPair>|null} [keys] CGCMsgMemCachedSet keys
         */
    
        /**
         * Constructs a new CGCMsgMemCachedSet.
         * @exports CGCMsgMemCachedSet
         * @classdesc Represents a CGCMsgMemCachedSet.
         * @implements ICGCMsgMemCachedSet
         * @constructor
         * @param {ICGCMsgMemCachedSet=} [properties] Properties to set
         */
        function CGCMsgMemCachedSet(properties) {
            this.keys = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgMemCachedSet keys.
         * @member {Array.<CGCMsgMemCachedSet.IKeyPair>} keys
         * @memberof CGCMsgMemCachedSet
         * @instance
         */
        CGCMsgMemCachedSet.prototype.keys = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgMemCachedSet instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {ICGCMsgMemCachedSet=} [properties] Properties to set
         * @returns {CGCMsgMemCachedSet} CGCMsgMemCachedSet instance
         */
        CGCMsgMemCachedSet.create = function create(properties) {
            return new CGCMsgMemCachedSet(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedSet message. Does not implicitly {@link CGCMsgMemCachedSet.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {ICGCMsgMemCachedSet} message CGCMsgMemCachedSet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedSet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keys != null && message.keys.length)
                for (var i = 0; i < message.keys.length; ++i)
                    $root.CGCMsgMemCachedSet.KeyPair.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedSet message, length delimited. Does not implicitly {@link CGCMsgMemCachedSet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {ICGCMsgMemCachedSet} message CGCMsgMemCachedSet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedSet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedSet message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedSet} CGCMsgMemCachedSet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedSet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedSet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.keys && message.keys.length))
                        message.keys = [];
                    message.keys.push($root.CGCMsgMemCachedSet.KeyPair.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedSet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedSet} CGCMsgMemCachedSet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedSet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedSet message.
         * @function verify
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedSet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keys != null && message.hasOwnProperty("keys")) {
                if (!Array.isArray(message.keys))
                    return "keys: array expected";
                for (var i = 0; i < message.keys.length; ++i) {
                    var error = $root.CGCMsgMemCachedSet.KeyPair.verify(message.keys[i]);
                    if (error)
                        return "keys." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedSet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedSet} CGCMsgMemCachedSet
         */
        CGCMsgMemCachedSet.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedSet)
                return object;
            var message = new $root.CGCMsgMemCachedSet();
            if (object.keys) {
                if (!Array.isArray(object.keys))
                    throw TypeError(".CGCMsgMemCachedSet.keys: array expected");
                message.keys = [];
                for (var i = 0; i < object.keys.length; ++i) {
                    if (typeof object.keys[i] !== "object")
                        throw TypeError(".CGCMsgMemCachedSet.keys: object expected");
                    message.keys[i] = $root.CGCMsgMemCachedSet.KeyPair.fromObject(object.keys[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedSet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedSet
         * @static
         * @param {CGCMsgMemCachedSet} message CGCMsgMemCachedSet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedSet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.keys = [];
            if (message.keys && message.keys.length) {
                object.keys = [];
                for (var j = 0; j < message.keys.length; ++j)
                    object.keys[j] = $root.CGCMsgMemCachedSet.KeyPair.toObject(message.keys[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgMemCachedSet to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedSet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedSet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CGCMsgMemCachedSet.KeyPair = (function() {
    
            /**
             * Properties of a KeyPair.
             * @memberof CGCMsgMemCachedSet
             * @interface IKeyPair
             * @property {string|null} [name] KeyPair name
             * @property {Uint8Array|null} [value] KeyPair value
             */
    
            /**
             * Constructs a new KeyPair.
             * @memberof CGCMsgMemCachedSet
             * @classdesc Represents a KeyPair.
             * @implements IKeyPair
             * @constructor
             * @param {CGCMsgMemCachedSet.IKeyPair=} [properties] Properties to set
             */
            function KeyPair(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * KeyPair name.
             * @member {string} name
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @instance
             */
            KeyPair.prototype.name = "";
    
            /**
             * KeyPair value.
             * @member {Uint8Array} value
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @instance
             */
            KeyPair.prototype.value = $util.newBuffer([]);
    
            /**
             * Creates a new KeyPair instance using the specified properties.
             * @function create
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {CGCMsgMemCachedSet.IKeyPair=} [properties] Properties to set
             * @returns {CGCMsgMemCachedSet.KeyPair} KeyPair instance
             */
            KeyPair.create = function create(properties) {
                return new KeyPair(properties);
            };
    
            /**
             * Encodes the specified KeyPair message. Does not implicitly {@link CGCMsgMemCachedSet.KeyPair.verify|verify} messages.
             * @function encode
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {CGCMsgMemCachedSet.IKeyPair} message KeyPair message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KeyPair.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified KeyPair message, length delimited. Does not implicitly {@link CGCMsgMemCachedSet.KeyPair.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {CGCMsgMemCachedSet.IKeyPair} message KeyPair message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            KeyPair.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a KeyPair message from the specified reader or buffer.
             * @function decode
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CGCMsgMemCachedSet.KeyPair} KeyPair
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KeyPair.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedSet.KeyPair();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a KeyPair message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CGCMsgMemCachedSet.KeyPair} KeyPair
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            KeyPair.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a KeyPair message.
             * @function verify
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            KeyPair.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };
    
            /**
             * Creates a KeyPair message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CGCMsgMemCachedSet.KeyPair} KeyPair
             */
            KeyPair.fromObject = function fromObject(object) {
                if (object instanceof $root.CGCMsgMemCachedSet.KeyPair)
                    return object;
                var message = new $root.CGCMsgMemCachedSet.KeyPair();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };
    
            /**
             * Creates a plain object from a KeyPair message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @static
             * @param {CGCMsgMemCachedSet.KeyPair} message KeyPair
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            KeyPair.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };
    
            /**
             * Converts this KeyPair to JSON.
             * @function toJSON
             * @memberof CGCMsgMemCachedSet.KeyPair
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            KeyPair.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return KeyPair;
        })();
    
        return CGCMsgMemCachedSet;
    })();
    
    $root.CGCMsgMemCachedDelete = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedDelete.
         * @exports ICGCMsgMemCachedDelete
         * @interface ICGCMsgMemCachedDelete
         * @property {Array.<string>|null} [keys] CGCMsgMemCachedDelete keys
         */
    
        /**
         * Constructs a new CGCMsgMemCachedDelete.
         * @exports CGCMsgMemCachedDelete
         * @classdesc Represents a CGCMsgMemCachedDelete.
         * @implements ICGCMsgMemCachedDelete
         * @constructor
         * @param {ICGCMsgMemCachedDelete=} [properties] Properties to set
         */
        function CGCMsgMemCachedDelete(properties) {
            this.keys = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgMemCachedDelete keys.
         * @member {Array.<string>} keys
         * @memberof CGCMsgMemCachedDelete
         * @instance
         */
        CGCMsgMemCachedDelete.prototype.keys = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgMemCachedDelete instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {ICGCMsgMemCachedDelete=} [properties] Properties to set
         * @returns {CGCMsgMemCachedDelete} CGCMsgMemCachedDelete instance
         */
        CGCMsgMemCachedDelete.create = function create(properties) {
            return new CGCMsgMemCachedDelete(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedDelete message. Does not implicitly {@link CGCMsgMemCachedDelete.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {ICGCMsgMemCachedDelete} message CGCMsgMemCachedDelete message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedDelete.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keys != null && message.keys.length)
                for (var i = 0; i < message.keys.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.keys[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedDelete message, length delimited. Does not implicitly {@link CGCMsgMemCachedDelete.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {ICGCMsgMemCachedDelete} message CGCMsgMemCachedDelete message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedDelete.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedDelete message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedDelete} CGCMsgMemCachedDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedDelete.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedDelete();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.keys && message.keys.length))
                        message.keys = [];
                    message.keys.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedDelete message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedDelete} CGCMsgMemCachedDelete
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedDelete.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedDelete message.
         * @function verify
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedDelete.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keys != null && message.hasOwnProperty("keys")) {
                if (!Array.isArray(message.keys))
                    return "keys: array expected";
                for (var i = 0; i < message.keys.length; ++i)
                    if (!$util.isString(message.keys[i]))
                        return "keys: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedDelete message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedDelete} CGCMsgMemCachedDelete
         */
        CGCMsgMemCachedDelete.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedDelete)
                return object;
            var message = new $root.CGCMsgMemCachedDelete();
            if (object.keys) {
                if (!Array.isArray(object.keys))
                    throw TypeError(".CGCMsgMemCachedDelete.keys: array expected");
                message.keys = [];
                for (var i = 0; i < object.keys.length; ++i)
                    message.keys[i] = String(object.keys[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedDelete message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedDelete
         * @static
         * @param {CGCMsgMemCachedDelete} message CGCMsgMemCachedDelete
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedDelete.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.keys = [];
            if (message.keys && message.keys.length) {
                object.keys = [];
                for (var j = 0; j < message.keys.length; ++j)
                    object.keys[j] = message.keys[j];
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgMemCachedDelete to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedDelete
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedDelete.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgMemCachedDelete;
    })();
    
    $root.CGCMsgMemCachedStats = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedStats.
         * @exports ICGCMsgMemCachedStats
         * @interface ICGCMsgMemCachedStats
         */
    
        /**
         * Constructs a new CGCMsgMemCachedStats.
         * @exports CGCMsgMemCachedStats
         * @classdesc Represents a CGCMsgMemCachedStats.
         * @implements ICGCMsgMemCachedStats
         * @constructor
         * @param {ICGCMsgMemCachedStats=} [properties] Properties to set
         */
        function CGCMsgMemCachedStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CGCMsgMemCachedStats instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {ICGCMsgMemCachedStats=} [properties] Properties to set
         * @returns {CGCMsgMemCachedStats} CGCMsgMemCachedStats instance
         */
        CGCMsgMemCachedStats.create = function create(properties) {
            return new CGCMsgMemCachedStats(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedStats message. Does not implicitly {@link CGCMsgMemCachedStats.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {ICGCMsgMemCachedStats} message CGCMsgMemCachedStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedStats message, length delimited. Does not implicitly {@link CGCMsgMemCachedStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {ICGCMsgMemCachedStats} message CGCMsgMemCachedStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedStats message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedStats} CGCMsgMemCachedStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedStats} CGCMsgMemCachedStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedStats message.
         * @function verify
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedStats} CGCMsgMemCachedStats
         */
        CGCMsgMemCachedStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedStats)
                return object;
            return new $root.CGCMsgMemCachedStats();
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedStats
         * @static
         * @param {CGCMsgMemCachedStats} message CGCMsgMemCachedStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedStats.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CGCMsgMemCachedStats to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgMemCachedStats;
    })();
    
    $root.CGCMsgMemCachedStatsResponse = (function() {
    
        /**
         * Properties of a CGCMsgMemCachedStatsResponse.
         * @exports ICGCMsgMemCachedStatsResponse
         * @interface ICGCMsgMemCachedStatsResponse
         * @property {number|Long|null} [curr_connections] CGCMsgMemCachedStatsResponse curr_connections
         * @property {number|Long|null} [cmd_get] CGCMsgMemCachedStatsResponse cmd_get
         * @property {number|Long|null} [cmd_set] CGCMsgMemCachedStatsResponse cmd_set
         * @property {number|Long|null} [cmd_flush] CGCMsgMemCachedStatsResponse cmd_flush
         * @property {number|Long|null} [get_hits] CGCMsgMemCachedStatsResponse get_hits
         * @property {number|Long|null} [get_misses] CGCMsgMemCachedStatsResponse get_misses
         * @property {number|Long|null} [delete_hits] CGCMsgMemCachedStatsResponse delete_hits
         * @property {number|Long|null} [delete_misses] CGCMsgMemCachedStatsResponse delete_misses
         * @property {number|Long|null} [bytes_read] CGCMsgMemCachedStatsResponse bytes_read
         * @property {number|Long|null} [bytes_written] CGCMsgMemCachedStatsResponse bytes_written
         * @property {number|Long|null} [limit_maxbytes] CGCMsgMemCachedStatsResponse limit_maxbytes
         * @property {number|Long|null} [curr_items] CGCMsgMemCachedStatsResponse curr_items
         * @property {number|Long|null} [evictions] CGCMsgMemCachedStatsResponse evictions
         * @property {number|Long|null} [bytes] CGCMsgMemCachedStatsResponse bytes
         */
    
        /**
         * Constructs a new CGCMsgMemCachedStatsResponse.
         * @exports CGCMsgMemCachedStatsResponse
         * @classdesc Represents a CGCMsgMemCachedStatsResponse.
         * @implements ICGCMsgMemCachedStatsResponse
         * @constructor
         * @param {ICGCMsgMemCachedStatsResponse=} [properties] Properties to set
         */
        function CGCMsgMemCachedStatsResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgMemCachedStatsResponse curr_connections.
         * @member {number|Long} curr_connections
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.curr_connections = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse cmd_get.
         * @member {number|Long} cmd_get
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.cmd_get = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse cmd_set.
         * @member {number|Long} cmd_set
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.cmd_set = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse cmd_flush.
         * @member {number|Long} cmd_flush
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.cmd_flush = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse get_hits.
         * @member {number|Long} get_hits
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.get_hits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse get_misses.
         * @member {number|Long} get_misses
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.get_misses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse delete_hits.
         * @member {number|Long} delete_hits
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.delete_hits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse delete_misses.
         * @member {number|Long} delete_misses
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.delete_misses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse bytes_read.
         * @member {number|Long} bytes_read
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.bytes_read = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse bytes_written.
         * @member {number|Long} bytes_written
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.bytes_written = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse limit_maxbytes.
         * @member {number|Long} limit_maxbytes
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.limit_maxbytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse curr_items.
         * @member {number|Long} curr_items
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.curr_items = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse evictions.
         * @member {number|Long} evictions
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.evictions = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCMsgMemCachedStatsResponse bytes.
         * @member {number|Long} bytes
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         */
        CGCMsgMemCachedStatsResponse.prototype.bytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CGCMsgMemCachedStatsResponse instance using the specified properties.
         * @function create
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {ICGCMsgMemCachedStatsResponse=} [properties] Properties to set
         * @returns {CGCMsgMemCachedStatsResponse} CGCMsgMemCachedStatsResponse instance
         */
        CGCMsgMemCachedStatsResponse.create = function create(properties) {
            return new CGCMsgMemCachedStatsResponse(properties);
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedStatsResponse message. Does not implicitly {@link CGCMsgMemCachedStatsResponse.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {ICGCMsgMemCachedStatsResponse} message CGCMsgMemCachedStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedStatsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.curr_connections != null && message.hasOwnProperty("curr_connections"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.curr_connections);
            if (message.cmd_get != null && message.hasOwnProperty("cmd_get"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.cmd_get);
            if (message.cmd_set != null && message.hasOwnProperty("cmd_set"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cmd_set);
            if (message.cmd_flush != null && message.hasOwnProperty("cmd_flush"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.cmd_flush);
            if (message.get_hits != null && message.hasOwnProperty("get_hits"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.get_hits);
            if (message.get_misses != null && message.hasOwnProperty("get_misses"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.get_misses);
            if (message.delete_hits != null && message.hasOwnProperty("delete_hits"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.delete_hits);
            if (message.delete_misses != null && message.hasOwnProperty("delete_misses"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.delete_misses);
            if (message.bytes_read != null && message.hasOwnProperty("bytes_read"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.bytes_read);
            if (message.bytes_written != null && message.hasOwnProperty("bytes_written"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.bytes_written);
            if (message.limit_maxbytes != null && message.hasOwnProperty("limit_maxbytes"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.limit_maxbytes);
            if (message.curr_items != null && message.hasOwnProperty("curr_items"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.curr_items);
            if (message.evictions != null && message.hasOwnProperty("evictions"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.evictions);
            if (message.bytes != null && message.hasOwnProperty("bytes"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint64(message.bytes);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgMemCachedStatsResponse message, length delimited. Does not implicitly {@link CGCMsgMemCachedStatsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {ICGCMsgMemCachedStatsResponse} message CGCMsgMemCachedStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgMemCachedStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgMemCachedStatsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgMemCachedStatsResponse} CGCMsgMemCachedStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedStatsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgMemCachedStatsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.curr_connections = reader.uint64();
                    break;
                case 2:
                    message.cmd_get = reader.uint64();
                    break;
                case 3:
                    message.cmd_set = reader.uint64();
                    break;
                case 4:
                    message.cmd_flush = reader.uint64();
                    break;
                case 5:
                    message.get_hits = reader.uint64();
                    break;
                case 6:
                    message.get_misses = reader.uint64();
                    break;
                case 7:
                    message.delete_hits = reader.uint64();
                    break;
                case 8:
                    message.delete_misses = reader.uint64();
                    break;
                case 9:
                    message.bytes_read = reader.uint64();
                    break;
                case 10:
                    message.bytes_written = reader.uint64();
                    break;
                case 11:
                    message.limit_maxbytes = reader.uint64();
                    break;
                case 12:
                    message.curr_items = reader.uint64();
                    break;
                case 13:
                    message.evictions = reader.uint64();
                    break;
                case 14:
                    message.bytes = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgMemCachedStatsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgMemCachedStatsResponse} CGCMsgMemCachedStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgMemCachedStatsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgMemCachedStatsResponse message.
         * @function verify
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgMemCachedStatsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.curr_connections != null && message.hasOwnProperty("curr_connections"))
                if (!$util.isInteger(message.curr_connections) && !(message.curr_connections && $util.isInteger(message.curr_connections.low) && $util.isInteger(message.curr_connections.high)))
                    return "curr_connections: integer|Long expected";
            if (message.cmd_get != null && message.hasOwnProperty("cmd_get"))
                if (!$util.isInteger(message.cmd_get) && !(message.cmd_get && $util.isInteger(message.cmd_get.low) && $util.isInteger(message.cmd_get.high)))
                    return "cmd_get: integer|Long expected";
            if (message.cmd_set != null && message.hasOwnProperty("cmd_set"))
                if (!$util.isInteger(message.cmd_set) && !(message.cmd_set && $util.isInteger(message.cmd_set.low) && $util.isInteger(message.cmd_set.high)))
                    return "cmd_set: integer|Long expected";
            if (message.cmd_flush != null && message.hasOwnProperty("cmd_flush"))
                if (!$util.isInteger(message.cmd_flush) && !(message.cmd_flush && $util.isInteger(message.cmd_flush.low) && $util.isInteger(message.cmd_flush.high)))
                    return "cmd_flush: integer|Long expected";
            if (message.get_hits != null && message.hasOwnProperty("get_hits"))
                if (!$util.isInteger(message.get_hits) && !(message.get_hits && $util.isInteger(message.get_hits.low) && $util.isInteger(message.get_hits.high)))
                    return "get_hits: integer|Long expected";
            if (message.get_misses != null && message.hasOwnProperty("get_misses"))
                if (!$util.isInteger(message.get_misses) && !(message.get_misses && $util.isInteger(message.get_misses.low) && $util.isInteger(message.get_misses.high)))
                    return "get_misses: integer|Long expected";
            if (message.delete_hits != null && message.hasOwnProperty("delete_hits"))
                if (!$util.isInteger(message.delete_hits) && !(message.delete_hits && $util.isInteger(message.delete_hits.low) && $util.isInteger(message.delete_hits.high)))
                    return "delete_hits: integer|Long expected";
            if (message.delete_misses != null && message.hasOwnProperty("delete_misses"))
                if (!$util.isInteger(message.delete_misses) && !(message.delete_misses && $util.isInteger(message.delete_misses.low) && $util.isInteger(message.delete_misses.high)))
                    return "delete_misses: integer|Long expected";
            if (message.bytes_read != null && message.hasOwnProperty("bytes_read"))
                if (!$util.isInteger(message.bytes_read) && !(message.bytes_read && $util.isInteger(message.bytes_read.low) && $util.isInteger(message.bytes_read.high)))
                    return "bytes_read: integer|Long expected";
            if (message.bytes_written != null && message.hasOwnProperty("bytes_written"))
                if (!$util.isInteger(message.bytes_written) && !(message.bytes_written && $util.isInteger(message.bytes_written.low) && $util.isInteger(message.bytes_written.high)))
                    return "bytes_written: integer|Long expected";
            if (message.limit_maxbytes != null && message.hasOwnProperty("limit_maxbytes"))
                if (!$util.isInteger(message.limit_maxbytes) && !(message.limit_maxbytes && $util.isInteger(message.limit_maxbytes.low) && $util.isInteger(message.limit_maxbytes.high)))
                    return "limit_maxbytes: integer|Long expected";
            if (message.curr_items != null && message.hasOwnProperty("curr_items"))
                if (!$util.isInteger(message.curr_items) && !(message.curr_items && $util.isInteger(message.curr_items.low) && $util.isInteger(message.curr_items.high)))
                    return "curr_items: integer|Long expected";
            if (message.evictions != null && message.hasOwnProperty("evictions"))
                if (!$util.isInteger(message.evictions) && !(message.evictions && $util.isInteger(message.evictions.low) && $util.isInteger(message.evictions.high)))
                    return "evictions: integer|Long expected";
            if (message.bytes != null && message.hasOwnProperty("bytes"))
                if (!$util.isInteger(message.bytes) && !(message.bytes && $util.isInteger(message.bytes.low) && $util.isInteger(message.bytes.high)))
                    return "bytes: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgMemCachedStatsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgMemCachedStatsResponse} CGCMsgMemCachedStatsResponse
         */
        CGCMsgMemCachedStatsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgMemCachedStatsResponse)
                return object;
            var message = new $root.CGCMsgMemCachedStatsResponse();
            if (object.curr_connections != null)
                if ($util.Long)
                    (message.curr_connections = $util.Long.fromValue(object.curr_connections)).unsigned = true;
                else if (typeof object.curr_connections === "string")
                    message.curr_connections = parseInt(object.curr_connections, 10);
                else if (typeof object.curr_connections === "number")
                    message.curr_connections = object.curr_connections;
                else if (typeof object.curr_connections === "object")
                    message.curr_connections = new $util.LongBits(object.curr_connections.low >>> 0, object.curr_connections.high >>> 0).toNumber(true);
            if (object.cmd_get != null)
                if ($util.Long)
                    (message.cmd_get = $util.Long.fromValue(object.cmd_get)).unsigned = true;
                else if (typeof object.cmd_get === "string")
                    message.cmd_get = parseInt(object.cmd_get, 10);
                else if (typeof object.cmd_get === "number")
                    message.cmd_get = object.cmd_get;
                else if (typeof object.cmd_get === "object")
                    message.cmd_get = new $util.LongBits(object.cmd_get.low >>> 0, object.cmd_get.high >>> 0).toNumber(true);
            if (object.cmd_set != null)
                if ($util.Long)
                    (message.cmd_set = $util.Long.fromValue(object.cmd_set)).unsigned = true;
                else if (typeof object.cmd_set === "string")
                    message.cmd_set = parseInt(object.cmd_set, 10);
                else if (typeof object.cmd_set === "number")
                    message.cmd_set = object.cmd_set;
                else if (typeof object.cmd_set === "object")
                    message.cmd_set = new $util.LongBits(object.cmd_set.low >>> 0, object.cmd_set.high >>> 0).toNumber(true);
            if (object.cmd_flush != null)
                if ($util.Long)
                    (message.cmd_flush = $util.Long.fromValue(object.cmd_flush)).unsigned = true;
                else if (typeof object.cmd_flush === "string")
                    message.cmd_flush = parseInt(object.cmd_flush, 10);
                else if (typeof object.cmd_flush === "number")
                    message.cmd_flush = object.cmd_flush;
                else if (typeof object.cmd_flush === "object")
                    message.cmd_flush = new $util.LongBits(object.cmd_flush.low >>> 0, object.cmd_flush.high >>> 0).toNumber(true);
            if (object.get_hits != null)
                if ($util.Long)
                    (message.get_hits = $util.Long.fromValue(object.get_hits)).unsigned = true;
                else if (typeof object.get_hits === "string")
                    message.get_hits = parseInt(object.get_hits, 10);
                else if (typeof object.get_hits === "number")
                    message.get_hits = object.get_hits;
                else if (typeof object.get_hits === "object")
                    message.get_hits = new $util.LongBits(object.get_hits.low >>> 0, object.get_hits.high >>> 0).toNumber(true);
            if (object.get_misses != null)
                if ($util.Long)
                    (message.get_misses = $util.Long.fromValue(object.get_misses)).unsigned = true;
                else if (typeof object.get_misses === "string")
                    message.get_misses = parseInt(object.get_misses, 10);
                else if (typeof object.get_misses === "number")
                    message.get_misses = object.get_misses;
                else if (typeof object.get_misses === "object")
                    message.get_misses = new $util.LongBits(object.get_misses.low >>> 0, object.get_misses.high >>> 0).toNumber(true);
            if (object.delete_hits != null)
                if ($util.Long)
                    (message.delete_hits = $util.Long.fromValue(object.delete_hits)).unsigned = true;
                else if (typeof object.delete_hits === "string")
                    message.delete_hits = parseInt(object.delete_hits, 10);
                else if (typeof object.delete_hits === "number")
                    message.delete_hits = object.delete_hits;
                else if (typeof object.delete_hits === "object")
                    message.delete_hits = new $util.LongBits(object.delete_hits.low >>> 0, object.delete_hits.high >>> 0).toNumber(true);
            if (object.delete_misses != null)
                if ($util.Long)
                    (message.delete_misses = $util.Long.fromValue(object.delete_misses)).unsigned = true;
                else if (typeof object.delete_misses === "string")
                    message.delete_misses = parseInt(object.delete_misses, 10);
                else if (typeof object.delete_misses === "number")
                    message.delete_misses = object.delete_misses;
                else if (typeof object.delete_misses === "object")
                    message.delete_misses = new $util.LongBits(object.delete_misses.low >>> 0, object.delete_misses.high >>> 0).toNumber(true);
            if (object.bytes_read != null)
                if ($util.Long)
                    (message.bytes_read = $util.Long.fromValue(object.bytes_read)).unsigned = true;
                else if (typeof object.bytes_read === "string")
                    message.bytes_read = parseInt(object.bytes_read, 10);
                else if (typeof object.bytes_read === "number")
                    message.bytes_read = object.bytes_read;
                else if (typeof object.bytes_read === "object")
                    message.bytes_read = new $util.LongBits(object.bytes_read.low >>> 0, object.bytes_read.high >>> 0).toNumber(true);
            if (object.bytes_written != null)
                if ($util.Long)
                    (message.bytes_written = $util.Long.fromValue(object.bytes_written)).unsigned = true;
                else if (typeof object.bytes_written === "string")
                    message.bytes_written = parseInt(object.bytes_written, 10);
                else if (typeof object.bytes_written === "number")
                    message.bytes_written = object.bytes_written;
                else if (typeof object.bytes_written === "object")
                    message.bytes_written = new $util.LongBits(object.bytes_written.low >>> 0, object.bytes_written.high >>> 0).toNumber(true);
            if (object.limit_maxbytes != null)
                if ($util.Long)
                    (message.limit_maxbytes = $util.Long.fromValue(object.limit_maxbytes)).unsigned = true;
                else if (typeof object.limit_maxbytes === "string")
                    message.limit_maxbytes = parseInt(object.limit_maxbytes, 10);
                else if (typeof object.limit_maxbytes === "number")
                    message.limit_maxbytes = object.limit_maxbytes;
                else if (typeof object.limit_maxbytes === "object")
                    message.limit_maxbytes = new $util.LongBits(object.limit_maxbytes.low >>> 0, object.limit_maxbytes.high >>> 0).toNumber(true);
            if (object.curr_items != null)
                if ($util.Long)
                    (message.curr_items = $util.Long.fromValue(object.curr_items)).unsigned = true;
                else if (typeof object.curr_items === "string")
                    message.curr_items = parseInt(object.curr_items, 10);
                else if (typeof object.curr_items === "number")
                    message.curr_items = object.curr_items;
                else if (typeof object.curr_items === "object")
                    message.curr_items = new $util.LongBits(object.curr_items.low >>> 0, object.curr_items.high >>> 0).toNumber(true);
            if (object.evictions != null)
                if ($util.Long)
                    (message.evictions = $util.Long.fromValue(object.evictions)).unsigned = true;
                else if (typeof object.evictions === "string")
                    message.evictions = parseInt(object.evictions, 10);
                else if (typeof object.evictions === "number")
                    message.evictions = object.evictions;
                else if (typeof object.evictions === "object")
                    message.evictions = new $util.LongBits(object.evictions.low >>> 0, object.evictions.high >>> 0).toNumber(true);
            if (object.bytes != null)
                if ($util.Long)
                    (message.bytes = $util.Long.fromValue(object.bytes)).unsigned = true;
                else if (typeof object.bytes === "string")
                    message.bytes = parseInt(object.bytes, 10);
                else if (typeof object.bytes === "number")
                    message.bytes = object.bytes;
                else if (typeof object.bytes === "object")
                    message.bytes = new $util.LongBits(object.bytes.low >>> 0, object.bytes.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgMemCachedStatsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgMemCachedStatsResponse
         * @static
         * @param {CGCMsgMemCachedStatsResponse} message CGCMsgMemCachedStatsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgMemCachedStatsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.curr_connections = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.curr_connections = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cmd_get = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cmd_get = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cmd_set = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cmd_set = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cmd_flush = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cmd_flush = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.get_hits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.get_hits = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.get_misses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.get_misses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.delete_hits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.delete_hits = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.delete_misses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.delete_misses = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.bytes_read = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bytes_read = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.bytes_written = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bytes_written = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.limit_maxbytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.limit_maxbytes = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.curr_items = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.curr_items = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.evictions = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.evictions = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bytes = options.longs === String ? "0" : 0;
            }
            if (message.curr_connections != null && message.hasOwnProperty("curr_connections"))
                if (typeof message.curr_connections === "number")
                    object.curr_connections = options.longs === String ? String(message.curr_connections) : message.curr_connections;
                else
                    object.curr_connections = options.longs === String ? $util.Long.prototype.toString.call(message.curr_connections) : options.longs === Number ? new $util.LongBits(message.curr_connections.low >>> 0, message.curr_connections.high >>> 0).toNumber(true) : message.curr_connections;
            if (message.cmd_get != null && message.hasOwnProperty("cmd_get"))
                if (typeof message.cmd_get === "number")
                    object.cmd_get = options.longs === String ? String(message.cmd_get) : message.cmd_get;
                else
                    object.cmd_get = options.longs === String ? $util.Long.prototype.toString.call(message.cmd_get) : options.longs === Number ? new $util.LongBits(message.cmd_get.low >>> 0, message.cmd_get.high >>> 0).toNumber(true) : message.cmd_get;
            if (message.cmd_set != null && message.hasOwnProperty("cmd_set"))
                if (typeof message.cmd_set === "number")
                    object.cmd_set = options.longs === String ? String(message.cmd_set) : message.cmd_set;
                else
                    object.cmd_set = options.longs === String ? $util.Long.prototype.toString.call(message.cmd_set) : options.longs === Number ? new $util.LongBits(message.cmd_set.low >>> 0, message.cmd_set.high >>> 0).toNumber(true) : message.cmd_set;
            if (message.cmd_flush != null && message.hasOwnProperty("cmd_flush"))
                if (typeof message.cmd_flush === "number")
                    object.cmd_flush = options.longs === String ? String(message.cmd_flush) : message.cmd_flush;
                else
                    object.cmd_flush = options.longs === String ? $util.Long.prototype.toString.call(message.cmd_flush) : options.longs === Number ? new $util.LongBits(message.cmd_flush.low >>> 0, message.cmd_flush.high >>> 0).toNumber(true) : message.cmd_flush;
            if (message.get_hits != null && message.hasOwnProperty("get_hits"))
                if (typeof message.get_hits === "number")
                    object.get_hits = options.longs === String ? String(message.get_hits) : message.get_hits;
                else
                    object.get_hits = options.longs === String ? $util.Long.prototype.toString.call(message.get_hits) : options.longs === Number ? new $util.LongBits(message.get_hits.low >>> 0, message.get_hits.high >>> 0).toNumber(true) : message.get_hits;
            if (message.get_misses != null && message.hasOwnProperty("get_misses"))
                if (typeof message.get_misses === "number")
                    object.get_misses = options.longs === String ? String(message.get_misses) : message.get_misses;
                else
                    object.get_misses = options.longs === String ? $util.Long.prototype.toString.call(message.get_misses) : options.longs === Number ? new $util.LongBits(message.get_misses.low >>> 0, message.get_misses.high >>> 0).toNumber(true) : message.get_misses;
            if (message.delete_hits != null && message.hasOwnProperty("delete_hits"))
                if (typeof message.delete_hits === "number")
                    object.delete_hits = options.longs === String ? String(message.delete_hits) : message.delete_hits;
                else
                    object.delete_hits = options.longs === String ? $util.Long.prototype.toString.call(message.delete_hits) : options.longs === Number ? new $util.LongBits(message.delete_hits.low >>> 0, message.delete_hits.high >>> 0).toNumber(true) : message.delete_hits;
            if (message.delete_misses != null && message.hasOwnProperty("delete_misses"))
                if (typeof message.delete_misses === "number")
                    object.delete_misses = options.longs === String ? String(message.delete_misses) : message.delete_misses;
                else
                    object.delete_misses = options.longs === String ? $util.Long.prototype.toString.call(message.delete_misses) : options.longs === Number ? new $util.LongBits(message.delete_misses.low >>> 0, message.delete_misses.high >>> 0).toNumber(true) : message.delete_misses;
            if (message.bytes_read != null && message.hasOwnProperty("bytes_read"))
                if (typeof message.bytes_read === "number")
                    object.bytes_read = options.longs === String ? String(message.bytes_read) : message.bytes_read;
                else
                    object.bytes_read = options.longs === String ? $util.Long.prototype.toString.call(message.bytes_read) : options.longs === Number ? new $util.LongBits(message.bytes_read.low >>> 0, message.bytes_read.high >>> 0).toNumber(true) : message.bytes_read;
            if (message.bytes_written != null && message.hasOwnProperty("bytes_written"))
                if (typeof message.bytes_written === "number")
                    object.bytes_written = options.longs === String ? String(message.bytes_written) : message.bytes_written;
                else
                    object.bytes_written = options.longs === String ? $util.Long.prototype.toString.call(message.bytes_written) : options.longs === Number ? new $util.LongBits(message.bytes_written.low >>> 0, message.bytes_written.high >>> 0).toNumber(true) : message.bytes_written;
            if (message.limit_maxbytes != null && message.hasOwnProperty("limit_maxbytes"))
                if (typeof message.limit_maxbytes === "number")
                    object.limit_maxbytes = options.longs === String ? String(message.limit_maxbytes) : message.limit_maxbytes;
                else
                    object.limit_maxbytes = options.longs === String ? $util.Long.prototype.toString.call(message.limit_maxbytes) : options.longs === Number ? new $util.LongBits(message.limit_maxbytes.low >>> 0, message.limit_maxbytes.high >>> 0).toNumber(true) : message.limit_maxbytes;
            if (message.curr_items != null && message.hasOwnProperty("curr_items"))
                if (typeof message.curr_items === "number")
                    object.curr_items = options.longs === String ? String(message.curr_items) : message.curr_items;
                else
                    object.curr_items = options.longs === String ? $util.Long.prototype.toString.call(message.curr_items) : options.longs === Number ? new $util.LongBits(message.curr_items.low >>> 0, message.curr_items.high >>> 0).toNumber(true) : message.curr_items;
            if (message.evictions != null && message.hasOwnProperty("evictions"))
                if (typeof message.evictions === "number")
                    object.evictions = options.longs === String ? String(message.evictions) : message.evictions;
                else
                    object.evictions = options.longs === String ? $util.Long.prototype.toString.call(message.evictions) : options.longs === Number ? new $util.LongBits(message.evictions.low >>> 0, message.evictions.high >>> 0).toNumber(true) : message.evictions;
            if (message.bytes != null && message.hasOwnProperty("bytes"))
                if (typeof message.bytes === "number")
                    object.bytes = options.longs === String ? String(message.bytes) : message.bytes;
                else
                    object.bytes = options.longs === String ? $util.Long.prototype.toString.call(message.bytes) : options.longs === Number ? new $util.LongBits(message.bytes.low >>> 0, message.bytes.high >>> 0).toNumber(true) : message.bytes;
            return object;
        };
    
        /**
         * Converts this CGCMsgMemCachedStatsResponse to JSON.
         * @function toJSON
         * @memberof CGCMsgMemCachedStatsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgMemCachedStatsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgMemCachedStatsResponse;
    })();
    
    $root.CGCMsgSQLStats = (function() {
    
        /**
         * Properties of a CGCMsgSQLStats.
         * @exports ICGCMsgSQLStats
         * @interface ICGCMsgSQLStats
         * @property {number|null} [schema_catalog] CGCMsgSQLStats schema_catalog
         */
    
        /**
         * Constructs a new CGCMsgSQLStats.
         * @exports CGCMsgSQLStats
         * @classdesc Represents a CGCMsgSQLStats.
         * @implements ICGCMsgSQLStats
         * @constructor
         * @param {ICGCMsgSQLStats=} [properties] Properties to set
         */
        function CGCMsgSQLStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgSQLStats schema_catalog.
         * @member {number} schema_catalog
         * @memberof CGCMsgSQLStats
         * @instance
         */
        CGCMsgSQLStats.prototype.schema_catalog = 0;
    
        /**
         * Creates a new CGCMsgSQLStats instance using the specified properties.
         * @function create
         * @memberof CGCMsgSQLStats
         * @static
         * @param {ICGCMsgSQLStats=} [properties] Properties to set
         * @returns {CGCMsgSQLStats} CGCMsgSQLStats instance
         */
        CGCMsgSQLStats.create = function create(properties) {
            return new CGCMsgSQLStats(properties);
        };
    
        /**
         * Encodes the specified CGCMsgSQLStats message. Does not implicitly {@link CGCMsgSQLStats.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgSQLStats
         * @static
         * @param {ICGCMsgSQLStats} message CGCMsgSQLStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSQLStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.schema_catalog != null && message.hasOwnProperty("schema_catalog"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.schema_catalog);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgSQLStats message, length delimited. Does not implicitly {@link CGCMsgSQLStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgSQLStats
         * @static
         * @param {ICGCMsgSQLStats} message CGCMsgSQLStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSQLStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgSQLStats message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgSQLStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgSQLStats} CGCMsgSQLStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSQLStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgSQLStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.schema_catalog = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgSQLStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgSQLStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgSQLStats} CGCMsgSQLStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSQLStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgSQLStats message.
         * @function verify
         * @memberof CGCMsgSQLStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgSQLStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.schema_catalog != null && message.hasOwnProperty("schema_catalog"))
                if (!$util.isInteger(message.schema_catalog))
                    return "schema_catalog: integer expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgSQLStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgSQLStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgSQLStats} CGCMsgSQLStats
         */
        CGCMsgSQLStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgSQLStats)
                return object;
            var message = new $root.CGCMsgSQLStats();
            if (object.schema_catalog != null)
                message.schema_catalog = object.schema_catalog >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgSQLStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgSQLStats
         * @static
         * @param {CGCMsgSQLStats} message CGCMsgSQLStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgSQLStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.schema_catalog = 0;
            if (message.schema_catalog != null && message.hasOwnProperty("schema_catalog"))
                object.schema_catalog = message.schema_catalog;
            return object;
        };
    
        /**
         * Converts this CGCMsgSQLStats to JSON.
         * @function toJSON
         * @memberof CGCMsgSQLStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgSQLStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgSQLStats;
    })();
    
    $root.CGCMsgSQLStatsResponse = (function() {
    
        /**
         * Properties of a CGCMsgSQLStatsResponse.
         * @exports ICGCMsgSQLStatsResponse
         * @interface ICGCMsgSQLStatsResponse
         * @property {number|null} [threads] CGCMsgSQLStatsResponse threads
         * @property {number|null} [threads_connected] CGCMsgSQLStatsResponse threads_connected
         * @property {number|null} [threads_active] CGCMsgSQLStatsResponse threads_active
         * @property {number|null} [operations_submitted] CGCMsgSQLStatsResponse operations_submitted
         * @property {number|null} [prepared_statements_executed] CGCMsgSQLStatsResponse prepared_statements_executed
         * @property {number|null} [non_prepared_statements_executed] CGCMsgSQLStatsResponse non_prepared_statements_executed
         * @property {number|null} [deadlock_retries] CGCMsgSQLStatsResponse deadlock_retries
         * @property {number|null} [operations_timed_out_in_queue] CGCMsgSQLStatsResponse operations_timed_out_in_queue
         * @property {number|null} [errors] CGCMsgSQLStatsResponse errors
         */
    
        /**
         * Constructs a new CGCMsgSQLStatsResponse.
         * @exports CGCMsgSQLStatsResponse
         * @classdesc Represents a CGCMsgSQLStatsResponse.
         * @implements ICGCMsgSQLStatsResponse
         * @constructor
         * @param {ICGCMsgSQLStatsResponse=} [properties] Properties to set
         */
        function CGCMsgSQLStatsResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgSQLStatsResponse threads.
         * @member {number} threads
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.threads = 0;
    
        /**
         * CGCMsgSQLStatsResponse threads_connected.
         * @member {number} threads_connected
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.threads_connected = 0;
    
        /**
         * CGCMsgSQLStatsResponse threads_active.
         * @member {number} threads_active
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.threads_active = 0;
    
        /**
         * CGCMsgSQLStatsResponse operations_submitted.
         * @member {number} operations_submitted
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.operations_submitted = 0;
    
        /**
         * CGCMsgSQLStatsResponse prepared_statements_executed.
         * @member {number} prepared_statements_executed
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.prepared_statements_executed = 0;
    
        /**
         * CGCMsgSQLStatsResponse non_prepared_statements_executed.
         * @member {number} non_prepared_statements_executed
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.non_prepared_statements_executed = 0;
    
        /**
         * CGCMsgSQLStatsResponse deadlock_retries.
         * @member {number} deadlock_retries
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.deadlock_retries = 0;
    
        /**
         * CGCMsgSQLStatsResponse operations_timed_out_in_queue.
         * @member {number} operations_timed_out_in_queue
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.operations_timed_out_in_queue = 0;
    
        /**
         * CGCMsgSQLStatsResponse errors.
         * @member {number} errors
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         */
        CGCMsgSQLStatsResponse.prototype.errors = 0;
    
        /**
         * Creates a new CGCMsgSQLStatsResponse instance using the specified properties.
         * @function create
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {ICGCMsgSQLStatsResponse=} [properties] Properties to set
         * @returns {CGCMsgSQLStatsResponse} CGCMsgSQLStatsResponse instance
         */
        CGCMsgSQLStatsResponse.create = function create(properties) {
            return new CGCMsgSQLStatsResponse(properties);
        };
    
        /**
         * Encodes the specified CGCMsgSQLStatsResponse message. Does not implicitly {@link CGCMsgSQLStatsResponse.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {ICGCMsgSQLStatsResponse} message CGCMsgSQLStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSQLStatsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.threads != null && message.hasOwnProperty("threads"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.threads);
            if (message.threads_connected != null && message.hasOwnProperty("threads_connected"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.threads_connected);
            if (message.threads_active != null && message.hasOwnProperty("threads_active"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.threads_active);
            if (message.operations_submitted != null && message.hasOwnProperty("operations_submitted"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.operations_submitted);
            if (message.prepared_statements_executed != null && message.hasOwnProperty("prepared_statements_executed"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.prepared_statements_executed);
            if (message.non_prepared_statements_executed != null && message.hasOwnProperty("non_prepared_statements_executed"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.non_prepared_statements_executed);
            if (message.deadlock_retries != null && message.hasOwnProperty("deadlock_retries"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.deadlock_retries);
            if (message.operations_timed_out_in_queue != null && message.hasOwnProperty("operations_timed_out_in_queue"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.operations_timed_out_in_queue);
            if (message.errors != null && message.hasOwnProperty("errors"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.errors);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgSQLStatsResponse message, length delimited. Does not implicitly {@link CGCMsgSQLStatsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {ICGCMsgSQLStatsResponse} message CGCMsgSQLStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSQLStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgSQLStatsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgSQLStatsResponse} CGCMsgSQLStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSQLStatsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgSQLStatsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.threads = reader.uint32();
                    break;
                case 2:
                    message.threads_connected = reader.uint32();
                    break;
                case 3:
                    message.threads_active = reader.uint32();
                    break;
                case 4:
                    message.operations_submitted = reader.uint32();
                    break;
                case 5:
                    message.prepared_statements_executed = reader.uint32();
                    break;
                case 6:
                    message.non_prepared_statements_executed = reader.uint32();
                    break;
                case 7:
                    message.deadlock_retries = reader.uint32();
                    break;
                case 8:
                    message.operations_timed_out_in_queue = reader.uint32();
                    break;
                case 9:
                    message.errors = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgSQLStatsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgSQLStatsResponse} CGCMsgSQLStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSQLStatsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgSQLStatsResponse message.
         * @function verify
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgSQLStatsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.threads != null && message.hasOwnProperty("threads"))
                if (!$util.isInteger(message.threads))
                    return "threads: integer expected";
            if (message.threads_connected != null && message.hasOwnProperty("threads_connected"))
                if (!$util.isInteger(message.threads_connected))
                    return "threads_connected: integer expected";
            if (message.threads_active != null && message.hasOwnProperty("threads_active"))
                if (!$util.isInteger(message.threads_active))
                    return "threads_active: integer expected";
            if (message.operations_submitted != null && message.hasOwnProperty("operations_submitted"))
                if (!$util.isInteger(message.operations_submitted))
                    return "operations_submitted: integer expected";
            if (message.prepared_statements_executed != null && message.hasOwnProperty("prepared_statements_executed"))
                if (!$util.isInteger(message.prepared_statements_executed))
                    return "prepared_statements_executed: integer expected";
            if (message.non_prepared_statements_executed != null && message.hasOwnProperty("non_prepared_statements_executed"))
                if (!$util.isInteger(message.non_prepared_statements_executed))
                    return "non_prepared_statements_executed: integer expected";
            if (message.deadlock_retries != null && message.hasOwnProperty("deadlock_retries"))
                if (!$util.isInteger(message.deadlock_retries))
                    return "deadlock_retries: integer expected";
            if (message.operations_timed_out_in_queue != null && message.hasOwnProperty("operations_timed_out_in_queue"))
                if (!$util.isInteger(message.operations_timed_out_in_queue))
                    return "operations_timed_out_in_queue: integer expected";
            if (message.errors != null && message.hasOwnProperty("errors"))
                if (!$util.isInteger(message.errors))
                    return "errors: integer expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgSQLStatsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgSQLStatsResponse} CGCMsgSQLStatsResponse
         */
        CGCMsgSQLStatsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgSQLStatsResponse)
                return object;
            var message = new $root.CGCMsgSQLStatsResponse();
            if (object.threads != null)
                message.threads = object.threads >>> 0;
            if (object.threads_connected != null)
                message.threads_connected = object.threads_connected >>> 0;
            if (object.threads_active != null)
                message.threads_active = object.threads_active >>> 0;
            if (object.operations_submitted != null)
                message.operations_submitted = object.operations_submitted >>> 0;
            if (object.prepared_statements_executed != null)
                message.prepared_statements_executed = object.prepared_statements_executed >>> 0;
            if (object.non_prepared_statements_executed != null)
                message.non_prepared_statements_executed = object.non_prepared_statements_executed >>> 0;
            if (object.deadlock_retries != null)
                message.deadlock_retries = object.deadlock_retries >>> 0;
            if (object.operations_timed_out_in_queue != null)
                message.operations_timed_out_in_queue = object.operations_timed_out_in_queue >>> 0;
            if (object.errors != null)
                message.errors = object.errors >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgSQLStatsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgSQLStatsResponse
         * @static
         * @param {CGCMsgSQLStatsResponse} message CGCMsgSQLStatsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgSQLStatsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.threads = 0;
                object.threads_connected = 0;
                object.threads_active = 0;
                object.operations_submitted = 0;
                object.prepared_statements_executed = 0;
                object.non_prepared_statements_executed = 0;
                object.deadlock_retries = 0;
                object.operations_timed_out_in_queue = 0;
                object.errors = 0;
            }
            if (message.threads != null && message.hasOwnProperty("threads"))
                object.threads = message.threads;
            if (message.threads_connected != null && message.hasOwnProperty("threads_connected"))
                object.threads_connected = message.threads_connected;
            if (message.threads_active != null && message.hasOwnProperty("threads_active"))
                object.threads_active = message.threads_active;
            if (message.operations_submitted != null && message.hasOwnProperty("operations_submitted"))
                object.operations_submitted = message.operations_submitted;
            if (message.prepared_statements_executed != null && message.hasOwnProperty("prepared_statements_executed"))
                object.prepared_statements_executed = message.prepared_statements_executed;
            if (message.non_prepared_statements_executed != null && message.hasOwnProperty("non_prepared_statements_executed"))
                object.non_prepared_statements_executed = message.non_prepared_statements_executed;
            if (message.deadlock_retries != null && message.hasOwnProperty("deadlock_retries"))
                object.deadlock_retries = message.deadlock_retries;
            if (message.operations_timed_out_in_queue != null && message.hasOwnProperty("operations_timed_out_in_queue"))
                object.operations_timed_out_in_queue = message.operations_timed_out_in_queue;
            if (message.errors != null && message.hasOwnProperty("errors"))
                object.errors = message.errors;
            return object;
        };
    
        /**
         * Converts this CGCMsgSQLStatsResponse to JSON.
         * @function toJSON
         * @memberof CGCMsgSQLStatsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgSQLStatsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgSQLStatsResponse;
    })();
    
    $root.CMsgAMAddFreeLicense = (function() {
    
        /**
         * Properties of a CMsgAMAddFreeLicense.
         * @exports ICMsgAMAddFreeLicense
         * @interface ICMsgAMAddFreeLicense
         * @property {number|Long|null} [steamid] CMsgAMAddFreeLicense steamid
         * @property {number|null} [ip_public] CMsgAMAddFreeLicense ip_public
         * @property {number|null} [packageid] CMsgAMAddFreeLicense packageid
         * @property {string|null} [store_country_code] CMsgAMAddFreeLicense store_country_code
         */
    
        /**
         * Constructs a new CMsgAMAddFreeLicense.
         * @exports CMsgAMAddFreeLicense
         * @classdesc Represents a CMsgAMAddFreeLicense.
         * @implements ICMsgAMAddFreeLicense
         * @constructor
         * @param {ICMsgAMAddFreeLicense=} [properties] Properties to set
         */
        function CMsgAMAddFreeLicense(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMAddFreeLicense steamid.
         * @member {number|Long} steamid
         * @memberof CMsgAMAddFreeLicense
         * @instance
         */
        CMsgAMAddFreeLicense.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMAddFreeLicense ip_public.
         * @member {number} ip_public
         * @memberof CMsgAMAddFreeLicense
         * @instance
         */
        CMsgAMAddFreeLicense.prototype.ip_public = 0;
    
        /**
         * CMsgAMAddFreeLicense packageid.
         * @member {number} packageid
         * @memberof CMsgAMAddFreeLicense
         * @instance
         */
        CMsgAMAddFreeLicense.prototype.packageid = 0;
    
        /**
         * CMsgAMAddFreeLicense store_country_code.
         * @member {string} store_country_code
         * @memberof CMsgAMAddFreeLicense
         * @instance
         */
        CMsgAMAddFreeLicense.prototype.store_country_code = "";
    
        /**
         * Creates a new CMsgAMAddFreeLicense instance using the specified properties.
         * @function create
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {ICMsgAMAddFreeLicense=} [properties] Properties to set
         * @returns {CMsgAMAddFreeLicense} CMsgAMAddFreeLicense instance
         */
        CMsgAMAddFreeLicense.create = function create(properties) {
            return new CMsgAMAddFreeLicense(properties);
        };
    
        /**
         * Encodes the specified CMsgAMAddFreeLicense message. Does not implicitly {@link CMsgAMAddFreeLicense.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {ICMsgAMAddFreeLicense} message CMsgAMAddFreeLicense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMAddFreeLicense.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.ip_public != null && message.hasOwnProperty("ip_public"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ip_public);
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.packageid);
            if (message.store_country_code != null && message.hasOwnProperty("store_country_code"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.store_country_code);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMAddFreeLicense message, length delimited. Does not implicitly {@link CMsgAMAddFreeLicense.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {ICMsgAMAddFreeLicense} message CMsgAMAddFreeLicense message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMAddFreeLicense.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMAddFreeLicense message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMAddFreeLicense} CMsgAMAddFreeLicense
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMAddFreeLicense.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMAddFreeLicense();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.ip_public = reader.uint32();
                    break;
                case 3:
                    message.packageid = reader.uint32();
                    break;
                case 4:
                    message.store_country_code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMAddFreeLicense message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMAddFreeLicense} CMsgAMAddFreeLicense
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMAddFreeLicense.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMAddFreeLicense message.
         * @function verify
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMAddFreeLicense.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.ip_public != null && message.hasOwnProperty("ip_public"))
                if (!$util.isInteger(message.ip_public))
                    return "ip_public: integer expected";
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                if (!$util.isInteger(message.packageid))
                    return "packageid: integer expected";
            if (message.store_country_code != null && message.hasOwnProperty("store_country_code"))
                if (!$util.isString(message.store_country_code))
                    return "store_country_code: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMAddFreeLicense message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMAddFreeLicense} CMsgAMAddFreeLicense
         */
        CMsgAMAddFreeLicense.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMAddFreeLicense)
                return object;
            var message = new $root.CMsgAMAddFreeLicense();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.ip_public != null)
                message.ip_public = object.ip_public >>> 0;
            if (object.packageid != null)
                message.packageid = object.packageid >>> 0;
            if (object.store_country_code != null)
                message.store_country_code = String(object.store_country_code);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMAddFreeLicense message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMAddFreeLicense
         * @static
         * @param {CMsgAMAddFreeLicense} message CMsgAMAddFreeLicense
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMAddFreeLicense.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.ip_public = 0;
                object.packageid = 0;
                object.store_country_code = "";
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.ip_public != null && message.hasOwnProperty("ip_public"))
                object.ip_public = message.ip_public;
            if (message.packageid != null && message.hasOwnProperty("packageid"))
                object.packageid = message.packageid;
            if (message.store_country_code != null && message.hasOwnProperty("store_country_code"))
                object.store_country_code = message.store_country_code;
            return object;
        };
    
        /**
         * Converts this CMsgAMAddFreeLicense to JSON.
         * @function toJSON
         * @memberof CMsgAMAddFreeLicense
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMAddFreeLicense.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMAddFreeLicense;
    })();
    
    $root.CMsgAMAddFreeLicenseResponse = (function() {
    
        /**
         * Properties of a CMsgAMAddFreeLicenseResponse.
         * @exports ICMsgAMAddFreeLicenseResponse
         * @interface ICMsgAMAddFreeLicenseResponse
         * @property {number|null} [eresult] CMsgAMAddFreeLicenseResponse eresult
         * @property {number|null} [purchase_result_detail] CMsgAMAddFreeLicenseResponse purchase_result_detail
         * @property {number|Long|null} [transid] CMsgAMAddFreeLicenseResponse transid
         */
    
        /**
         * Constructs a new CMsgAMAddFreeLicenseResponse.
         * @exports CMsgAMAddFreeLicenseResponse
         * @classdesc Represents a CMsgAMAddFreeLicenseResponse.
         * @implements ICMsgAMAddFreeLicenseResponse
         * @constructor
         * @param {ICMsgAMAddFreeLicenseResponse=} [properties] Properties to set
         */
        function CMsgAMAddFreeLicenseResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMAddFreeLicenseResponse eresult.
         * @member {number} eresult
         * @memberof CMsgAMAddFreeLicenseResponse
         * @instance
         */
        CMsgAMAddFreeLicenseResponse.prototype.eresult = 2;
    
        /**
         * CMsgAMAddFreeLicenseResponse purchase_result_detail.
         * @member {number} purchase_result_detail
         * @memberof CMsgAMAddFreeLicenseResponse
         * @instance
         */
        CMsgAMAddFreeLicenseResponse.prototype.purchase_result_detail = 0;
    
        /**
         * CMsgAMAddFreeLicenseResponse transid.
         * @member {number|Long} transid
         * @memberof CMsgAMAddFreeLicenseResponse
         * @instance
         */
        CMsgAMAddFreeLicenseResponse.prototype.transid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgAMAddFreeLicenseResponse instance using the specified properties.
         * @function create
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {ICMsgAMAddFreeLicenseResponse=} [properties] Properties to set
         * @returns {CMsgAMAddFreeLicenseResponse} CMsgAMAddFreeLicenseResponse instance
         */
        CMsgAMAddFreeLicenseResponse.create = function create(properties) {
            return new CMsgAMAddFreeLicenseResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgAMAddFreeLicenseResponse message. Does not implicitly {@link CMsgAMAddFreeLicenseResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {ICMsgAMAddFreeLicenseResponse} message CMsgAMAddFreeLicenseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMAddFreeLicenseResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            if (message.purchase_result_detail != null && message.hasOwnProperty("purchase_result_detail"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.purchase_result_detail);
            if (message.transid != null && message.hasOwnProperty("transid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.transid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMAddFreeLicenseResponse message, length delimited. Does not implicitly {@link CMsgAMAddFreeLicenseResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {ICMsgAMAddFreeLicenseResponse} message CMsgAMAddFreeLicenseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMAddFreeLicenseResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMAddFreeLicenseResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMAddFreeLicenseResponse} CMsgAMAddFreeLicenseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMAddFreeLicenseResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMAddFreeLicenseResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                case 2:
                    message.purchase_result_detail = reader.int32();
                    break;
                case 3:
                    message.transid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMAddFreeLicenseResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMAddFreeLicenseResponse} CMsgAMAddFreeLicenseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMAddFreeLicenseResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMAddFreeLicenseResponse message.
         * @function verify
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMAddFreeLicenseResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.purchase_result_detail != null && message.hasOwnProperty("purchase_result_detail"))
                if (!$util.isInteger(message.purchase_result_detail))
                    return "purchase_result_detail: integer expected";
            if (message.transid != null && message.hasOwnProperty("transid"))
                if (!$util.isInteger(message.transid) && !(message.transid && $util.isInteger(message.transid.low) && $util.isInteger(message.transid.high)))
                    return "transid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMAddFreeLicenseResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMAddFreeLicenseResponse} CMsgAMAddFreeLicenseResponse
         */
        CMsgAMAddFreeLicenseResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMAddFreeLicenseResponse)
                return object;
            var message = new $root.CMsgAMAddFreeLicenseResponse();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.purchase_result_detail != null)
                message.purchase_result_detail = object.purchase_result_detail | 0;
            if (object.transid != null)
                if ($util.Long)
                    (message.transid = $util.Long.fromValue(object.transid)).unsigned = false;
                else if (typeof object.transid === "string")
                    message.transid = parseInt(object.transid, 10);
                else if (typeof object.transid === "number")
                    message.transid = object.transid;
                else if (typeof object.transid === "object")
                    message.transid = new $util.LongBits(object.transid.low >>> 0, object.transid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMAddFreeLicenseResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMAddFreeLicenseResponse
         * @static
         * @param {CMsgAMAddFreeLicenseResponse} message CMsgAMAddFreeLicenseResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMAddFreeLicenseResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                object.purchase_result_detail = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.transid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.transid = options.longs === String ? "0" : 0;
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.purchase_result_detail != null && message.hasOwnProperty("purchase_result_detail"))
                object.purchase_result_detail = message.purchase_result_detail;
            if (message.transid != null && message.hasOwnProperty("transid"))
                if (typeof message.transid === "number")
                    object.transid = options.longs === String ? String(message.transid) : message.transid;
                else
                    object.transid = options.longs === String ? $util.Long.prototype.toString.call(message.transid) : options.longs === Number ? new $util.LongBits(message.transid.low >>> 0, message.transid.high >>> 0).toNumber() : message.transid;
            return object;
        };
    
        /**
         * Converts this CMsgAMAddFreeLicenseResponse to JSON.
         * @function toJSON
         * @memberof CMsgAMAddFreeLicenseResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMAddFreeLicenseResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMAddFreeLicenseResponse;
    })();
    
    $root.CGCMsgGetIPLocation = (function() {
    
        /**
         * Properties of a CGCMsgGetIPLocation.
         * @exports ICGCMsgGetIPLocation
         * @interface ICGCMsgGetIPLocation
         * @property {Array.<number>|null} [ips] CGCMsgGetIPLocation ips
         */
    
        /**
         * Constructs a new CGCMsgGetIPLocation.
         * @exports CGCMsgGetIPLocation
         * @classdesc Represents a CGCMsgGetIPLocation.
         * @implements ICGCMsgGetIPLocation
         * @constructor
         * @param {ICGCMsgGetIPLocation=} [properties] Properties to set
         */
        function CGCMsgGetIPLocation(properties) {
            this.ips = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgGetIPLocation ips.
         * @member {Array.<number>} ips
         * @memberof CGCMsgGetIPLocation
         * @instance
         */
        CGCMsgGetIPLocation.prototype.ips = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgGetIPLocation instance using the specified properties.
         * @function create
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {ICGCMsgGetIPLocation=} [properties] Properties to set
         * @returns {CGCMsgGetIPLocation} CGCMsgGetIPLocation instance
         */
        CGCMsgGetIPLocation.create = function create(properties) {
            return new CGCMsgGetIPLocation(properties);
        };
    
        /**
         * Encodes the specified CGCMsgGetIPLocation message. Does not implicitly {@link CGCMsgGetIPLocation.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {ICGCMsgGetIPLocation} message CGCMsgGetIPLocation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetIPLocation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ips != null && message.ips.length)
                for (var i = 0; i < message.ips.length; ++i)
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.ips[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgGetIPLocation message, length delimited. Does not implicitly {@link CGCMsgGetIPLocation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {ICGCMsgGetIPLocation} message CGCMsgGetIPLocation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetIPLocation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgGetIPLocation message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgGetIPLocation} CGCMsgGetIPLocation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetIPLocation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgGetIPLocation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ips && message.ips.length))
                        message.ips = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.ips.push(reader.fixed32());
                    } else
                        message.ips.push(reader.fixed32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgGetIPLocation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgGetIPLocation} CGCMsgGetIPLocation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetIPLocation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgGetIPLocation message.
         * @function verify
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgGetIPLocation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ips != null && message.hasOwnProperty("ips")) {
                if (!Array.isArray(message.ips))
                    return "ips: array expected";
                for (var i = 0; i < message.ips.length; ++i)
                    if (!$util.isInteger(message.ips[i]))
                        return "ips: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgGetIPLocation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgGetIPLocation} CGCMsgGetIPLocation
         */
        CGCMsgGetIPLocation.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgGetIPLocation)
                return object;
            var message = new $root.CGCMsgGetIPLocation();
            if (object.ips) {
                if (!Array.isArray(object.ips))
                    throw TypeError(".CGCMsgGetIPLocation.ips: array expected");
                message.ips = [];
                for (var i = 0; i < object.ips.length; ++i)
                    message.ips[i] = object.ips[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgGetIPLocation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgGetIPLocation
         * @static
         * @param {CGCMsgGetIPLocation} message CGCMsgGetIPLocation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgGetIPLocation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ips = [];
            if (message.ips && message.ips.length) {
                object.ips = [];
                for (var j = 0; j < message.ips.length; ++j)
                    object.ips[j] = message.ips[j];
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgGetIPLocation to JSON.
         * @function toJSON
         * @memberof CGCMsgGetIPLocation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgGetIPLocation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgGetIPLocation;
    })();
    
    $root.CIPLocationInfo = (function() {
    
        /**
         * Properties of a CIPLocationInfo.
         * @exports ICIPLocationInfo
         * @interface ICIPLocationInfo
         * @property {number|null} [ip] CIPLocationInfo ip
         * @property {number|null} [latitude] CIPLocationInfo latitude
         * @property {number|null} [longitude] CIPLocationInfo longitude
         * @property {string|null} [country] CIPLocationInfo country
         * @property {string|null} [state] CIPLocationInfo state
         * @property {string|null} [city] CIPLocationInfo city
         */
    
        /**
         * Constructs a new CIPLocationInfo.
         * @exports CIPLocationInfo
         * @classdesc Represents a CIPLocationInfo.
         * @implements ICIPLocationInfo
         * @constructor
         * @param {ICIPLocationInfo=} [properties] Properties to set
         */
        function CIPLocationInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CIPLocationInfo ip.
         * @member {number} ip
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.ip = 0;
    
        /**
         * CIPLocationInfo latitude.
         * @member {number} latitude
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.latitude = 0;
    
        /**
         * CIPLocationInfo longitude.
         * @member {number} longitude
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.longitude = 0;
    
        /**
         * CIPLocationInfo country.
         * @member {string} country
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.country = "";
    
        /**
         * CIPLocationInfo state.
         * @member {string} state
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.state = "";
    
        /**
         * CIPLocationInfo city.
         * @member {string} city
         * @memberof CIPLocationInfo
         * @instance
         */
        CIPLocationInfo.prototype.city = "";
    
        /**
         * Creates a new CIPLocationInfo instance using the specified properties.
         * @function create
         * @memberof CIPLocationInfo
         * @static
         * @param {ICIPLocationInfo=} [properties] Properties to set
         * @returns {CIPLocationInfo} CIPLocationInfo instance
         */
        CIPLocationInfo.create = function create(properties) {
            return new CIPLocationInfo(properties);
        };
    
        /**
         * Encodes the specified CIPLocationInfo message. Does not implicitly {@link CIPLocationInfo.verify|verify} messages.
         * @function encode
         * @memberof CIPLocationInfo
         * @static
         * @param {ICIPLocationInfo} message CIPLocationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CIPLocationInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ip != null && message.hasOwnProperty("ip"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ip);
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.latitude);
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                writer.uint32(/* id 3, wireType 5 =*/29).float(message.longitude);
            if (message.country != null && message.hasOwnProperty("country"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.country);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.state);
            if (message.city != null && message.hasOwnProperty("city"))
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.city);
            return writer;
        };
    
        /**
         * Encodes the specified CIPLocationInfo message, length delimited. Does not implicitly {@link CIPLocationInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CIPLocationInfo
         * @static
         * @param {ICIPLocationInfo} message CIPLocationInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CIPLocationInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CIPLocationInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CIPLocationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CIPLocationInfo} CIPLocationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CIPLocationInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CIPLocationInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ip = reader.uint32();
                    break;
                case 2:
                    message.latitude = reader.float();
                    break;
                case 3:
                    message.longitude = reader.float();
                    break;
                case 4:
                    message.country = reader.string();
                    break;
                case 5:
                    message.state = reader.string();
                    break;
                case 6:
                    message.city = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CIPLocationInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CIPLocationInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CIPLocationInfo} CIPLocationInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CIPLocationInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CIPLocationInfo message.
         * @function verify
         * @memberof CIPLocationInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CIPLocationInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ip != null && message.hasOwnProperty("ip"))
                if (!$util.isInteger(message.ip))
                    return "ip: integer expected";
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                if (typeof message.latitude !== "number")
                    return "latitude: number expected";
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                if (typeof message.longitude !== "number")
                    return "longitude: number expected";
            if (message.country != null && message.hasOwnProperty("country"))
                if (!$util.isString(message.country))
                    return "country: string expected";
            if (message.state != null && message.hasOwnProperty("state"))
                if (!$util.isString(message.state))
                    return "state: string expected";
            if (message.city != null && message.hasOwnProperty("city"))
                if (!$util.isString(message.city))
                    return "city: string expected";
            return null;
        };
    
        /**
         * Creates a CIPLocationInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CIPLocationInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CIPLocationInfo} CIPLocationInfo
         */
        CIPLocationInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CIPLocationInfo)
                return object;
            var message = new $root.CIPLocationInfo();
            if (object.ip != null)
                message.ip = object.ip >>> 0;
            if (object.latitude != null)
                message.latitude = Number(object.latitude);
            if (object.longitude != null)
                message.longitude = Number(object.longitude);
            if (object.country != null)
                message.country = String(object.country);
            if (object.state != null)
                message.state = String(object.state);
            if (object.city != null)
                message.city = String(object.city);
            return message;
        };
    
        /**
         * Creates a plain object from a CIPLocationInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CIPLocationInfo
         * @static
         * @param {CIPLocationInfo} message CIPLocationInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CIPLocationInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ip = 0;
                object.latitude = 0;
                object.longitude = 0;
                object.country = "";
                object.state = "";
                object.city = "";
            }
            if (message.ip != null && message.hasOwnProperty("ip"))
                object.ip = message.ip;
            if (message.latitude != null && message.hasOwnProperty("latitude"))
                object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
            if (message.longitude != null && message.hasOwnProperty("longitude"))
                object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
            if (message.country != null && message.hasOwnProperty("country"))
                object.country = message.country;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = message.state;
            if (message.city != null && message.hasOwnProperty("city"))
                object.city = message.city;
            return object;
        };
    
        /**
         * Converts this CIPLocationInfo to JSON.
         * @function toJSON
         * @memberof CIPLocationInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CIPLocationInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CIPLocationInfo;
    })();
    
    $root.CGCMsgGetIPLocationResponse = (function() {
    
        /**
         * Properties of a CGCMsgGetIPLocationResponse.
         * @exports ICGCMsgGetIPLocationResponse
         * @interface ICGCMsgGetIPLocationResponse
         * @property {Array.<ICIPLocationInfo>|null} [infos] CGCMsgGetIPLocationResponse infos
         */
    
        /**
         * Constructs a new CGCMsgGetIPLocationResponse.
         * @exports CGCMsgGetIPLocationResponse
         * @classdesc Represents a CGCMsgGetIPLocationResponse.
         * @implements ICGCMsgGetIPLocationResponse
         * @constructor
         * @param {ICGCMsgGetIPLocationResponse=} [properties] Properties to set
         */
        function CGCMsgGetIPLocationResponse(properties) {
            this.infos = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgGetIPLocationResponse infos.
         * @member {Array.<ICIPLocationInfo>} infos
         * @memberof CGCMsgGetIPLocationResponse
         * @instance
         */
        CGCMsgGetIPLocationResponse.prototype.infos = $util.emptyArray;
    
        /**
         * Creates a new CGCMsgGetIPLocationResponse instance using the specified properties.
         * @function create
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {ICGCMsgGetIPLocationResponse=} [properties] Properties to set
         * @returns {CGCMsgGetIPLocationResponse} CGCMsgGetIPLocationResponse instance
         */
        CGCMsgGetIPLocationResponse.create = function create(properties) {
            return new CGCMsgGetIPLocationResponse(properties);
        };
    
        /**
         * Encodes the specified CGCMsgGetIPLocationResponse message. Does not implicitly {@link CGCMsgGetIPLocationResponse.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {ICGCMsgGetIPLocationResponse} message CGCMsgGetIPLocationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetIPLocationResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.infos != null && message.infos.length)
                for (var i = 0; i < message.infos.length; ++i)
                    $root.CIPLocationInfo.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgGetIPLocationResponse message, length delimited. Does not implicitly {@link CGCMsgGetIPLocationResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {ICGCMsgGetIPLocationResponse} message CGCMsgGetIPLocationResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetIPLocationResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgGetIPLocationResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgGetIPLocationResponse} CGCMsgGetIPLocationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetIPLocationResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgGetIPLocationResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.infos && message.infos.length))
                        message.infos = [];
                    message.infos.push($root.CIPLocationInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgGetIPLocationResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgGetIPLocationResponse} CGCMsgGetIPLocationResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetIPLocationResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgGetIPLocationResponse message.
         * @function verify
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgGetIPLocationResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.infos != null && message.hasOwnProperty("infos")) {
                if (!Array.isArray(message.infos))
                    return "infos: array expected";
                for (var i = 0; i < message.infos.length; ++i) {
                    var error = $root.CIPLocationInfo.verify(message.infos[i]);
                    if (error)
                        return "infos." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CGCMsgGetIPLocationResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgGetIPLocationResponse} CGCMsgGetIPLocationResponse
         */
        CGCMsgGetIPLocationResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgGetIPLocationResponse)
                return object;
            var message = new $root.CGCMsgGetIPLocationResponse();
            if (object.infos) {
                if (!Array.isArray(object.infos))
                    throw TypeError(".CGCMsgGetIPLocationResponse.infos: array expected");
                message.infos = [];
                for (var i = 0; i < object.infos.length; ++i) {
                    if (typeof object.infos[i] !== "object")
                        throw TypeError(".CGCMsgGetIPLocationResponse.infos: object expected");
                    message.infos[i] = $root.CIPLocationInfo.fromObject(object.infos[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgGetIPLocationResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgGetIPLocationResponse
         * @static
         * @param {CGCMsgGetIPLocationResponse} message CGCMsgGetIPLocationResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgGetIPLocationResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.infos = [];
            if (message.infos && message.infos.length) {
                object.infos = [];
                for (var j = 0; j < message.infos.length; ++j)
                    object.infos[j] = $root.CIPLocationInfo.toObject(message.infos[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CGCMsgGetIPLocationResponse to JSON.
         * @function toJSON
         * @memberof CGCMsgGetIPLocationResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgGetIPLocationResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgGetIPLocationResponse;
    })();
    
    $root.CGCMsgSystemStatsSchema = (function() {
    
        /**
         * Properties of a CGCMsgSystemStatsSchema.
         * @exports ICGCMsgSystemStatsSchema
         * @interface ICGCMsgSystemStatsSchema
         * @property {number|null} [gc_app_id] CGCMsgSystemStatsSchema gc_app_id
         * @property {Uint8Array|null} [schema_kv] CGCMsgSystemStatsSchema schema_kv
         */
    
        /**
         * Constructs a new CGCMsgSystemStatsSchema.
         * @exports CGCMsgSystemStatsSchema
         * @classdesc Represents a CGCMsgSystemStatsSchema.
         * @implements ICGCMsgSystemStatsSchema
         * @constructor
         * @param {ICGCMsgSystemStatsSchema=} [properties] Properties to set
         */
        function CGCMsgSystemStatsSchema(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgSystemStatsSchema gc_app_id.
         * @member {number} gc_app_id
         * @memberof CGCMsgSystemStatsSchema
         * @instance
         */
        CGCMsgSystemStatsSchema.prototype.gc_app_id = 0;
    
        /**
         * CGCMsgSystemStatsSchema schema_kv.
         * @member {Uint8Array} schema_kv
         * @memberof CGCMsgSystemStatsSchema
         * @instance
         */
        CGCMsgSystemStatsSchema.prototype.schema_kv = $util.newBuffer([]);
    
        /**
         * Creates a new CGCMsgSystemStatsSchema instance using the specified properties.
         * @function create
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {ICGCMsgSystemStatsSchema=} [properties] Properties to set
         * @returns {CGCMsgSystemStatsSchema} CGCMsgSystemStatsSchema instance
         */
        CGCMsgSystemStatsSchema.create = function create(properties) {
            return new CGCMsgSystemStatsSchema(properties);
        };
    
        /**
         * Encodes the specified CGCMsgSystemStatsSchema message. Does not implicitly {@link CGCMsgSystemStatsSchema.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {ICGCMsgSystemStatsSchema} message CGCMsgSystemStatsSchema message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSystemStatsSchema.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gc_app_id);
            if (message.schema_kv != null && message.hasOwnProperty("schema_kv"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.schema_kv);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgSystemStatsSchema message, length delimited. Does not implicitly {@link CGCMsgSystemStatsSchema.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {ICGCMsgSystemStatsSchema} message CGCMsgSystemStatsSchema message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgSystemStatsSchema.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgSystemStatsSchema message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgSystemStatsSchema} CGCMsgSystemStatsSchema
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSystemStatsSchema.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgSystemStatsSchema();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gc_app_id = reader.uint32();
                    break;
                case 2:
                    message.schema_kv = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgSystemStatsSchema message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgSystemStatsSchema} CGCMsgSystemStatsSchema
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgSystemStatsSchema.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgSystemStatsSchema message.
         * @function verify
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgSystemStatsSchema.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                if (!$util.isInteger(message.gc_app_id))
                    return "gc_app_id: integer expected";
            if (message.schema_kv != null && message.hasOwnProperty("schema_kv"))
                if (!(message.schema_kv && typeof message.schema_kv.length === "number" || $util.isString(message.schema_kv)))
                    return "schema_kv: buffer expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgSystemStatsSchema message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgSystemStatsSchema} CGCMsgSystemStatsSchema
         */
        CGCMsgSystemStatsSchema.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgSystemStatsSchema)
                return object;
            var message = new $root.CGCMsgSystemStatsSchema();
            if (object.gc_app_id != null)
                message.gc_app_id = object.gc_app_id >>> 0;
            if (object.schema_kv != null)
                if (typeof object.schema_kv === "string")
                    $util.base64.decode(object.schema_kv, message.schema_kv = $util.newBuffer($util.base64.length(object.schema_kv)), 0);
                else if (object.schema_kv.length)
                    message.schema_kv = object.schema_kv;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgSystemStatsSchema message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgSystemStatsSchema
         * @static
         * @param {CGCMsgSystemStatsSchema} message CGCMsgSystemStatsSchema
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgSystemStatsSchema.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gc_app_id = 0;
                if (options.bytes === String)
                    object.schema_kv = "";
                else {
                    object.schema_kv = [];
                    if (options.bytes !== Array)
                        object.schema_kv = $util.newBuffer(object.schema_kv);
                }
            }
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                object.gc_app_id = message.gc_app_id;
            if (message.schema_kv != null && message.hasOwnProperty("schema_kv"))
                object.schema_kv = options.bytes === String ? $util.base64.encode(message.schema_kv, 0, message.schema_kv.length) : options.bytes === Array ? Array.prototype.slice.call(message.schema_kv) : message.schema_kv;
            return object;
        };
    
        /**
         * Converts this CGCMsgSystemStatsSchema to JSON.
         * @function toJSON
         * @memberof CGCMsgSystemStatsSchema
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgSystemStatsSchema.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgSystemStatsSchema;
    })();
    
    $root.CGCMsgGetSystemStats = (function() {
    
        /**
         * Properties of a CGCMsgGetSystemStats.
         * @exports ICGCMsgGetSystemStats
         * @interface ICGCMsgGetSystemStats
         */
    
        /**
         * Constructs a new CGCMsgGetSystemStats.
         * @exports CGCMsgGetSystemStats
         * @classdesc Represents a CGCMsgGetSystemStats.
         * @implements ICGCMsgGetSystemStats
         * @constructor
         * @param {ICGCMsgGetSystemStats=} [properties] Properties to set
         */
        function CGCMsgGetSystemStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CGCMsgGetSystemStats instance using the specified properties.
         * @function create
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {ICGCMsgGetSystemStats=} [properties] Properties to set
         * @returns {CGCMsgGetSystemStats} CGCMsgGetSystemStats instance
         */
        CGCMsgGetSystemStats.create = function create(properties) {
            return new CGCMsgGetSystemStats(properties);
        };
    
        /**
         * Encodes the specified CGCMsgGetSystemStats message. Does not implicitly {@link CGCMsgGetSystemStats.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {ICGCMsgGetSystemStats} message CGCMsgGetSystemStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetSystemStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgGetSystemStats message, length delimited. Does not implicitly {@link CGCMsgGetSystemStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {ICGCMsgGetSystemStats} message CGCMsgGetSystemStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetSystemStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgGetSystemStats message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgGetSystemStats} CGCMsgGetSystemStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetSystemStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgGetSystemStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgGetSystemStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgGetSystemStats} CGCMsgGetSystemStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetSystemStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgGetSystemStats message.
         * @function verify
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgGetSystemStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgGetSystemStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgGetSystemStats} CGCMsgGetSystemStats
         */
        CGCMsgGetSystemStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgGetSystemStats)
                return object;
            return new $root.CGCMsgGetSystemStats();
        };
    
        /**
         * Creates a plain object from a CGCMsgGetSystemStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgGetSystemStats
         * @static
         * @param {CGCMsgGetSystemStats} message CGCMsgGetSystemStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgGetSystemStats.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CGCMsgGetSystemStats to JSON.
         * @function toJSON
         * @memberof CGCMsgGetSystemStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgGetSystemStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgGetSystemStats;
    })();
    
    $root.CGCMsgGetSystemStatsResponse = (function() {
    
        /**
         * Properties of a CGCMsgGetSystemStatsResponse.
         * @exports ICGCMsgGetSystemStatsResponse
         * @interface ICGCMsgGetSystemStatsResponse
         * @property {number|null} [gc_app_id] CGCMsgGetSystemStatsResponse gc_app_id
         * @property {Uint8Array|null} [stats_kv] CGCMsgGetSystemStatsResponse stats_kv
         * @property {number|null} [active_jobs] CGCMsgGetSystemStatsResponse active_jobs
         * @property {number|null} [yielding_jobs] CGCMsgGetSystemStatsResponse yielding_jobs
         * @property {number|null} [user_sessions] CGCMsgGetSystemStatsResponse user_sessions
         * @property {number|null} [game_server_sessions] CGCMsgGetSystemStatsResponse game_server_sessions
         * @property {number|null} [socaches] CGCMsgGetSystemStatsResponse socaches
         * @property {number|null} [socaches_to_unload] CGCMsgGetSystemStatsResponse socaches_to_unload
         * @property {number|null} [socaches_loading] CGCMsgGetSystemStatsResponse socaches_loading
         * @property {number|null} [writeback_queue] CGCMsgGetSystemStatsResponse writeback_queue
         * @property {number|null} [steamid_locks] CGCMsgGetSystemStatsResponse steamid_locks
         * @property {number|null} [logon_queue] CGCMsgGetSystemStatsResponse logon_queue
         * @property {number|null} [logon_jobs] CGCMsgGetSystemStatsResponse logon_jobs
         */
    
        /**
         * Constructs a new CGCMsgGetSystemStatsResponse.
         * @exports CGCMsgGetSystemStatsResponse
         * @classdesc Represents a CGCMsgGetSystemStatsResponse.
         * @implements ICGCMsgGetSystemStatsResponse
         * @constructor
         * @param {ICGCMsgGetSystemStatsResponse=} [properties] Properties to set
         */
        function CGCMsgGetSystemStatsResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCMsgGetSystemStatsResponse gc_app_id.
         * @member {number} gc_app_id
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.gc_app_id = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse stats_kv.
         * @member {Uint8Array} stats_kv
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.stats_kv = $util.newBuffer([]);
    
        /**
         * CGCMsgGetSystemStatsResponse active_jobs.
         * @member {number} active_jobs
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.active_jobs = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse yielding_jobs.
         * @member {number} yielding_jobs
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.yielding_jobs = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse user_sessions.
         * @member {number} user_sessions
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.user_sessions = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse game_server_sessions.
         * @member {number} game_server_sessions
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.game_server_sessions = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse socaches.
         * @member {number} socaches
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.socaches = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse socaches_to_unload.
         * @member {number} socaches_to_unload
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.socaches_to_unload = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse socaches_loading.
         * @member {number} socaches_loading
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.socaches_loading = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse writeback_queue.
         * @member {number} writeback_queue
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.writeback_queue = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse steamid_locks.
         * @member {number} steamid_locks
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.steamid_locks = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse logon_queue.
         * @member {number} logon_queue
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.logon_queue = 0;
    
        /**
         * CGCMsgGetSystemStatsResponse logon_jobs.
         * @member {number} logon_jobs
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         */
        CGCMsgGetSystemStatsResponse.prototype.logon_jobs = 0;
    
        /**
         * Creates a new CGCMsgGetSystemStatsResponse instance using the specified properties.
         * @function create
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {ICGCMsgGetSystemStatsResponse=} [properties] Properties to set
         * @returns {CGCMsgGetSystemStatsResponse} CGCMsgGetSystemStatsResponse instance
         */
        CGCMsgGetSystemStatsResponse.create = function create(properties) {
            return new CGCMsgGetSystemStatsResponse(properties);
        };
    
        /**
         * Encodes the specified CGCMsgGetSystemStatsResponse message. Does not implicitly {@link CGCMsgGetSystemStatsResponse.verify|verify} messages.
         * @function encode
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {ICGCMsgGetSystemStatsResponse} message CGCMsgGetSystemStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetSystemStatsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.gc_app_id);
            if (message.stats_kv != null && message.hasOwnProperty("stats_kv"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.stats_kv);
            if (message.active_jobs != null && message.hasOwnProperty("active_jobs"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.active_jobs);
            if (message.yielding_jobs != null && message.hasOwnProperty("yielding_jobs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.yielding_jobs);
            if (message.user_sessions != null && message.hasOwnProperty("user_sessions"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.user_sessions);
            if (message.game_server_sessions != null && message.hasOwnProperty("game_server_sessions"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.game_server_sessions);
            if (message.socaches != null && message.hasOwnProperty("socaches"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.socaches);
            if (message.socaches_to_unload != null && message.hasOwnProperty("socaches_to_unload"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.socaches_to_unload);
            if (message.socaches_loading != null && message.hasOwnProperty("socaches_loading"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.socaches_loading);
            if (message.writeback_queue != null && message.hasOwnProperty("writeback_queue"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.writeback_queue);
            if (message.steamid_locks != null && message.hasOwnProperty("steamid_locks"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.steamid_locks);
            if (message.logon_queue != null && message.hasOwnProperty("logon_queue"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.logon_queue);
            if (message.logon_jobs != null && message.hasOwnProperty("logon_jobs"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.logon_jobs);
            return writer;
        };
    
        /**
         * Encodes the specified CGCMsgGetSystemStatsResponse message, length delimited. Does not implicitly {@link CGCMsgGetSystemStatsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {ICGCMsgGetSystemStatsResponse} message CGCMsgGetSystemStatsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCMsgGetSystemStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCMsgGetSystemStatsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCMsgGetSystemStatsResponse} CGCMsgGetSystemStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetSystemStatsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCMsgGetSystemStatsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gc_app_id = reader.uint32();
                    break;
                case 2:
                    message.stats_kv = reader.bytes();
                    break;
                case 3:
                    message.active_jobs = reader.uint32();
                    break;
                case 4:
                    message.yielding_jobs = reader.uint32();
                    break;
                case 5:
                    message.user_sessions = reader.uint32();
                    break;
                case 6:
                    message.game_server_sessions = reader.uint32();
                    break;
                case 7:
                    message.socaches = reader.uint32();
                    break;
                case 8:
                    message.socaches_to_unload = reader.uint32();
                    break;
                case 9:
                    message.socaches_loading = reader.uint32();
                    break;
                case 10:
                    message.writeback_queue = reader.uint32();
                    break;
                case 11:
                    message.steamid_locks = reader.uint32();
                    break;
                case 12:
                    message.logon_queue = reader.uint32();
                    break;
                case 13:
                    message.logon_jobs = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCMsgGetSystemStatsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCMsgGetSystemStatsResponse} CGCMsgGetSystemStatsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCMsgGetSystemStatsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCMsgGetSystemStatsResponse message.
         * @function verify
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCMsgGetSystemStatsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                if (!$util.isInteger(message.gc_app_id))
                    return "gc_app_id: integer expected";
            if (message.stats_kv != null && message.hasOwnProperty("stats_kv"))
                if (!(message.stats_kv && typeof message.stats_kv.length === "number" || $util.isString(message.stats_kv)))
                    return "stats_kv: buffer expected";
            if (message.active_jobs != null && message.hasOwnProperty("active_jobs"))
                if (!$util.isInteger(message.active_jobs))
                    return "active_jobs: integer expected";
            if (message.yielding_jobs != null && message.hasOwnProperty("yielding_jobs"))
                if (!$util.isInteger(message.yielding_jobs))
                    return "yielding_jobs: integer expected";
            if (message.user_sessions != null && message.hasOwnProperty("user_sessions"))
                if (!$util.isInteger(message.user_sessions))
                    return "user_sessions: integer expected";
            if (message.game_server_sessions != null && message.hasOwnProperty("game_server_sessions"))
                if (!$util.isInteger(message.game_server_sessions))
                    return "game_server_sessions: integer expected";
            if (message.socaches != null && message.hasOwnProperty("socaches"))
                if (!$util.isInteger(message.socaches))
                    return "socaches: integer expected";
            if (message.socaches_to_unload != null && message.hasOwnProperty("socaches_to_unload"))
                if (!$util.isInteger(message.socaches_to_unload))
                    return "socaches_to_unload: integer expected";
            if (message.socaches_loading != null && message.hasOwnProperty("socaches_loading"))
                if (!$util.isInteger(message.socaches_loading))
                    return "socaches_loading: integer expected";
            if (message.writeback_queue != null && message.hasOwnProperty("writeback_queue"))
                if (!$util.isInteger(message.writeback_queue))
                    return "writeback_queue: integer expected";
            if (message.steamid_locks != null && message.hasOwnProperty("steamid_locks"))
                if (!$util.isInteger(message.steamid_locks))
                    return "steamid_locks: integer expected";
            if (message.logon_queue != null && message.hasOwnProperty("logon_queue"))
                if (!$util.isInteger(message.logon_queue))
                    return "logon_queue: integer expected";
            if (message.logon_jobs != null && message.hasOwnProperty("logon_jobs"))
                if (!$util.isInteger(message.logon_jobs))
                    return "logon_jobs: integer expected";
            return null;
        };
    
        /**
         * Creates a CGCMsgGetSystemStatsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCMsgGetSystemStatsResponse} CGCMsgGetSystemStatsResponse
         */
        CGCMsgGetSystemStatsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCMsgGetSystemStatsResponse)
                return object;
            var message = new $root.CGCMsgGetSystemStatsResponse();
            if (object.gc_app_id != null)
                message.gc_app_id = object.gc_app_id >>> 0;
            if (object.stats_kv != null)
                if (typeof object.stats_kv === "string")
                    $util.base64.decode(object.stats_kv, message.stats_kv = $util.newBuffer($util.base64.length(object.stats_kv)), 0);
                else if (object.stats_kv.length)
                    message.stats_kv = object.stats_kv;
            if (object.active_jobs != null)
                message.active_jobs = object.active_jobs >>> 0;
            if (object.yielding_jobs != null)
                message.yielding_jobs = object.yielding_jobs >>> 0;
            if (object.user_sessions != null)
                message.user_sessions = object.user_sessions >>> 0;
            if (object.game_server_sessions != null)
                message.game_server_sessions = object.game_server_sessions >>> 0;
            if (object.socaches != null)
                message.socaches = object.socaches >>> 0;
            if (object.socaches_to_unload != null)
                message.socaches_to_unload = object.socaches_to_unload >>> 0;
            if (object.socaches_loading != null)
                message.socaches_loading = object.socaches_loading >>> 0;
            if (object.writeback_queue != null)
                message.writeback_queue = object.writeback_queue >>> 0;
            if (object.steamid_locks != null)
                message.steamid_locks = object.steamid_locks >>> 0;
            if (object.logon_queue != null)
                message.logon_queue = object.logon_queue >>> 0;
            if (object.logon_jobs != null)
                message.logon_jobs = object.logon_jobs >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCMsgGetSystemStatsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCMsgGetSystemStatsResponse
         * @static
         * @param {CGCMsgGetSystemStatsResponse} message CGCMsgGetSystemStatsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCMsgGetSystemStatsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gc_app_id = 0;
                if (options.bytes === String)
                    object.stats_kv = "";
                else {
                    object.stats_kv = [];
                    if (options.bytes !== Array)
                        object.stats_kv = $util.newBuffer(object.stats_kv);
                }
                object.active_jobs = 0;
                object.yielding_jobs = 0;
                object.user_sessions = 0;
                object.game_server_sessions = 0;
                object.socaches = 0;
                object.socaches_to_unload = 0;
                object.socaches_loading = 0;
                object.writeback_queue = 0;
                object.steamid_locks = 0;
                object.logon_queue = 0;
                object.logon_jobs = 0;
            }
            if (message.gc_app_id != null && message.hasOwnProperty("gc_app_id"))
                object.gc_app_id = message.gc_app_id;
            if (message.stats_kv != null && message.hasOwnProperty("stats_kv"))
                object.stats_kv = options.bytes === String ? $util.base64.encode(message.stats_kv, 0, message.stats_kv.length) : options.bytes === Array ? Array.prototype.slice.call(message.stats_kv) : message.stats_kv;
            if (message.active_jobs != null && message.hasOwnProperty("active_jobs"))
                object.active_jobs = message.active_jobs;
            if (message.yielding_jobs != null && message.hasOwnProperty("yielding_jobs"))
                object.yielding_jobs = message.yielding_jobs;
            if (message.user_sessions != null && message.hasOwnProperty("user_sessions"))
                object.user_sessions = message.user_sessions;
            if (message.game_server_sessions != null && message.hasOwnProperty("game_server_sessions"))
                object.game_server_sessions = message.game_server_sessions;
            if (message.socaches != null && message.hasOwnProperty("socaches"))
                object.socaches = message.socaches;
            if (message.socaches_to_unload != null && message.hasOwnProperty("socaches_to_unload"))
                object.socaches_to_unload = message.socaches_to_unload;
            if (message.socaches_loading != null && message.hasOwnProperty("socaches_loading"))
                object.socaches_loading = message.socaches_loading;
            if (message.writeback_queue != null && message.hasOwnProperty("writeback_queue"))
                object.writeback_queue = message.writeback_queue;
            if (message.steamid_locks != null && message.hasOwnProperty("steamid_locks"))
                object.steamid_locks = message.steamid_locks;
            if (message.logon_queue != null && message.hasOwnProperty("logon_queue"))
                object.logon_queue = message.logon_queue;
            if (message.logon_jobs != null && message.hasOwnProperty("logon_jobs"))
                object.logon_jobs = message.logon_jobs;
            return object;
        };
    
        /**
         * Converts this CGCMsgGetSystemStatsResponse to JSON.
         * @function toJSON
         * @memberof CGCMsgGetSystemStatsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCMsgGetSystemStatsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCMsgGetSystemStatsResponse;
    })();
    
    $root.CMsgAMSendEmail = (function() {
    
        /**
         * Properties of a CMsgAMSendEmail.
         * @exports ICMsgAMSendEmail
         * @interface ICMsgAMSendEmail
         * @property {number|Long|null} [steamid] CMsgAMSendEmail steamid
         * @property {number|null} [email_msg_type] CMsgAMSendEmail email_msg_type
         * @property {number|null} [email_format] CMsgAMSendEmail email_format
         * @property {Array.<CMsgAMSendEmail.IPersonaNameReplacementToken>|null} [persona_name_tokens] CMsgAMSendEmail persona_name_tokens
         * @property {number|null} [source_gc] CMsgAMSendEmail source_gc
         * @property {Array.<CMsgAMSendEmail.IReplacementToken>|null} [tokens] CMsgAMSendEmail tokens
         */
    
        /**
         * Constructs a new CMsgAMSendEmail.
         * @exports CMsgAMSendEmail
         * @classdesc Represents a CMsgAMSendEmail.
         * @implements ICMsgAMSendEmail
         * @constructor
         * @param {ICMsgAMSendEmail=} [properties] Properties to set
         */
        function CMsgAMSendEmail(properties) {
            this.persona_name_tokens = [];
            this.tokens = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMSendEmail steamid.
         * @member {number|Long} steamid
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMSendEmail email_msg_type.
         * @member {number} email_msg_type
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.email_msg_type = 0;
    
        /**
         * CMsgAMSendEmail email_format.
         * @member {number} email_format
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.email_format = 0;
    
        /**
         * CMsgAMSendEmail persona_name_tokens.
         * @member {Array.<CMsgAMSendEmail.IPersonaNameReplacementToken>} persona_name_tokens
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.persona_name_tokens = $util.emptyArray;
    
        /**
         * CMsgAMSendEmail source_gc.
         * @member {number} source_gc
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.source_gc = 0;
    
        /**
         * CMsgAMSendEmail tokens.
         * @member {Array.<CMsgAMSendEmail.IReplacementToken>} tokens
         * @memberof CMsgAMSendEmail
         * @instance
         */
        CMsgAMSendEmail.prototype.tokens = $util.emptyArray;
    
        /**
         * Creates a new CMsgAMSendEmail instance using the specified properties.
         * @function create
         * @memberof CMsgAMSendEmail
         * @static
         * @param {ICMsgAMSendEmail=} [properties] Properties to set
         * @returns {CMsgAMSendEmail} CMsgAMSendEmail instance
         */
        CMsgAMSendEmail.create = function create(properties) {
            return new CMsgAMSendEmail(properties);
        };
    
        /**
         * Encodes the specified CMsgAMSendEmail message. Does not implicitly {@link CMsgAMSendEmail.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMSendEmail
         * @static
         * @param {ICMsgAMSendEmail} message CMsgAMSendEmail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMSendEmail.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.email_msg_type);
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.email_format);
            if (message.persona_name_tokens != null && message.persona_name_tokens.length)
                for (var i = 0; i < message.persona_name_tokens.length; ++i)
                    $root.CMsgAMSendEmail.PersonaNameReplacementToken.encode(message.persona_name_tokens[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.source_gc != null && message.hasOwnProperty("source_gc"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.source_gc);
            if (message.tokens != null && message.tokens.length)
                for (var i = 0; i < message.tokens.length; ++i)
                    $root.CMsgAMSendEmail.ReplacementToken.encode(message.tokens[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMSendEmail message, length delimited. Does not implicitly {@link CMsgAMSendEmail.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMSendEmail
         * @static
         * @param {ICMsgAMSendEmail} message CMsgAMSendEmail message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMSendEmail.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMSendEmail message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMSendEmail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMSendEmail} CMsgAMSendEmail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMSendEmail.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMSendEmail();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.email_msg_type = reader.uint32();
                    break;
                case 3:
                    message.email_format = reader.uint32();
                    break;
                case 5:
                    if (!(message.persona_name_tokens && message.persona_name_tokens.length))
                        message.persona_name_tokens = [];
                    message.persona_name_tokens.push($root.CMsgAMSendEmail.PersonaNameReplacementToken.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.source_gc = reader.uint32();
                    break;
                case 7:
                    if (!(message.tokens && message.tokens.length))
                        message.tokens = [];
                    message.tokens.push($root.CMsgAMSendEmail.ReplacementToken.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMSendEmail message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMSendEmail
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMSendEmail} CMsgAMSendEmail
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMSendEmail.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMSendEmail message.
         * @function verify
         * @memberof CMsgAMSendEmail
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMSendEmail.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                if (!$util.isInteger(message.email_msg_type))
                    return "email_msg_type: integer expected";
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                if (!$util.isInteger(message.email_format))
                    return "email_format: integer expected";
            if (message.persona_name_tokens != null && message.hasOwnProperty("persona_name_tokens")) {
                if (!Array.isArray(message.persona_name_tokens))
                    return "persona_name_tokens: array expected";
                for (var i = 0; i < message.persona_name_tokens.length; ++i) {
                    var error = $root.CMsgAMSendEmail.PersonaNameReplacementToken.verify(message.persona_name_tokens[i]);
                    if (error)
                        return "persona_name_tokens." + error;
                }
            }
            if (message.source_gc != null && message.hasOwnProperty("source_gc"))
                if (!$util.isInteger(message.source_gc))
                    return "source_gc: integer expected";
            if (message.tokens != null && message.hasOwnProperty("tokens")) {
                if (!Array.isArray(message.tokens))
                    return "tokens: array expected";
                for (var i = 0; i < message.tokens.length; ++i) {
                    var error = $root.CMsgAMSendEmail.ReplacementToken.verify(message.tokens[i]);
                    if (error)
                        return "tokens." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgAMSendEmail message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMSendEmail
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMSendEmail} CMsgAMSendEmail
         */
        CMsgAMSendEmail.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMSendEmail)
                return object;
            var message = new $root.CMsgAMSendEmail();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.email_msg_type != null)
                message.email_msg_type = object.email_msg_type >>> 0;
            if (object.email_format != null)
                message.email_format = object.email_format >>> 0;
            if (object.persona_name_tokens) {
                if (!Array.isArray(object.persona_name_tokens))
                    throw TypeError(".CMsgAMSendEmail.persona_name_tokens: array expected");
                message.persona_name_tokens = [];
                for (var i = 0; i < object.persona_name_tokens.length; ++i) {
                    if (typeof object.persona_name_tokens[i] !== "object")
                        throw TypeError(".CMsgAMSendEmail.persona_name_tokens: object expected");
                    message.persona_name_tokens[i] = $root.CMsgAMSendEmail.PersonaNameReplacementToken.fromObject(object.persona_name_tokens[i]);
                }
            }
            if (object.source_gc != null)
                message.source_gc = object.source_gc >>> 0;
            if (object.tokens) {
                if (!Array.isArray(object.tokens))
                    throw TypeError(".CMsgAMSendEmail.tokens: array expected");
                message.tokens = [];
                for (var i = 0; i < object.tokens.length; ++i) {
                    if (typeof object.tokens[i] !== "object")
                        throw TypeError(".CMsgAMSendEmail.tokens: object expected");
                    message.tokens[i] = $root.CMsgAMSendEmail.ReplacementToken.fromObject(object.tokens[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMSendEmail message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMSendEmail
         * @static
         * @param {CMsgAMSendEmail} message CMsgAMSendEmail
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMSendEmail.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.persona_name_tokens = [];
                object.tokens = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.email_msg_type = 0;
                object.email_format = 0;
                object.source_gc = 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                object.email_msg_type = message.email_msg_type;
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                object.email_format = message.email_format;
            if (message.persona_name_tokens && message.persona_name_tokens.length) {
                object.persona_name_tokens = [];
                for (var j = 0; j < message.persona_name_tokens.length; ++j)
                    object.persona_name_tokens[j] = $root.CMsgAMSendEmail.PersonaNameReplacementToken.toObject(message.persona_name_tokens[j], options);
            }
            if (message.source_gc != null && message.hasOwnProperty("source_gc"))
                object.source_gc = message.source_gc;
            if (message.tokens && message.tokens.length) {
                object.tokens = [];
                for (var j = 0; j < message.tokens.length; ++j)
                    object.tokens[j] = $root.CMsgAMSendEmail.ReplacementToken.toObject(message.tokens[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgAMSendEmail to JSON.
         * @function toJSON
         * @memberof CMsgAMSendEmail
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMSendEmail.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgAMSendEmail.ReplacementToken = (function() {
    
            /**
             * Properties of a ReplacementToken.
             * @memberof CMsgAMSendEmail
             * @interface IReplacementToken
             * @property {string|null} [token_name] ReplacementToken token_name
             * @property {string|null} [token_value] ReplacementToken token_value
             */
    
            /**
             * Constructs a new ReplacementToken.
             * @memberof CMsgAMSendEmail
             * @classdesc Represents a ReplacementToken.
             * @implements IReplacementToken
             * @constructor
             * @param {CMsgAMSendEmail.IReplacementToken=} [properties] Properties to set
             */
            function ReplacementToken(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ReplacementToken token_name.
             * @member {string} token_name
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @instance
             */
            ReplacementToken.prototype.token_name = "";
    
            /**
             * ReplacementToken token_value.
             * @member {string} token_value
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @instance
             */
            ReplacementToken.prototype.token_value = "";
    
            /**
             * Creates a new ReplacementToken instance using the specified properties.
             * @function create
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IReplacementToken=} [properties] Properties to set
             * @returns {CMsgAMSendEmail.ReplacementToken} ReplacementToken instance
             */
            ReplacementToken.create = function create(properties) {
                return new ReplacementToken(properties);
            };
    
            /**
             * Encodes the specified ReplacementToken message. Does not implicitly {@link CMsgAMSendEmail.ReplacementToken.verify|verify} messages.
             * @function encode
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IReplacementToken} message ReplacementToken message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReplacementToken.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.token_name);
                if (message.token_value != null && message.hasOwnProperty("token_value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.token_value);
                return writer;
            };
    
            /**
             * Encodes the specified ReplacementToken message, length delimited. Does not implicitly {@link CMsgAMSendEmail.ReplacementToken.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IReplacementToken} message ReplacementToken message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReplacementToken.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ReplacementToken message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgAMSendEmail.ReplacementToken} ReplacementToken
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReplacementToken.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMSendEmail.ReplacementToken();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.token_name = reader.string();
                        break;
                    case 2:
                        message.token_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ReplacementToken message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgAMSendEmail.ReplacementToken} ReplacementToken
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReplacementToken.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ReplacementToken message.
             * @function verify
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReplacementToken.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    if (!$util.isString(message.token_name))
                        return "token_name: string expected";
                if (message.token_value != null && message.hasOwnProperty("token_value"))
                    if (!$util.isString(message.token_value))
                        return "token_value: string expected";
                return null;
            };
    
            /**
             * Creates a ReplacementToken message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgAMSendEmail.ReplacementToken} ReplacementToken
             */
            ReplacementToken.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgAMSendEmail.ReplacementToken)
                    return object;
                var message = new $root.CMsgAMSendEmail.ReplacementToken();
                if (object.token_name != null)
                    message.token_name = String(object.token_name);
                if (object.token_value != null)
                    message.token_value = String(object.token_value);
                return message;
            };
    
            /**
             * Creates a plain object from a ReplacementToken message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @static
             * @param {CMsgAMSendEmail.ReplacementToken} message ReplacementToken
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReplacementToken.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.token_name = "";
                    object.token_value = "";
                }
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    object.token_name = message.token_name;
                if (message.token_value != null && message.hasOwnProperty("token_value"))
                    object.token_value = message.token_value;
                return object;
            };
    
            /**
             * Converts this ReplacementToken to JSON.
             * @function toJSON
             * @memberof CMsgAMSendEmail.ReplacementToken
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReplacementToken.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ReplacementToken;
        })();
    
        CMsgAMSendEmail.PersonaNameReplacementToken = (function() {
    
            /**
             * Properties of a PersonaNameReplacementToken.
             * @memberof CMsgAMSendEmail
             * @interface IPersonaNameReplacementToken
             * @property {number|Long|null} [steamid] PersonaNameReplacementToken steamid
             * @property {string|null} [token_name] PersonaNameReplacementToken token_name
             */
    
            /**
             * Constructs a new PersonaNameReplacementToken.
             * @memberof CMsgAMSendEmail
             * @classdesc Represents a PersonaNameReplacementToken.
             * @implements IPersonaNameReplacementToken
             * @constructor
             * @param {CMsgAMSendEmail.IPersonaNameReplacementToken=} [properties] Properties to set
             */
            function PersonaNameReplacementToken(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PersonaNameReplacementToken steamid.
             * @member {number|Long} steamid
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @instance
             */
            PersonaNameReplacementToken.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * PersonaNameReplacementToken token_name.
             * @member {string} token_name
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @instance
             */
            PersonaNameReplacementToken.prototype.token_name = "";
    
            /**
             * Creates a new PersonaNameReplacementToken instance using the specified properties.
             * @function create
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IPersonaNameReplacementToken=} [properties] Properties to set
             * @returns {CMsgAMSendEmail.PersonaNameReplacementToken} PersonaNameReplacementToken instance
             */
            PersonaNameReplacementToken.create = function create(properties) {
                return new PersonaNameReplacementToken(properties);
            };
    
            /**
             * Encodes the specified PersonaNameReplacementToken message. Does not implicitly {@link CMsgAMSendEmail.PersonaNameReplacementToken.verify|verify} messages.
             * @function encode
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IPersonaNameReplacementToken} message PersonaNameReplacementToken message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PersonaNameReplacementToken.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.token_name);
                return writer;
            };
    
            /**
             * Encodes the specified PersonaNameReplacementToken message, length delimited. Does not implicitly {@link CMsgAMSendEmail.PersonaNameReplacementToken.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {CMsgAMSendEmail.IPersonaNameReplacementToken} message PersonaNameReplacementToken message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PersonaNameReplacementToken.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PersonaNameReplacementToken message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgAMSendEmail.PersonaNameReplacementToken} PersonaNameReplacementToken
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PersonaNameReplacementToken.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMSendEmail.PersonaNameReplacementToken();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 2:
                        message.token_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PersonaNameReplacementToken message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgAMSendEmail.PersonaNameReplacementToken} PersonaNameReplacementToken
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PersonaNameReplacementToken.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PersonaNameReplacementToken message.
             * @function verify
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PersonaNameReplacementToken.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    if (!$util.isString(message.token_name))
                        return "token_name: string expected";
                return null;
            };
    
            /**
             * Creates a PersonaNameReplacementToken message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgAMSendEmail.PersonaNameReplacementToken} PersonaNameReplacementToken
             */
            PersonaNameReplacementToken.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgAMSendEmail.PersonaNameReplacementToken)
                    return object;
                var message = new $root.CMsgAMSendEmail.PersonaNameReplacementToken();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.token_name != null)
                    message.token_name = String(object.token_name);
                return message;
            };
    
            /**
             * Creates a plain object from a PersonaNameReplacementToken message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @static
             * @param {CMsgAMSendEmail.PersonaNameReplacementToken} message PersonaNameReplacementToken
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PersonaNameReplacementToken.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.token_name = "";
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.token_name != null && message.hasOwnProperty("token_name"))
                    object.token_name = message.token_name;
                return object;
            };
    
            /**
             * Converts this PersonaNameReplacementToken to JSON.
             * @function toJSON
             * @memberof CMsgAMSendEmail.PersonaNameReplacementToken
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PersonaNameReplacementToken.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PersonaNameReplacementToken;
        })();
    
        return CMsgAMSendEmail;
    })();
    
    $root.CMsgAMSendEmailResponse = (function() {
    
        /**
         * Properties of a CMsgAMSendEmailResponse.
         * @exports ICMsgAMSendEmailResponse
         * @interface ICMsgAMSendEmailResponse
         * @property {number|null} [eresult] CMsgAMSendEmailResponse eresult
         */
    
        /**
         * Constructs a new CMsgAMSendEmailResponse.
         * @exports CMsgAMSendEmailResponse
         * @classdesc Represents a CMsgAMSendEmailResponse.
         * @implements ICMsgAMSendEmailResponse
         * @constructor
         * @param {ICMsgAMSendEmailResponse=} [properties] Properties to set
         */
        function CMsgAMSendEmailResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMSendEmailResponse eresult.
         * @member {number} eresult
         * @memberof CMsgAMSendEmailResponse
         * @instance
         */
        CMsgAMSendEmailResponse.prototype.eresult = 2;
    
        /**
         * Creates a new CMsgAMSendEmailResponse instance using the specified properties.
         * @function create
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {ICMsgAMSendEmailResponse=} [properties] Properties to set
         * @returns {CMsgAMSendEmailResponse} CMsgAMSendEmailResponse instance
         */
        CMsgAMSendEmailResponse.create = function create(properties) {
            return new CMsgAMSendEmailResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgAMSendEmailResponse message. Does not implicitly {@link CMsgAMSendEmailResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {ICMsgAMSendEmailResponse} message CMsgAMSendEmailResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMSendEmailResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMSendEmailResponse message, length delimited. Does not implicitly {@link CMsgAMSendEmailResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {ICMsgAMSendEmailResponse} message CMsgAMSendEmailResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMSendEmailResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMSendEmailResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMSendEmailResponse} CMsgAMSendEmailResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMSendEmailResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMSendEmailResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMSendEmailResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMSendEmailResponse} CMsgAMSendEmailResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMSendEmailResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMSendEmailResponse message.
         * @function verify
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMSendEmailResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMSendEmailResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMSendEmailResponse} CMsgAMSendEmailResponse
         */
        CMsgAMSendEmailResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMSendEmailResponse)
                return object;
            var message = new $root.CMsgAMSendEmailResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMSendEmailResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMSendEmailResponse
         * @static
         * @param {CMsgAMSendEmailResponse} message CMsgAMSendEmailResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMSendEmailResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 2;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgAMSendEmailResponse to JSON.
         * @function toJSON
         * @memberof CMsgAMSendEmailResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMSendEmailResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMSendEmailResponse;
    })();
    
    $root.CMsgGCGetEmailTemplate = (function() {
    
        /**
         * Properties of a CMsgGCGetEmailTemplate.
         * @exports ICMsgGCGetEmailTemplate
         * @interface ICMsgGCGetEmailTemplate
         * @property {number|null} [app_id] CMsgGCGetEmailTemplate app_id
         * @property {number|null} [email_msg_type] CMsgGCGetEmailTemplate email_msg_type
         * @property {number|null} [email_lang] CMsgGCGetEmailTemplate email_lang
         * @property {number|null} [email_format] CMsgGCGetEmailTemplate email_format
         */
    
        /**
         * Constructs a new CMsgGCGetEmailTemplate.
         * @exports CMsgGCGetEmailTemplate
         * @classdesc Represents a CMsgGCGetEmailTemplate.
         * @implements ICMsgGCGetEmailTemplate
         * @constructor
         * @param {ICMsgGCGetEmailTemplate=} [properties] Properties to set
         */
        function CMsgGCGetEmailTemplate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetEmailTemplate app_id.
         * @member {number} app_id
         * @memberof CMsgGCGetEmailTemplate
         * @instance
         */
        CMsgGCGetEmailTemplate.prototype.app_id = 0;
    
        /**
         * CMsgGCGetEmailTemplate email_msg_type.
         * @member {number} email_msg_type
         * @memberof CMsgGCGetEmailTemplate
         * @instance
         */
        CMsgGCGetEmailTemplate.prototype.email_msg_type = 0;
    
        /**
         * CMsgGCGetEmailTemplate email_lang.
         * @member {number} email_lang
         * @memberof CMsgGCGetEmailTemplate
         * @instance
         */
        CMsgGCGetEmailTemplate.prototype.email_lang = 0;
    
        /**
         * CMsgGCGetEmailTemplate email_format.
         * @member {number} email_format
         * @memberof CMsgGCGetEmailTemplate
         * @instance
         */
        CMsgGCGetEmailTemplate.prototype.email_format = 0;
    
        /**
         * Creates a new CMsgGCGetEmailTemplate instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {ICMsgGCGetEmailTemplate=} [properties] Properties to set
         * @returns {CMsgGCGetEmailTemplate} CMsgGCGetEmailTemplate instance
         */
        CMsgGCGetEmailTemplate.create = function create(properties) {
            return new CMsgGCGetEmailTemplate(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetEmailTemplate message. Does not implicitly {@link CMsgGCGetEmailTemplate.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {ICMsgGCGetEmailTemplate} message CMsgGCGetEmailTemplate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetEmailTemplate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.app_id);
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.email_msg_type);
            if (message.email_lang != null && message.hasOwnProperty("email_lang"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.email_lang);
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.email_format);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetEmailTemplate message, length delimited. Does not implicitly {@link CMsgGCGetEmailTemplate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {ICMsgGCGetEmailTemplate} message CMsgGCGetEmailTemplate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetEmailTemplate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetEmailTemplate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetEmailTemplate} CMsgGCGetEmailTemplate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetEmailTemplate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetEmailTemplate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.app_id = reader.uint32();
                    break;
                case 2:
                    message.email_msg_type = reader.uint32();
                    break;
                case 3:
                    message.email_lang = reader.int32();
                    break;
                case 4:
                    message.email_format = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetEmailTemplate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetEmailTemplate} CMsgGCGetEmailTemplate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetEmailTemplate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetEmailTemplate message.
         * @function verify
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetEmailTemplate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                if (!$util.isInteger(message.email_msg_type))
                    return "email_msg_type: integer expected";
            if (message.email_lang != null && message.hasOwnProperty("email_lang"))
                if (!$util.isInteger(message.email_lang))
                    return "email_lang: integer expected";
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                if (!$util.isInteger(message.email_format))
                    return "email_format: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCGetEmailTemplate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetEmailTemplate} CMsgGCGetEmailTemplate
         */
        CMsgGCGetEmailTemplate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetEmailTemplate)
                return object;
            var message = new $root.CMsgGCGetEmailTemplate();
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.email_msg_type != null)
                message.email_msg_type = object.email_msg_type >>> 0;
            if (object.email_lang != null)
                message.email_lang = object.email_lang | 0;
            if (object.email_format != null)
                message.email_format = object.email_format | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetEmailTemplate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetEmailTemplate
         * @static
         * @param {CMsgGCGetEmailTemplate} message CMsgGCGetEmailTemplate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetEmailTemplate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.app_id = 0;
                object.email_msg_type = 0;
                object.email_lang = 0;
                object.email_format = 0;
            }
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.email_msg_type != null && message.hasOwnProperty("email_msg_type"))
                object.email_msg_type = message.email_msg_type;
            if (message.email_lang != null && message.hasOwnProperty("email_lang"))
                object.email_lang = message.email_lang;
            if (message.email_format != null && message.hasOwnProperty("email_format"))
                object.email_format = message.email_format;
            return object;
        };
    
        /**
         * Converts this CMsgGCGetEmailTemplate to JSON.
         * @function toJSON
         * @memberof CMsgGCGetEmailTemplate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetEmailTemplate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetEmailTemplate;
    })();
    
    $root.CMsgGCGetEmailTemplateResponse = (function() {
    
        /**
         * Properties of a CMsgGCGetEmailTemplateResponse.
         * @exports ICMsgGCGetEmailTemplateResponse
         * @interface ICMsgGCGetEmailTemplateResponse
         * @property {number|null} [eresult] CMsgGCGetEmailTemplateResponse eresult
         * @property {boolean|null} [template_exists] CMsgGCGetEmailTemplateResponse template_exists
         * @property {string|null} [template] CMsgGCGetEmailTemplateResponse template
         */
    
        /**
         * Constructs a new CMsgGCGetEmailTemplateResponse.
         * @exports CMsgGCGetEmailTemplateResponse
         * @classdesc Represents a CMsgGCGetEmailTemplateResponse.
         * @implements ICMsgGCGetEmailTemplateResponse
         * @constructor
         * @param {ICMsgGCGetEmailTemplateResponse=} [properties] Properties to set
         */
        function CMsgGCGetEmailTemplateResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetEmailTemplateResponse eresult.
         * @member {number} eresult
         * @memberof CMsgGCGetEmailTemplateResponse
         * @instance
         */
        CMsgGCGetEmailTemplateResponse.prototype.eresult = 2;
    
        /**
         * CMsgGCGetEmailTemplateResponse template_exists.
         * @member {boolean} template_exists
         * @memberof CMsgGCGetEmailTemplateResponse
         * @instance
         */
        CMsgGCGetEmailTemplateResponse.prototype.template_exists = false;
    
        /**
         * CMsgGCGetEmailTemplateResponse template.
         * @member {string} template
         * @memberof CMsgGCGetEmailTemplateResponse
         * @instance
         */
        CMsgGCGetEmailTemplateResponse.prototype.template = "";
    
        /**
         * Creates a new CMsgGCGetEmailTemplateResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {ICMsgGCGetEmailTemplateResponse=} [properties] Properties to set
         * @returns {CMsgGCGetEmailTemplateResponse} CMsgGCGetEmailTemplateResponse instance
         */
        CMsgGCGetEmailTemplateResponse.create = function create(properties) {
            return new CMsgGCGetEmailTemplateResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetEmailTemplateResponse message. Does not implicitly {@link CMsgGCGetEmailTemplateResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {ICMsgGCGetEmailTemplateResponse} message CMsgGCGetEmailTemplateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetEmailTemplateResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            if (message.template_exists != null && message.hasOwnProperty("template_exists"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.template_exists);
            if (message.template != null && message.hasOwnProperty("template"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.template);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetEmailTemplateResponse message, length delimited. Does not implicitly {@link CMsgGCGetEmailTemplateResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {ICMsgGCGetEmailTemplateResponse} message CMsgGCGetEmailTemplateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetEmailTemplateResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetEmailTemplateResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetEmailTemplateResponse} CMsgGCGetEmailTemplateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetEmailTemplateResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetEmailTemplateResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                case 2:
                    message.template_exists = reader.bool();
                    break;
                case 3:
                    message.template = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetEmailTemplateResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetEmailTemplateResponse} CMsgGCGetEmailTemplateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetEmailTemplateResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetEmailTemplateResponse message.
         * @function verify
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetEmailTemplateResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.template_exists != null && message.hasOwnProperty("template_exists"))
                if (typeof message.template_exists !== "boolean")
                    return "template_exists: boolean expected";
            if (message.template != null && message.hasOwnProperty("template"))
                if (!$util.isString(message.template))
                    return "template: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCGetEmailTemplateResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetEmailTemplateResponse} CMsgGCGetEmailTemplateResponse
         */
        CMsgGCGetEmailTemplateResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetEmailTemplateResponse)
                return object;
            var message = new $root.CMsgGCGetEmailTemplateResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            if (object.template_exists != null)
                message.template_exists = Boolean(object.template_exists);
            if (object.template != null)
                message.template = String(object.template);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetEmailTemplateResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetEmailTemplateResponse
         * @static
         * @param {CMsgGCGetEmailTemplateResponse} message CMsgGCGetEmailTemplateResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetEmailTemplateResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                object.template_exists = false;
                object.template = "";
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.template_exists != null && message.hasOwnProperty("template_exists"))
                object.template_exists = message.template_exists;
            if (message.template != null && message.hasOwnProperty("template"))
                object.template = message.template;
            return object;
        };
    
        /**
         * Converts this CMsgGCGetEmailTemplateResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCGetEmailTemplateResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetEmailTemplateResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetEmailTemplateResponse;
    })();
    
    $root.CMsgAMGrantGuestPasses2 = (function() {
    
        /**
         * Properties of a CMsgAMGrantGuestPasses2.
         * @exports ICMsgAMGrantGuestPasses2
         * @interface ICMsgAMGrantGuestPasses2
         * @property {number|Long|null} [steam_id] CMsgAMGrantGuestPasses2 steam_id
         * @property {number|null} [package_id] CMsgAMGrantGuestPasses2 package_id
         * @property {number|null} [passes_to_grant] CMsgAMGrantGuestPasses2 passes_to_grant
         * @property {number|null} [days_to_expiration] CMsgAMGrantGuestPasses2 days_to_expiration
         * @property {number|null} [action] CMsgAMGrantGuestPasses2 action
         */
    
        /**
         * Constructs a new CMsgAMGrantGuestPasses2.
         * @exports CMsgAMGrantGuestPasses2
         * @classdesc Represents a CMsgAMGrantGuestPasses2.
         * @implements ICMsgAMGrantGuestPasses2
         * @constructor
         * @param {ICMsgAMGrantGuestPasses2=} [properties] Properties to set
         */
        function CMsgAMGrantGuestPasses2(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGrantGuestPasses2 steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         */
        CMsgAMGrantGuestPasses2.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgAMGrantGuestPasses2 package_id.
         * @member {number} package_id
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         */
        CMsgAMGrantGuestPasses2.prototype.package_id = 0;
    
        /**
         * CMsgAMGrantGuestPasses2 passes_to_grant.
         * @member {number} passes_to_grant
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         */
        CMsgAMGrantGuestPasses2.prototype.passes_to_grant = 0;
    
        /**
         * CMsgAMGrantGuestPasses2 days_to_expiration.
         * @member {number} days_to_expiration
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         */
        CMsgAMGrantGuestPasses2.prototype.days_to_expiration = 0;
    
        /**
         * CMsgAMGrantGuestPasses2 action.
         * @member {number} action
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         */
        CMsgAMGrantGuestPasses2.prototype.action = 0;
    
        /**
         * Creates a new CMsgAMGrantGuestPasses2 instance using the specified properties.
         * @function create
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {ICMsgAMGrantGuestPasses2=} [properties] Properties to set
         * @returns {CMsgAMGrantGuestPasses2} CMsgAMGrantGuestPasses2 instance
         */
        CMsgAMGrantGuestPasses2.create = function create(properties) {
            return new CMsgAMGrantGuestPasses2(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGrantGuestPasses2 message. Does not implicitly {@link CMsgAMGrantGuestPasses2.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {ICMsgAMGrantGuestPasses2} message CMsgAMGrantGuestPasses2 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGrantGuestPasses2.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id);
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.package_id);
            if (message.passes_to_grant != null && message.hasOwnProperty("passes_to_grant"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.passes_to_grant);
            if (message.days_to_expiration != null && message.hasOwnProperty("days_to_expiration"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.days_to_expiration);
            if (message.action != null && message.hasOwnProperty("action"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.action);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGrantGuestPasses2 message, length delimited. Does not implicitly {@link CMsgAMGrantGuestPasses2.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {ICMsgAMGrantGuestPasses2} message CMsgAMGrantGuestPasses2 message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGrantGuestPasses2.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGrantGuestPasses2 message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGrantGuestPasses2} CMsgAMGrantGuestPasses2
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGrantGuestPasses2.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGrantGuestPasses2();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_id = reader.fixed64();
                    break;
                case 2:
                    message.package_id = reader.uint32();
                    break;
                case 3:
                    message.passes_to_grant = reader.int32();
                    break;
                case 4:
                    message.days_to_expiration = reader.int32();
                    break;
                case 5:
                    message.action = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGrantGuestPasses2 message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGrantGuestPasses2} CMsgAMGrantGuestPasses2
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGrantGuestPasses2.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGrantGuestPasses2 message.
         * @function verify
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGrantGuestPasses2.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                if (!$util.isInteger(message.package_id))
                    return "package_id: integer expected";
            if (message.passes_to_grant != null && message.hasOwnProperty("passes_to_grant"))
                if (!$util.isInteger(message.passes_to_grant))
                    return "passes_to_grant: integer expected";
            if (message.days_to_expiration != null && message.hasOwnProperty("days_to_expiration"))
                if (!$util.isInteger(message.days_to_expiration))
                    return "days_to_expiration: integer expected";
            if (message.action != null && message.hasOwnProperty("action"))
                if (!$util.isInteger(message.action))
                    return "action: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMGrantGuestPasses2 message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGrantGuestPasses2} CMsgAMGrantGuestPasses2
         */
        CMsgAMGrantGuestPasses2.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGrantGuestPasses2)
                return object;
            var message = new $root.CMsgAMGrantGuestPasses2();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.package_id != null)
                message.package_id = object.package_id >>> 0;
            if (object.passes_to_grant != null)
                message.passes_to_grant = object.passes_to_grant | 0;
            if (object.days_to_expiration != null)
                message.days_to_expiration = object.days_to_expiration | 0;
            if (object.action != null)
                message.action = object.action | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGrantGuestPasses2 message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGrantGuestPasses2
         * @static
         * @param {CMsgAMGrantGuestPasses2} message CMsgAMGrantGuestPasses2
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGrantGuestPasses2.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                object.package_id = 0;
                object.passes_to_grant = 0;
                object.days_to_expiration = 0;
                object.action = 0;
            }
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.package_id != null && message.hasOwnProperty("package_id"))
                object.package_id = message.package_id;
            if (message.passes_to_grant != null && message.hasOwnProperty("passes_to_grant"))
                object.passes_to_grant = message.passes_to_grant;
            if (message.days_to_expiration != null && message.hasOwnProperty("days_to_expiration"))
                object.days_to_expiration = message.days_to_expiration;
            if (message.action != null && message.hasOwnProperty("action"))
                object.action = message.action;
            return object;
        };
    
        /**
         * Converts this CMsgAMGrantGuestPasses2 to JSON.
         * @function toJSON
         * @memberof CMsgAMGrantGuestPasses2
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGrantGuestPasses2.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMGrantGuestPasses2;
    })();
    
    $root.CMsgAMGrantGuestPasses2Response = (function() {
    
        /**
         * Properties of a CMsgAMGrantGuestPasses2Response.
         * @exports ICMsgAMGrantGuestPasses2Response
         * @interface ICMsgAMGrantGuestPasses2Response
         * @property {number|null} [eresult] CMsgAMGrantGuestPasses2Response eresult
         * @property {number|null} [passes_granted] CMsgAMGrantGuestPasses2Response passes_granted
         */
    
        /**
         * Constructs a new CMsgAMGrantGuestPasses2Response.
         * @exports CMsgAMGrantGuestPasses2Response
         * @classdesc Represents a CMsgAMGrantGuestPasses2Response.
         * @implements ICMsgAMGrantGuestPasses2Response
         * @constructor
         * @param {ICMsgAMGrantGuestPasses2Response=} [properties] Properties to set
         */
        function CMsgAMGrantGuestPasses2Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgAMGrantGuestPasses2Response eresult.
         * @member {number} eresult
         * @memberof CMsgAMGrantGuestPasses2Response
         * @instance
         */
        CMsgAMGrantGuestPasses2Response.prototype.eresult = 2;
    
        /**
         * CMsgAMGrantGuestPasses2Response passes_granted.
         * @member {number} passes_granted
         * @memberof CMsgAMGrantGuestPasses2Response
         * @instance
         */
        CMsgAMGrantGuestPasses2Response.prototype.passes_granted = 0;
    
        /**
         * Creates a new CMsgAMGrantGuestPasses2Response instance using the specified properties.
         * @function create
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {ICMsgAMGrantGuestPasses2Response=} [properties] Properties to set
         * @returns {CMsgAMGrantGuestPasses2Response} CMsgAMGrantGuestPasses2Response instance
         */
        CMsgAMGrantGuestPasses2Response.create = function create(properties) {
            return new CMsgAMGrantGuestPasses2Response(properties);
        };
    
        /**
         * Encodes the specified CMsgAMGrantGuestPasses2Response message. Does not implicitly {@link CMsgAMGrantGuestPasses2Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {ICMsgAMGrantGuestPasses2Response} message CMsgAMGrantGuestPasses2Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGrantGuestPasses2Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            if (message.passes_granted != null && message.hasOwnProperty("passes_granted"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.passes_granted);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgAMGrantGuestPasses2Response message, length delimited. Does not implicitly {@link CMsgAMGrantGuestPasses2Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {ICMsgAMGrantGuestPasses2Response} message CMsgAMGrantGuestPasses2Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgAMGrantGuestPasses2Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgAMGrantGuestPasses2Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgAMGrantGuestPasses2Response} CMsgAMGrantGuestPasses2Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGrantGuestPasses2Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgAMGrantGuestPasses2Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                case 2:
                    message.passes_granted = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgAMGrantGuestPasses2Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgAMGrantGuestPasses2Response} CMsgAMGrantGuestPasses2Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgAMGrantGuestPasses2Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgAMGrantGuestPasses2Response message.
         * @function verify
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgAMGrantGuestPasses2Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.passes_granted != null && message.hasOwnProperty("passes_granted"))
                if (!$util.isInteger(message.passes_granted))
                    return "passes_granted: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgAMGrantGuestPasses2Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgAMGrantGuestPasses2Response} CMsgAMGrantGuestPasses2Response
         */
        CMsgAMGrantGuestPasses2Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgAMGrantGuestPasses2Response)
                return object;
            var message = new $root.CMsgAMGrantGuestPasses2Response();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            if (object.passes_granted != null)
                message.passes_granted = object.passes_granted | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgAMGrantGuestPasses2Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgAMGrantGuestPasses2Response
         * @static
         * @param {CMsgAMGrantGuestPasses2Response} message CMsgAMGrantGuestPasses2Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgAMGrantGuestPasses2Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                object.passes_granted = 0;
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.passes_granted != null && message.hasOwnProperty("passes_granted"))
                object.passes_granted = message.passes_granted;
            return object;
        };
    
        /**
         * Converts this CMsgAMGrantGuestPasses2Response to JSON.
         * @function toJSON
         * @memberof CMsgAMGrantGuestPasses2Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgAMGrantGuestPasses2Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgAMGrantGuestPasses2Response;
    })();
    
    $root.CGCSystemMsg_GetAccountDetails = (function() {
    
        /**
         * Properties of a CGCSystemMsg_GetAccountDetails.
         * @exports ICGCSystemMsg_GetAccountDetails
         * @interface ICGCSystemMsg_GetAccountDetails
         * @property {number|Long|null} [steamid] CGCSystemMsg_GetAccountDetails steamid
         * @property {number|null} [appid] CGCSystemMsg_GetAccountDetails appid
         */
    
        /**
         * Constructs a new CGCSystemMsg_GetAccountDetails.
         * @exports CGCSystemMsg_GetAccountDetails
         * @classdesc Represents a CGCSystemMsg_GetAccountDetails.
         * @implements ICGCSystemMsg_GetAccountDetails
         * @constructor
         * @param {ICGCSystemMsg_GetAccountDetails=} [properties] Properties to set
         */
        function CGCSystemMsg_GetAccountDetails(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCSystemMsg_GetAccountDetails steamid.
         * @member {number|Long} steamid
         * @memberof CGCSystemMsg_GetAccountDetails
         * @instance
         */
        CGCSystemMsg_GetAccountDetails.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails appid.
         * @member {number} appid
         * @memberof CGCSystemMsg_GetAccountDetails
         * @instance
         */
        CGCSystemMsg_GetAccountDetails.prototype.appid = 0;
    
        /**
         * Creates a new CGCSystemMsg_GetAccountDetails instance using the specified properties.
         * @function create
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails=} [properties] Properties to set
         * @returns {CGCSystemMsg_GetAccountDetails} CGCSystemMsg_GetAccountDetails instance
         */
        CGCSystemMsg_GetAccountDetails.create = function create(properties) {
            return new CGCSystemMsg_GetAccountDetails(properties);
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetAccountDetails message. Does not implicitly {@link CGCSystemMsg_GetAccountDetails.verify|verify} messages.
         * @function encode
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails} message CGCSystemMsg_GetAccountDetails message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetAccountDetails.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            return writer;
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetAccountDetails message, length delimited. Does not implicitly {@link CGCSystemMsg_GetAccountDetails.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails} message CGCSystemMsg_GetAccountDetails message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetAccountDetails.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCSystemMsg_GetAccountDetails message from the specified reader or buffer.
         * @function decode
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCSystemMsg_GetAccountDetails} CGCSystemMsg_GetAccountDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetAccountDetails.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCSystemMsg_GetAccountDetails();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCSystemMsg_GetAccountDetails message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCSystemMsg_GetAccountDetails} CGCSystemMsg_GetAccountDetails
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetAccountDetails.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCSystemMsg_GetAccountDetails message.
         * @function verify
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCSystemMsg_GetAccountDetails.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            return null;
        };
    
        /**
         * Creates a CGCSystemMsg_GetAccountDetails message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCSystemMsg_GetAccountDetails} CGCSystemMsg_GetAccountDetails
         */
        CGCSystemMsg_GetAccountDetails.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCSystemMsg_GetAccountDetails)
                return object;
            var message = new $root.CGCSystemMsg_GetAccountDetails();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCSystemMsg_GetAccountDetails message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCSystemMsg_GetAccountDetails
         * @static
         * @param {CGCSystemMsg_GetAccountDetails} message CGCSystemMsg_GetAccountDetails
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCSystemMsg_GetAccountDetails.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.appid = 0;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            return object;
        };
    
        /**
         * Converts this CGCSystemMsg_GetAccountDetails to JSON.
         * @function toJSON
         * @memberof CGCSystemMsg_GetAccountDetails
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCSystemMsg_GetAccountDetails.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCSystemMsg_GetAccountDetails;
    })();
    
    $root.CGCSystemMsg_GetAccountDetails_Response = (function() {
    
        /**
         * Properties of a CGCSystemMsg_GetAccountDetails_Response.
         * @exports ICGCSystemMsg_GetAccountDetails_Response
         * @interface ICGCSystemMsg_GetAccountDetails_Response
         * @property {number|null} [eresult_deprecated] CGCSystemMsg_GetAccountDetails_Response eresult_deprecated
         * @property {string|null} [account_name] CGCSystemMsg_GetAccountDetails_Response account_name
         * @property {string|null} [persona_name] CGCSystemMsg_GetAccountDetails_Response persona_name
         * @property {boolean|null} [is_profile_public] CGCSystemMsg_GetAccountDetails_Response is_profile_public
         * @property {boolean|null} [is_inventory_public] CGCSystemMsg_GetAccountDetails_Response is_inventory_public
         * @property {boolean|null} [is_vac_banned] CGCSystemMsg_GetAccountDetails_Response is_vac_banned
         * @property {boolean|null} [is_cyber_cafe] CGCSystemMsg_GetAccountDetails_Response is_cyber_cafe
         * @property {boolean|null} [is_school_account] CGCSystemMsg_GetAccountDetails_Response is_school_account
         * @property {boolean|null} [is_limited] CGCSystemMsg_GetAccountDetails_Response is_limited
         * @property {boolean|null} [is_subscribed] CGCSystemMsg_GetAccountDetails_Response is_subscribed
         * @property {number|null} ["package"] CGCSystemMsg_GetAccountDetails_Response package
         * @property {boolean|null} [is_free_trial_account] CGCSystemMsg_GetAccountDetails_Response is_free_trial_account
         * @property {number|null} [free_trial_expiration] CGCSystemMsg_GetAccountDetails_Response free_trial_expiration
         * @property {boolean|null} [is_low_violence] CGCSystemMsg_GetAccountDetails_Response is_low_violence
         * @property {boolean|null} [is_account_locked_down] CGCSystemMsg_GetAccountDetails_Response is_account_locked_down
         * @property {boolean|null} [is_community_banned] CGCSystemMsg_GetAccountDetails_Response is_community_banned
         * @property {boolean|null} [is_trade_banned] CGCSystemMsg_GetAccountDetails_Response is_trade_banned
         * @property {number|null} [trade_ban_expiration] CGCSystemMsg_GetAccountDetails_Response trade_ban_expiration
         * @property {number|null} [accountid] CGCSystemMsg_GetAccountDetails_Response accountid
         * @property {number|null} [suspension_end_time] CGCSystemMsg_GetAccountDetails_Response suspension_end_time
         * @property {string|null} [currency] CGCSystemMsg_GetAccountDetails_Response currency
         * @property {number|null} [steam_level] CGCSystemMsg_GetAccountDetails_Response steam_level
         * @property {number|null} [friend_count] CGCSystemMsg_GetAccountDetails_Response friend_count
         * @property {number|null} [account_creation_time] CGCSystemMsg_GetAccountDetails_Response account_creation_time
         * @property {boolean|null} [is_steamguard_enabled] CGCSystemMsg_GetAccountDetails_Response is_steamguard_enabled
         * @property {boolean|null} [is_phone_verified] CGCSystemMsg_GetAccountDetails_Response is_phone_verified
         * @property {boolean|null} [is_two_factor_auth_enabled] CGCSystemMsg_GetAccountDetails_Response is_two_factor_auth_enabled
         * @property {number|null} [two_factor_enabled_time] CGCSystemMsg_GetAccountDetails_Response two_factor_enabled_time
         * @property {number|null} [phone_verification_time] CGCSystemMsg_GetAccountDetails_Response phone_verification_time
         * @property {number|Long|null} [phone_id] CGCSystemMsg_GetAccountDetails_Response phone_id
         * @property {boolean|null} [is_phone_identifying] CGCSystemMsg_GetAccountDetails_Response is_phone_identifying
         * @property {number|null} [rt_identity_linked] CGCSystemMsg_GetAccountDetails_Response rt_identity_linked
         * @property {number|null} [rt_birth_date] CGCSystemMsg_GetAccountDetails_Response rt_birth_date
         * @property {string|null} [txn_country_code] CGCSystemMsg_GetAccountDetails_Response txn_country_code
         */
    
        /**
         * Constructs a new CGCSystemMsg_GetAccountDetails_Response.
         * @exports CGCSystemMsg_GetAccountDetails_Response
         * @classdesc Represents a CGCSystemMsg_GetAccountDetails_Response.
         * @implements ICGCSystemMsg_GetAccountDetails_Response
         * @constructor
         * @param {ICGCSystemMsg_GetAccountDetails_Response=} [properties] Properties to set
         */
        function CGCSystemMsg_GetAccountDetails_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response eresult_deprecated.
         * @member {number} eresult_deprecated
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.eresult_deprecated = 2;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response account_name.
         * @member {string} account_name
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.account_name = "";
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response persona_name.
         * @member {string} persona_name
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.persona_name = "";
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_profile_public.
         * @member {boolean} is_profile_public
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_profile_public = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_inventory_public.
         * @member {boolean} is_inventory_public
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_inventory_public = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_vac_banned.
         * @member {boolean} is_vac_banned
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_vac_banned = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_cyber_cafe.
         * @member {boolean} is_cyber_cafe
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_cyber_cafe = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_school_account.
         * @member {boolean} is_school_account
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_school_account = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_limited.
         * @member {boolean} is_limited
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_limited = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_subscribed.
         * @member {boolean} is_subscribed
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_subscribed = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response package.
         * @member {number} package
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype["package"] = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_free_trial_account.
         * @member {boolean} is_free_trial_account
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_free_trial_account = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response free_trial_expiration.
         * @member {number} free_trial_expiration
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.free_trial_expiration = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_low_violence.
         * @member {boolean} is_low_violence
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_low_violence = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_account_locked_down.
         * @member {boolean} is_account_locked_down
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_account_locked_down = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_community_banned.
         * @member {boolean} is_community_banned
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_community_banned = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_trade_banned.
         * @member {boolean} is_trade_banned
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_trade_banned = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response trade_ban_expiration.
         * @member {number} trade_ban_expiration
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.trade_ban_expiration = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response accountid.
         * @member {number} accountid
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.accountid = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response suspension_end_time.
         * @member {number} suspension_end_time
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.suspension_end_time = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response currency.
         * @member {string} currency
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.currency = "";
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response steam_level.
         * @member {number} steam_level
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.steam_level = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response friend_count.
         * @member {number} friend_count
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.friend_count = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response account_creation_time.
         * @member {number} account_creation_time
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.account_creation_time = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_steamguard_enabled.
         * @member {boolean} is_steamguard_enabled
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_steamguard_enabled = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_phone_verified.
         * @member {boolean} is_phone_verified
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_phone_verified = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_two_factor_auth_enabled.
         * @member {boolean} is_two_factor_auth_enabled
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_two_factor_auth_enabled = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response two_factor_enabled_time.
         * @member {number} two_factor_enabled_time
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.two_factor_enabled_time = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response phone_verification_time.
         * @member {number} phone_verification_time
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.phone_verification_time = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response phone_id.
         * @member {number|Long} phone_id
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.phone_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response is_phone_identifying.
         * @member {boolean} is_phone_identifying
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.is_phone_identifying = false;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response rt_identity_linked.
         * @member {number} rt_identity_linked
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.rt_identity_linked = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response rt_birth_date.
         * @member {number} rt_birth_date
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.rt_birth_date = 0;
    
        /**
         * CGCSystemMsg_GetAccountDetails_Response txn_country_code.
         * @member {string} txn_country_code
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.txn_country_code = "";
    
        /**
         * Creates a new CGCSystemMsg_GetAccountDetails_Response instance using the specified properties.
         * @function create
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails_Response=} [properties] Properties to set
         * @returns {CGCSystemMsg_GetAccountDetails_Response} CGCSystemMsg_GetAccountDetails_Response instance
         */
        CGCSystemMsg_GetAccountDetails_Response.create = function create(properties) {
            return new CGCSystemMsg_GetAccountDetails_Response(properties);
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetAccountDetails_Response message. Does not implicitly {@link CGCSystemMsg_GetAccountDetails_Response.verify|verify} messages.
         * @function encode
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails_Response} message CGCSystemMsg_GetAccountDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetAccountDetails_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult_deprecated != null && message.hasOwnProperty("eresult_deprecated"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult_deprecated);
            if (message.account_name != null && message.hasOwnProperty("account_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.account_name);
            if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.persona_name);
            if (message.is_profile_public != null && message.hasOwnProperty("is_profile_public"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_profile_public);
            if (message.is_inventory_public != null && message.hasOwnProperty("is_inventory_public"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_inventory_public);
            if (message.is_vac_banned != null && message.hasOwnProperty("is_vac_banned"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.is_vac_banned);
            if (message.is_cyber_cafe != null && message.hasOwnProperty("is_cyber_cafe"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.is_cyber_cafe);
            if (message.is_school_account != null && message.hasOwnProperty("is_school_account"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.is_school_account);
            if (message.is_limited != null && message.hasOwnProperty("is_limited"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.is_limited);
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.is_subscribed);
            if (message["package"] != null && message.hasOwnProperty("package"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message["package"]);
            if (message.is_free_trial_account != null && message.hasOwnProperty("is_free_trial_account"))
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.is_free_trial_account);
            if (message.free_trial_expiration != null && message.hasOwnProperty("free_trial_expiration"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.free_trial_expiration);
            if (message.is_low_violence != null && message.hasOwnProperty("is_low_violence"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.is_low_violence);
            if (message.is_account_locked_down != null && message.hasOwnProperty("is_account_locked_down"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.is_account_locked_down);
            if (message.is_community_banned != null && message.hasOwnProperty("is_community_banned"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.is_community_banned);
            if (message.is_trade_banned != null && message.hasOwnProperty("is_trade_banned"))
                writer.uint32(/* id 18, wireType 0 =*/144).bool(message.is_trade_banned);
            if (message.trade_ban_expiration != null && message.hasOwnProperty("trade_ban_expiration"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.trade_ban_expiration);
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.accountid);
            if (message.suspension_end_time != null && message.hasOwnProperty("suspension_end_time"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.suspension_end_time);
            if (message.currency != null && message.hasOwnProperty("currency"))
                writer.uint32(/* id 22, wireType 2 =*/178).string(message.currency);
            if (message.steam_level != null && message.hasOwnProperty("steam_level"))
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.steam_level);
            if (message.friend_count != null && message.hasOwnProperty("friend_count"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.friend_count);
            if (message.account_creation_time != null && message.hasOwnProperty("account_creation_time"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.account_creation_time);
            if (message.is_steamguard_enabled != null && message.hasOwnProperty("is_steamguard_enabled"))
                writer.uint32(/* id 27, wireType 0 =*/216).bool(message.is_steamguard_enabled);
            if (message.is_phone_verified != null && message.hasOwnProperty("is_phone_verified"))
                writer.uint32(/* id 28, wireType 0 =*/224).bool(message.is_phone_verified);
            if (message.is_two_factor_auth_enabled != null && message.hasOwnProperty("is_two_factor_auth_enabled"))
                writer.uint32(/* id 29, wireType 0 =*/232).bool(message.is_two_factor_auth_enabled);
            if (message.two_factor_enabled_time != null && message.hasOwnProperty("two_factor_enabled_time"))
                writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.two_factor_enabled_time);
            if (message.phone_verification_time != null && message.hasOwnProperty("phone_verification_time"))
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.phone_verification_time);
            if (message.phone_id != null && message.hasOwnProperty("phone_id"))
                writer.uint32(/* id 33, wireType 0 =*/264).uint64(message.phone_id);
            if (message.is_phone_identifying != null && message.hasOwnProperty("is_phone_identifying"))
                writer.uint32(/* id 34, wireType 0 =*/272).bool(message.is_phone_identifying);
            if (message.rt_identity_linked != null && message.hasOwnProperty("rt_identity_linked"))
                writer.uint32(/* id 35, wireType 0 =*/280).uint32(message.rt_identity_linked);
            if (message.rt_birth_date != null && message.hasOwnProperty("rt_birth_date"))
                writer.uint32(/* id 36, wireType 0 =*/288).uint32(message.rt_birth_date);
            if (message.txn_country_code != null && message.hasOwnProperty("txn_country_code"))
                writer.uint32(/* id 37, wireType 2 =*/298).string(message.txn_country_code);
            return writer;
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetAccountDetails_Response message, length delimited. Does not implicitly {@link CGCSystemMsg_GetAccountDetails_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {ICGCSystemMsg_GetAccountDetails_Response} message CGCSystemMsg_GetAccountDetails_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetAccountDetails_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCSystemMsg_GetAccountDetails_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCSystemMsg_GetAccountDetails_Response} CGCSystemMsg_GetAccountDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetAccountDetails_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCSystemMsg_GetAccountDetails_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult_deprecated = reader.uint32();
                    break;
                case 2:
                    message.account_name = reader.string();
                    break;
                case 3:
                    message.persona_name = reader.string();
                    break;
                case 4:
                    message.is_profile_public = reader.bool();
                    break;
                case 5:
                    message.is_inventory_public = reader.bool();
                    break;
                case 7:
                    message.is_vac_banned = reader.bool();
                    break;
                case 8:
                    message.is_cyber_cafe = reader.bool();
                    break;
                case 9:
                    message.is_school_account = reader.bool();
                    break;
                case 10:
                    message.is_limited = reader.bool();
                    break;
                case 11:
                    message.is_subscribed = reader.bool();
                    break;
                case 12:
                    message["package"] = reader.uint32();
                    break;
                case 13:
                    message.is_free_trial_account = reader.bool();
                    break;
                case 14:
                    message.free_trial_expiration = reader.uint32();
                    break;
                case 15:
                    message.is_low_violence = reader.bool();
                    break;
                case 16:
                    message.is_account_locked_down = reader.bool();
                    break;
                case 17:
                    message.is_community_banned = reader.bool();
                    break;
                case 18:
                    message.is_trade_banned = reader.bool();
                    break;
                case 19:
                    message.trade_ban_expiration = reader.uint32();
                    break;
                case 20:
                    message.accountid = reader.uint32();
                    break;
                case 21:
                    message.suspension_end_time = reader.uint32();
                    break;
                case 22:
                    message.currency = reader.string();
                    break;
                case 23:
                    message.steam_level = reader.uint32();
                    break;
                case 24:
                    message.friend_count = reader.uint32();
                    break;
                case 25:
                    message.account_creation_time = reader.uint32();
                    break;
                case 27:
                    message.is_steamguard_enabled = reader.bool();
                    break;
                case 28:
                    message.is_phone_verified = reader.bool();
                    break;
                case 29:
                    message.is_two_factor_auth_enabled = reader.bool();
                    break;
                case 30:
                    message.two_factor_enabled_time = reader.uint32();
                    break;
                case 31:
                    message.phone_verification_time = reader.uint32();
                    break;
                case 33:
                    message.phone_id = reader.uint64();
                    break;
                case 34:
                    message.is_phone_identifying = reader.bool();
                    break;
                case 35:
                    message.rt_identity_linked = reader.uint32();
                    break;
                case 36:
                    message.rt_birth_date = reader.uint32();
                    break;
                case 37:
                    message.txn_country_code = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCSystemMsg_GetAccountDetails_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCSystemMsg_GetAccountDetails_Response} CGCSystemMsg_GetAccountDetails_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetAccountDetails_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCSystemMsg_GetAccountDetails_Response message.
         * @function verify
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCSystemMsg_GetAccountDetails_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult_deprecated != null && message.hasOwnProperty("eresult_deprecated"))
                if (!$util.isInteger(message.eresult_deprecated))
                    return "eresult_deprecated: integer expected";
            if (message.account_name != null && message.hasOwnProperty("account_name"))
                if (!$util.isString(message.account_name))
                    return "account_name: string expected";
            if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                if (!$util.isString(message.persona_name))
                    return "persona_name: string expected";
            if (message.is_profile_public != null && message.hasOwnProperty("is_profile_public"))
                if (typeof message.is_profile_public !== "boolean")
                    return "is_profile_public: boolean expected";
            if (message.is_inventory_public != null && message.hasOwnProperty("is_inventory_public"))
                if (typeof message.is_inventory_public !== "boolean")
                    return "is_inventory_public: boolean expected";
            if (message.is_vac_banned != null && message.hasOwnProperty("is_vac_banned"))
                if (typeof message.is_vac_banned !== "boolean")
                    return "is_vac_banned: boolean expected";
            if (message.is_cyber_cafe != null && message.hasOwnProperty("is_cyber_cafe"))
                if (typeof message.is_cyber_cafe !== "boolean")
                    return "is_cyber_cafe: boolean expected";
            if (message.is_school_account != null && message.hasOwnProperty("is_school_account"))
                if (typeof message.is_school_account !== "boolean")
                    return "is_school_account: boolean expected";
            if (message.is_limited != null && message.hasOwnProperty("is_limited"))
                if (typeof message.is_limited !== "boolean")
                    return "is_limited: boolean expected";
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                if (typeof message.is_subscribed !== "boolean")
                    return "is_subscribed: boolean expected";
            if (message["package"] != null && message.hasOwnProperty("package"))
                if (!$util.isInteger(message["package"]))
                    return "package: integer expected";
            if (message.is_free_trial_account != null && message.hasOwnProperty("is_free_trial_account"))
                if (typeof message.is_free_trial_account !== "boolean")
                    return "is_free_trial_account: boolean expected";
            if (message.free_trial_expiration != null && message.hasOwnProperty("free_trial_expiration"))
                if (!$util.isInteger(message.free_trial_expiration))
                    return "free_trial_expiration: integer expected";
            if (message.is_low_violence != null && message.hasOwnProperty("is_low_violence"))
                if (typeof message.is_low_violence !== "boolean")
                    return "is_low_violence: boolean expected";
            if (message.is_account_locked_down != null && message.hasOwnProperty("is_account_locked_down"))
                if (typeof message.is_account_locked_down !== "boolean")
                    return "is_account_locked_down: boolean expected";
            if (message.is_community_banned != null && message.hasOwnProperty("is_community_banned"))
                if (typeof message.is_community_banned !== "boolean")
                    return "is_community_banned: boolean expected";
            if (message.is_trade_banned != null && message.hasOwnProperty("is_trade_banned"))
                if (typeof message.is_trade_banned !== "boolean")
                    return "is_trade_banned: boolean expected";
            if (message.trade_ban_expiration != null && message.hasOwnProperty("trade_ban_expiration"))
                if (!$util.isInteger(message.trade_ban_expiration))
                    return "trade_ban_expiration: integer expected";
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                if (!$util.isInteger(message.accountid))
                    return "accountid: integer expected";
            if (message.suspension_end_time != null && message.hasOwnProperty("suspension_end_time"))
                if (!$util.isInteger(message.suspension_end_time))
                    return "suspension_end_time: integer expected";
            if (message.currency != null && message.hasOwnProperty("currency"))
                if (!$util.isString(message.currency))
                    return "currency: string expected";
            if (message.steam_level != null && message.hasOwnProperty("steam_level"))
                if (!$util.isInteger(message.steam_level))
                    return "steam_level: integer expected";
            if (message.friend_count != null && message.hasOwnProperty("friend_count"))
                if (!$util.isInteger(message.friend_count))
                    return "friend_count: integer expected";
            if (message.account_creation_time != null && message.hasOwnProperty("account_creation_time"))
                if (!$util.isInteger(message.account_creation_time))
                    return "account_creation_time: integer expected";
            if (message.is_steamguard_enabled != null && message.hasOwnProperty("is_steamguard_enabled"))
                if (typeof message.is_steamguard_enabled !== "boolean")
                    return "is_steamguard_enabled: boolean expected";
            if (message.is_phone_verified != null && message.hasOwnProperty("is_phone_verified"))
                if (typeof message.is_phone_verified !== "boolean")
                    return "is_phone_verified: boolean expected";
            if (message.is_two_factor_auth_enabled != null && message.hasOwnProperty("is_two_factor_auth_enabled"))
                if (typeof message.is_two_factor_auth_enabled !== "boolean")
                    return "is_two_factor_auth_enabled: boolean expected";
            if (message.two_factor_enabled_time != null && message.hasOwnProperty("two_factor_enabled_time"))
                if (!$util.isInteger(message.two_factor_enabled_time))
                    return "two_factor_enabled_time: integer expected";
            if (message.phone_verification_time != null && message.hasOwnProperty("phone_verification_time"))
                if (!$util.isInteger(message.phone_verification_time))
                    return "phone_verification_time: integer expected";
            if (message.phone_id != null && message.hasOwnProperty("phone_id"))
                if (!$util.isInteger(message.phone_id) && !(message.phone_id && $util.isInteger(message.phone_id.low) && $util.isInteger(message.phone_id.high)))
                    return "phone_id: integer|Long expected";
            if (message.is_phone_identifying != null && message.hasOwnProperty("is_phone_identifying"))
                if (typeof message.is_phone_identifying !== "boolean")
                    return "is_phone_identifying: boolean expected";
            if (message.rt_identity_linked != null && message.hasOwnProperty("rt_identity_linked"))
                if (!$util.isInteger(message.rt_identity_linked))
                    return "rt_identity_linked: integer expected";
            if (message.rt_birth_date != null && message.hasOwnProperty("rt_birth_date"))
                if (!$util.isInteger(message.rt_birth_date))
                    return "rt_birth_date: integer expected";
            if (message.txn_country_code != null && message.hasOwnProperty("txn_country_code"))
                if (!$util.isString(message.txn_country_code))
                    return "txn_country_code: string expected";
            return null;
        };
    
        /**
         * Creates a CGCSystemMsg_GetAccountDetails_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCSystemMsg_GetAccountDetails_Response} CGCSystemMsg_GetAccountDetails_Response
         */
        CGCSystemMsg_GetAccountDetails_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCSystemMsg_GetAccountDetails_Response)
                return object;
            var message = new $root.CGCSystemMsg_GetAccountDetails_Response();
            if (object.eresult_deprecated != null)
                message.eresult_deprecated = object.eresult_deprecated >>> 0;
            if (object.account_name != null)
                message.account_name = String(object.account_name);
            if (object.persona_name != null)
                message.persona_name = String(object.persona_name);
            if (object.is_profile_public != null)
                message.is_profile_public = Boolean(object.is_profile_public);
            if (object.is_inventory_public != null)
                message.is_inventory_public = Boolean(object.is_inventory_public);
            if (object.is_vac_banned != null)
                message.is_vac_banned = Boolean(object.is_vac_banned);
            if (object.is_cyber_cafe != null)
                message.is_cyber_cafe = Boolean(object.is_cyber_cafe);
            if (object.is_school_account != null)
                message.is_school_account = Boolean(object.is_school_account);
            if (object.is_limited != null)
                message.is_limited = Boolean(object.is_limited);
            if (object.is_subscribed != null)
                message.is_subscribed = Boolean(object.is_subscribed);
            if (object["package"] != null)
                message["package"] = object["package"] >>> 0;
            if (object.is_free_trial_account != null)
                message.is_free_trial_account = Boolean(object.is_free_trial_account);
            if (object.free_trial_expiration != null)
                message.free_trial_expiration = object.free_trial_expiration >>> 0;
            if (object.is_low_violence != null)
                message.is_low_violence = Boolean(object.is_low_violence);
            if (object.is_account_locked_down != null)
                message.is_account_locked_down = Boolean(object.is_account_locked_down);
            if (object.is_community_banned != null)
                message.is_community_banned = Boolean(object.is_community_banned);
            if (object.is_trade_banned != null)
                message.is_trade_banned = Boolean(object.is_trade_banned);
            if (object.trade_ban_expiration != null)
                message.trade_ban_expiration = object.trade_ban_expiration >>> 0;
            if (object.accountid != null)
                message.accountid = object.accountid >>> 0;
            if (object.suspension_end_time != null)
                message.suspension_end_time = object.suspension_end_time >>> 0;
            if (object.currency != null)
                message.currency = String(object.currency);
            if (object.steam_level != null)
                message.steam_level = object.steam_level >>> 0;
            if (object.friend_count != null)
                message.friend_count = object.friend_count >>> 0;
            if (object.account_creation_time != null)
                message.account_creation_time = object.account_creation_time >>> 0;
            if (object.is_steamguard_enabled != null)
                message.is_steamguard_enabled = Boolean(object.is_steamguard_enabled);
            if (object.is_phone_verified != null)
                message.is_phone_verified = Boolean(object.is_phone_verified);
            if (object.is_two_factor_auth_enabled != null)
                message.is_two_factor_auth_enabled = Boolean(object.is_two_factor_auth_enabled);
            if (object.two_factor_enabled_time != null)
                message.two_factor_enabled_time = object.two_factor_enabled_time >>> 0;
            if (object.phone_verification_time != null)
                message.phone_verification_time = object.phone_verification_time >>> 0;
            if (object.phone_id != null)
                if ($util.Long)
                    (message.phone_id = $util.Long.fromValue(object.phone_id)).unsigned = true;
                else if (typeof object.phone_id === "string")
                    message.phone_id = parseInt(object.phone_id, 10);
                else if (typeof object.phone_id === "number")
                    message.phone_id = object.phone_id;
                else if (typeof object.phone_id === "object")
                    message.phone_id = new $util.LongBits(object.phone_id.low >>> 0, object.phone_id.high >>> 0).toNumber(true);
            if (object.is_phone_identifying != null)
                message.is_phone_identifying = Boolean(object.is_phone_identifying);
            if (object.rt_identity_linked != null)
                message.rt_identity_linked = object.rt_identity_linked >>> 0;
            if (object.rt_birth_date != null)
                message.rt_birth_date = object.rt_birth_date >>> 0;
            if (object.txn_country_code != null)
                message.txn_country_code = String(object.txn_country_code);
            return message;
        };
    
        /**
         * Creates a plain object from a CGCSystemMsg_GetAccountDetails_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @static
         * @param {CGCSystemMsg_GetAccountDetails_Response} message CGCSystemMsg_GetAccountDetails_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCSystemMsg_GetAccountDetails_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult_deprecated = 2;
                object.account_name = "";
                object.persona_name = "";
                object.is_profile_public = false;
                object.is_inventory_public = false;
                object.is_vac_banned = false;
                object.is_cyber_cafe = false;
                object.is_school_account = false;
                object.is_limited = false;
                object.is_subscribed = false;
                object["package"] = 0;
                object.is_free_trial_account = false;
                object.free_trial_expiration = 0;
                object.is_low_violence = false;
                object.is_account_locked_down = false;
                object.is_community_banned = false;
                object.is_trade_banned = false;
                object.trade_ban_expiration = 0;
                object.accountid = 0;
                object.suspension_end_time = 0;
                object.currency = "";
                object.steam_level = 0;
                object.friend_count = 0;
                object.account_creation_time = 0;
                object.is_steamguard_enabled = false;
                object.is_phone_verified = false;
                object.is_two_factor_auth_enabled = false;
                object.two_factor_enabled_time = 0;
                object.phone_verification_time = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.phone_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.phone_id = options.longs === String ? "0" : 0;
                object.is_phone_identifying = false;
                object.rt_identity_linked = 0;
                object.rt_birth_date = 0;
                object.txn_country_code = "";
            }
            if (message.eresult_deprecated != null && message.hasOwnProperty("eresult_deprecated"))
                object.eresult_deprecated = message.eresult_deprecated;
            if (message.account_name != null && message.hasOwnProperty("account_name"))
                object.account_name = message.account_name;
            if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                object.persona_name = message.persona_name;
            if (message.is_profile_public != null && message.hasOwnProperty("is_profile_public"))
                object.is_profile_public = message.is_profile_public;
            if (message.is_inventory_public != null && message.hasOwnProperty("is_inventory_public"))
                object.is_inventory_public = message.is_inventory_public;
            if (message.is_vac_banned != null && message.hasOwnProperty("is_vac_banned"))
                object.is_vac_banned = message.is_vac_banned;
            if (message.is_cyber_cafe != null && message.hasOwnProperty("is_cyber_cafe"))
                object.is_cyber_cafe = message.is_cyber_cafe;
            if (message.is_school_account != null && message.hasOwnProperty("is_school_account"))
                object.is_school_account = message.is_school_account;
            if (message.is_limited != null && message.hasOwnProperty("is_limited"))
                object.is_limited = message.is_limited;
            if (message.is_subscribed != null && message.hasOwnProperty("is_subscribed"))
                object.is_subscribed = message.is_subscribed;
            if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
            if (message.is_free_trial_account != null && message.hasOwnProperty("is_free_trial_account"))
                object.is_free_trial_account = message.is_free_trial_account;
            if (message.free_trial_expiration != null && message.hasOwnProperty("free_trial_expiration"))
                object.free_trial_expiration = message.free_trial_expiration;
            if (message.is_low_violence != null && message.hasOwnProperty("is_low_violence"))
                object.is_low_violence = message.is_low_violence;
            if (message.is_account_locked_down != null && message.hasOwnProperty("is_account_locked_down"))
                object.is_account_locked_down = message.is_account_locked_down;
            if (message.is_community_banned != null && message.hasOwnProperty("is_community_banned"))
                object.is_community_banned = message.is_community_banned;
            if (message.is_trade_banned != null && message.hasOwnProperty("is_trade_banned"))
                object.is_trade_banned = message.is_trade_banned;
            if (message.trade_ban_expiration != null && message.hasOwnProperty("trade_ban_expiration"))
                object.trade_ban_expiration = message.trade_ban_expiration;
            if (message.accountid != null && message.hasOwnProperty("accountid"))
                object.accountid = message.accountid;
            if (message.suspension_end_time != null && message.hasOwnProperty("suspension_end_time"))
                object.suspension_end_time = message.suspension_end_time;
            if (message.currency != null && message.hasOwnProperty("currency"))
                object.currency = message.currency;
            if (message.steam_level != null && message.hasOwnProperty("steam_level"))
                object.steam_level = message.steam_level;
            if (message.friend_count != null && message.hasOwnProperty("friend_count"))
                object.friend_count = message.friend_count;
            if (message.account_creation_time != null && message.hasOwnProperty("account_creation_time"))
                object.account_creation_time = message.account_creation_time;
            if (message.is_steamguard_enabled != null && message.hasOwnProperty("is_steamguard_enabled"))
                object.is_steamguard_enabled = message.is_steamguard_enabled;
            if (message.is_phone_verified != null && message.hasOwnProperty("is_phone_verified"))
                object.is_phone_verified = message.is_phone_verified;
            if (message.is_two_factor_auth_enabled != null && message.hasOwnProperty("is_two_factor_auth_enabled"))
                object.is_two_factor_auth_enabled = message.is_two_factor_auth_enabled;
            if (message.two_factor_enabled_time != null && message.hasOwnProperty("two_factor_enabled_time"))
                object.two_factor_enabled_time = message.two_factor_enabled_time;
            if (message.phone_verification_time != null && message.hasOwnProperty("phone_verification_time"))
                object.phone_verification_time = message.phone_verification_time;
            if (message.phone_id != null && message.hasOwnProperty("phone_id"))
                if (typeof message.phone_id === "number")
                    object.phone_id = options.longs === String ? String(message.phone_id) : message.phone_id;
                else
                    object.phone_id = options.longs === String ? $util.Long.prototype.toString.call(message.phone_id) : options.longs === Number ? new $util.LongBits(message.phone_id.low >>> 0, message.phone_id.high >>> 0).toNumber(true) : message.phone_id;
            if (message.is_phone_identifying != null && message.hasOwnProperty("is_phone_identifying"))
                object.is_phone_identifying = message.is_phone_identifying;
            if (message.rt_identity_linked != null && message.hasOwnProperty("rt_identity_linked"))
                object.rt_identity_linked = message.rt_identity_linked;
            if (message.rt_birth_date != null && message.hasOwnProperty("rt_birth_date"))
                object.rt_birth_date = message.rt_birth_date;
            if (message.txn_country_code != null && message.hasOwnProperty("txn_country_code"))
                object.txn_country_code = message.txn_country_code;
            return object;
        };
    
        /**
         * Converts this CGCSystemMsg_GetAccountDetails_Response to JSON.
         * @function toJSON
         * @memberof CGCSystemMsg_GetAccountDetails_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCSystemMsg_GetAccountDetails_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCSystemMsg_GetAccountDetails_Response;
    })();
    
    $root.CMsgGCGetPersonaNames = (function() {
    
        /**
         * Properties of a CMsgGCGetPersonaNames.
         * @exports ICMsgGCGetPersonaNames
         * @interface ICMsgGCGetPersonaNames
         * @property {Array.<number|Long>|null} [steamids] CMsgGCGetPersonaNames steamids
         */
    
        /**
         * Constructs a new CMsgGCGetPersonaNames.
         * @exports CMsgGCGetPersonaNames
         * @classdesc Represents a CMsgGCGetPersonaNames.
         * @implements ICMsgGCGetPersonaNames
         * @constructor
         * @param {ICMsgGCGetPersonaNames=} [properties] Properties to set
         */
        function CMsgGCGetPersonaNames(properties) {
            this.steamids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetPersonaNames steamids.
         * @member {Array.<number|Long>} steamids
         * @memberof CMsgGCGetPersonaNames
         * @instance
         */
        CMsgGCGetPersonaNames.prototype.steamids = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCGetPersonaNames instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {ICMsgGCGetPersonaNames=} [properties] Properties to set
         * @returns {CMsgGCGetPersonaNames} CMsgGCGetPersonaNames instance
         */
        CMsgGCGetPersonaNames.create = function create(properties) {
            return new CMsgGCGetPersonaNames(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetPersonaNames message. Does not implicitly {@link CMsgGCGetPersonaNames.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {ICMsgGCGetPersonaNames} message CMsgGCGetPersonaNames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPersonaNames.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamids != null && message.steamids.length)
                for (var i = 0; i < message.steamids.length; ++i)
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetPersonaNames message, length delimited. Does not implicitly {@link CMsgGCGetPersonaNames.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {ICMsgGCGetPersonaNames} message CMsgGCGetPersonaNames message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPersonaNames.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetPersonaNames message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetPersonaNames} CMsgGCGetPersonaNames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPersonaNames.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetPersonaNames();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.steamids && message.steamids.length))
                        message.steamids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.steamids.push(reader.fixed64());
                    } else
                        message.steamids.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetPersonaNames message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetPersonaNames} CMsgGCGetPersonaNames
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPersonaNames.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetPersonaNames message.
         * @function verify
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetPersonaNames.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamids != null && message.hasOwnProperty("steamids")) {
                if (!Array.isArray(message.steamids))
                    return "steamids: array expected";
                for (var i = 0; i < message.steamids.length; ++i)
                    if (!$util.isInteger(message.steamids[i]) && !(message.steamids[i] && $util.isInteger(message.steamids[i].low) && $util.isInteger(message.steamids[i].high)))
                        return "steamids: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCGetPersonaNames message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetPersonaNames} CMsgGCGetPersonaNames
         */
        CMsgGCGetPersonaNames.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetPersonaNames)
                return object;
            var message = new $root.CMsgGCGetPersonaNames();
            if (object.steamids) {
                if (!Array.isArray(object.steamids))
                    throw TypeError(".CMsgGCGetPersonaNames.steamids: array expected");
                message.steamids = [];
                for (var i = 0; i < object.steamids.length; ++i)
                    if ($util.Long)
                        (message.steamids[i] = $util.Long.fromValue(object.steamids[i])).unsigned = false;
                    else if (typeof object.steamids[i] === "string")
                        message.steamids[i] = parseInt(object.steamids[i], 10);
                    else if (typeof object.steamids[i] === "number")
                        message.steamids[i] = object.steamids[i];
                    else if (typeof object.steamids[i] === "object")
                        message.steamids[i] = new $util.LongBits(object.steamids[i].low >>> 0, object.steamids[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetPersonaNames message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetPersonaNames
         * @static
         * @param {CMsgGCGetPersonaNames} message CMsgGCGetPersonaNames
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetPersonaNames.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.steamids = [];
            if (message.steamids && message.steamids.length) {
                object.steamids = [];
                for (var j = 0; j < message.steamids.length; ++j)
                    if (typeof message.steamids[j] === "number")
                        object.steamids[j] = options.longs === String ? String(message.steamids[j]) : message.steamids[j];
                    else
                        object.steamids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.steamids[j]) : options.longs === Number ? new $util.LongBits(message.steamids[j].low >>> 0, message.steamids[j].high >>> 0).toNumber() : message.steamids[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCGetPersonaNames to JSON.
         * @function toJSON
         * @memberof CMsgGCGetPersonaNames
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetPersonaNames.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetPersonaNames;
    })();
    
    $root.CMsgGCGetPersonaNames_Response = (function() {
    
        /**
         * Properties of a CMsgGCGetPersonaNames_Response.
         * @exports ICMsgGCGetPersonaNames_Response
         * @interface ICMsgGCGetPersonaNames_Response
         * @property {Array.<CMsgGCGetPersonaNames_Response.IPersonaName>|null} [succeeded_lookups] CMsgGCGetPersonaNames_Response succeeded_lookups
         * @property {Array.<number|Long>|null} [failed_lookup_steamids] CMsgGCGetPersonaNames_Response failed_lookup_steamids
         */
    
        /**
         * Constructs a new CMsgGCGetPersonaNames_Response.
         * @exports CMsgGCGetPersonaNames_Response
         * @classdesc Represents a CMsgGCGetPersonaNames_Response.
         * @implements ICMsgGCGetPersonaNames_Response
         * @constructor
         * @param {ICMsgGCGetPersonaNames_Response=} [properties] Properties to set
         */
        function CMsgGCGetPersonaNames_Response(properties) {
            this.succeeded_lookups = [];
            this.failed_lookup_steamids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetPersonaNames_Response succeeded_lookups.
         * @member {Array.<CMsgGCGetPersonaNames_Response.IPersonaName>} succeeded_lookups
         * @memberof CMsgGCGetPersonaNames_Response
         * @instance
         */
        CMsgGCGetPersonaNames_Response.prototype.succeeded_lookups = $util.emptyArray;
    
        /**
         * CMsgGCGetPersonaNames_Response failed_lookup_steamids.
         * @member {Array.<number|Long>} failed_lookup_steamids
         * @memberof CMsgGCGetPersonaNames_Response
         * @instance
         */
        CMsgGCGetPersonaNames_Response.prototype.failed_lookup_steamids = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCGetPersonaNames_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {ICMsgGCGetPersonaNames_Response=} [properties] Properties to set
         * @returns {CMsgGCGetPersonaNames_Response} CMsgGCGetPersonaNames_Response instance
         */
        CMsgGCGetPersonaNames_Response.create = function create(properties) {
            return new CMsgGCGetPersonaNames_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetPersonaNames_Response message. Does not implicitly {@link CMsgGCGetPersonaNames_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {ICMsgGCGetPersonaNames_Response} message CMsgGCGetPersonaNames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPersonaNames_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.succeeded_lookups != null && message.succeeded_lookups.length)
                for (var i = 0; i < message.succeeded_lookups.length; ++i)
                    $root.CMsgGCGetPersonaNames_Response.PersonaName.encode(message.succeeded_lookups[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.failed_lookup_steamids != null && message.failed_lookup_steamids.length)
                for (var i = 0; i < message.failed_lookup_steamids.length; ++i)
                    writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.failed_lookup_steamids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetPersonaNames_Response message, length delimited. Does not implicitly {@link CMsgGCGetPersonaNames_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {ICMsgGCGetPersonaNames_Response} message CMsgGCGetPersonaNames_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPersonaNames_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetPersonaNames_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetPersonaNames_Response} CMsgGCGetPersonaNames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPersonaNames_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetPersonaNames_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.succeeded_lookups && message.succeeded_lookups.length))
                        message.succeeded_lookups = [];
                    message.succeeded_lookups.push($root.CMsgGCGetPersonaNames_Response.PersonaName.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.failed_lookup_steamids && message.failed_lookup_steamids.length))
                        message.failed_lookup_steamids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.failed_lookup_steamids.push(reader.fixed64());
                    } else
                        message.failed_lookup_steamids.push(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetPersonaNames_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetPersonaNames_Response} CMsgGCGetPersonaNames_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPersonaNames_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetPersonaNames_Response message.
         * @function verify
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetPersonaNames_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.succeeded_lookups != null && message.hasOwnProperty("succeeded_lookups")) {
                if (!Array.isArray(message.succeeded_lookups))
                    return "succeeded_lookups: array expected";
                for (var i = 0; i < message.succeeded_lookups.length; ++i) {
                    var error = $root.CMsgGCGetPersonaNames_Response.PersonaName.verify(message.succeeded_lookups[i]);
                    if (error)
                        return "succeeded_lookups." + error;
                }
            }
            if (message.failed_lookup_steamids != null && message.hasOwnProperty("failed_lookup_steamids")) {
                if (!Array.isArray(message.failed_lookup_steamids))
                    return "failed_lookup_steamids: array expected";
                for (var i = 0; i < message.failed_lookup_steamids.length; ++i)
                    if (!$util.isInteger(message.failed_lookup_steamids[i]) && !(message.failed_lookup_steamids[i] && $util.isInteger(message.failed_lookup_steamids[i].low) && $util.isInteger(message.failed_lookup_steamids[i].high)))
                        return "failed_lookup_steamids: integer|Long[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCGetPersonaNames_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetPersonaNames_Response} CMsgGCGetPersonaNames_Response
         */
        CMsgGCGetPersonaNames_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetPersonaNames_Response)
                return object;
            var message = new $root.CMsgGCGetPersonaNames_Response();
            if (object.succeeded_lookups) {
                if (!Array.isArray(object.succeeded_lookups))
                    throw TypeError(".CMsgGCGetPersonaNames_Response.succeeded_lookups: array expected");
                message.succeeded_lookups = [];
                for (var i = 0; i < object.succeeded_lookups.length; ++i) {
                    if (typeof object.succeeded_lookups[i] !== "object")
                        throw TypeError(".CMsgGCGetPersonaNames_Response.succeeded_lookups: object expected");
                    message.succeeded_lookups[i] = $root.CMsgGCGetPersonaNames_Response.PersonaName.fromObject(object.succeeded_lookups[i]);
                }
            }
            if (object.failed_lookup_steamids) {
                if (!Array.isArray(object.failed_lookup_steamids))
                    throw TypeError(".CMsgGCGetPersonaNames_Response.failed_lookup_steamids: array expected");
                message.failed_lookup_steamids = [];
                for (var i = 0; i < object.failed_lookup_steamids.length; ++i)
                    if ($util.Long)
                        (message.failed_lookup_steamids[i] = $util.Long.fromValue(object.failed_lookup_steamids[i])).unsigned = false;
                    else if (typeof object.failed_lookup_steamids[i] === "string")
                        message.failed_lookup_steamids[i] = parseInt(object.failed_lookup_steamids[i], 10);
                    else if (typeof object.failed_lookup_steamids[i] === "number")
                        message.failed_lookup_steamids[i] = object.failed_lookup_steamids[i];
                    else if (typeof object.failed_lookup_steamids[i] === "object")
                        message.failed_lookup_steamids[i] = new $util.LongBits(object.failed_lookup_steamids[i].low >>> 0, object.failed_lookup_steamids[i].high >>> 0).toNumber();
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetPersonaNames_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetPersonaNames_Response
         * @static
         * @param {CMsgGCGetPersonaNames_Response} message CMsgGCGetPersonaNames_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetPersonaNames_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.succeeded_lookups = [];
                object.failed_lookup_steamids = [];
            }
            if (message.succeeded_lookups && message.succeeded_lookups.length) {
                object.succeeded_lookups = [];
                for (var j = 0; j < message.succeeded_lookups.length; ++j)
                    object.succeeded_lookups[j] = $root.CMsgGCGetPersonaNames_Response.PersonaName.toObject(message.succeeded_lookups[j], options);
            }
            if (message.failed_lookup_steamids && message.failed_lookup_steamids.length) {
                object.failed_lookup_steamids = [];
                for (var j = 0; j < message.failed_lookup_steamids.length; ++j)
                    if (typeof message.failed_lookup_steamids[j] === "number")
                        object.failed_lookup_steamids[j] = options.longs === String ? String(message.failed_lookup_steamids[j]) : message.failed_lookup_steamids[j];
                    else
                        object.failed_lookup_steamids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.failed_lookup_steamids[j]) : options.longs === Number ? new $util.LongBits(message.failed_lookup_steamids[j].low >>> 0, message.failed_lookup_steamids[j].high >>> 0).toNumber() : message.failed_lookup_steamids[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCGetPersonaNames_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCGetPersonaNames_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetPersonaNames_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCGetPersonaNames_Response.PersonaName = (function() {
    
            /**
             * Properties of a PersonaName.
             * @memberof CMsgGCGetPersonaNames_Response
             * @interface IPersonaName
             * @property {number|Long|null} [steamid] PersonaName steamid
             * @property {string|null} [persona_name] PersonaName persona_name
             */
    
            /**
             * Constructs a new PersonaName.
             * @memberof CMsgGCGetPersonaNames_Response
             * @classdesc Represents a PersonaName.
             * @implements IPersonaName
             * @constructor
             * @param {CMsgGCGetPersonaNames_Response.IPersonaName=} [properties] Properties to set
             */
            function PersonaName(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PersonaName steamid.
             * @member {number|Long} steamid
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @instance
             */
            PersonaName.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
            /**
             * PersonaName persona_name.
             * @member {string} persona_name
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @instance
             */
            PersonaName.prototype.persona_name = "";
    
            /**
             * Creates a new PersonaName instance using the specified properties.
             * @function create
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {CMsgGCGetPersonaNames_Response.IPersonaName=} [properties] Properties to set
             * @returns {CMsgGCGetPersonaNames_Response.PersonaName} PersonaName instance
             */
            PersonaName.create = function create(properties) {
                return new PersonaName(properties);
            };
    
            /**
             * Encodes the specified PersonaName message. Does not implicitly {@link CMsgGCGetPersonaNames_Response.PersonaName.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {CMsgGCGetPersonaNames_Response.IPersonaName} message PersonaName message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PersonaName.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
                if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.persona_name);
                return writer;
            };
    
            /**
             * Encodes the specified PersonaName message, length delimited. Does not implicitly {@link CMsgGCGetPersonaNames_Response.PersonaName.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {CMsgGCGetPersonaNames_Response.IPersonaName} message PersonaName message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PersonaName.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PersonaName message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCGetPersonaNames_Response.PersonaName} PersonaName
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PersonaName.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetPersonaNames_Response.PersonaName();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.steamid = reader.fixed64();
                        break;
                    case 2:
                        message.persona_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PersonaName message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCGetPersonaNames_Response.PersonaName} PersonaName
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PersonaName.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PersonaName message.
             * @function verify
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PersonaName.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                        return "steamid: integer|Long expected";
                if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                    if (!$util.isString(message.persona_name))
                        return "persona_name: string expected";
                return null;
            };
    
            /**
             * Creates a PersonaName message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCGetPersonaNames_Response.PersonaName} PersonaName
             */
            PersonaName.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCGetPersonaNames_Response.PersonaName)
                    return object;
                var message = new $root.CMsgGCGetPersonaNames_Response.PersonaName();
                if (object.steamid != null)
                    if ($util.Long)
                        (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                    else if (typeof object.steamid === "string")
                        message.steamid = parseInt(object.steamid, 10);
                    else if (typeof object.steamid === "number")
                        message.steamid = object.steamid;
                    else if (typeof object.steamid === "object")
                        message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
                if (object.persona_name != null)
                    message.persona_name = String(object.persona_name);
                return message;
            };
    
            /**
             * Creates a plain object from a PersonaName message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @static
             * @param {CMsgGCGetPersonaNames_Response.PersonaName} message PersonaName
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PersonaName.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.steamid = options.longs === String ? "0" : 0;
                    object.persona_name = "";
                }
                if (message.steamid != null && message.hasOwnProperty("steamid"))
                    if (typeof message.steamid === "number")
                        object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                    else
                        object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
                if (message.persona_name != null && message.hasOwnProperty("persona_name"))
                    object.persona_name = message.persona_name;
                return object;
            };
    
            /**
             * Converts this PersonaName to JSON.
             * @function toJSON
             * @memberof CMsgGCGetPersonaNames_Response.PersonaName
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PersonaName.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PersonaName;
        })();
    
        return CMsgGCGetPersonaNames_Response;
    })();
    
    $root.CMsgGCCheckFriendship = (function() {
    
        /**
         * Properties of a CMsgGCCheckFriendship.
         * @exports ICMsgGCCheckFriendship
         * @interface ICMsgGCCheckFriendship
         * @property {number|Long|null} [steamid_left] CMsgGCCheckFriendship steamid_left
         * @property {number|Long|null} [steamid_right] CMsgGCCheckFriendship steamid_right
         */
    
        /**
         * Constructs a new CMsgGCCheckFriendship.
         * @exports CMsgGCCheckFriendship
         * @classdesc Represents a CMsgGCCheckFriendship.
         * @implements ICMsgGCCheckFriendship
         * @constructor
         * @param {ICMsgGCCheckFriendship=} [properties] Properties to set
         */
        function CMsgGCCheckFriendship(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCheckFriendship steamid_left.
         * @member {number|Long} steamid_left
         * @memberof CMsgGCCheckFriendship
         * @instance
         */
        CMsgGCCheckFriendship.prototype.steamid_left = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCCheckFriendship steamid_right.
         * @member {number|Long} steamid_right
         * @memberof CMsgGCCheckFriendship
         * @instance
         */
        CMsgGCCheckFriendship.prototype.steamid_right = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgGCCheckFriendship instance using the specified properties.
         * @function create
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {ICMsgGCCheckFriendship=} [properties] Properties to set
         * @returns {CMsgGCCheckFriendship} CMsgGCCheckFriendship instance
         */
        CMsgGCCheckFriendship.create = function create(properties) {
            return new CMsgGCCheckFriendship(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCheckFriendship message. Does not implicitly {@link CMsgGCCheckFriendship.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {ICMsgGCCheckFriendship} message CMsgGCCheckFriendship message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCheckFriendship.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid_left != null && message.hasOwnProperty("steamid_left"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid_left);
            if (message.steamid_right != null && message.hasOwnProperty("steamid_right"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.steamid_right);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCheckFriendship message, length delimited. Does not implicitly {@link CMsgGCCheckFriendship.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {ICMsgGCCheckFriendship} message CMsgGCCheckFriendship message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCheckFriendship.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCheckFriendship message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCheckFriendship} CMsgGCCheckFriendship
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCheckFriendship.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCheckFriendship();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid_left = reader.fixed64();
                    break;
                case 2:
                    message.steamid_right = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCheckFriendship message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCheckFriendship} CMsgGCCheckFriendship
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCheckFriendship.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCheckFriendship message.
         * @function verify
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCheckFriendship.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid_left != null && message.hasOwnProperty("steamid_left"))
                if (!$util.isInteger(message.steamid_left) && !(message.steamid_left && $util.isInteger(message.steamid_left.low) && $util.isInteger(message.steamid_left.high)))
                    return "steamid_left: integer|Long expected";
            if (message.steamid_right != null && message.hasOwnProperty("steamid_right"))
                if (!$util.isInteger(message.steamid_right) && !(message.steamid_right && $util.isInteger(message.steamid_right.low) && $util.isInteger(message.steamid_right.high)))
                    return "steamid_right: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCheckFriendship message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCheckFriendship} CMsgGCCheckFriendship
         */
        CMsgGCCheckFriendship.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCheckFriendship)
                return object;
            var message = new $root.CMsgGCCheckFriendship();
            if (object.steamid_left != null)
                if ($util.Long)
                    (message.steamid_left = $util.Long.fromValue(object.steamid_left)).unsigned = false;
                else if (typeof object.steamid_left === "string")
                    message.steamid_left = parseInt(object.steamid_left, 10);
                else if (typeof object.steamid_left === "number")
                    message.steamid_left = object.steamid_left;
                else if (typeof object.steamid_left === "object")
                    message.steamid_left = new $util.LongBits(object.steamid_left.low >>> 0, object.steamid_left.high >>> 0).toNumber();
            if (object.steamid_right != null)
                if ($util.Long)
                    (message.steamid_right = $util.Long.fromValue(object.steamid_right)).unsigned = false;
                else if (typeof object.steamid_right === "string")
                    message.steamid_right = parseInt(object.steamid_right, 10);
                else if (typeof object.steamid_right === "number")
                    message.steamid_right = object.steamid_right;
                else if (typeof object.steamid_right === "object")
                    message.steamid_right = new $util.LongBits(object.steamid_right.low >>> 0, object.steamid_right.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCheckFriendship message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCheckFriendship
         * @static
         * @param {CMsgGCCheckFriendship} message CMsgGCCheckFriendship
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCheckFriendship.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_left = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_left = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid_right = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid_right = options.longs === String ? "0" : 0;
            }
            if (message.steamid_left != null && message.hasOwnProperty("steamid_left"))
                if (typeof message.steamid_left === "number")
                    object.steamid_left = options.longs === String ? String(message.steamid_left) : message.steamid_left;
                else
                    object.steamid_left = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_left) : options.longs === Number ? new $util.LongBits(message.steamid_left.low >>> 0, message.steamid_left.high >>> 0).toNumber() : message.steamid_left;
            if (message.steamid_right != null && message.hasOwnProperty("steamid_right"))
                if (typeof message.steamid_right === "number")
                    object.steamid_right = options.longs === String ? String(message.steamid_right) : message.steamid_right;
                else
                    object.steamid_right = options.longs === String ? $util.Long.prototype.toString.call(message.steamid_right) : options.longs === Number ? new $util.LongBits(message.steamid_right.low >>> 0, message.steamid_right.high >>> 0).toNumber() : message.steamid_right;
            return object;
        };
    
        /**
         * Converts this CMsgGCCheckFriendship to JSON.
         * @function toJSON
         * @memberof CMsgGCCheckFriendship
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCheckFriendship.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCheckFriendship;
    })();
    
    $root.CMsgGCCheckFriendship_Response = (function() {
    
        /**
         * Properties of a CMsgGCCheckFriendship_Response.
         * @exports ICMsgGCCheckFriendship_Response
         * @interface ICMsgGCCheckFriendship_Response
         * @property {boolean|null} [success] CMsgGCCheckFriendship_Response success
         * @property {boolean|null} [found_friendship] CMsgGCCheckFriendship_Response found_friendship
         */
    
        /**
         * Constructs a new CMsgGCCheckFriendship_Response.
         * @exports CMsgGCCheckFriendship_Response
         * @classdesc Represents a CMsgGCCheckFriendship_Response.
         * @implements ICMsgGCCheckFriendship_Response
         * @constructor
         * @param {ICMsgGCCheckFriendship_Response=} [properties] Properties to set
         */
        function CMsgGCCheckFriendship_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCCheckFriendship_Response success.
         * @member {boolean} success
         * @memberof CMsgGCCheckFriendship_Response
         * @instance
         */
        CMsgGCCheckFriendship_Response.prototype.success = false;
    
        /**
         * CMsgGCCheckFriendship_Response found_friendship.
         * @member {boolean} found_friendship
         * @memberof CMsgGCCheckFriendship_Response
         * @instance
         */
        CMsgGCCheckFriendship_Response.prototype.found_friendship = false;
    
        /**
         * Creates a new CMsgGCCheckFriendship_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {ICMsgGCCheckFriendship_Response=} [properties] Properties to set
         * @returns {CMsgGCCheckFriendship_Response} CMsgGCCheckFriendship_Response instance
         */
        CMsgGCCheckFriendship_Response.create = function create(properties) {
            return new CMsgGCCheckFriendship_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCCheckFriendship_Response message. Does not implicitly {@link CMsgGCCheckFriendship_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {ICMsgGCCheckFriendship_Response} message CMsgGCCheckFriendship_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCheckFriendship_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && message.hasOwnProperty("success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.found_friendship != null && message.hasOwnProperty("found_friendship"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.found_friendship);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCCheckFriendship_Response message, length delimited. Does not implicitly {@link CMsgGCCheckFriendship_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {ICMsgGCCheckFriendship_Response} message CMsgGCCheckFriendship_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCCheckFriendship_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCCheckFriendship_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCCheckFriendship_Response} CMsgGCCheckFriendship_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCheckFriendship_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCCheckFriendship_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.found_friendship = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCCheckFriendship_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCCheckFriendship_Response} CMsgGCCheckFriendship_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCCheckFriendship_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCCheckFriendship_Response message.
         * @function verify
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCCheckFriendship_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.found_friendship != null && message.hasOwnProperty("found_friendship"))
                if (typeof message.found_friendship !== "boolean")
                    return "found_friendship: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCCheckFriendship_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCCheckFriendship_Response} CMsgGCCheckFriendship_Response
         */
        CMsgGCCheckFriendship_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCCheckFriendship_Response)
                return object;
            var message = new $root.CMsgGCCheckFriendship_Response();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.found_friendship != null)
                message.found_friendship = Boolean(object.found_friendship);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCCheckFriendship_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCCheckFriendship_Response
         * @static
         * @param {CMsgGCCheckFriendship_Response} message CMsgGCCheckFriendship_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCCheckFriendship_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.success = false;
                object.found_friendship = false;
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.found_friendship != null && message.hasOwnProperty("found_friendship"))
                object.found_friendship = message.found_friendship;
            return object;
        };
    
        /**
         * Converts this CMsgGCCheckFriendship_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCCheckFriendship_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCCheckFriendship_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCCheckFriendship_Response;
    })();
    
    $root.CMsgGCMsgMasterSetDirectory = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetDirectory.
         * @exports ICMsgGCMsgMasterSetDirectory
         * @interface ICMsgGCMsgMasterSetDirectory
         * @property {number|null} [master_dir_index] CMsgGCMsgMasterSetDirectory master_dir_index
         * @property {Array.<CMsgGCMsgMasterSetDirectory.ISubGC>|null} [dir] CMsgGCMsgMasterSetDirectory dir
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetDirectory.
         * @exports CMsgGCMsgMasterSetDirectory
         * @classdesc Represents a CMsgGCMsgMasterSetDirectory.
         * @implements ICMsgGCMsgMasterSetDirectory
         * @constructor
         * @param {ICMsgGCMsgMasterSetDirectory=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetDirectory(properties) {
            this.dir = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetDirectory master_dir_index.
         * @member {number} master_dir_index
         * @memberof CMsgGCMsgMasterSetDirectory
         * @instance
         */
        CMsgGCMsgMasterSetDirectory.prototype.master_dir_index = 0;
    
        /**
         * CMsgGCMsgMasterSetDirectory dir.
         * @member {Array.<CMsgGCMsgMasterSetDirectory.ISubGC>} dir
         * @memberof CMsgGCMsgMasterSetDirectory
         * @instance
         */
        CMsgGCMsgMasterSetDirectory.prototype.dir = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCMsgMasterSetDirectory instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetDirectory} CMsgGCMsgMasterSetDirectory instance
         */
        CMsgGCMsgMasterSetDirectory.create = function create(properties) {
            return new CMsgGCMsgMasterSetDirectory(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetDirectory message. Does not implicitly {@link CMsgGCMsgMasterSetDirectory.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory} message CMsgGCMsgMasterSetDirectory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetDirectory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.master_dir_index != null && message.hasOwnProperty("master_dir_index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.master_dir_index);
            if (message.dir != null && message.dir.length)
                for (var i = 0; i < message.dir.length; ++i)
                    $root.CMsgGCMsgMasterSetDirectory.SubGC.encode(message.dir[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetDirectory message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetDirectory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory} message CMsgGCMsgMasterSetDirectory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetDirectory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetDirectory message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetDirectory} CMsgGCMsgMasterSetDirectory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetDirectory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetDirectory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.master_dir_index = reader.uint32();
                    break;
                case 2:
                    if (!(message.dir && message.dir.length))
                        message.dir = [];
                    message.dir.push($root.CMsgGCMsgMasterSetDirectory.SubGC.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetDirectory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetDirectory} CMsgGCMsgMasterSetDirectory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetDirectory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetDirectory message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetDirectory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.master_dir_index != null && message.hasOwnProperty("master_dir_index"))
                if (!$util.isInteger(message.master_dir_index))
                    return "master_dir_index: integer expected";
            if (message.dir != null && message.hasOwnProperty("dir")) {
                if (!Array.isArray(message.dir))
                    return "dir: array expected";
                for (var i = 0; i < message.dir.length; ++i) {
                    var error = $root.CMsgGCMsgMasterSetDirectory.SubGC.verify(message.dir[i]);
                    if (error)
                        return "dir." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetDirectory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetDirectory} CMsgGCMsgMasterSetDirectory
         */
        CMsgGCMsgMasterSetDirectory.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetDirectory)
                return object;
            var message = new $root.CMsgGCMsgMasterSetDirectory();
            if (object.master_dir_index != null)
                message.master_dir_index = object.master_dir_index >>> 0;
            if (object.dir) {
                if (!Array.isArray(object.dir))
                    throw TypeError(".CMsgGCMsgMasterSetDirectory.dir: array expected");
                message.dir = [];
                for (var i = 0; i < object.dir.length; ++i) {
                    if (typeof object.dir[i] !== "object")
                        throw TypeError(".CMsgGCMsgMasterSetDirectory.dir: object expected");
                    message.dir[i] = $root.CMsgGCMsgMasterSetDirectory.SubGC.fromObject(object.dir[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetDirectory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetDirectory
         * @static
         * @param {CMsgGCMsgMasterSetDirectory} message CMsgGCMsgMasterSetDirectory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetDirectory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.dir = [];
            if (options.defaults)
                object.master_dir_index = 0;
            if (message.master_dir_index != null && message.hasOwnProperty("master_dir_index"))
                object.master_dir_index = message.master_dir_index;
            if (message.dir && message.dir.length) {
                object.dir = [];
                for (var j = 0; j < message.dir.length; ++j)
                    object.dir[j] = $root.CMsgGCMsgMasterSetDirectory.SubGC.toObject(message.dir[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetDirectory to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetDirectory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetDirectory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCMsgMasterSetDirectory.SubGC = (function() {
    
            /**
             * Properties of a SubGC.
             * @memberof CMsgGCMsgMasterSetDirectory
             * @interface ISubGC
             * @property {number|null} [dir_index] SubGC dir_index
             * @property {string|null} [name] SubGC name
             * @property {string|null} [box] SubGC box
             * @property {string|null} [command_line] SubGC command_line
             * @property {string|null} [gc_binary] SubGC gc_binary
             */
    
            /**
             * Constructs a new SubGC.
             * @memberof CMsgGCMsgMasterSetDirectory
             * @classdesc Represents a SubGC.
             * @implements ISubGC
             * @constructor
             * @param {CMsgGCMsgMasterSetDirectory.ISubGC=} [properties] Properties to set
             */
            function SubGC(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * SubGC dir_index.
             * @member {number} dir_index
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             */
            SubGC.prototype.dir_index = 0;
    
            /**
             * SubGC name.
             * @member {string} name
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             */
            SubGC.prototype.name = "";
    
            /**
             * SubGC box.
             * @member {string} box
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             */
            SubGC.prototype.box = "";
    
            /**
             * SubGC command_line.
             * @member {string} command_line
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             */
            SubGC.prototype.command_line = "";
    
            /**
             * SubGC gc_binary.
             * @member {string} gc_binary
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             */
            SubGC.prototype.gc_binary = "";
    
            /**
             * Creates a new SubGC instance using the specified properties.
             * @function create
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {CMsgGCMsgMasterSetDirectory.ISubGC=} [properties] Properties to set
             * @returns {CMsgGCMsgMasterSetDirectory.SubGC} SubGC instance
             */
            SubGC.create = function create(properties) {
                return new SubGC(properties);
            };
    
            /**
             * Encodes the specified SubGC message. Does not implicitly {@link CMsgGCMsgMasterSetDirectory.SubGC.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {CMsgGCMsgMasterSetDirectory.ISubGC} message SubGC message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubGC.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.dir_index);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.box != null && message.hasOwnProperty("box"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.box);
                if (message.command_line != null && message.hasOwnProperty("command_line"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.command_line);
                if (message.gc_binary != null && message.hasOwnProperty("gc_binary"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.gc_binary);
                return writer;
            };
    
            /**
             * Encodes the specified SubGC message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetDirectory.SubGC.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {CMsgGCMsgMasterSetDirectory.ISubGC} message SubGC message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubGC.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a SubGC message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCMsgMasterSetDirectory.SubGC} SubGC
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubGC.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetDirectory.SubGC();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.dir_index = reader.uint32();
                        break;
                    case 2:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.box = reader.string();
                        break;
                    case 4:
                        message.command_line = reader.string();
                        break;
                    case 5:
                        message.gc_binary = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a SubGC message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCMsgMasterSetDirectory.SubGC} SubGC
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubGC.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a SubGC message.
             * @function verify
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SubGC.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                    if (!$util.isInteger(message.dir_index))
                        return "dir_index: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.box != null && message.hasOwnProperty("box"))
                    if (!$util.isString(message.box))
                        return "box: string expected";
                if (message.command_line != null && message.hasOwnProperty("command_line"))
                    if (!$util.isString(message.command_line))
                        return "command_line: string expected";
                if (message.gc_binary != null && message.hasOwnProperty("gc_binary"))
                    if (!$util.isString(message.gc_binary))
                        return "gc_binary: string expected";
                return null;
            };
    
            /**
             * Creates a SubGC message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCMsgMasterSetDirectory.SubGC} SubGC
             */
            SubGC.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCMsgMasterSetDirectory.SubGC)
                    return object;
                var message = new $root.CMsgGCMsgMasterSetDirectory.SubGC();
                if (object.dir_index != null)
                    message.dir_index = object.dir_index >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.box != null)
                    message.box = String(object.box);
                if (object.command_line != null)
                    message.command_line = String(object.command_line);
                if (object.gc_binary != null)
                    message.gc_binary = String(object.gc_binary);
                return message;
            };
    
            /**
             * Creates a plain object from a SubGC message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @static
             * @param {CMsgGCMsgMasterSetDirectory.SubGC} message SubGC
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SubGC.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.dir_index = 0;
                    object.name = "";
                    object.box = "";
                    object.command_line = "";
                    object.gc_binary = "";
                }
                if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                    object.dir_index = message.dir_index;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.box != null && message.hasOwnProperty("box"))
                    object.box = message.box;
                if (message.command_line != null && message.hasOwnProperty("command_line"))
                    object.command_line = message.command_line;
                if (message.gc_binary != null && message.hasOwnProperty("gc_binary"))
                    object.gc_binary = message.gc_binary;
                return object;
            };
    
            /**
             * Converts this SubGC to JSON.
             * @function toJSON
             * @memberof CMsgGCMsgMasterSetDirectory.SubGC
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SubGC.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return SubGC;
        })();
    
        return CMsgGCMsgMasterSetDirectory;
    })();
    
    $root.CMsgGCMsgMasterSetDirectory_Response = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetDirectory_Response.
         * @exports ICMsgGCMsgMasterSetDirectory_Response
         * @interface ICMsgGCMsgMasterSetDirectory_Response
         * @property {number|null} [eresult] CMsgGCMsgMasterSetDirectory_Response eresult
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetDirectory_Response.
         * @exports CMsgGCMsgMasterSetDirectory_Response
         * @classdesc Represents a CMsgGCMsgMasterSetDirectory_Response.
         * @implements ICMsgGCMsgMasterSetDirectory_Response
         * @constructor
         * @param {ICMsgGCMsgMasterSetDirectory_Response=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetDirectory_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetDirectory_Response eresult.
         * @member {number} eresult
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @instance
         */
        CMsgGCMsgMasterSetDirectory_Response.prototype.eresult = 2;
    
        /**
         * Creates a new CMsgGCMsgMasterSetDirectory_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory_Response=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetDirectory_Response} CMsgGCMsgMasterSetDirectory_Response instance
         */
        CMsgGCMsgMasterSetDirectory_Response.create = function create(properties) {
            return new CMsgGCMsgMasterSetDirectory_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetDirectory_Response message. Does not implicitly {@link CMsgGCMsgMasterSetDirectory_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory_Response} message CMsgGCMsgMasterSetDirectory_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetDirectory_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetDirectory_Response message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetDirectory_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {ICMsgGCMsgMasterSetDirectory_Response} message CMsgGCMsgMasterSetDirectory_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetDirectory_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetDirectory_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetDirectory_Response} CMsgGCMsgMasterSetDirectory_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetDirectory_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetDirectory_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetDirectory_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetDirectory_Response} CMsgGCMsgMasterSetDirectory_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetDirectory_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetDirectory_Response message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetDirectory_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetDirectory_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetDirectory_Response} CMsgGCMsgMasterSetDirectory_Response
         */
        CMsgGCMsgMasterSetDirectory_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetDirectory_Response)
                return object;
            var message = new $root.CMsgGCMsgMasterSetDirectory_Response();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetDirectory_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @static
         * @param {CMsgGCMsgMasterSetDirectory_Response} message CMsgGCMsgMasterSetDirectory_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetDirectory_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 2;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetDirectory_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetDirectory_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetDirectory_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCMsgMasterSetDirectory_Response;
    })();
    
    $root.CMsgGCMsgWebAPIJobRequestForwardResponse = (function() {
    
        /**
         * Properties of a CMsgGCMsgWebAPIJobRequestForwardResponse.
         * @exports ICMsgGCMsgWebAPIJobRequestForwardResponse
         * @interface ICMsgGCMsgWebAPIJobRequestForwardResponse
         * @property {number|null} [dir_index] CMsgGCMsgWebAPIJobRequestForwardResponse dir_index
         */
    
        /**
         * Constructs a new CMsgGCMsgWebAPIJobRequestForwardResponse.
         * @exports CMsgGCMsgWebAPIJobRequestForwardResponse
         * @classdesc Represents a CMsgGCMsgWebAPIJobRequestForwardResponse.
         * @implements ICMsgGCMsgWebAPIJobRequestForwardResponse
         * @constructor
         * @param {ICMsgGCMsgWebAPIJobRequestForwardResponse=} [properties] Properties to set
         */
        function CMsgGCMsgWebAPIJobRequestForwardResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgWebAPIJobRequestForwardResponse dir_index.
         * @member {number} dir_index
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @instance
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.prototype.dir_index = 0;
    
        /**
         * Creates a new CMsgGCMsgWebAPIJobRequestForwardResponse instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {ICMsgGCMsgWebAPIJobRequestForwardResponse=} [properties] Properties to set
         * @returns {CMsgGCMsgWebAPIJobRequestForwardResponse} CMsgGCMsgWebAPIJobRequestForwardResponse instance
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.create = function create(properties) {
            return new CMsgGCMsgWebAPIJobRequestForwardResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgWebAPIJobRequestForwardResponse message. Does not implicitly {@link CMsgGCMsgWebAPIJobRequestForwardResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {ICMsgGCMsgWebAPIJobRequestForwardResponse} message CMsgGCMsgWebAPIJobRequestForwardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.dir_index);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgWebAPIJobRequestForwardResponse message, length delimited. Does not implicitly {@link CMsgGCMsgWebAPIJobRequestForwardResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {ICMsgGCMsgWebAPIJobRequestForwardResponse} message CMsgGCMsgWebAPIJobRequestForwardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgWebAPIJobRequestForwardResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgWebAPIJobRequestForwardResponse} CMsgGCMsgWebAPIJobRequestForwardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgWebAPIJobRequestForwardResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.dir_index = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgWebAPIJobRequestForwardResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgWebAPIJobRequestForwardResponse} CMsgGCMsgWebAPIJobRequestForwardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgWebAPIJobRequestForwardResponse message.
         * @function verify
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                if (!$util.isInteger(message.dir_index))
                    return "dir_index: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgWebAPIJobRequestForwardResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgWebAPIJobRequestForwardResponse} CMsgGCMsgWebAPIJobRequestForwardResponse
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgWebAPIJobRequestForwardResponse)
                return object;
            var message = new $root.CMsgGCMsgWebAPIJobRequestForwardResponse();
            if (object.dir_index != null)
                message.dir_index = object.dir_index >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgWebAPIJobRequestForwardResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @static
         * @param {CMsgGCMsgWebAPIJobRequestForwardResponse} message CMsgGCMsgWebAPIJobRequestForwardResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.dir_index = 0;
            if (message.dir_index != null && message.hasOwnProperty("dir_index"))
                object.dir_index = message.dir_index;
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgWebAPIJobRequestForwardResponse to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgWebAPIJobRequestForwardResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgWebAPIJobRequestForwardResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCMsgWebAPIJobRequestForwardResponse;
    })();
    
    $root.CGCSystemMsg_GetPurchaseTrust_Request = (function() {
    
        /**
         * Properties of a CGCSystemMsg_GetPurchaseTrust_Request.
         * @exports ICGCSystemMsg_GetPurchaseTrust_Request
         * @interface ICGCSystemMsg_GetPurchaseTrust_Request
         * @property {number|Long|null} [steamid] CGCSystemMsg_GetPurchaseTrust_Request steamid
         */
    
        /**
         * Constructs a new CGCSystemMsg_GetPurchaseTrust_Request.
         * @exports CGCSystemMsg_GetPurchaseTrust_Request
         * @classdesc Represents a CGCSystemMsg_GetPurchaseTrust_Request.
         * @implements ICGCSystemMsg_GetPurchaseTrust_Request
         * @constructor
         * @param {ICGCSystemMsg_GetPurchaseTrust_Request=} [properties] Properties to set
         */
        function CGCSystemMsg_GetPurchaseTrust_Request(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCSystemMsg_GetPurchaseTrust_Request steamid.
         * @member {number|Long} steamid
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @instance
         */
        CGCSystemMsg_GetPurchaseTrust_Request.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CGCSystemMsg_GetPurchaseTrust_Request instance using the specified properties.
         * @function create
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Request=} [properties] Properties to set
         * @returns {CGCSystemMsg_GetPurchaseTrust_Request} CGCSystemMsg_GetPurchaseTrust_Request instance
         */
        CGCSystemMsg_GetPurchaseTrust_Request.create = function create(properties) {
            return new CGCSystemMsg_GetPurchaseTrust_Request(properties);
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetPurchaseTrust_Request message. Does not implicitly {@link CGCSystemMsg_GetPurchaseTrust_Request.verify|verify} messages.
         * @function encode
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Request} message CGCSystemMsg_GetPurchaseTrust_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetPurchaseTrust_Request.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetPurchaseTrust_Request message, length delimited. Does not implicitly {@link CGCSystemMsg_GetPurchaseTrust_Request.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Request} message CGCSystemMsg_GetPurchaseTrust_Request message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetPurchaseTrust_Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCSystemMsg_GetPurchaseTrust_Request message from the specified reader or buffer.
         * @function decode
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCSystemMsg_GetPurchaseTrust_Request} CGCSystemMsg_GetPurchaseTrust_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetPurchaseTrust_Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCSystemMsg_GetPurchaseTrust_Request();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCSystemMsg_GetPurchaseTrust_Request message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCSystemMsg_GetPurchaseTrust_Request} CGCSystemMsg_GetPurchaseTrust_Request
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetPurchaseTrust_Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCSystemMsg_GetPurchaseTrust_Request message.
         * @function verify
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCSystemMsg_GetPurchaseTrust_Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CGCSystemMsg_GetPurchaseTrust_Request message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCSystemMsg_GetPurchaseTrust_Request} CGCSystemMsg_GetPurchaseTrust_Request
         */
        CGCSystemMsg_GetPurchaseTrust_Request.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCSystemMsg_GetPurchaseTrust_Request)
                return object;
            var message = new $root.CGCSystemMsg_GetPurchaseTrust_Request();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CGCSystemMsg_GetPurchaseTrust_Request message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @static
         * @param {CGCSystemMsg_GetPurchaseTrust_Request} message CGCSystemMsg_GetPurchaseTrust_Request
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCSystemMsg_GetPurchaseTrust_Request.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CGCSystemMsg_GetPurchaseTrust_Request to JSON.
         * @function toJSON
         * @memberof CGCSystemMsg_GetPurchaseTrust_Request
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCSystemMsg_GetPurchaseTrust_Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCSystemMsg_GetPurchaseTrust_Request;
    })();
    
    $root.CGCSystemMsg_GetPurchaseTrust_Response = (function() {
    
        /**
         * Properties of a CGCSystemMsg_GetPurchaseTrust_Response.
         * @exports ICGCSystemMsg_GetPurchaseTrust_Response
         * @interface ICGCSystemMsg_GetPurchaseTrust_Response
         * @property {boolean|null} [has_prior_purchase_history] CGCSystemMsg_GetPurchaseTrust_Response has_prior_purchase_history
         * @property {boolean|null} [has_no_recent_password_resets] CGCSystemMsg_GetPurchaseTrust_Response has_no_recent_password_resets
         * @property {boolean|null} [is_wallet_cash_trusted] CGCSystemMsg_GetPurchaseTrust_Response is_wallet_cash_trusted
         * @property {number|null} [time_all_trusted] CGCSystemMsg_GetPurchaseTrust_Response time_all_trusted
         */
    
        /**
         * Constructs a new CGCSystemMsg_GetPurchaseTrust_Response.
         * @exports CGCSystemMsg_GetPurchaseTrust_Response
         * @classdesc Represents a CGCSystemMsg_GetPurchaseTrust_Response.
         * @implements ICGCSystemMsg_GetPurchaseTrust_Response
         * @constructor
         * @param {ICGCSystemMsg_GetPurchaseTrust_Response=} [properties] Properties to set
         */
        function CGCSystemMsg_GetPurchaseTrust_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGCSystemMsg_GetPurchaseTrust_Response has_prior_purchase_history.
         * @member {boolean} has_prior_purchase_history
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @instance
         */
        CGCSystemMsg_GetPurchaseTrust_Response.prototype.has_prior_purchase_history = false;
    
        /**
         * CGCSystemMsg_GetPurchaseTrust_Response has_no_recent_password_resets.
         * @member {boolean} has_no_recent_password_resets
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @instance
         */
        CGCSystemMsg_GetPurchaseTrust_Response.prototype.has_no_recent_password_resets = false;
    
        /**
         * CGCSystemMsg_GetPurchaseTrust_Response is_wallet_cash_trusted.
         * @member {boolean} is_wallet_cash_trusted
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @instance
         */
        CGCSystemMsg_GetPurchaseTrust_Response.prototype.is_wallet_cash_trusted = false;
    
        /**
         * CGCSystemMsg_GetPurchaseTrust_Response time_all_trusted.
         * @member {number} time_all_trusted
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @instance
         */
        CGCSystemMsg_GetPurchaseTrust_Response.prototype.time_all_trusted = 0;
    
        /**
         * Creates a new CGCSystemMsg_GetPurchaseTrust_Response instance using the specified properties.
         * @function create
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Response=} [properties] Properties to set
         * @returns {CGCSystemMsg_GetPurchaseTrust_Response} CGCSystemMsg_GetPurchaseTrust_Response instance
         */
        CGCSystemMsg_GetPurchaseTrust_Response.create = function create(properties) {
            return new CGCSystemMsg_GetPurchaseTrust_Response(properties);
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetPurchaseTrust_Response message. Does not implicitly {@link CGCSystemMsg_GetPurchaseTrust_Response.verify|verify} messages.
         * @function encode
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Response} message CGCSystemMsg_GetPurchaseTrust_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetPurchaseTrust_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.has_prior_purchase_history != null && message.hasOwnProperty("has_prior_purchase_history"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.has_prior_purchase_history);
            if (message.has_no_recent_password_resets != null && message.hasOwnProperty("has_no_recent_password_resets"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_no_recent_password_resets);
            if (message.is_wallet_cash_trusted != null && message.hasOwnProperty("is_wallet_cash_trusted"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_wallet_cash_trusted);
            if (message.time_all_trusted != null && message.hasOwnProperty("time_all_trusted"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time_all_trusted);
            return writer;
        };
    
        /**
         * Encodes the specified CGCSystemMsg_GetPurchaseTrust_Response message, length delimited. Does not implicitly {@link CGCSystemMsg_GetPurchaseTrust_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {ICGCSystemMsg_GetPurchaseTrust_Response} message CGCSystemMsg_GetPurchaseTrust_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGCSystemMsg_GetPurchaseTrust_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGCSystemMsg_GetPurchaseTrust_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGCSystemMsg_GetPurchaseTrust_Response} CGCSystemMsg_GetPurchaseTrust_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetPurchaseTrust_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGCSystemMsg_GetPurchaseTrust_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.has_prior_purchase_history = reader.bool();
                    break;
                case 2:
                    message.has_no_recent_password_resets = reader.bool();
                    break;
                case 3:
                    message.is_wallet_cash_trusted = reader.bool();
                    break;
                case 4:
                    message.time_all_trusted = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGCSystemMsg_GetPurchaseTrust_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGCSystemMsg_GetPurchaseTrust_Response} CGCSystemMsg_GetPurchaseTrust_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGCSystemMsg_GetPurchaseTrust_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGCSystemMsg_GetPurchaseTrust_Response message.
         * @function verify
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGCSystemMsg_GetPurchaseTrust_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.has_prior_purchase_history != null && message.hasOwnProperty("has_prior_purchase_history"))
                if (typeof message.has_prior_purchase_history !== "boolean")
                    return "has_prior_purchase_history: boolean expected";
            if (message.has_no_recent_password_resets != null && message.hasOwnProperty("has_no_recent_password_resets"))
                if (typeof message.has_no_recent_password_resets !== "boolean")
                    return "has_no_recent_password_resets: boolean expected";
            if (message.is_wallet_cash_trusted != null && message.hasOwnProperty("is_wallet_cash_trusted"))
                if (typeof message.is_wallet_cash_trusted !== "boolean")
                    return "is_wallet_cash_trusted: boolean expected";
            if (message.time_all_trusted != null && message.hasOwnProperty("time_all_trusted"))
                if (!$util.isInteger(message.time_all_trusted))
                    return "time_all_trusted: integer expected";
            return null;
        };
    
        /**
         * Creates a CGCSystemMsg_GetPurchaseTrust_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGCSystemMsg_GetPurchaseTrust_Response} CGCSystemMsg_GetPurchaseTrust_Response
         */
        CGCSystemMsg_GetPurchaseTrust_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CGCSystemMsg_GetPurchaseTrust_Response)
                return object;
            var message = new $root.CGCSystemMsg_GetPurchaseTrust_Response();
            if (object.has_prior_purchase_history != null)
                message.has_prior_purchase_history = Boolean(object.has_prior_purchase_history);
            if (object.has_no_recent_password_resets != null)
                message.has_no_recent_password_resets = Boolean(object.has_no_recent_password_resets);
            if (object.is_wallet_cash_trusted != null)
                message.is_wallet_cash_trusted = Boolean(object.is_wallet_cash_trusted);
            if (object.time_all_trusted != null)
                message.time_all_trusted = object.time_all_trusted >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CGCSystemMsg_GetPurchaseTrust_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @static
         * @param {CGCSystemMsg_GetPurchaseTrust_Response} message CGCSystemMsg_GetPurchaseTrust_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGCSystemMsg_GetPurchaseTrust_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.has_prior_purchase_history = false;
                object.has_no_recent_password_resets = false;
                object.is_wallet_cash_trusted = false;
                object.time_all_trusted = 0;
            }
            if (message.has_prior_purchase_history != null && message.hasOwnProperty("has_prior_purchase_history"))
                object.has_prior_purchase_history = message.has_prior_purchase_history;
            if (message.has_no_recent_password_resets != null && message.hasOwnProperty("has_no_recent_password_resets"))
                object.has_no_recent_password_resets = message.has_no_recent_password_resets;
            if (message.is_wallet_cash_trusted != null && message.hasOwnProperty("is_wallet_cash_trusted"))
                object.is_wallet_cash_trusted = message.is_wallet_cash_trusted;
            if (message.time_all_trusted != null && message.hasOwnProperty("time_all_trusted"))
                object.time_all_trusted = message.time_all_trusted;
            return object;
        };
    
        /**
         * Converts this CGCSystemMsg_GetPurchaseTrust_Response to JSON.
         * @function toJSON
         * @memberof CGCSystemMsg_GetPurchaseTrust_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGCSystemMsg_GetPurchaseTrust_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CGCSystemMsg_GetPurchaseTrust_Response;
    })();
    
    $root.CMsgGCHAccountVacStatusChange = (function() {
    
        /**
         * Properties of a CMsgGCHAccountVacStatusChange.
         * @exports ICMsgGCHAccountVacStatusChange
         * @interface ICMsgGCHAccountVacStatusChange
         * @property {number|Long|null} [steam_id] CMsgGCHAccountVacStatusChange steam_id
         * @property {number|null} [app_id] CMsgGCHAccountVacStatusChange app_id
         * @property {number|null} [rtime_vacban_starts] CMsgGCHAccountVacStatusChange rtime_vacban_starts
         * @property {boolean|null} [is_banned_now] CMsgGCHAccountVacStatusChange is_banned_now
         * @property {boolean|null} [is_banned_future] CMsgGCHAccountVacStatusChange is_banned_future
         */
    
        /**
         * Constructs a new CMsgGCHAccountVacStatusChange.
         * @exports CMsgGCHAccountVacStatusChange
         * @classdesc Represents a CMsgGCHAccountVacStatusChange.
         * @implements ICMsgGCHAccountVacStatusChange
         * @constructor
         * @param {ICMsgGCHAccountVacStatusChange=} [properties] Properties to set
         */
        function CMsgGCHAccountVacStatusChange(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCHAccountVacStatusChange steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         */
        CMsgGCHAccountVacStatusChange.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCHAccountVacStatusChange app_id.
         * @member {number} app_id
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         */
        CMsgGCHAccountVacStatusChange.prototype.app_id = 0;
    
        /**
         * CMsgGCHAccountVacStatusChange rtime_vacban_starts.
         * @member {number} rtime_vacban_starts
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         */
        CMsgGCHAccountVacStatusChange.prototype.rtime_vacban_starts = 0;
    
        /**
         * CMsgGCHAccountVacStatusChange is_banned_now.
         * @member {boolean} is_banned_now
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         */
        CMsgGCHAccountVacStatusChange.prototype.is_banned_now = false;
    
        /**
         * CMsgGCHAccountVacStatusChange is_banned_future.
         * @member {boolean} is_banned_future
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         */
        CMsgGCHAccountVacStatusChange.prototype.is_banned_future = false;
    
        /**
         * Creates a new CMsgGCHAccountVacStatusChange instance using the specified properties.
         * @function create
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {ICMsgGCHAccountVacStatusChange=} [properties] Properties to set
         * @returns {CMsgGCHAccountVacStatusChange} CMsgGCHAccountVacStatusChange instance
         */
        CMsgGCHAccountVacStatusChange.create = function create(properties) {
            return new CMsgGCHAccountVacStatusChange(properties);
        };
    
        /**
         * Encodes the specified CMsgGCHAccountVacStatusChange message. Does not implicitly {@link CMsgGCHAccountVacStatusChange.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {ICMsgGCHAccountVacStatusChange} message CMsgGCHAccountVacStatusChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCHAccountVacStatusChange.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id);
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.app_id);
            if (message.rtime_vacban_starts != null && message.hasOwnProperty("rtime_vacban_starts"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rtime_vacban_starts);
            if (message.is_banned_now != null && message.hasOwnProperty("is_banned_now"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.is_banned_now);
            if (message.is_banned_future != null && message.hasOwnProperty("is_banned_future"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_banned_future);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCHAccountVacStatusChange message, length delimited. Does not implicitly {@link CMsgGCHAccountVacStatusChange.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {ICMsgGCHAccountVacStatusChange} message CMsgGCHAccountVacStatusChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCHAccountVacStatusChange.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCHAccountVacStatusChange message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCHAccountVacStatusChange} CMsgGCHAccountVacStatusChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCHAccountVacStatusChange.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCHAccountVacStatusChange();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_id = reader.fixed64();
                    break;
                case 2:
                    message.app_id = reader.uint32();
                    break;
                case 3:
                    message.rtime_vacban_starts = reader.uint32();
                    break;
                case 4:
                    message.is_banned_now = reader.bool();
                    break;
                case 5:
                    message.is_banned_future = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCHAccountVacStatusChange message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCHAccountVacStatusChange} CMsgGCHAccountVacStatusChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCHAccountVacStatusChange.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCHAccountVacStatusChange message.
         * @function verify
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCHAccountVacStatusChange.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.rtime_vacban_starts != null && message.hasOwnProperty("rtime_vacban_starts"))
                if (!$util.isInteger(message.rtime_vacban_starts))
                    return "rtime_vacban_starts: integer expected";
            if (message.is_banned_now != null && message.hasOwnProperty("is_banned_now"))
                if (typeof message.is_banned_now !== "boolean")
                    return "is_banned_now: boolean expected";
            if (message.is_banned_future != null && message.hasOwnProperty("is_banned_future"))
                if (typeof message.is_banned_future !== "boolean")
                    return "is_banned_future: boolean expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCHAccountVacStatusChange message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCHAccountVacStatusChange} CMsgGCHAccountVacStatusChange
         */
        CMsgGCHAccountVacStatusChange.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCHAccountVacStatusChange)
                return object;
            var message = new $root.CMsgGCHAccountVacStatusChange();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.rtime_vacban_starts != null)
                message.rtime_vacban_starts = object.rtime_vacban_starts >>> 0;
            if (object.is_banned_now != null)
                message.is_banned_now = Boolean(object.is_banned_now);
            if (object.is_banned_future != null)
                message.is_banned_future = Boolean(object.is_banned_future);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCHAccountVacStatusChange message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCHAccountVacStatusChange
         * @static
         * @param {CMsgGCHAccountVacStatusChange} message CMsgGCHAccountVacStatusChange
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCHAccountVacStatusChange.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                object.app_id = 0;
                object.rtime_vacban_starts = 0;
                object.is_banned_now = false;
                object.is_banned_future = false;
            }
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.rtime_vacban_starts != null && message.hasOwnProperty("rtime_vacban_starts"))
                object.rtime_vacban_starts = message.rtime_vacban_starts;
            if (message.is_banned_now != null && message.hasOwnProperty("is_banned_now"))
                object.is_banned_now = message.is_banned_now;
            if (message.is_banned_future != null && message.hasOwnProperty("is_banned_future"))
                object.is_banned_future = message.is_banned_future;
            return object;
        };
    
        /**
         * Converts this CMsgGCHAccountVacStatusChange to JSON.
         * @function toJSON
         * @memberof CMsgGCHAccountVacStatusChange
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCHAccountVacStatusChange.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCHAccountVacStatusChange;
    })();
    
    $root.CMsgGCGetPartnerAccountLink = (function() {
    
        /**
         * Properties of a CMsgGCGetPartnerAccountLink.
         * @exports ICMsgGCGetPartnerAccountLink
         * @interface ICMsgGCGetPartnerAccountLink
         * @property {number|Long|null} [steamid] CMsgGCGetPartnerAccountLink steamid
         */
    
        /**
         * Constructs a new CMsgGCGetPartnerAccountLink.
         * @exports CMsgGCGetPartnerAccountLink
         * @classdesc Represents a CMsgGCGetPartnerAccountLink.
         * @implements ICMsgGCGetPartnerAccountLink
         * @constructor
         * @param {ICMsgGCGetPartnerAccountLink=} [properties] Properties to set
         */
        function CMsgGCGetPartnerAccountLink(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetPartnerAccountLink steamid.
         * @member {number|Long} steamid
         * @memberof CMsgGCGetPartnerAccountLink
         * @instance
         */
        CMsgGCGetPartnerAccountLink.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgGCGetPartnerAccountLink instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {ICMsgGCGetPartnerAccountLink=} [properties] Properties to set
         * @returns {CMsgGCGetPartnerAccountLink} CMsgGCGetPartnerAccountLink instance
         */
        CMsgGCGetPartnerAccountLink.create = function create(properties) {
            return new CMsgGCGetPartnerAccountLink(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetPartnerAccountLink message. Does not implicitly {@link CMsgGCGetPartnerAccountLink.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {ICMsgGCGetPartnerAccountLink} message CMsgGCGetPartnerAccountLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPartnerAccountLink.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetPartnerAccountLink message, length delimited. Does not implicitly {@link CMsgGCGetPartnerAccountLink.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {ICMsgGCGetPartnerAccountLink} message CMsgGCGetPartnerAccountLink message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPartnerAccountLink.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetPartnerAccountLink message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetPartnerAccountLink} CMsgGCGetPartnerAccountLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPartnerAccountLink.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetPartnerAccountLink();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetPartnerAccountLink message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetPartnerAccountLink} CMsgGCGetPartnerAccountLink
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPartnerAccountLink.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetPartnerAccountLink message.
         * @function verify
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetPartnerAccountLink.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCGetPartnerAccountLink message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetPartnerAccountLink} CMsgGCGetPartnerAccountLink
         */
        CMsgGCGetPartnerAccountLink.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetPartnerAccountLink)
                return object;
            var message = new $root.CMsgGCGetPartnerAccountLink();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetPartnerAccountLink message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetPartnerAccountLink
         * @static
         * @param {CMsgGCGetPartnerAccountLink} message CMsgGCGetPartnerAccountLink
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetPartnerAccountLink.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            return object;
        };
    
        /**
         * Converts this CMsgGCGetPartnerAccountLink to JSON.
         * @function toJSON
         * @memberof CMsgGCGetPartnerAccountLink
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetPartnerAccountLink.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetPartnerAccountLink;
    })();
    
    $root.CMsgGCGetPartnerAccountLink_Response = (function() {
    
        /**
         * Properties of a CMsgGCGetPartnerAccountLink_Response.
         * @exports ICMsgGCGetPartnerAccountLink_Response
         * @interface ICMsgGCGetPartnerAccountLink_Response
         * @property {number|null} [pwid] CMsgGCGetPartnerAccountLink_Response pwid
         * @property {number|null} [nexonid] CMsgGCGetPartnerAccountLink_Response nexonid
         */
    
        /**
         * Constructs a new CMsgGCGetPartnerAccountLink_Response.
         * @exports CMsgGCGetPartnerAccountLink_Response
         * @classdesc Represents a CMsgGCGetPartnerAccountLink_Response.
         * @implements ICMsgGCGetPartnerAccountLink_Response
         * @constructor
         * @param {ICMsgGCGetPartnerAccountLink_Response=} [properties] Properties to set
         */
        function CMsgGCGetPartnerAccountLink_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCGetPartnerAccountLink_Response pwid.
         * @member {number} pwid
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @instance
         */
        CMsgGCGetPartnerAccountLink_Response.prototype.pwid = 0;
    
        /**
         * CMsgGCGetPartnerAccountLink_Response nexonid.
         * @member {number} nexonid
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @instance
         */
        CMsgGCGetPartnerAccountLink_Response.prototype.nexonid = 0;
    
        /**
         * Creates a new CMsgGCGetPartnerAccountLink_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {ICMsgGCGetPartnerAccountLink_Response=} [properties] Properties to set
         * @returns {CMsgGCGetPartnerAccountLink_Response} CMsgGCGetPartnerAccountLink_Response instance
         */
        CMsgGCGetPartnerAccountLink_Response.create = function create(properties) {
            return new CMsgGCGetPartnerAccountLink_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCGetPartnerAccountLink_Response message. Does not implicitly {@link CMsgGCGetPartnerAccountLink_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {ICMsgGCGetPartnerAccountLink_Response} message CMsgGCGetPartnerAccountLink_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPartnerAccountLink_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pwid != null && message.hasOwnProperty("pwid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pwid);
            if (message.nexonid != null && message.hasOwnProperty("nexonid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.nexonid);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCGetPartnerAccountLink_Response message, length delimited. Does not implicitly {@link CMsgGCGetPartnerAccountLink_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {ICMsgGCGetPartnerAccountLink_Response} message CMsgGCGetPartnerAccountLink_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCGetPartnerAccountLink_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCGetPartnerAccountLink_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCGetPartnerAccountLink_Response} CMsgGCGetPartnerAccountLink_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPartnerAccountLink_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCGetPartnerAccountLink_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pwid = reader.uint32();
                    break;
                case 2:
                    message.nexonid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCGetPartnerAccountLink_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCGetPartnerAccountLink_Response} CMsgGCGetPartnerAccountLink_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCGetPartnerAccountLink_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCGetPartnerAccountLink_Response message.
         * @function verify
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCGetPartnerAccountLink_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pwid != null && message.hasOwnProperty("pwid"))
                if (!$util.isInteger(message.pwid))
                    return "pwid: integer expected";
            if (message.nexonid != null && message.hasOwnProperty("nexonid"))
                if (!$util.isInteger(message.nexonid))
                    return "nexonid: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCGetPartnerAccountLink_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCGetPartnerAccountLink_Response} CMsgGCGetPartnerAccountLink_Response
         */
        CMsgGCGetPartnerAccountLink_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCGetPartnerAccountLink_Response)
                return object;
            var message = new $root.CMsgGCGetPartnerAccountLink_Response();
            if (object.pwid != null)
                message.pwid = object.pwid >>> 0;
            if (object.nexonid != null)
                message.nexonid = object.nexonid >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCGetPartnerAccountLink_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @static
         * @param {CMsgGCGetPartnerAccountLink_Response} message CMsgGCGetPartnerAccountLink_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCGetPartnerAccountLink_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pwid = 0;
                object.nexonid = 0;
            }
            if (message.pwid != null && message.hasOwnProperty("pwid"))
                object.pwid = message.pwid;
            if (message.nexonid != null && message.hasOwnProperty("nexonid"))
                object.nexonid = message.nexonid;
            return object;
        };
    
        /**
         * Converts this CMsgGCGetPartnerAccountLink_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCGetPartnerAccountLink_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCGetPartnerAccountLink_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCGetPartnerAccountLink_Response;
    })();
    
    $root.CMsgGCRoutingInfo = (function() {
    
        /**
         * Properties of a CMsgGCRoutingInfo.
         * @exports ICMsgGCRoutingInfo
         * @interface ICMsgGCRoutingInfo
         * @property {Array.<number>|null} [dir_index] CMsgGCRoutingInfo dir_index
         * @property {CMsgGCRoutingInfo.RoutingMethod|null} [method] CMsgGCRoutingInfo method
         * @property {CMsgGCRoutingInfo.RoutingMethod|null} [fallback] CMsgGCRoutingInfo fallback
         * @property {number|null} [protobuf_field] CMsgGCRoutingInfo protobuf_field
         * @property {string|null} [webapi_param] CMsgGCRoutingInfo webapi_param
         */
    
        /**
         * Constructs a new CMsgGCRoutingInfo.
         * @exports CMsgGCRoutingInfo
         * @classdesc Represents a CMsgGCRoutingInfo.
         * @implements ICMsgGCRoutingInfo
         * @constructor
         * @param {ICMsgGCRoutingInfo=} [properties] Properties to set
         */
        function CMsgGCRoutingInfo(properties) {
            this.dir_index = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCRoutingInfo dir_index.
         * @member {Array.<number>} dir_index
         * @memberof CMsgGCRoutingInfo
         * @instance
         */
        CMsgGCRoutingInfo.prototype.dir_index = $util.emptyArray;
    
        /**
         * CMsgGCRoutingInfo method.
         * @member {CMsgGCRoutingInfo.RoutingMethod} method
         * @memberof CMsgGCRoutingInfo
         * @instance
         */
        CMsgGCRoutingInfo.prototype.method = 0;
    
        /**
         * CMsgGCRoutingInfo fallback.
         * @member {CMsgGCRoutingInfo.RoutingMethod} fallback
         * @memberof CMsgGCRoutingInfo
         * @instance
         */
        CMsgGCRoutingInfo.prototype.fallback = 1;
    
        /**
         * CMsgGCRoutingInfo protobuf_field.
         * @member {number} protobuf_field
         * @memberof CMsgGCRoutingInfo
         * @instance
         */
        CMsgGCRoutingInfo.prototype.protobuf_field = 0;
    
        /**
         * CMsgGCRoutingInfo webapi_param.
         * @member {string} webapi_param
         * @memberof CMsgGCRoutingInfo
         * @instance
         */
        CMsgGCRoutingInfo.prototype.webapi_param = "";
    
        /**
         * Creates a new CMsgGCRoutingInfo instance using the specified properties.
         * @function create
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {ICMsgGCRoutingInfo=} [properties] Properties to set
         * @returns {CMsgGCRoutingInfo} CMsgGCRoutingInfo instance
         */
        CMsgGCRoutingInfo.create = function create(properties) {
            return new CMsgGCRoutingInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgGCRoutingInfo message. Does not implicitly {@link CMsgGCRoutingInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {ICMsgGCRoutingInfo} message CMsgGCRoutingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCRoutingInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dir_index != null && message.dir_index.length)
                for (var i = 0; i < message.dir_index.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.dir_index[i]);
            if (message.method != null && message.hasOwnProperty("method"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.method);
            if (message.fallback != null && message.hasOwnProperty("fallback"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.fallback);
            if (message.protobuf_field != null && message.hasOwnProperty("protobuf_field"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.protobuf_field);
            if (message.webapi_param != null && message.hasOwnProperty("webapi_param"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.webapi_param);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCRoutingInfo message, length delimited. Does not implicitly {@link CMsgGCRoutingInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {ICMsgGCRoutingInfo} message CMsgGCRoutingInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCRoutingInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCRoutingInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCRoutingInfo} CMsgGCRoutingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCRoutingInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCRoutingInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.dir_index && message.dir_index.length))
                        message.dir_index = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.dir_index.push(reader.uint32());
                    } else
                        message.dir_index.push(reader.uint32());
                    break;
                case 2:
                    message.method = reader.int32();
                    break;
                case 3:
                    message.fallback = reader.int32();
                    break;
                case 4:
                    message.protobuf_field = reader.uint32();
                    break;
                case 5:
                    message.webapi_param = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCRoutingInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCRoutingInfo} CMsgGCRoutingInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCRoutingInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCRoutingInfo message.
         * @function verify
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCRoutingInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dir_index != null && message.hasOwnProperty("dir_index")) {
                if (!Array.isArray(message.dir_index))
                    return "dir_index: array expected";
                for (var i = 0; i < message.dir_index.length; ++i)
                    if (!$util.isInteger(message.dir_index[i]))
                        return "dir_index: integer[] expected";
            }
            if (message.method != null && message.hasOwnProperty("method"))
                switch (message.method) {
                default:
                    return "method: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.fallback != null && message.hasOwnProperty("fallback"))
                switch (message.fallback) {
                default:
                    return "fallback: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            if (message.protobuf_field != null && message.hasOwnProperty("protobuf_field"))
                if (!$util.isInteger(message.protobuf_field))
                    return "protobuf_field: integer expected";
            if (message.webapi_param != null && message.hasOwnProperty("webapi_param"))
                if (!$util.isString(message.webapi_param))
                    return "webapi_param: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCRoutingInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCRoutingInfo} CMsgGCRoutingInfo
         */
        CMsgGCRoutingInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCRoutingInfo)
                return object;
            var message = new $root.CMsgGCRoutingInfo();
            if (object.dir_index) {
                if (!Array.isArray(object.dir_index))
                    throw TypeError(".CMsgGCRoutingInfo.dir_index: array expected");
                message.dir_index = [];
                for (var i = 0; i < object.dir_index.length; ++i)
                    message.dir_index[i] = object.dir_index[i] >>> 0;
            }
            switch (object.method) {
            case "RANDOM":
            case 0:
                message.method = 0;
                break;
            case "DISCARD":
            case 1:
                message.method = 1;
                break;
            case "CLIENT_STEAMID":
            case 2:
                message.method = 2;
                break;
            case "PROTOBUF_FIELD_UINT64":
            case 3:
                message.method = 3;
                break;
            case "WEBAPI_PARAM_UINT64":
            case 4:
                message.method = 4;
                break;
            }
            switch (object.fallback) {
            case "RANDOM":
            case 0:
                message.fallback = 0;
                break;
            case "DISCARD":
            case 1:
                message.fallback = 1;
                break;
            case "CLIENT_STEAMID":
            case 2:
                message.fallback = 2;
                break;
            case "PROTOBUF_FIELD_UINT64":
            case 3:
                message.fallback = 3;
                break;
            case "WEBAPI_PARAM_UINT64":
            case 4:
                message.fallback = 4;
                break;
            }
            if (object.protobuf_field != null)
                message.protobuf_field = object.protobuf_field >>> 0;
            if (object.webapi_param != null)
                message.webapi_param = String(object.webapi_param);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCRoutingInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCRoutingInfo
         * @static
         * @param {CMsgGCRoutingInfo} message CMsgGCRoutingInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCRoutingInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.dir_index = [];
            if (options.defaults) {
                object.method = options.enums === String ? "RANDOM" : 0;
                object.fallback = options.enums === String ? "DISCARD" : 1;
                object.protobuf_field = 0;
                object.webapi_param = "";
            }
            if (message.dir_index && message.dir_index.length) {
                object.dir_index = [];
                for (var j = 0; j < message.dir_index.length; ++j)
                    object.dir_index[j] = message.dir_index[j];
            }
            if (message.method != null && message.hasOwnProperty("method"))
                object.method = options.enums === String ? $root.CMsgGCRoutingInfo.RoutingMethod[message.method] : message.method;
            if (message.fallback != null && message.hasOwnProperty("fallback"))
                object.fallback = options.enums === String ? $root.CMsgGCRoutingInfo.RoutingMethod[message.fallback] : message.fallback;
            if (message.protobuf_field != null && message.hasOwnProperty("protobuf_field"))
                object.protobuf_field = message.protobuf_field;
            if (message.webapi_param != null && message.hasOwnProperty("webapi_param"))
                object.webapi_param = message.webapi_param;
            return object;
        };
    
        /**
         * Converts this CMsgGCRoutingInfo to JSON.
         * @function toJSON
         * @memberof CMsgGCRoutingInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCRoutingInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * RoutingMethod enum.
         * @name CMsgGCRoutingInfo.RoutingMethod
         * @enum {string}
         * @property {number} RANDOM=0 RANDOM value
         * @property {number} DISCARD=1 DISCARD value
         * @property {number} CLIENT_STEAMID=2 CLIENT_STEAMID value
         * @property {number} PROTOBUF_FIELD_UINT64=3 PROTOBUF_FIELD_UINT64 value
         * @property {number} WEBAPI_PARAM_UINT64=4 WEBAPI_PARAM_UINT64 value
         */
        CMsgGCRoutingInfo.RoutingMethod = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "RANDOM"] = 0;
            values[valuesById[1] = "DISCARD"] = 1;
            values[valuesById[2] = "CLIENT_STEAMID"] = 2;
            values[valuesById[3] = "PROTOBUF_FIELD_UINT64"] = 3;
            values[valuesById[4] = "WEBAPI_PARAM_UINT64"] = 4;
            return values;
        })();
    
        return CMsgGCRoutingInfo;
    })();
    
    $root.CMsgGCMsgMasterSetWebAPIRouting = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetWebAPIRouting.
         * @exports ICMsgGCMsgMasterSetWebAPIRouting
         * @interface ICMsgGCMsgMasterSetWebAPIRouting
         * @property {Array.<CMsgGCMsgMasterSetWebAPIRouting.IEntry>|null} [entries] CMsgGCMsgMasterSetWebAPIRouting entries
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetWebAPIRouting.
         * @exports CMsgGCMsgMasterSetWebAPIRouting
         * @classdesc Represents a CMsgGCMsgMasterSetWebAPIRouting.
         * @implements ICMsgGCMsgMasterSetWebAPIRouting
         * @constructor
         * @param {ICMsgGCMsgMasterSetWebAPIRouting=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetWebAPIRouting(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetWebAPIRouting entries.
         * @member {Array.<CMsgGCMsgMasterSetWebAPIRouting.IEntry>} entries
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @instance
         */
        CMsgGCMsgMasterSetWebAPIRouting.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCMsgMasterSetWebAPIRouting instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetWebAPIRouting} CMsgGCMsgMasterSetWebAPIRouting instance
         */
        CMsgGCMsgMasterSetWebAPIRouting.create = function create(properties) {
            return new CMsgGCMsgMasterSetWebAPIRouting(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetWebAPIRouting message. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting} message CMsgGCMsgMasterSetWebAPIRouting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetWebAPIRouting.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgGCMsgMasterSetWebAPIRouting.Entry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetWebAPIRouting message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting} message CMsgGCMsgMasterSetWebAPIRouting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetWebAPIRouting.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetWebAPIRouting message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetWebAPIRouting} CMsgGCMsgMasterSetWebAPIRouting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetWebAPIRouting.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetWebAPIRouting();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgGCMsgMasterSetWebAPIRouting.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetWebAPIRouting message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetWebAPIRouting} CMsgGCMsgMasterSetWebAPIRouting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetWebAPIRouting.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetWebAPIRouting message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetWebAPIRouting.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgGCMsgMasterSetWebAPIRouting.Entry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetWebAPIRouting message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetWebAPIRouting} CMsgGCMsgMasterSetWebAPIRouting
         */
        CMsgGCMsgMasterSetWebAPIRouting.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetWebAPIRouting)
                return object;
            var message = new $root.CMsgGCMsgMasterSetWebAPIRouting();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgGCMsgMasterSetWebAPIRouting.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgGCMsgMasterSetWebAPIRouting.entries: object expected");
                    message.entries[i] = $root.CMsgGCMsgMasterSetWebAPIRouting.Entry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetWebAPIRouting message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @static
         * @param {CMsgGCMsgMasterSetWebAPIRouting} message CMsgGCMsgMasterSetWebAPIRouting
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetWebAPIRouting.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgGCMsgMasterSetWebAPIRouting.Entry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetWebAPIRouting to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetWebAPIRouting
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetWebAPIRouting.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCMsgMasterSetWebAPIRouting.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof CMsgGCMsgMasterSetWebAPIRouting
             * @interface IEntry
             * @property {string|null} [interface_name] Entry interface_name
             * @property {string|null} [method_name] Entry method_name
             * @property {ICMsgGCRoutingInfo|null} [routing] Entry routing
             */
    
            /**
             * Constructs a new Entry.
             * @memberof CMsgGCMsgMasterSetWebAPIRouting
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {CMsgGCMsgMasterSetWebAPIRouting.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry interface_name.
             * @member {string} interface_name
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @instance
             */
            Entry.prototype.interface_name = "";
    
            /**
             * Entry method_name.
             * @member {string} method_name
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @instance
             */
            Entry.prototype.method_name = "";
    
            /**
             * Entry routing.
             * @member {ICMsgGCRoutingInfo|null|undefined} routing
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @instance
             */
            Entry.prototype.routing = null;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetWebAPIRouting.IEntry=} [properties] Properties to set
             * @returns {CMsgGCMsgMasterSetWebAPIRouting.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting.Entry.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetWebAPIRouting.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.interface_name);
                if (message.method_name != null && message.hasOwnProperty("method_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.method_name);
                if (message.routing != null && message.hasOwnProperty("routing"))
                    $root.CMsgGCRoutingInfo.encode(message.routing, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetWebAPIRouting.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCMsgMasterSetWebAPIRouting.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetWebAPIRouting.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.interface_name = reader.string();
                        break;
                    case 2:
                        message.method_name = reader.string();
                        break;
                    case 3:
                        message.routing = $root.CMsgGCRoutingInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCMsgMasterSetWebAPIRouting.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                    if (!$util.isString(message.interface_name))
                        return "interface_name: string expected";
                if (message.method_name != null && message.hasOwnProperty("method_name"))
                    if (!$util.isString(message.method_name))
                        return "method_name: string expected";
                if (message.routing != null && message.hasOwnProperty("routing")) {
                    var error = $root.CMsgGCRoutingInfo.verify(message.routing);
                    if (error)
                        return "routing." + error;
                }
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCMsgMasterSetWebAPIRouting.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCMsgMasterSetWebAPIRouting.Entry)
                    return object;
                var message = new $root.CMsgGCMsgMasterSetWebAPIRouting.Entry();
                if (object.interface_name != null)
                    message.interface_name = String(object.interface_name);
                if (object.method_name != null)
                    message.method_name = String(object.method_name);
                if (object.routing != null) {
                    if (typeof object.routing !== "object")
                        throw TypeError(".CMsgGCMsgMasterSetWebAPIRouting.Entry.routing: object expected");
                    message.routing = $root.CMsgGCRoutingInfo.fromObject(object.routing);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetWebAPIRouting.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.interface_name = "";
                    object.method_name = "";
                    object.routing = null;
                }
                if (message.interface_name != null && message.hasOwnProperty("interface_name"))
                    object.interface_name = message.interface_name;
                if (message.method_name != null && message.hasOwnProperty("method_name"))
                    object.method_name = message.method_name;
                if (message.routing != null && message.hasOwnProperty("routing"))
                    object.routing = $root.CMsgGCRoutingInfo.toObject(message.routing, options);
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof CMsgGCMsgMasterSetWebAPIRouting.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        return CMsgGCMsgMasterSetWebAPIRouting;
    })();
    
    $root.CMsgGCMsgMasterSetClientMsgRouting = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetClientMsgRouting.
         * @exports ICMsgGCMsgMasterSetClientMsgRouting
         * @interface ICMsgGCMsgMasterSetClientMsgRouting
         * @property {Array.<CMsgGCMsgMasterSetClientMsgRouting.IEntry>|null} [entries] CMsgGCMsgMasterSetClientMsgRouting entries
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetClientMsgRouting.
         * @exports CMsgGCMsgMasterSetClientMsgRouting
         * @classdesc Represents a CMsgGCMsgMasterSetClientMsgRouting.
         * @implements ICMsgGCMsgMasterSetClientMsgRouting
         * @constructor
         * @param {ICMsgGCMsgMasterSetClientMsgRouting=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetClientMsgRouting(properties) {
            this.entries = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetClientMsgRouting entries.
         * @member {Array.<CMsgGCMsgMasterSetClientMsgRouting.IEntry>} entries
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @instance
         */
        CMsgGCMsgMasterSetClientMsgRouting.prototype.entries = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCMsgMasterSetClientMsgRouting instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetClientMsgRouting} CMsgGCMsgMasterSetClientMsgRouting instance
         */
        CMsgGCMsgMasterSetClientMsgRouting.create = function create(properties) {
            return new CMsgGCMsgMasterSetClientMsgRouting(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetClientMsgRouting message. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting} message CMsgGCMsgMasterSetClientMsgRouting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetClientMsgRouting.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (var i = 0; i < message.entries.length; ++i)
                    $root.CMsgGCMsgMasterSetClientMsgRouting.Entry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetClientMsgRouting message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting} message CMsgGCMsgMasterSetClientMsgRouting message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetClientMsgRouting.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetClientMsgRouting message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetClientMsgRouting} CMsgGCMsgMasterSetClientMsgRouting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetClientMsgRouting.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetClientMsgRouting();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.CMsgGCMsgMasterSetClientMsgRouting.Entry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetClientMsgRouting message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetClientMsgRouting} CMsgGCMsgMasterSetClientMsgRouting
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetClientMsgRouting.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetClientMsgRouting message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetClientMsgRouting.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (var i = 0; i < message.entries.length; ++i) {
                    var error = $root.CMsgGCMsgMasterSetClientMsgRouting.Entry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetClientMsgRouting message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetClientMsgRouting} CMsgGCMsgMasterSetClientMsgRouting
         */
        CMsgGCMsgMasterSetClientMsgRouting.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetClientMsgRouting)
                return object;
            var message = new $root.CMsgGCMsgMasterSetClientMsgRouting();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".CMsgGCMsgMasterSetClientMsgRouting.entries: array expected");
                message.entries = [];
                for (var i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".CMsgGCMsgMasterSetClientMsgRouting.entries: object expected");
                    message.entries[i] = $root.CMsgGCMsgMasterSetClientMsgRouting.Entry.fromObject(object.entries[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetClientMsgRouting message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @static
         * @param {CMsgGCMsgMasterSetClientMsgRouting} message CMsgGCMsgMasterSetClientMsgRouting
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetClientMsgRouting.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (var j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.CMsgGCMsgMasterSetClientMsgRouting.Entry.toObject(message.entries[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetClientMsgRouting to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetClientMsgRouting
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetClientMsgRouting.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCMsgMasterSetClientMsgRouting.Entry = (function() {
    
            /**
             * Properties of an Entry.
             * @memberof CMsgGCMsgMasterSetClientMsgRouting
             * @interface IEntry
             * @property {number|null} [msg_type] Entry msg_type
             * @property {ICMsgGCRoutingInfo|null} [routing] Entry routing
             */
    
            /**
             * Constructs a new Entry.
             * @memberof CMsgGCMsgMasterSetClientMsgRouting
             * @classdesc Represents an Entry.
             * @implements IEntry
             * @constructor
             * @param {CMsgGCMsgMasterSetClientMsgRouting.IEntry=} [properties] Properties to set
             */
            function Entry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Entry msg_type.
             * @member {number} msg_type
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @instance
             */
            Entry.prototype.msg_type = 0;
    
            /**
             * Entry routing.
             * @member {ICMsgGCRoutingInfo|null|undefined} routing
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @instance
             */
            Entry.prototype.routing = null;
    
            /**
             * Creates a new Entry instance using the specified properties.
             * @function create
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetClientMsgRouting.IEntry=} [properties] Properties to set
             * @returns {CMsgGCMsgMasterSetClientMsgRouting.Entry} Entry instance
             */
            Entry.create = function create(properties) {
                return new Entry(properties);
            };
    
            /**
             * Encodes the specified Entry message. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting.Entry.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetClientMsgRouting.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.msg_type != null && message.hasOwnProperty("msg_type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.msg_type);
                if (message.routing != null && message.hasOwnProperty("routing"))
                    $root.CMsgGCRoutingInfo.encode(message.routing, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified Entry message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting.Entry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetClientMsgRouting.IEntry} message Entry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Entry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCMsgMasterSetClientMsgRouting.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetClientMsgRouting.Entry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.msg_type = reader.uint32();
                        break;
                    case 2:
                        message.routing = $root.CMsgGCRoutingInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Entry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCMsgMasterSetClientMsgRouting.Entry} Entry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Entry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Entry message.
             * @function verify
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Entry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.msg_type != null && message.hasOwnProperty("msg_type"))
                    if (!$util.isInteger(message.msg_type))
                        return "msg_type: integer expected";
                if (message.routing != null && message.hasOwnProperty("routing")) {
                    var error = $root.CMsgGCRoutingInfo.verify(message.routing);
                    if (error)
                        return "routing." + error;
                }
                return null;
            };
    
            /**
             * Creates an Entry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCMsgMasterSetClientMsgRouting.Entry} Entry
             */
            Entry.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCMsgMasterSetClientMsgRouting.Entry)
                    return object;
                var message = new $root.CMsgGCMsgMasterSetClientMsgRouting.Entry();
                if (object.msg_type != null)
                    message.msg_type = object.msg_type >>> 0;
                if (object.routing != null) {
                    if (typeof object.routing !== "object")
                        throw TypeError(".CMsgGCMsgMasterSetClientMsgRouting.Entry.routing: object expected");
                    message.routing = $root.CMsgGCRoutingInfo.fromObject(object.routing);
                }
                return message;
            };
    
            /**
             * Creates a plain object from an Entry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @static
             * @param {CMsgGCMsgMasterSetClientMsgRouting.Entry} message Entry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Entry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.msg_type = 0;
                    object.routing = null;
                }
                if (message.msg_type != null && message.hasOwnProperty("msg_type"))
                    object.msg_type = message.msg_type;
                if (message.routing != null && message.hasOwnProperty("routing"))
                    object.routing = $root.CMsgGCRoutingInfo.toObject(message.routing, options);
                return object;
            };
    
            /**
             * Converts this Entry to JSON.
             * @function toJSON
             * @memberof CMsgGCMsgMasterSetClientMsgRouting.Entry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Entry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return Entry;
        })();
    
        return CMsgGCMsgMasterSetClientMsgRouting;
    })();
    
    $root.CMsgGCMsgMasterSetWebAPIRouting_Response = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetWebAPIRouting_Response.
         * @exports ICMsgGCMsgMasterSetWebAPIRouting_Response
         * @interface ICMsgGCMsgMasterSetWebAPIRouting_Response
         * @property {number|null} [eresult] CMsgGCMsgMasterSetWebAPIRouting_Response eresult
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetWebAPIRouting_Response.
         * @exports CMsgGCMsgMasterSetWebAPIRouting_Response
         * @classdesc Represents a CMsgGCMsgMasterSetWebAPIRouting_Response.
         * @implements ICMsgGCMsgMasterSetWebAPIRouting_Response
         * @constructor
         * @param {ICMsgGCMsgMasterSetWebAPIRouting_Response=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetWebAPIRouting_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetWebAPIRouting_Response eresult.
         * @member {number} eresult
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @instance
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.prototype.eresult = 2;
    
        /**
         * Creates a new CMsgGCMsgMasterSetWebAPIRouting_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting_Response=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetWebAPIRouting_Response} CMsgGCMsgMasterSetWebAPIRouting_Response instance
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.create = function create(properties) {
            return new CMsgGCMsgMasterSetWebAPIRouting_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetWebAPIRouting_Response message. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting_Response} message CMsgGCMsgMasterSetWebAPIRouting_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetWebAPIRouting_Response message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetWebAPIRouting_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetWebAPIRouting_Response} message CMsgGCMsgMasterSetWebAPIRouting_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetWebAPIRouting_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetWebAPIRouting_Response} CMsgGCMsgMasterSetWebAPIRouting_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetWebAPIRouting_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetWebAPIRouting_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetWebAPIRouting_Response} CMsgGCMsgMasterSetWebAPIRouting_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetWebAPIRouting_Response message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetWebAPIRouting_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetWebAPIRouting_Response} CMsgGCMsgMasterSetWebAPIRouting_Response
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetWebAPIRouting_Response)
                return object;
            var message = new $root.CMsgGCMsgMasterSetWebAPIRouting_Response();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetWebAPIRouting_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @static
         * @param {CMsgGCMsgMasterSetWebAPIRouting_Response} message CMsgGCMsgMasterSetWebAPIRouting_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 2;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetWebAPIRouting_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetWebAPIRouting_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetWebAPIRouting_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCMsgMasterSetWebAPIRouting_Response;
    })();
    
    $root.CMsgGCMsgMasterSetClientMsgRouting_Response = (function() {
    
        /**
         * Properties of a CMsgGCMsgMasterSetClientMsgRouting_Response.
         * @exports ICMsgGCMsgMasterSetClientMsgRouting_Response
         * @interface ICMsgGCMsgMasterSetClientMsgRouting_Response
         * @property {number|null} [eresult] CMsgGCMsgMasterSetClientMsgRouting_Response eresult
         */
    
        /**
         * Constructs a new CMsgGCMsgMasterSetClientMsgRouting_Response.
         * @exports CMsgGCMsgMasterSetClientMsgRouting_Response
         * @classdesc Represents a CMsgGCMsgMasterSetClientMsgRouting_Response.
         * @implements ICMsgGCMsgMasterSetClientMsgRouting_Response
         * @constructor
         * @param {ICMsgGCMsgMasterSetClientMsgRouting_Response=} [properties] Properties to set
         */
        function CMsgGCMsgMasterSetClientMsgRouting_Response(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgMasterSetClientMsgRouting_Response eresult.
         * @member {number} eresult
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @instance
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.prototype.eresult = 2;
    
        /**
         * Creates a new CMsgGCMsgMasterSetClientMsgRouting_Response instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting_Response=} [properties] Properties to set
         * @returns {CMsgGCMsgMasterSetClientMsgRouting_Response} CMsgGCMsgMasterSetClientMsgRouting_Response instance
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.create = function create(properties) {
            return new CMsgGCMsgMasterSetClientMsgRouting_Response(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetClientMsgRouting_Response message. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting_Response.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting_Response} message CMsgGCMsgMasterSetClientMsgRouting_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.eresult);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgMasterSetClientMsgRouting_Response message, length delimited. Does not implicitly {@link CMsgGCMsgMasterSetClientMsgRouting_Response.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {ICMsgGCMsgMasterSetClientMsgRouting_Response} message CMsgGCMsgMasterSetClientMsgRouting_Response message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetClientMsgRouting_Response message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgMasterSetClientMsgRouting_Response} CMsgGCMsgMasterSetClientMsgRouting_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgMasterSetClientMsgRouting_Response();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgMasterSetClientMsgRouting_Response message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgMasterSetClientMsgRouting_Response} CMsgGCMsgMasterSetClientMsgRouting_Response
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgMasterSetClientMsgRouting_Response message.
         * @function verify
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgMasterSetClientMsgRouting_Response message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgMasterSetClientMsgRouting_Response} CMsgGCMsgMasterSetClientMsgRouting_Response
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgMasterSetClientMsgRouting_Response)
                return object;
            var message = new $root.CMsgGCMsgMasterSetClientMsgRouting_Response();
            if (object.eresult != null)
                message.eresult = object.eresult | 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgMasterSetClientMsgRouting_Response message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @static
         * @param {CMsgGCMsgMasterSetClientMsgRouting_Response} message CMsgGCMsgMasterSetClientMsgRouting_Response
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eresult = 2;
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgMasterSetClientMsgRouting_Response to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgMasterSetClientMsgRouting_Response
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgMasterSetClientMsgRouting_Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CMsgGCMsgMasterSetClientMsgRouting_Response;
    })();
    
    $root.CMsgGCMsgSetOptions = (function() {
    
        /**
         * Properties of a CMsgGCMsgSetOptions.
         * @exports ICMsgGCMsgSetOptions
         * @interface ICMsgGCMsgSetOptions
         * @property {Array.<CMsgGCMsgSetOptions.Option>|null} [options] CMsgGCMsgSetOptions options
         * @property {Array.<CMsgGCMsgSetOptions.IMessageRange>|null} [client_msg_ranges] CMsgGCMsgSetOptions client_msg_ranges
         */
    
        /**
         * Constructs a new CMsgGCMsgSetOptions.
         * @exports CMsgGCMsgSetOptions
         * @classdesc Represents a CMsgGCMsgSetOptions.
         * @implements ICMsgGCMsgSetOptions
         * @constructor
         * @param {ICMsgGCMsgSetOptions=} [properties] Properties to set
         */
        function CMsgGCMsgSetOptions(properties) {
            this.options = [];
            this.client_msg_ranges = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCMsgSetOptions options.
         * @member {Array.<CMsgGCMsgSetOptions.Option>} options
         * @memberof CMsgGCMsgSetOptions
         * @instance
         */
        CMsgGCMsgSetOptions.prototype.options = $util.emptyArray;
    
        /**
         * CMsgGCMsgSetOptions client_msg_ranges.
         * @member {Array.<CMsgGCMsgSetOptions.IMessageRange>} client_msg_ranges
         * @memberof CMsgGCMsgSetOptions
         * @instance
         */
        CMsgGCMsgSetOptions.prototype.client_msg_ranges = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCMsgSetOptions instance using the specified properties.
         * @function create
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {ICMsgGCMsgSetOptions=} [properties] Properties to set
         * @returns {CMsgGCMsgSetOptions} CMsgGCMsgSetOptions instance
         */
        CMsgGCMsgSetOptions.create = function create(properties) {
            return new CMsgGCMsgSetOptions(properties);
        };
    
        /**
         * Encodes the specified CMsgGCMsgSetOptions message. Does not implicitly {@link CMsgGCMsgSetOptions.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {ICMsgGCMsgSetOptions} message CMsgGCMsgSetOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgSetOptions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.options != null && message.options.length)
                for (var i = 0; i < message.options.length; ++i)
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.options[i]);
            if (message.client_msg_ranges != null && message.client_msg_ranges.length)
                for (var i = 0; i < message.client_msg_ranges.length; ++i)
                    $root.CMsgGCMsgSetOptions.MessageRange.encode(message.client_msg_ranges[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCMsgSetOptions message, length delimited. Does not implicitly {@link CMsgGCMsgSetOptions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {ICMsgGCMsgSetOptions} message CMsgGCMsgSetOptions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCMsgSetOptions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCMsgSetOptions message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCMsgSetOptions} CMsgGCMsgSetOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgSetOptions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgSetOptions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.options && message.options.length))
                        message.options = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.options.push(reader.int32());
                    } else
                        message.options.push(reader.int32());
                    break;
                case 2:
                    if (!(message.client_msg_ranges && message.client_msg_ranges.length))
                        message.client_msg_ranges = [];
                    message.client_msg_ranges.push($root.CMsgGCMsgSetOptions.MessageRange.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCMsgSetOptions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCMsgSetOptions} CMsgGCMsgSetOptions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCMsgSetOptions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCMsgSetOptions message.
         * @function verify
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCMsgSetOptions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.options != null && message.hasOwnProperty("options")) {
                if (!Array.isArray(message.options))
                    return "options: array expected";
                for (var i = 0; i < message.options.length; ++i)
                    switch (message.options[i]) {
                    default:
                        return "options: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
            }
            if (message.client_msg_ranges != null && message.hasOwnProperty("client_msg_ranges")) {
                if (!Array.isArray(message.client_msg_ranges))
                    return "client_msg_ranges: array expected";
                for (var i = 0; i < message.client_msg_ranges.length; ++i) {
                    var error = $root.CMsgGCMsgSetOptions.MessageRange.verify(message.client_msg_ranges[i]);
                    if (error)
                        return "client_msg_ranges." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCMsgSetOptions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCMsgSetOptions} CMsgGCMsgSetOptions
         */
        CMsgGCMsgSetOptions.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCMsgSetOptions)
                return object;
            var message = new $root.CMsgGCMsgSetOptions();
            if (object.options) {
                if (!Array.isArray(object.options))
                    throw TypeError(".CMsgGCMsgSetOptions.options: array expected");
                message.options = [];
                for (var i = 0; i < object.options.length; ++i)
                    switch (object.options[i]) {
                    default:
                    case "NOTIFY_USER_SESSIONS":
                    case 0:
                        message.options[i] = 0;
                        break;
                    case "NOTIFY_SERVER_SESSIONS":
                    case 1:
                        message.options[i] = 1;
                        break;
                    case "NOTIFY_ACHIEVEMENTS":
                    case 2:
                        message.options[i] = 2;
                        break;
                    case "NOTIFY_VAC_ACTION":
                    case 3:
                        message.options[i] = 3;
                        break;
                    }
            }
            if (object.client_msg_ranges) {
                if (!Array.isArray(object.client_msg_ranges))
                    throw TypeError(".CMsgGCMsgSetOptions.client_msg_ranges: array expected");
                message.client_msg_ranges = [];
                for (var i = 0; i < object.client_msg_ranges.length; ++i) {
                    if (typeof object.client_msg_ranges[i] !== "object")
                        throw TypeError(".CMsgGCMsgSetOptions.client_msg_ranges: object expected");
                    message.client_msg_ranges[i] = $root.CMsgGCMsgSetOptions.MessageRange.fromObject(object.client_msg_ranges[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCMsgSetOptions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCMsgSetOptions
         * @static
         * @param {CMsgGCMsgSetOptions} message CMsgGCMsgSetOptions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCMsgSetOptions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.options = [];
                object.client_msg_ranges = [];
            }
            if (message.options && message.options.length) {
                object.options = [];
                for (var j = 0; j < message.options.length; ++j)
                    object.options[j] = options.enums === String ? $root.CMsgGCMsgSetOptions.Option[message.options[j]] : message.options[j];
            }
            if (message.client_msg_ranges && message.client_msg_ranges.length) {
                object.client_msg_ranges = [];
                for (var j = 0; j < message.client_msg_ranges.length; ++j)
                    object.client_msg_ranges[j] = $root.CMsgGCMsgSetOptions.MessageRange.toObject(message.client_msg_ranges[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCMsgSetOptions to JSON.
         * @function toJSON
         * @memberof CMsgGCMsgSetOptions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCMsgSetOptions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCMsgSetOptions.MessageRange = (function() {
    
            /**
             * Properties of a MessageRange.
             * @memberof CMsgGCMsgSetOptions
             * @interface IMessageRange
             * @property {number} low MessageRange low
             * @property {number} high MessageRange high
             */
    
            /**
             * Constructs a new MessageRange.
             * @memberof CMsgGCMsgSetOptions
             * @classdesc Represents a MessageRange.
             * @implements IMessageRange
             * @constructor
             * @param {CMsgGCMsgSetOptions.IMessageRange=} [properties] Properties to set
             */
            function MessageRange(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MessageRange low.
             * @member {number} low
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @instance
             */
            MessageRange.prototype.low = 0;
    
            /**
             * MessageRange high.
             * @member {number} high
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @instance
             */
            MessageRange.prototype.high = 0;
    
            /**
             * Creates a new MessageRange instance using the specified properties.
             * @function create
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {CMsgGCMsgSetOptions.IMessageRange=} [properties] Properties to set
             * @returns {CMsgGCMsgSetOptions.MessageRange} MessageRange instance
             */
            MessageRange.create = function create(properties) {
                return new MessageRange(properties);
            };
    
            /**
             * Encodes the specified MessageRange message. Does not implicitly {@link CMsgGCMsgSetOptions.MessageRange.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {CMsgGCMsgSetOptions.IMessageRange} message MessageRange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageRange.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.low);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.high);
                return writer;
            };
    
            /**
             * Encodes the specified MessageRange message, length delimited. Does not implicitly {@link CMsgGCMsgSetOptions.MessageRange.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {CMsgGCMsgSetOptions.IMessageRange} message MessageRange message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MessageRange message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCMsgSetOptions.MessageRange} MessageRange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCMsgSetOptions.MessageRange();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.low = reader.uint32();
                        break;
                    case 2:
                        message.high = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("low"))
                    throw $util.ProtocolError("missing required 'low'", { instance: message });
                if (!message.hasOwnProperty("high"))
                    throw $util.ProtocolError("missing required 'high'", { instance: message });
                return message;
            };
    
            /**
             * Decodes a MessageRange message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCMsgSetOptions.MessageRange} MessageRange
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MessageRange message.
             * @function verify
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.low))
                    return "low: integer expected";
                if (!$util.isInteger(message.high))
                    return "high: integer expected";
                return null;
            };
    
            /**
             * Creates a MessageRange message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCMsgSetOptions.MessageRange} MessageRange
             */
            MessageRange.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCMsgSetOptions.MessageRange)
                    return object;
                var message = new $root.CMsgGCMsgSetOptions.MessageRange();
                if (object.low != null)
                    message.low = object.low >>> 0;
                if (object.high != null)
                    message.high = object.high >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a MessageRange message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @static
             * @param {CMsgGCMsgSetOptions.MessageRange} message MessageRange
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageRange.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.low = 0;
                    object.high = 0;
                }
                if (message.low != null && message.hasOwnProperty("low"))
                    object.low = message.low;
                if (message.high != null && message.hasOwnProperty("high"))
                    object.high = message.high;
                return object;
            };
    
            /**
             * Converts this MessageRange to JSON.
             * @function toJSON
             * @memberof CMsgGCMsgSetOptions.MessageRange
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MessageRange;
        })();
    
        /**
         * Option enum.
         * @name CMsgGCMsgSetOptions.Option
         * @enum {string}
         * @property {number} NOTIFY_USER_SESSIONS=0 NOTIFY_USER_SESSIONS value
         * @property {number} NOTIFY_SERVER_SESSIONS=1 NOTIFY_SERVER_SESSIONS value
         * @property {number} NOTIFY_ACHIEVEMENTS=2 NOTIFY_ACHIEVEMENTS value
         * @property {number} NOTIFY_VAC_ACTION=3 NOTIFY_VAC_ACTION value
         */
        CMsgGCMsgSetOptions.Option = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NOTIFY_USER_SESSIONS"] = 0;
            values[valuesById[1] = "NOTIFY_SERVER_SESSIONS"] = 1;
            values[valuesById[2] = "NOTIFY_ACHIEVEMENTS"] = 2;
            values[valuesById[3] = "NOTIFY_VAC_ACTION"] = 3;
            return values;
        })();
    
        return CMsgGCMsgSetOptions;
    })();
    
    $root.CMsgGCHUpdateSession = (function() {
    
        /**
         * Properties of a CMsgGCHUpdateSession.
         * @exports ICMsgGCHUpdateSession
         * @interface ICMsgGCHUpdateSession
         * @property {number|Long|null} [steam_id] CMsgGCHUpdateSession steam_id
         * @property {number|null} [app_id] CMsgGCHUpdateSession app_id
         * @property {boolean|null} [online] CMsgGCHUpdateSession online
         * @property {number|Long|null} [server_steam_id] CMsgGCHUpdateSession server_steam_id
         * @property {number|null} [server_addr] CMsgGCHUpdateSession server_addr
         * @property {number|null} [server_port] CMsgGCHUpdateSession server_port
         * @property {number|null} [os_type] CMsgGCHUpdateSession os_type
         * @property {number|null} [client_addr] CMsgGCHUpdateSession client_addr
         * @property {Array.<CMsgGCHUpdateSession.IExtraField>|null} [extra_fields] CMsgGCHUpdateSession extra_fields
         * @property {number|Long|null} [owner_id] CMsgGCHUpdateSession owner_id
         * @property {number|null} [cm_session_sysid] CMsgGCHUpdateSession cm_session_sysid
         * @property {number|null} [cm_session_identifier] CMsgGCHUpdateSession cm_session_identifier
         * @property {Array.<number>|null} [depot_ids] CMsgGCHUpdateSession depot_ids
         */
    
        /**
         * Constructs a new CMsgGCHUpdateSession.
         * @exports CMsgGCHUpdateSession
         * @classdesc Represents a CMsgGCHUpdateSession.
         * @implements ICMsgGCHUpdateSession
         * @constructor
         * @param {ICMsgGCHUpdateSession=} [properties] Properties to set
         */
        function CMsgGCHUpdateSession(properties) {
            this.extra_fields = [];
            this.depot_ids = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgGCHUpdateSession steam_id.
         * @member {number|Long} steam_id
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCHUpdateSession app_id.
         * @member {number} app_id
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.app_id = 0;
    
        /**
         * CMsgGCHUpdateSession online.
         * @member {boolean} online
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.online = false;
    
        /**
         * CMsgGCHUpdateSession server_steam_id.
         * @member {number|Long} server_steam_id
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.server_steam_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCHUpdateSession server_addr.
         * @member {number} server_addr
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.server_addr = 0;
    
        /**
         * CMsgGCHUpdateSession server_port.
         * @member {number} server_port
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.server_port = 0;
    
        /**
         * CMsgGCHUpdateSession os_type.
         * @member {number} os_type
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.os_type = 0;
    
        /**
         * CMsgGCHUpdateSession client_addr.
         * @member {number} client_addr
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.client_addr = 0;
    
        /**
         * CMsgGCHUpdateSession extra_fields.
         * @member {Array.<CMsgGCHUpdateSession.IExtraField>} extra_fields
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.extra_fields = $util.emptyArray;
    
        /**
         * CMsgGCHUpdateSession owner_id.
         * @member {number|Long} owner_id
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.owner_id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgGCHUpdateSession cm_session_sysid.
         * @member {number} cm_session_sysid
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.cm_session_sysid = 0;
    
        /**
         * CMsgGCHUpdateSession cm_session_identifier.
         * @member {number} cm_session_identifier
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.cm_session_identifier = 0;
    
        /**
         * CMsgGCHUpdateSession depot_ids.
         * @member {Array.<number>} depot_ids
         * @memberof CMsgGCHUpdateSession
         * @instance
         */
        CMsgGCHUpdateSession.prototype.depot_ids = $util.emptyArray;
    
        /**
         * Creates a new CMsgGCHUpdateSession instance using the specified properties.
         * @function create
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {ICMsgGCHUpdateSession=} [properties] Properties to set
         * @returns {CMsgGCHUpdateSession} CMsgGCHUpdateSession instance
         */
        CMsgGCHUpdateSession.create = function create(properties) {
            return new CMsgGCHUpdateSession(properties);
        };
    
        /**
         * Encodes the specified CMsgGCHUpdateSession message. Does not implicitly {@link CMsgGCHUpdateSession.verify|verify} messages.
         * @function encode
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {ICMsgGCHUpdateSession} message CMsgGCHUpdateSession message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCHUpdateSession.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steam_id);
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.app_id);
            if (message.online != null && message.hasOwnProperty("online"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.online);
            if (message.server_steam_id != null && message.hasOwnProperty("server_steam_id"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.server_steam_id);
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.server_addr);
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.server_port);
            if (message.os_type != null && message.hasOwnProperty("os_type"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.os_type);
            if (message.client_addr != null && message.hasOwnProperty("client_addr"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.client_addr);
            if (message.extra_fields != null && message.extra_fields.length)
                for (var i = 0; i < message.extra_fields.length; ++i)
                    $root.CMsgGCHUpdateSession.ExtraField.encode(message.extra_fields[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.owner_id);
            if (message.cm_session_sysid != null && message.hasOwnProperty("cm_session_sysid"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.cm_session_sysid);
            if (message.cm_session_identifier != null && message.hasOwnProperty("cm_session_identifier"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.cm_session_identifier);
            if (message.depot_ids != null && message.depot_ids.length)
                for (var i = 0; i < message.depot_ids.length; ++i)
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.depot_ids[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgGCHUpdateSession message, length delimited. Does not implicitly {@link CMsgGCHUpdateSession.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {ICMsgGCHUpdateSession} message CMsgGCHUpdateSession message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgGCHUpdateSession.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgGCHUpdateSession message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgGCHUpdateSession} CMsgGCHUpdateSession
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCHUpdateSession.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCHUpdateSession();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steam_id = reader.fixed64();
                    break;
                case 2:
                    message.app_id = reader.uint32();
                    break;
                case 3:
                    message.online = reader.bool();
                    break;
                case 4:
                    message.server_steam_id = reader.fixed64();
                    break;
                case 5:
                    message.server_addr = reader.uint32();
                    break;
                case 6:
                    message.server_port = reader.uint32();
                    break;
                case 7:
                    message.os_type = reader.uint32();
                    break;
                case 8:
                    message.client_addr = reader.uint32();
                    break;
                case 9:
                    if (!(message.extra_fields && message.extra_fields.length))
                        message.extra_fields = [];
                    message.extra_fields.push($root.CMsgGCHUpdateSession.ExtraField.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.owner_id = reader.fixed64();
                    break;
                case 11:
                    message.cm_session_sysid = reader.uint32();
                    break;
                case 12:
                    message.cm_session_identifier = reader.uint32();
                    break;
                case 13:
                    if (!(message.depot_ids && message.depot_ids.length))
                        message.depot_ids = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.depot_ids.push(reader.uint32());
                    } else
                        message.depot_ids.push(reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgGCHUpdateSession message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgGCHUpdateSession} CMsgGCHUpdateSession
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgGCHUpdateSession.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgGCHUpdateSession message.
         * @function verify
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgGCHUpdateSession.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (!$util.isInteger(message.steam_id) && !(message.steam_id && $util.isInteger(message.steam_id.low) && $util.isInteger(message.steam_id.high)))
                    return "steam_id: integer|Long expected";
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                if (!$util.isInteger(message.app_id))
                    return "app_id: integer expected";
            if (message.online != null && message.hasOwnProperty("online"))
                if (typeof message.online !== "boolean")
                    return "online: boolean expected";
            if (message.server_steam_id != null && message.hasOwnProperty("server_steam_id"))
                if (!$util.isInteger(message.server_steam_id) && !(message.server_steam_id && $util.isInteger(message.server_steam_id.low) && $util.isInteger(message.server_steam_id.high)))
                    return "server_steam_id: integer|Long expected";
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                if (!$util.isInteger(message.server_addr))
                    return "server_addr: integer expected";
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                if (!$util.isInteger(message.server_port))
                    return "server_port: integer expected";
            if (message.os_type != null && message.hasOwnProperty("os_type"))
                if (!$util.isInteger(message.os_type))
                    return "os_type: integer expected";
            if (message.client_addr != null && message.hasOwnProperty("client_addr"))
                if (!$util.isInteger(message.client_addr))
                    return "client_addr: integer expected";
            if (message.extra_fields != null && message.hasOwnProperty("extra_fields")) {
                if (!Array.isArray(message.extra_fields))
                    return "extra_fields: array expected";
                for (var i = 0; i < message.extra_fields.length; ++i) {
                    var error = $root.CMsgGCHUpdateSession.ExtraField.verify(message.extra_fields[i]);
                    if (error)
                        return "extra_fields." + error;
                }
            }
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                if (!$util.isInteger(message.owner_id) && !(message.owner_id && $util.isInteger(message.owner_id.low) && $util.isInteger(message.owner_id.high)))
                    return "owner_id: integer|Long expected";
            if (message.cm_session_sysid != null && message.hasOwnProperty("cm_session_sysid"))
                if (!$util.isInteger(message.cm_session_sysid))
                    return "cm_session_sysid: integer expected";
            if (message.cm_session_identifier != null && message.hasOwnProperty("cm_session_identifier"))
                if (!$util.isInteger(message.cm_session_identifier))
                    return "cm_session_identifier: integer expected";
            if (message.depot_ids != null && message.hasOwnProperty("depot_ids")) {
                if (!Array.isArray(message.depot_ids))
                    return "depot_ids: array expected";
                for (var i = 0; i < message.depot_ids.length; ++i)
                    if (!$util.isInteger(message.depot_ids[i]))
                        return "depot_ids: integer[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgGCHUpdateSession message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgGCHUpdateSession} CMsgGCHUpdateSession
         */
        CMsgGCHUpdateSession.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgGCHUpdateSession)
                return object;
            var message = new $root.CMsgGCHUpdateSession();
            if (object.steam_id != null)
                if ($util.Long)
                    (message.steam_id = $util.Long.fromValue(object.steam_id)).unsigned = false;
                else if (typeof object.steam_id === "string")
                    message.steam_id = parseInt(object.steam_id, 10);
                else if (typeof object.steam_id === "number")
                    message.steam_id = object.steam_id;
                else if (typeof object.steam_id === "object")
                    message.steam_id = new $util.LongBits(object.steam_id.low >>> 0, object.steam_id.high >>> 0).toNumber();
            if (object.app_id != null)
                message.app_id = object.app_id >>> 0;
            if (object.online != null)
                message.online = Boolean(object.online);
            if (object.server_steam_id != null)
                if ($util.Long)
                    (message.server_steam_id = $util.Long.fromValue(object.server_steam_id)).unsigned = false;
                else if (typeof object.server_steam_id === "string")
                    message.server_steam_id = parseInt(object.server_steam_id, 10);
                else if (typeof object.server_steam_id === "number")
                    message.server_steam_id = object.server_steam_id;
                else if (typeof object.server_steam_id === "object")
                    message.server_steam_id = new $util.LongBits(object.server_steam_id.low >>> 0, object.server_steam_id.high >>> 0).toNumber();
            if (object.server_addr != null)
                message.server_addr = object.server_addr >>> 0;
            if (object.server_port != null)
                message.server_port = object.server_port >>> 0;
            if (object.os_type != null)
                message.os_type = object.os_type >>> 0;
            if (object.client_addr != null)
                message.client_addr = object.client_addr >>> 0;
            if (object.extra_fields) {
                if (!Array.isArray(object.extra_fields))
                    throw TypeError(".CMsgGCHUpdateSession.extra_fields: array expected");
                message.extra_fields = [];
                for (var i = 0; i < object.extra_fields.length; ++i) {
                    if (typeof object.extra_fields[i] !== "object")
                        throw TypeError(".CMsgGCHUpdateSession.extra_fields: object expected");
                    message.extra_fields[i] = $root.CMsgGCHUpdateSession.ExtraField.fromObject(object.extra_fields[i]);
                }
            }
            if (object.owner_id != null)
                if ($util.Long)
                    (message.owner_id = $util.Long.fromValue(object.owner_id)).unsigned = false;
                else if (typeof object.owner_id === "string")
                    message.owner_id = parseInt(object.owner_id, 10);
                else if (typeof object.owner_id === "number")
                    message.owner_id = object.owner_id;
                else if (typeof object.owner_id === "object")
                    message.owner_id = new $util.LongBits(object.owner_id.low >>> 0, object.owner_id.high >>> 0).toNumber();
            if (object.cm_session_sysid != null)
                message.cm_session_sysid = object.cm_session_sysid >>> 0;
            if (object.cm_session_identifier != null)
                message.cm_session_identifier = object.cm_session_identifier >>> 0;
            if (object.depot_ids) {
                if (!Array.isArray(object.depot_ids))
                    throw TypeError(".CMsgGCHUpdateSession.depot_ids: array expected");
                message.depot_ids = [];
                for (var i = 0; i < object.depot_ids.length; ++i)
                    message.depot_ids[i] = object.depot_ids[i] >>> 0;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgGCHUpdateSession message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgGCHUpdateSession
         * @static
         * @param {CMsgGCHUpdateSession} message CMsgGCHUpdateSession
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgGCHUpdateSession.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.extra_fields = [];
                object.depot_ids = [];
            }
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steam_id = options.longs === String ? "0" : 0;
                object.app_id = 0;
                object.online = false;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.server_steam_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.server_steam_id = options.longs === String ? "0" : 0;
                object.server_addr = 0;
                object.server_port = 0;
                object.os_type = 0;
                object.client_addr = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.owner_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.owner_id = options.longs === String ? "0" : 0;
                object.cm_session_sysid = 0;
                object.cm_session_identifier = 0;
            }
            if (message.steam_id != null && message.hasOwnProperty("steam_id"))
                if (typeof message.steam_id === "number")
                    object.steam_id = options.longs === String ? String(message.steam_id) : message.steam_id;
                else
                    object.steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.steam_id) : options.longs === Number ? new $util.LongBits(message.steam_id.low >>> 0, message.steam_id.high >>> 0).toNumber() : message.steam_id;
            if (message.app_id != null && message.hasOwnProperty("app_id"))
                object.app_id = message.app_id;
            if (message.online != null && message.hasOwnProperty("online"))
                object.online = message.online;
            if (message.server_steam_id != null && message.hasOwnProperty("server_steam_id"))
                if (typeof message.server_steam_id === "number")
                    object.server_steam_id = options.longs === String ? String(message.server_steam_id) : message.server_steam_id;
                else
                    object.server_steam_id = options.longs === String ? $util.Long.prototype.toString.call(message.server_steam_id) : options.longs === Number ? new $util.LongBits(message.server_steam_id.low >>> 0, message.server_steam_id.high >>> 0).toNumber() : message.server_steam_id;
            if (message.server_addr != null && message.hasOwnProperty("server_addr"))
                object.server_addr = message.server_addr;
            if (message.server_port != null && message.hasOwnProperty("server_port"))
                object.server_port = message.server_port;
            if (message.os_type != null && message.hasOwnProperty("os_type"))
                object.os_type = message.os_type;
            if (message.client_addr != null && message.hasOwnProperty("client_addr"))
                object.client_addr = message.client_addr;
            if (message.extra_fields && message.extra_fields.length) {
                object.extra_fields = [];
                for (var j = 0; j < message.extra_fields.length; ++j)
                    object.extra_fields[j] = $root.CMsgGCHUpdateSession.ExtraField.toObject(message.extra_fields[j], options);
            }
            if (message.owner_id != null && message.hasOwnProperty("owner_id"))
                if (typeof message.owner_id === "number")
                    object.owner_id = options.longs === String ? String(message.owner_id) : message.owner_id;
                else
                    object.owner_id = options.longs === String ? $util.Long.prototype.toString.call(message.owner_id) : options.longs === Number ? new $util.LongBits(message.owner_id.low >>> 0, message.owner_id.high >>> 0).toNumber() : message.owner_id;
            if (message.cm_session_sysid != null && message.hasOwnProperty("cm_session_sysid"))
                object.cm_session_sysid = message.cm_session_sysid;
            if (message.cm_session_identifier != null && message.hasOwnProperty("cm_session_identifier"))
                object.cm_session_identifier = message.cm_session_identifier;
            if (message.depot_ids && message.depot_ids.length) {
                object.depot_ids = [];
                for (var j = 0; j < message.depot_ids.length; ++j)
                    object.depot_ids[j] = message.depot_ids[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgGCHUpdateSession to JSON.
         * @function toJSON
         * @memberof CMsgGCHUpdateSession
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgGCHUpdateSession.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgGCHUpdateSession.ExtraField = (function() {
    
            /**
             * Properties of an ExtraField.
             * @memberof CMsgGCHUpdateSession
             * @interface IExtraField
             * @property {string|null} [name] ExtraField name
             * @property {string|null} [value] ExtraField value
             */
    
            /**
             * Constructs a new ExtraField.
             * @memberof CMsgGCHUpdateSession
             * @classdesc Represents an ExtraField.
             * @implements IExtraField
             * @constructor
             * @param {CMsgGCHUpdateSession.IExtraField=} [properties] Properties to set
             */
            function ExtraField(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ExtraField name.
             * @member {string} name
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @instance
             */
            ExtraField.prototype.name = "";
    
            /**
             * ExtraField value.
             * @member {string} value
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @instance
             */
            ExtraField.prototype.value = "";
    
            /**
             * Creates a new ExtraField instance using the specified properties.
             * @function create
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {CMsgGCHUpdateSession.IExtraField=} [properties] Properties to set
             * @returns {CMsgGCHUpdateSession.ExtraField} ExtraField instance
             */
            ExtraField.create = function create(properties) {
                return new ExtraField(properties);
            };
    
            /**
             * Encodes the specified ExtraField message. Does not implicitly {@link CMsgGCHUpdateSession.ExtraField.verify|verify} messages.
             * @function encode
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {CMsgGCHUpdateSession.IExtraField} message ExtraField message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtraField.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                return writer;
            };
    
            /**
             * Encodes the specified ExtraField message, length delimited. Does not implicitly {@link CMsgGCHUpdateSession.ExtraField.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {CMsgGCHUpdateSession.IExtraField} message ExtraField message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtraField.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ExtraField message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgGCHUpdateSession.ExtraField} ExtraField
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtraField.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgGCHUpdateSession.ExtraField();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ExtraField message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgGCHUpdateSession.ExtraField} ExtraField
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtraField.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ExtraField message.
             * @function verify
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtraField.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };
    
            /**
             * Creates an ExtraField message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgGCHUpdateSession.ExtraField} ExtraField
             */
            ExtraField.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgGCHUpdateSession.ExtraField)
                    return object;
                var message = new $root.CMsgGCHUpdateSession.ExtraField();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };
    
            /**
             * Creates a plain object from an ExtraField message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @static
             * @param {CMsgGCHUpdateSession.ExtraField} message ExtraField
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtraField.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.value = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };
    
            /**
             * Converts this ExtraField to JSON.
             * @function toJSON
             * @memberof CMsgGCHUpdateSession.ExtraField
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtraField.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ExtraField;
        })();
    
        return CMsgGCHUpdateSession;
    })();
    
    $root.CMsgNotificationOfSuspiciousActivity = (function() {
    
        /**
         * Properties of a CMsgNotificationOfSuspiciousActivity.
         * @exports ICMsgNotificationOfSuspiciousActivity
         * @interface ICMsgNotificationOfSuspiciousActivity
         * @property {number|Long|null} [steamid] CMsgNotificationOfSuspiciousActivity steamid
         * @property {number|null} [appid] CMsgNotificationOfSuspiciousActivity appid
         * @property {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances|null} [multiple_instances] CMsgNotificationOfSuspiciousActivity multiple_instances
         */
    
        /**
         * Constructs a new CMsgNotificationOfSuspiciousActivity.
         * @exports CMsgNotificationOfSuspiciousActivity
         * @classdesc Represents a CMsgNotificationOfSuspiciousActivity.
         * @implements ICMsgNotificationOfSuspiciousActivity
         * @constructor
         * @param {ICMsgNotificationOfSuspiciousActivity=} [properties] Properties to set
         */
        function CMsgNotificationOfSuspiciousActivity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgNotificationOfSuspiciousActivity steamid.
         * @member {number|Long} steamid
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @instance
         */
        CMsgNotificationOfSuspiciousActivity.prototype.steamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgNotificationOfSuspiciousActivity appid.
         * @member {number} appid
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @instance
         */
        CMsgNotificationOfSuspiciousActivity.prototype.appid = 0;
    
        /**
         * CMsgNotificationOfSuspiciousActivity multiple_instances.
         * @member {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances|null|undefined} multiple_instances
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @instance
         */
        CMsgNotificationOfSuspiciousActivity.prototype.multiple_instances = null;
    
        /**
         * Creates a new CMsgNotificationOfSuspiciousActivity instance using the specified properties.
         * @function create
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {ICMsgNotificationOfSuspiciousActivity=} [properties] Properties to set
         * @returns {CMsgNotificationOfSuspiciousActivity} CMsgNotificationOfSuspiciousActivity instance
         */
        CMsgNotificationOfSuspiciousActivity.create = function create(properties) {
            return new CMsgNotificationOfSuspiciousActivity(properties);
        };
    
        /**
         * Encodes the specified CMsgNotificationOfSuspiciousActivity message. Does not implicitly {@link CMsgNotificationOfSuspiciousActivity.verify|verify} messages.
         * @function encode
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {ICMsgNotificationOfSuspiciousActivity} message CMsgNotificationOfSuspiciousActivity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNotificationOfSuspiciousActivity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.steamid);
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.multiple_instances != null && message.hasOwnProperty("multiple_instances"))
                $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.encode(message.multiple_instances, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgNotificationOfSuspiciousActivity message, length delimited. Does not implicitly {@link CMsgNotificationOfSuspiciousActivity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {ICMsgNotificationOfSuspiciousActivity} message CMsgNotificationOfSuspiciousActivity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgNotificationOfSuspiciousActivity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgNotificationOfSuspiciousActivity message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgNotificationOfSuspiciousActivity} CMsgNotificationOfSuspiciousActivity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNotificationOfSuspiciousActivity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNotificationOfSuspiciousActivity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.steamid = reader.fixed64();
                    break;
                case 2:
                    message.appid = reader.uint32();
                    break;
                case 3:
                    message.multiple_instances = $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgNotificationOfSuspiciousActivity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgNotificationOfSuspiciousActivity} CMsgNotificationOfSuspiciousActivity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgNotificationOfSuspiciousActivity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgNotificationOfSuspiciousActivity message.
         * @function verify
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgNotificationOfSuspiciousActivity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (!$util.isInteger(message.steamid) && !(message.steamid && $util.isInteger(message.steamid.low) && $util.isInteger(message.steamid.high)))
                    return "steamid: integer|Long expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.multiple_instances != null && message.hasOwnProperty("multiple_instances")) {
                var error = $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.verify(message.multiple_instances);
                if (error)
                    return "multiple_instances." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgNotificationOfSuspiciousActivity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgNotificationOfSuspiciousActivity} CMsgNotificationOfSuspiciousActivity
         */
        CMsgNotificationOfSuspiciousActivity.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgNotificationOfSuspiciousActivity)
                return object;
            var message = new $root.CMsgNotificationOfSuspiciousActivity();
            if (object.steamid != null)
                if ($util.Long)
                    (message.steamid = $util.Long.fromValue(object.steamid)).unsigned = false;
                else if (typeof object.steamid === "string")
                    message.steamid = parseInt(object.steamid, 10);
                else if (typeof object.steamid === "number")
                    message.steamid = object.steamid;
                else if (typeof object.steamid === "object")
                    message.steamid = new $util.LongBits(object.steamid.low >>> 0, object.steamid.high >>> 0).toNumber();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.multiple_instances != null) {
                if (typeof object.multiple_instances !== "object")
                    throw TypeError(".CMsgNotificationOfSuspiciousActivity.multiple_instances: object expected");
                message.multiple_instances = $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.fromObject(object.multiple_instances);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgNotificationOfSuspiciousActivity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @static
         * @param {CMsgNotificationOfSuspiciousActivity} message CMsgNotificationOfSuspiciousActivity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgNotificationOfSuspiciousActivity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamid = options.longs === String ? "0" : 0;
                object.appid = 0;
                object.multiple_instances = null;
            }
            if (message.steamid != null && message.hasOwnProperty("steamid"))
                if (typeof message.steamid === "number")
                    object.steamid = options.longs === String ? String(message.steamid) : message.steamid;
                else
                    object.steamid = options.longs === String ? $util.Long.prototype.toString.call(message.steamid) : options.longs === Number ? new $util.LongBits(message.steamid.low >>> 0, message.steamid.high >>> 0).toNumber() : message.steamid;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.multiple_instances != null && message.hasOwnProperty("multiple_instances"))
                object.multiple_instances = $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.toObject(message.multiple_instances, options);
            return object;
        };
    
        /**
         * Converts this CMsgNotificationOfSuspiciousActivity to JSON.
         * @function toJSON
         * @memberof CMsgNotificationOfSuspiciousActivity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgNotificationOfSuspiciousActivity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgNotificationOfSuspiciousActivity.MultipleGameInstances = (function() {
    
            /**
             * Properties of a MultipleGameInstances.
             * @memberof CMsgNotificationOfSuspiciousActivity
             * @interface IMultipleGameInstances
             * @property {number|null} [app_instance_count] MultipleGameInstances app_instance_count
             * @property {Array.<number|Long>|null} [other_steamids] MultipleGameInstances other_steamids
             */
    
            /**
             * Constructs a new MultipleGameInstances.
             * @memberof CMsgNotificationOfSuspiciousActivity
             * @classdesc Represents a MultipleGameInstances.
             * @implements IMultipleGameInstances
             * @constructor
             * @param {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances=} [properties] Properties to set
             */
            function MultipleGameInstances(properties) {
                this.other_steamids = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * MultipleGameInstances app_instance_count.
             * @member {number} app_instance_count
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @instance
             */
            MultipleGameInstances.prototype.app_instance_count = 0;
    
            /**
             * MultipleGameInstances other_steamids.
             * @member {Array.<number|Long>} other_steamids
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @instance
             */
            MultipleGameInstances.prototype.other_steamids = $util.emptyArray;
    
            /**
             * Creates a new MultipleGameInstances instance using the specified properties.
             * @function create
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances=} [properties] Properties to set
             * @returns {CMsgNotificationOfSuspiciousActivity.MultipleGameInstances} MultipleGameInstances instance
             */
            MultipleGameInstances.create = function create(properties) {
                return new MultipleGameInstances(properties);
            };
    
            /**
             * Encodes the specified MultipleGameInstances message. Does not implicitly {@link CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.verify|verify} messages.
             * @function encode
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances} message MultipleGameInstances message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MultipleGameInstances.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.app_instance_count != null && message.hasOwnProperty("app_instance_count"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.app_instance_count);
                if (message.other_steamids != null && message.other_steamids.length)
                    for (var i = 0; i < message.other_steamids.length; ++i)
                        writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.other_steamids[i]);
                return writer;
            };
    
            /**
             * Encodes the specified MultipleGameInstances message, length delimited. Does not implicitly {@link CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {CMsgNotificationOfSuspiciousActivity.IMultipleGameInstances} message MultipleGameInstances message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MultipleGameInstances.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a MultipleGameInstances message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgNotificationOfSuspiciousActivity.MultipleGameInstances} MultipleGameInstances
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MultipleGameInstances.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.app_instance_count = reader.uint32();
                        break;
                    case 2:
                        if (!(message.other_steamids && message.other_steamids.length))
                            message.other_steamids = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.other_steamids.push(reader.fixed64());
                        } else
                            message.other_steamids.push(reader.fixed64());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a MultipleGameInstances message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgNotificationOfSuspiciousActivity.MultipleGameInstances} MultipleGameInstances
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MultipleGameInstances.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a MultipleGameInstances message.
             * @function verify
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MultipleGameInstances.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.app_instance_count != null && message.hasOwnProperty("app_instance_count"))
                    if (!$util.isInteger(message.app_instance_count))
                        return "app_instance_count: integer expected";
                if (message.other_steamids != null && message.hasOwnProperty("other_steamids")) {
                    if (!Array.isArray(message.other_steamids))
                        return "other_steamids: array expected";
                    for (var i = 0; i < message.other_steamids.length; ++i)
                        if (!$util.isInteger(message.other_steamids[i]) && !(message.other_steamids[i] && $util.isInteger(message.other_steamids[i].low) && $util.isInteger(message.other_steamids[i].high)))
                            return "other_steamids: integer|Long[] expected";
                }
                return null;
            };
    
            /**
             * Creates a MultipleGameInstances message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgNotificationOfSuspiciousActivity.MultipleGameInstances} MultipleGameInstances
             */
            MultipleGameInstances.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
                    return object;
                var message = new $root.CMsgNotificationOfSuspiciousActivity.MultipleGameInstances();
                if (object.app_instance_count != null)
                    message.app_instance_count = object.app_instance_count >>> 0;
                if (object.other_steamids) {
                    if (!Array.isArray(object.other_steamids))
                        throw TypeError(".CMsgNotificationOfSuspiciousActivity.MultipleGameInstances.other_steamids: array expected");
                    message.other_steamids = [];
                    for (var i = 0; i < object.other_steamids.length; ++i)
                        if ($util.Long)
                            (message.other_steamids[i] = $util.Long.fromValue(object.other_steamids[i])).unsigned = false;
                        else if (typeof object.other_steamids[i] === "string")
                            message.other_steamids[i] = parseInt(object.other_steamids[i], 10);
                        else if (typeof object.other_steamids[i] === "number")
                            message.other_steamids[i] = object.other_steamids[i];
                        else if (typeof object.other_steamids[i] === "object")
                            message.other_steamids[i] = new $util.LongBits(object.other_steamids[i].low >>> 0, object.other_steamids[i].high >>> 0).toNumber();
                }
                return message;
            };
    
            /**
             * Creates a plain object from a MultipleGameInstances message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @static
             * @param {CMsgNotificationOfSuspiciousActivity.MultipleGameInstances} message MultipleGameInstances
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MultipleGameInstances.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.other_steamids = [];
                if (options.defaults)
                    object.app_instance_count = 0;
                if (message.app_instance_count != null && message.hasOwnProperty("app_instance_count"))
                    object.app_instance_count = message.app_instance_count;
                if (message.other_steamids && message.other_steamids.length) {
                    object.other_steamids = [];
                    for (var j = 0; j < message.other_steamids.length; ++j)
                        if (typeof message.other_steamids[j] === "number")
                            object.other_steamids[j] = options.longs === String ? String(message.other_steamids[j]) : message.other_steamids[j];
                        else
                            object.other_steamids[j] = options.longs === String ? $util.Long.prototype.toString.call(message.other_steamids[j]) : options.longs === Number ? new $util.LongBits(message.other_steamids[j].low >>> 0, message.other_steamids[j].high >>> 0).toNumber() : message.other_steamids[j];
                }
                return object;
            };
    
            /**
             * Converts this MultipleGameInstances to JSON.
             * @function toJSON
             * @memberof CMsgNotificationOfSuspiciousActivity.MultipleGameInstances
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MultipleGameInstances.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return MultipleGameInstances;
        })();
    
        return CMsgNotificationOfSuspiciousActivity;
    })();
    
    $root.CMsgDPPartnerMicroTxns = (function() {
    
        /**
         * Properties of a CMsgDPPartnerMicroTxns.
         * @exports ICMsgDPPartnerMicroTxns
         * @interface ICMsgDPPartnerMicroTxns
         * @property {number|null} [appid] CMsgDPPartnerMicroTxns appid
         * @property {string|null} [gc_name] CMsgDPPartnerMicroTxns gc_name
         * @property {CMsgDPPartnerMicroTxns.IPartnerInfo|null} [partner] CMsgDPPartnerMicroTxns partner
         * @property {Array.<CMsgDPPartnerMicroTxns.IPartnerMicroTxn>|null} [transactions] CMsgDPPartnerMicroTxns transactions
         */
    
        /**
         * Constructs a new CMsgDPPartnerMicroTxns.
         * @exports CMsgDPPartnerMicroTxns
         * @classdesc Represents a CMsgDPPartnerMicroTxns.
         * @implements ICMsgDPPartnerMicroTxns
         * @constructor
         * @param {ICMsgDPPartnerMicroTxns=} [properties] Properties to set
         */
        function CMsgDPPartnerMicroTxns(properties) {
            this.transactions = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgDPPartnerMicroTxns appid.
         * @member {number} appid
         * @memberof CMsgDPPartnerMicroTxns
         * @instance
         */
        CMsgDPPartnerMicroTxns.prototype.appid = 0;
    
        /**
         * CMsgDPPartnerMicroTxns gc_name.
         * @member {string} gc_name
         * @memberof CMsgDPPartnerMicroTxns
         * @instance
         */
        CMsgDPPartnerMicroTxns.prototype.gc_name = "";
    
        /**
         * CMsgDPPartnerMicroTxns partner.
         * @member {CMsgDPPartnerMicroTxns.IPartnerInfo|null|undefined} partner
         * @memberof CMsgDPPartnerMicroTxns
         * @instance
         */
        CMsgDPPartnerMicroTxns.prototype.partner = null;
    
        /**
         * CMsgDPPartnerMicroTxns transactions.
         * @member {Array.<CMsgDPPartnerMicroTxns.IPartnerMicroTxn>} transactions
         * @memberof CMsgDPPartnerMicroTxns
         * @instance
         */
        CMsgDPPartnerMicroTxns.prototype.transactions = $util.emptyArray;
    
        /**
         * Creates a new CMsgDPPartnerMicroTxns instance using the specified properties.
         * @function create
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {ICMsgDPPartnerMicroTxns=} [properties] Properties to set
         * @returns {CMsgDPPartnerMicroTxns} CMsgDPPartnerMicroTxns instance
         */
        CMsgDPPartnerMicroTxns.create = function create(properties) {
            return new CMsgDPPartnerMicroTxns(properties);
        };
    
        /**
         * Encodes the specified CMsgDPPartnerMicroTxns message. Does not implicitly {@link CMsgDPPartnerMicroTxns.verify|verify} messages.
         * @function encode
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {ICMsgDPPartnerMicroTxns} message CMsgDPPartnerMicroTxns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDPPartnerMicroTxns.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && message.hasOwnProperty("appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.gc_name != null && message.hasOwnProperty("gc_name"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gc_name);
            if (message.partner != null && message.hasOwnProperty("partner"))
                $root.CMsgDPPartnerMicroTxns.PartnerInfo.encode(message.partner, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.transactions != null && message.transactions.length)
                for (var i = 0; i < message.transactions.length; ++i)
                    $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn.encode(message.transactions[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgDPPartnerMicroTxns message, length delimited. Does not implicitly {@link CMsgDPPartnerMicroTxns.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {ICMsgDPPartnerMicroTxns} message CMsgDPPartnerMicroTxns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDPPartnerMicroTxns.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgDPPartnerMicroTxns message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgDPPartnerMicroTxns} CMsgDPPartnerMicroTxns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDPPartnerMicroTxns.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDPPartnerMicroTxns();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.appid = reader.uint32();
                    break;
                case 2:
                    message.gc_name = reader.string();
                    break;
                case 3:
                    message.partner = $root.CMsgDPPartnerMicroTxns.PartnerInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.transactions && message.transactions.length))
                        message.transactions = [];
                    message.transactions.push($root.CMsgDPPartnerMicroTxns.PartnerMicroTxn.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgDPPartnerMicroTxns message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgDPPartnerMicroTxns} CMsgDPPartnerMicroTxns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDPPartnerMicroTxns.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgDPPartnerMicroTxns message.
         * @function verify
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgDPPartnerMicroTxns.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.gc_name != null && message.hasOwnProperty("gc_name"))
                if (!$util.isString(message.gc_name))
                    return "gc_name: string expected";
            if (message.partner != null && message.hasOwnProperty("partner")) {
                var error = $root.CMsgDPPartnerMicroTxns.PartnerInfo.verify(message.partner);
                if (error)
                    return "partner." + error;
            }
            if (message.transactions != null && message.hasOwnProperty("transactions")) {
                if (!Array.isArray(message.transactions))
                    return "transactions: array expected";
                for (var i = 0; i < message.transactions.length; ++i) {
                    var error = $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn.verify(message.transactions[i]);
                    if (error)
                        return "transactions." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgDPPartnerMicroTxns message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgDPPartnerMicroTxns} CMsgDPPartnerMicroTxns
         */
        CMsgDPPartnerMicroTxns.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgDPPartnerMicroTxns)
                return object;
            var message = new $root.CMsgDPPartnerMicroTxns();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.gc_name != null)
                message.gc_name = String(object.gc_name);
            if (object.partner != null) {
                if (typeof object.partner !== "object")
                    throw TypeError(".CMsgDPPartnerMicroTxns.partner: object expected");
                message.partner = $root.CMsgDPPartnerMicroTxns.PartnerInfo.fromObject(object.partner);
            }
            if (object.transactions) {
                if (!Array.isArray(object.transactions))
                    throw TypeError(".CMsgDPPartnerMicroTxns.transactions: array expected");
                message.transactions = [];
                for (var i = 0; i < object.transactions.length; ++i) {
                    if (typeof object.transactions[i] !== "object")
                        throw TypeError(".CMsgDPPartnerMicroTxns.transactions: object expected");
                    message.transactions[i] = $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn.fromObject(object.transactions[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgDPPartnerMicroTxns message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgDPPartnerMicroTxns
         * @static
         * @param {CMsgDPPartnerMicroTxns} message CMsgDPPartnerMicroTxns
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgDPPartnerMicroTxns.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.transactions = [];
            if (options.defaults) {
                object.appid = 0;
                object.gc_name = "";
                object.partner = null;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.gc_name != null && message.hasOwnProperty("gc_name"))
                object.gc_name = message.gc_name;
            if (message.partner != null && message.hasOwnProperty("partner"))
                object.partner = $root.CMsgDPPartnerMicroTxns.PartnerInfo.toObject(message.partner, options);
            if (message.transactions && message.transactions.length) {
                object.transactions = [];
                for (var j = 0; j < message.transactions.length; ++j)
                    object.transactions[j] = $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn.toObject(message.transactions[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgDPPartnerMicroTxns to JSON.
         * @function toJSON
         * @memberof CMsgDPPartnerMicroTxns
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgDPPartnerMicroTxns.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        CMsgDPPartnerMicroTxns.PartnerMicroTxn = (function() {
    
            /**
             * Properties of a PartnerMicroTxn.
             * @memberof CMsgDPPartnerMicroTxns
             * @interface IPartnerMicroTxn
             * @property {number|null} [init_time] PartnerMicroTxn init_time
             * @property {number|null} [last_update_time] PartnerMicroTxn last_update_time
             * @property {number|Long|null} [txn_id] PartnerMicroTxn txn_id
             * @property {number|null} [account_id] PartnerMicroTxn account_id
             * @property {number|null} [line_item] PartnerMicroTxn line_item
             * @property {number|Long|null} [item_id] PartnerMicroTxn item_id
             * @property {number|null} [def_index] PartnerMicroTxn def_index
             * @property {number|Long|null} [price] PartnerMicroTxn price
             * @property {number|Long|null} [tax] PartnerMicroTxn tax
             * @property {number|Long|null} [price_usd] PartnerMicroTxn price_usd
             * @property {number|Long|null} [tax_usd] PartnerMicroTxn tax_usd
             * @property {number|null} [purchase_type] PartnerMicroTxn purchase_type
             * @property {number|null} [steam_txn_type] PartnerMicroTxn steam_txn_type
             * @property {string|null} [country_code] PartnerMicroTxn country_code
             * @property {string|null} [region_code] PartnerMicroTxn region_code
             * @property {number|null} [quantity] PartnerMicroTxn quantity
             * @property {number|Long|null} [ref_trans_id] PartnerMicroTxn ref_trans_id
             */
    
            /**
             * Constructs a new PartnerMicroTxn.
             * @memberof CMsgDPPartnerMicroTxns
             * @classdesc Represents a PartnerMicroTxn.
             * @implements IPartnerMicroTxn
             * @constructor
             * @param {CMsgDPPartnerMicroTxns.IPartnerMicroTxn=} [properties] Properties to set
             */
            function PartnerMicroTxn(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PartnerMicroTxn init_time.
             * @member {number} init_time
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.init_time = 0;
    
            /**
             * PartnerMicroTxn last_update_time.
             * @member {number} last_update_time
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.last_update_time = 0;
    
            /**
             * PartnerMicroTxn txn_id.
             * @member {number|Long} txn_id
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.txn_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn account_id.
             * @member {number} account_id
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.account_id = 0;
    
            /**
             * PartnerMicroTxn line_item.
             * @member {number} line_item
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.line_item = 0;
    
            /**
             * PartnerMicroTxn item_id.
             * @member {number|Long} item_id
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.item_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn def_index.
             * @member {number} def_index
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.def_index = 0;
    
            /**
             * PartnerMicroTxn price.
             * @member {number|Long} price
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.price = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn tax.
             * @member {number|Long} tax
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.tax = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn price_usd.
             * @member {number|Long} price_usd
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.price_usd = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn tax_usd.
             * @member {number|Long} tax_usd
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.tax_usd = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * PartnerMicroTxn purchase_type.
             * @member {number} purchase_type
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.purchase_type = 0;
    
            /**
             * PartnerMicroTxn steam_txn_type.
             * @member {number} steam_txn_type
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.steam_txn_type = 0;
    
            /**
             * PartnerMicroTxn country_code.
             * @member {string} country_code
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.country_code = "";
    
            /**
             * PartnerMicroTxn region_code.
             * @member {string} region_code
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.region_code = "";
    
            /**
             * PartnerMicroTxn quantity.
             * @member {number} quantity
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.quantity = 0;
    
            /**
             * PartnerMicroTxn ref_trans_id.
             * @member {number|Long} ref_trans_id
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             */
            PartnerMicroTxn.prototype.ref_trans_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * Creates a new PartnerMicroTxn instance using the specified properties.
             * @function create
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerMicroTxn=} [properties] Properties to set
             * @returns {CMsgDPPartnerMicroTxns.PartnerMicroTxn} PartnerMicroTxn instance
             */
            PartnerMicroTxn.create = function create(properties) {
                return new PartnerMicroTxn(properties);
            };
    
            /**
             * Encodes the specified PartnerMicroTxn message. Does not implicitly {@link CMsgDPPartnerMicroTxns.PartnerMicroTxn.verify|verify} messages.
             * @function encode
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerMicroTxn} message PartnerMicroTxn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartnerMicroTxn.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.init_time != null && message.hasOwnProperty("init_time"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.init_time);
                if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.last_update_time);
                if (message.txn_id != null && message.hasOwnProperty("txn_id"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.txn_id);
                if (message.account_id != null && message.hasOwnProperty("account_id"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.account_id);
                if (message.line_item != null && message.hasOwnProperty("line_item"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.line_item);
                if (message.item_id != null && message.hasOwnProperty("item_id"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.item_id);
                if (message.def_index != null && message.hasOwnProperty("def_index"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.def_index);
                if (message.price != null && message.hasOwnProperty("price"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.price);
                if (message.tax != null && message.hasOwnProperty("tax"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.tax);
                if (message.price_usd != null && message.hasOwnProperty("price_usd"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.price_usd);
                if (message.tax_usd != null && message.hasOwnProperty("tax_usd"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.tax_usd);
                if (message.purchase_type != null && message.hasOwnProperty("purchase_type"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.purchase_type);
                if (message.steam_txn_type != null && message.hasOwnProperty("steam_txn_type"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.steam_txn_type);
                if (message.country_code != null && message.hasOwnProperty("country_code"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.country_code);
                if (message.region_code != null && message.hasOwnProperty("region_code"))
                    writer.uint32(/* id 15, wireType 2 =*/122).string(message.region_code);
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    writer.uint32(/* id 16, wireType 0 =*/128).int32(message.quantity);
                if (message.ref_trans_id != null && message.hasOwnProperty("ref_trans_id"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.ref_trans_id);
                return writer;
            };
    
            /**
             * Encodes the specified PartnerMicroTxn message, length delimited. Does not implicitly {@link CMsgDPPartnerMicroTxns.PartnerMicroTxn.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerMicroTxn} message PartnerMicroTxn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartnerMicroTxn.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PartnerMicroTxn message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgDPPartnerMicroTxns.PartnerMicroTxn} PartnerMicroTxn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartnerMicroTxn.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.init_time = reader.uint32();
                        break;
                    case 2:
                        message.last_update_time = reader.uint32();
                        break;
                    case 3:
                        message.txn_id = reader.uint64();
                        break;
                    case 4:
                        message.account_id = reader.uint32();
                        break;
                    case 5:
                        message.line_item = reader.uint32();
                        break;
                    case 6:
                        message.item_id = reader.uint64();
                        break;
                    case 7:
                        message.def_index = reader.uint32();
                        break;
                    case 8:
                        message.price = reader.uint64();
                        break;
                    case 9:
                        message.tax = reader.uint64();
                        break;
                    case 10:
                        message.price_usd = reader.uint64();
                        break;
                    case 11:
                        message.tax_usd = reader.uint64();
                        break;
                    case 12:
                        message.purchase_type = reader.uint32();
                        break;
                    case 13:
                        message.steam_txn_type = reader.uint32();
                        break;
                    case 14:
                        message.country_code = reader.string();
                        break;
                    case 15:
                        message.region_code = reader.string();
                        break;
                    case 16:
                        message.quantity = reader.int32();
                        break;
                    case 17:
                        message.ref_trans_id = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PartnerMicroTxn message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgDPPartnerMicroTxns.PartnerMicroTxn} PartnerMicroTxn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartnerMicroTxn.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PartnerMicroTxn message.
             * @function verify
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PartnerMicroTxn.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.init_time != null && message.hasOwnProperty("init_time"))
                    if (!$util.isInteger(message.init_time))
                        return "init_time: integer expected";
                if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                    if (!$util.isInteger(message.last_update_time))
                        return "last_update_time: integer expected";
                if (message.txn_id != null && message.hasOwnProperty("txn_id"))
                    if (!$util.isInteger(message.txn_id) && !(message.txn_id && $util.isInteger(message.txn_id.low) && $util.isInteger(message.txn_id.high)))
                        return "txn_id: integer|Long expected";
                if (message.account_id != null && message.hasOwnProperty("account_id"))
                    if (!$util.isInteger(message.account_id))
                        return "account_id: integer expected";
                if (message.line_item != null && message.hasOwnProperty("line_item"))
                    if (!$util.isInteger(message.line_item))
                        return "line_item: integer expected";
                if (message.item_id != null && message.hasOwnProperty("item_id"))
                    if (!$util.isInteger(message.item_id) && !(message.item_id && $util.isInteger(message.item_id.low) && $util.isInteger(message.item_id.high)))
                        return "item_id: integer|Long expected";
                if (message.def_index != null && message.hasOwnProperty("def_index"))
                    if (!$util.isInteger(message.def_index))
                        return "def_index: integer expected";
                if (message.price != null && message.hasOwnProperty("price"))
                    if (!$util.isInteger(message.price) && !(message.price && $util.isInteger(message.price.low) && $util.isInteger(message.price.high)))
                        return "price: integer|Long expected";
                if (message.tax != null && message.hasOwnProperty("tax"))
                    if (!$util.isInteger(message.tax) && !(message.tax && $util.isInteger(message.tax.low) && $util.isInteger(message.tax.high)))
                        return "tax: integer|Long expected";
                if (message.price_usd != null && message.hasOwnProperty("price_usd"))
                    if (!$util.isInteger(message.price_usd) && !(message.price_usd && $util.isInteger(message.price_usd.low) && $util.isInteger(message.price_usd.high)))
                        return "price_usd: integer|Long expected";
                if (message.tax_usd != null && message.hasOwnProperty("tax_usd"))
                    if (!$util.isInteger(message.tax_usd) && !(message.tax_usd && $util.isInteger(message.tax_usd.low) && $util.isInteger(message.tax_usd.high)))
                        return "tax_usd: integer|Long expected";
                if (message.purchase_type != null && message.hasOwnProperty("purchase_type"))
                    if (!$util.isInteger(message.purchase_type))
                        return "purchase_type: integer expected";
                if (message.steam_txn_type != null && message.hasOwnProperty("steam_txn_type"))
                    if (!$util.isInteger(message.steam_txn_type))
                        return "steam_txn_type: integer expected";
                if (message.country_code != null && message.hasOwnProperty("country_code"))
                    if (!$util.isString(message.country_code))
                        return "country_code: string expected";
                if (message.region_code != null && message.hasOwnProperty("region_code"))
                    if (!$util.isString(message.region_code))
                        return "region_code: string expected";
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    if (!$util.isInteger(message.quantity))
                        return "quantity: integer expected";
                if (message.ref_trans_id != null && message.hasOwnProperty("ref_trans_id"))
                    if (!$util.isInteger(message.ref_trans_id) && !(message.ref_trans_id && $util.isInteger(message.ref_trans_id.low) && $util.isInteger(message.ref_trans_id.high)))
                        return "ref_trans_id: integer|Long expected";
                return null;
            };
    
            /**
             * Creates a PartnerMicroTxn message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgDPPartnerMicroTxns.PartnerMicroTxn} PartnerMicroTxn
             */
            PartnerMicroTxn.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn)
                    return object;
                var message = new $root.CMsgDPPartnerMicroTxns.PartnerMicroTxn();
                if (object.init_time != null)
                    message.init_time = object.init_time >>> 0;
                if (object.last_update_time != null)
                    message.last_update_time = object.last_update_time >>> 0;
                if (object.txn_id != null)
                    if ($util.Long)
                        (message.txn_id = $util.Long.fromValue(object.txn_id)).unsigned = true;
                    else if (typeof object.txn_id === "string")
                        message.txn_id = parseInt(object.txn_id, 10);
                    else if (typeof object.txn_id === "number")
                        message.txn_id = object.txn_id;
                    else if (typeof object.txn_id === "object")
                        message.txn_id = new $util.LongBits(object.txn_id.low >>> 0, object.txn_id.high >>> 0).toNumber(true);
                if (object.account_id != null)
                    message.account_id = object.account_id >>> 0;
                if (object.line_item != null)
                    message.line_item = object.line_item >>> 0;
                if (object.item_id != null)
                    if ($util.Long)
                        (message.item_id = $util.Long.fromValue(object.item_id)).unsigned = true;
                    else if (typeof object.item_id === "string")
                        message.item_id = parseInt(object.item_id, 10);
                    else if (typeof object.item_id === "number")
                        message.item_id = object.item_id;
                    else if (typeof object.item_id === "object")
                        message.item_id = new $util.LongBits(object.item_id.low >>> 0, object.item_id.high >>> 0).toNumber(true);
                if (object.def_index != null)
                    message.def_index = object.def_index >>> 0;
                if (object.price != null)
                    if ($util.Long)
                        (message.price = $util.Long.fromValue(object.price)).unsigned = true;
                    else if (typeof object.price === "string")
                        message.price = parseInt(object.price, 10);
                    else if (typeof object.price === "number")
                        message.price = object.price;
                    else if (typeof object.price === "object")
                        message.price = new $util.LongBits(object.price.low >>> 0, object.price.high >>> 0).toNumber(true);
                if (object.tax != null)
                    if ($util.Long)
                        (message.tax = $util.Long.fromValue(object.tax)).unsigned = true;
                    else if (typeof object.tax === "string")
                        message.tax = parseInt(object.tax, 10);
                    else if (typeof object.tax === "number")
                        message.tax = object.tax;
                    else if (typeof object.tax === "object")
                        message.tax = new $util.LongBits(object.tax.low >>> 0, object.tax.high >>> 0).toNumber(true);
                if (object.price_usd != null)
                    if ($util.Long)
                        (message.price_usd = $util.Long.fromValue(object.price_usd)).unsigned = true;
                    else if (typeof object.price_usd === "string")
                        message.price_usd = parseInt(object.price_usd, 10);
                    else if (typeof object.price_usd === "number")
                        message.price_usd = object.price_usd;
                    else if (typeof object.price_usd === "object")
                        message.price_usd = new $util.LongBits(object.price_usd.low >>> 0, object.price_usd.high >>> 0).toNumber(true);
                if (object.tax_usd != null)
                    if ($util.Long)
                        (message.tax_usd = $util.Long.fromValue(object.tax_usd)).unsigned = true;
                    else if (typeof object.tax_usd === "string")
                        message.tax_usd = parseInt(object.tax_usd, 10);
                    else if (typeof object.tax_usd === "number")
                        message.tax_usd = object.tax_usd;
                    else if (typeof object.tax_usd === "object")
                        message.tax_usd = new $util.LongBits(object.tax_usd.low >>> 0, object.tax_usd.high >>> 0).toNumber(true);
                if (object.purchase_type != null)
                    message.purchase_type = object.purchase_type >>> 0;
                if (object.steam_txn_type != null)
                    message.steam_txn_type = object.steam_txn_type >>> 0;
                if (object.country_code != null)
                    message.country_code = String(object.country_code);
                if (object.region_code != null)
                    message.region_code = String(object.region_code);
                if (object.quantity != null)
                    message.quantity = object.quantity | 0;
                if (object.ref_trans_id != null)
                    if ($util.Long)
                        (message.ref_trans_id = $util.Long.fromValue(object.ref_trans_id)).unsigned = true;
                    else if (typeof object.ref_trans_id === "string")
                        message.ref_trans_id = parseInt(object.ref_trans_id, 10);
                    else if (typeof object.ref_trans_id === "number")
                        message.ref_trans_id = object.ref_trans_id;
                    else if (typeof object.ref_trans_id === "object")
                        message.ref_trans_id = new $util.LongBits(object.ref_trans_id.low >>> 0, object.ref_trans_id.high >>> 0).toNumber(true);
                return message;
            };
    
            /**
             * Creates a plain object from a PartnerMicroTxn message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @static
             * @param {CMsgDPPartnerMicroTxns.PartnerMicroTxn} message PartnerMicroTxn
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PartnerMicroTxn.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.init_time = 0;
                    object.last_update_time = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.txn_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.txn_id = options.longs === String ? "0" : 0;
                    object.account_id = 0;
                    object.line_item = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.item_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.item_id = options.longs === String ? "0" : 0;
                    object.def_index = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.price = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.price = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tax = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tax = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.price_usd = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.price_usd = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tax_usd = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tax_usd = options.longs === String ? "0" : 0;
                    object.purchase_type = 0;
                    object.steam_txn_type = 0;
                    object.country_code = "";
                    object.region_code = "";
                    object.quantity = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.ref_trans_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ref_trans_id = options.longs === String ? "0" : 0;
                }
                if (message.init_time != null && message.hasOwnProperty("init_time"))
                    object.init_time = message.init_time;
                if (message.last_update_time != null && message.hasOwnProperty("last_update_time"))
                    object.last_update_time = message.last_update_time;
                if (message.txn_id != null && message.hasOwnProperty("txn_id"))
                    if (typeof message.txn_id === "number")
                        object.txn_id = options.longs === String ? String(message.txn_id) : message.txn_id;
                    else
                        object.txn_id = options.longs === String ? $util.Long.prototype.toString.call(message.txn_id) : options.longs === Number ? new $util.LongBits(message.txn_id.low >>> 0, message.txn_id.high >>> 0).toNumber(true) : message.txn_id;
                if (message.account_id != null && message.hasOwnProperty("account_id"))
                    object.account_id = message.account_id;
                if (message.line_item != null && message.hasOwnProperty("line_item"))
                    object.line_item = message.line_item;
                if (message.item_id != null && message.hasOwnProperty("item_id"))
                    if (typeof message.item_id === "number")
                        object.item_id = options.longs === String ? String(message.item_id) : message.item_id;
                    else
                        object.item_id = options.longs === String ? $util.Long.prototype.toString.call(message.item_id) : options.longs === Number ? new $util.LongBits(message.item_id.low >>> 0, message.item_id.high >>> 0).toNumber(true) : message.item_id;
                if (message.def_index != null && message.hasOwnProperty("def_index"))
                    object.def_index = message.def_index;
                if (message.price != null && message.hasOwnProperty("price"))
                    if (typeof message.price === "number")
                        object.price = options.longs === String ? String(message.price) : message.price;
                    else
                        object.price = options.longs === String ? $util.Long.prototype.toString.call(message.price) : options.longs === Number ? new $util.LongBits(message.price.low >>> 0, message.price.high >>> 0).toNumber(true) : message.price;
                if (message.tax != null && message.hasOwnProperty("tax"))
                    if (typeof message.tax === "number")
                        object.tax = options.longs === String ? String(message.tax) : message.tax;
                    else
                        object.tax = options.longs === String ? $util.Long.prototype.toString.call(message.tax) : options.longs === Number ? new $util.LongBits(message.tax.low >>> 0, message.tax.high >>> 0).toNumber(true) : message.tax;
                if (message.price_usd != null && message.hasOwnProperty("price_usd"))
                    if (typeof message.price_usd === "number")
                        object.price_usd = options.longs === String ? String(message.price_usd) : message.price_usd;
                    else
                        object.price_usd = options.longs === String ? $util.Long.prototype.toString.call(message.price_usd) : options.longs === Number ? new $util.LongBits(message.price_usd.low >>> 0, message.price_usd.high >>> 0).toNumber(true) : message.price_usd;
                if (message.tax_usd != null && message.hasOwnProperty("tax_usd"))
                    if (typeof message.tax_usd === "number")
                        object.tax_usd = options.longs === String ? String(message.tax_usd) : message.tax_usd;
                    else
                        object.tax_usd = options.longs === String ? $util.Long.prototype.toString.call(message.tax_usd) : options.longs === Number ? new $util.LongBits(message.tax_usd.low >>> 0, message.tax_usd.high >>> 0).toNumber(true) : message.tax_usd;
                if (message.purchase_type != null && message.hasOwnProperty("purchase_type"))
                    object.purchase_type = message.purchase_type;
                if (message.steam_txn_type != null && message.hasOwnProperty("steam_txn_type"))
                    object.steam_txn_type = message.steam_txn_type;
                if (message.country_code != null && message.hasOwnProperty("country_code"))
                    object.country_code = message.country_code;
                if (message.region_code != null && message.hasOwnProperty("region_code"))
                    object.region_code = message.region_code;
                if (message.quantity != null && message.hasOwnProperty("quantity"))
                    object.quantity = message.quantity;
                if (message.ref_trans_id != null && message.hasOwnProperty("ref_trans_id"))
                    if (typeof message.ref_trans_id === "number")
                        object.ref_trans_id = options.longs === String ? String(message.ref_trans_id) : message.ref_trans_id;
                    else
                        object.ref_trans_id = options.longs === String ? $util.Long.prototype.toString.call(message.ref_trans_id) : options.longs === Number ? new $util.LongBits(message.ref_trans_id.low >>> 0, message.ref_trans_id.high >>> 0).toNumber(true) : message.ref_trans_id;
                return object;
            };
    
            /**
             * Converts this PartnerMicroTxn to JSON.
             * @function toJSON
             * @memberof CMsgDPPartnerMicroTxns.PartnerMicroTxn
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PartnerMicroTxn.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PartnerMicroTxn;
        })();
    
        CMsgDPPartnerMicroTxns.PartnerInfo = (function() {
    
            /**
             * Properties of a PartnerInfo.
             * @memberof CMsgDPPartnerMicroTxns
             * @interface IPartnerInfo
             * @property {number|null} [partner_id] PartnerInfo partner_id
             * @property {string|null} [partner_name] PartnerInfo partner_name
             * @property {string|null} [currency_code] PartnerInfo currency_code
             * @property {string|null} [currency_name] PartnerInfo currency_name
             */
    
            /**
             * Constructs a new PartnerInfo.
             * @memberof CMsgDPPartnerMicroTxns
             * @classdesc Represents a PartnerInfo.
             * @implements IPartnerInfo
             * @constructor
             * @param {CMsgDPPartnerMicroTxns.IPartnerInfo=} [properties] Properties to set
             */
            function PartnerInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * PartnerInfo partner_id.
             * @member {number} partner_id
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @instance
             */
            PartnerInfo.prototype.partner_id = 0;
    
            /**
             * PartnerInfo partner_name.
             * @member {string} partner_name
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @instance
             */
            PartnerInfo.prototype.partner_name = "";
    
            /**
             * PartnerInfo currency_code.
             * @member {string} currency_code
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @instance
             */
            PartnerInfo.prototype.currency_code = "";
    
            /**
             * PartnerInfo currency_name.
             * @member {string} currency_name
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @instance
             */
            PartnerInfo.prototype.currency_name = "";
    
            /**
             * Creates a new PartnerInfo instance using the specified properties.
             * @function create
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerInfo=} [properties] Properties to set
             * @returns {CMsgDPPartnerMicroTxns.PartnerInfo} PartnerInfo instance
             */
            PartnerInfo.create = function create(properties) {
                return new PartnerInfo(properties);
            };
    
            /**
             * Encodes the specified PartnerInfo message. Does not implicitly {@link CMsgDPPartnerMicroTxns.PartnerInfo.verify|verify} messages.
             * @function encode
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerInfo} message PartnerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartnerInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.partner_id != null && message.hasOwnProperty("partner_id"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.partner_id);
                if (message.partner_name != null && message.hasOwnProperty("partner_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.partner_name);
                if (message.currency_code != null && message.hasOwnProperty("currency_code"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.currency_code);
                if (message.currency_name != null && message.hasOwnProperty("currency_name"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.currency_name);
                return writer;
            };
    
            /**
             * Encodes the specified PartnerInfo message, length delimited. Does not implicitly {@link CMsgDPPartnerMicroTxns.PartnerInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {CMsgDPPartnerMicroTxns.IPartnerInfo} message PartnerInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartnerInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a PartnerInfo message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgDPPartnerMicroTxns.PartnerInfo} PartnerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartnerInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDPPartnerMicroTxns.PartnerInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.partner_id = reader.uint32();
                        break;
                    case 2:
                        message.partner_name = reader.string();
                        break;
                    case 3:
                        message.currency_code = reader.string();
                        break;
                    case 4:
                        message.currency_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a PartnerInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgDPPartnerMicroTxns.PartnerInfo} PartnerInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartnerInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a PartnerInfo message.
             * @function verify
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PartnerInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.partner_id != null && message.hasOwnProperty("partner_id"))
                    if (!$util.isInteger(message.partner_id))
                        return "partner_id: integer expected";
                if (message.partner_name != null && message.hasOwnProperty("partner_name"))
                    if (!$util.isString(message.partner_name))
                        return "partner_name: string expected";
                if (message.currency_code != null && message.hasOwnProperty("currency_code"))
                    if (!$util.isString(message.currency_code))
                        return "currency_code: string expected";
                if (message.currency_name != null && message.hasOwnProperty("currency_name"))
                    if (!$util.isString(message.currency_name))
                        return "currency_name: string expected";
                return null;
            };
    
            /**
             * Creates a PartnerInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgDPPartnerMicroTxns.PartnerInfo} PartnerInfo
             */
            PartnerInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgDPPartnerMicroTxns.PartnerInfo)
                    return object;
                var message = new $root.CMsgDPPartnerMicroTxns.PartnerInfo();
                if (object.partner_id != null)
                    message.partner_id = object.partner_id >>> 0;
                if (object.partner_name != null)
                    message.partner_name = String(object.partner_name);
                if (object.currency_code != null)
                    message.currency_code = String(object.currency_code);
                if (object.currency_name != null)
                    message.currency_name = String(object.currency_name);
                return message;
            };
    
            /**
             * Creates a plain object from a PartnerInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @static
             * @param {CMsgDPPartnerMicroTxns.PartnerInfo} message PartnerInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PartnerInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.partner_id = 0;
                    object.partner_name = "";
                    object.currency_code = "";
                    object.currency_name = "";
                }
                if (message.partner_id != null && message.hasOwnProperty("partner_id"))
                    object.partner_id = message.partner_id;
                if (message.partner_name != null && message.hasOwnProperty("partner_name"))
                    object.partner_name = message.partner_name;
                if (message.currency_code != null && message.hasOwnProperty("currency_code"))
                    object.currency_code = message.currency_code;
                if (message.currency_name != null && message.hasOwnProperty("currency_name"))
                    object.currency_name = message.currency_name;
                return object;
            };
    
            /**
             * Converts this PartnerInfo to JSON.
             * @function toJSON
             * @memberof CMsgDPPartnerMicroTxns.PartnerInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PartnerInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return PartnerInfo;
        })();
    
        return CMsgDPPartnerMicroTxns;
    })();
    
    $root.CMsgDPPartnerMicroTxnsResponse = (function() {
    
        /**
         * Properties of a CMsgDPPartnerMicroTxnsResponse.
         * @exports ICMsgDPPartnerMicroTxnsResponse
         * @interface ICMsgDPPartnerMicroTxnsResponse
         * @property {number|null} [eresult] CMsgDPPartnerMicroTxnsResponse eresult
         * @property {CMsgDPPartnerMicroTxnsResponse.EErrorCode|null} [eerrorcode] CMsgDPPartnerMicroTxnsResponse eerrorcode
         */
    
        /**
         * Constructs a new CMsgDPPartnerMicroTxnsResponse.
         * @exports CMsgDPPartnerMicroTxnsResponse
         * @classdesc Represents a CMsgDPPartnerMicroTxnsResponse.
         * @implements ICMsgDPPartnerMicroTxnsResponse
         * @constructor
         * @param {ICMsgDPPartnerMicroTxnsResponse=} [properties] Properties to set
         */
        function CMsgDPPartnerMicroTxnsResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgDPPartnerMicroTxnsResponse eresult.
         * @member {number} eresult
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @instance
         */
        CMsgDPPartnerMicroTxnsResponse.prototype.eresult = 2;
    
        /**
         * CMsgDPPartnerMicroTxnsResponse eerrorcode.
         * @member {CMsgDPPartnerMicroTxnsResponse.EErrorCode} eerrorcode
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @instance
         */
        CMsgDPPartnerMicroTxnsResponse.prototype.eerrorcode = 0;
    
        /**
         * Creates a new CMsgDPPartnerMicroTxnsResponse instance using the specified properties.
         * @function create
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {ICMsgDPPartnerMicroTxnsResponse=} [properties] Properties to set
         * @returns {CMsgDPPartnerMicroTxnsResponse} CMsgDPPartnerMicroTxnsResponse instance
         */
        CMsgDPPartnerMicroTxnsResponse.create = function create(properties) {
            return new CMsgDPPartnerMicroTxnsResponse(properties);
        };
    
        /**
         * Encodes the specified CMsgDPPartnerMicroTxnsResponse message. Does not implicitly {@link CMsgDPPartnerMicroTxnsResponse.verify|verify} messages.
         * @function encode
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {ICMsgDPPartnerMicroTxnsResponse} message CMsgDPPartnerMicroTxnsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDPPartnerMicroTxnsResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.eresult);
            if (message.eerrorcode != null && message.hasOwnProperty("eerrorcode"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.eerrorcode);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgDPPartnerMicroTxnsResponse message, length delimited. Does not implicitly {@link CMsgDPPartnerMicroTxnsResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {ICMsgDPPartnerMicroTxnsResponse} message CMsgDPPartnerMicroTxnsResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgDPPartnerMicroTxnsResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgDPPartnerMicroTxnsResponse message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgDPPartnerMicroTxnsResponse} CMsgDPPartnerMicroTxnsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDPPartnerMicroTxnsResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgDPPartnerMicroTxnsResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eresult = reader.uint32();
                    break;
                case 2:
                    message.eerrorcode = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgDPPartnerMicroTxnsResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgDPPartnerMicroTxnsResponse} CMsgDPPartnerMicroTxnsResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgDPPartnerMicroTxnsResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgDPPartnerMicroTxnsResponse message.
         * @function verify
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgDPPartnerMicroTxnsResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                if (!$util.isInteger(message.eresult))
                    return "eresult: integer expected";
            if (message.eerrorcode != null && message.hasOwnProperty("eerrorcode"))
                switch (message.eerrorcode) {
                default:
                    return "eerrorcode: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                    break;
                }
            return null;
        };
    
        /**
         * Creates a CMsgDPPartnerMicroTxnsResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgDPPartnerMicroTxnsResponse} CMsgDPPartnerMicroTxnsResponse
         */
        CMsgDPPartnerMicroTxnsResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgDPPartnerMicroTxnsResponse)
                return object;
            var message = new $root.CMsgDPPartnerMicroTxnsResponse();
            if (object.eresult != null)
                message.eresult = object.eresult >>> 0;
            switch (object.eerrorcode) {
            case "k_MsgValid":
            case 0:
                message.eerrorcode = 0;
                break;
            case "k_MsgInvalidAppID":
            case 1:
                message.eerrorcode = 1;
                break;
            case "k_MsgInvalidPartnerInfo":
            case 2:
                message.eerrorcode = 2;
                break;
            case "k_MsgNoTransactions":
            case 3:
                message.eerrorcode = 3;
                break;
            case "k_MsgSQLFailure":
            case 4:
                message.eerrorcode = 4;
                break;
            case "k_MsgPartnerInfoDiscrepancy":
            case 5:
                message.eerrorcode = 5;
                break;
            case "k_MsgTransactionInsertFailed":
            case 7:
                message.eerrorcode = 7;
                break;
            case "k_MsgAlreadyRunning":
            case 8:
                message.eerrorcode = 8;
                break;
            case "k_MsgInvalidTransactionData":
            case 9:
                message.eerrorcode = 9;
                break;
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgDPPartnerMicroTxnsResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @static
         * @param {CMsgDPPartnerMicroTxnsResponse} message CMsgDPPartnerMicroTxnsResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgDPPartnerMicroTxnsResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eresult = 2;
                object.eerrorcode = options.enums === String ? "k_MsgValid" : 0;
            }
            if (message.eresult != null && message.hasOwnProperty("eresult"))
                object.eresult = message.eresult;
            if (message.eerrorcode != null && message.hasOwnProperty("eerrorcode"))
                object.eerrorcode = options.enums === String ? $root.CMsgDPPartnerMicroTxnsResponse.EErrorCode[message.eerrorcode] : message.eerrorcode;
            return object;
        };
    
        /**
         * Converts this CMsgDPPartnerMicroTxnsResponse to JSON.
         * @function toJSON
         * @memberof CMsgDPPartnerMicroTxnsResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgDPPartnerMicroTxnsResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * EErrorCode enum.
         * @name CMsgDPPartnerMicroTxnsResponse.EErrorCode
         * @enum {string}
         * @property {number} k_MsgValid=0 k_MsgValid value
         * @property {number} k_MsgInvalidAppID=1 k_MsgInvalidAppID value
         * @property {number} k_MsgInvalidPartnerInfo=2 k_MsgInvalidPartnerInfo value
         * @property {number} k_MsgNoTransactions=3 k_MsgNoTransactions value
         * @property {number} k_MsgSQLFailure=4 k_MsgSQLFailure value
         * @property {number} k_MsgPartnerInfoDiscrepancy=5 k_MsgPartnerInfoDiscrepancy value
         * @property {number} k_MsgTransactionInsertFailed=7 k_MsgTransactionInsertFailed value
         * @property {number} k_MsgAlreadyRunning=8 k_MsgAlreadyRunning value
         * @property {number} k_MsgInvalidTransactionData=9 k_MsgInvalidTransactionData value
         */
        CMsgDPPartnerMicroTxnsResponse.EErrorCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "k_MsgValid"] = 0;
            values[valuesById[1] = "k_MsgInvalidAppID"] = 1;
            values[valuesById[2] = "k_MsgInvalidPartnerInfo"] = 2;
            values[valuesById[3] = "k_MsgNoTransactions"] = 3;
            values[valuesById[4] = "k_MsgSQLFailure"] = 4;
            values[valuesById[5] = "k_MsgPartnerInfoDiscrepancy"] = 5;
            values[valuesById[7] = "k_MsgTransactionInsertFailed"] = 7;
            values[valuesById[8] = "k_MsgAlreadyRunning"] = 8;
            values[valuesById[9] = "k_MsgInvalidTransactionData"] = 9;
            return values;
        })();
    
        return CMsgDPPartnerMicroTxnsResponse;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {number|null} [".msgpool_soft_limit"] MessageOptions .msgpool_soft_limit
                 * @property {number|null} [".msgpool_hard_limit"] MessageOptions .msgpool_hard_limit
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MessageOptions .msgpool_soft_limit.
                 * @member {number} .msgpool_soft_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_soft_limit"] = 32;
    
                /**
                 * MessageOptions .msgpool_hard_limit.
                 * @member {number} .msgpool_hard_limit
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".msgpool_hard_limit"] = 384;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        writer.uint32(/* id 60000, wireType 0 =*/480000).int32(message[".msgpool_soft_limit"]);
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        writer.uint32(/* id 60001, wireType 0 =*/480008).int32(message[".msgpool_hard_limit"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 60000:
                            message[".msgpool_soft_limit"] = reader.int32();
                            break;
                        case 60001:
                            message[".msgpool_hard_limit"] = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        if (!$util.isInteger(message[".msgpool_soft_limit"]))
                            return ".msgpool_soft_limit: integer expected";
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        if (!$util.isInteger(message[".msgpool_hard_limit"]))
                            return ".msgpool_hard_limit: integer expected";
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".msgpool_soft_limit"] != null)
                        message[".msgpool_soft_limit"] = object[".msgpool_soft_limit"] | 0;
                    if (object[".msgpool_hard_limit"] != null)
                        message[".msgpool_hard_limit"] = object[".msgpool_hard_limit"] | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object[".msgpool_soft_limit"] = 32;
                        object[".msgpool_hard_limit"] = 384;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".msgpool_soft_limit"] != null && message.hasOwnProperty(".msgpool_soft_limit"))
                        object[".msgpool_soft_limit"] = message[".msgpool_soft_limit"];
                    if (message[".msgpool_hard_limit"] != null && message.hasOwnProperty(".msgpool_hard_limit"))
                        object[".msgpool_hard_limit"] = message[".msgpool_hard_limit"];
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {string|null} [experimental_map_key] FieldOptions experimental_map_key
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {boolean|null} [".key_field"] FieldOptions .key_field
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions experimental_map_key.
                 * @member {string} experimental_map_key
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.experimental_map_key = "";
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .key_field.
                 * @member {boolean} .key_field
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".key_field"] = false;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.experimental_map_key);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".key_field"] != null && message.hasOwnProperty(".key_field"))
                        writer.uint32(/* id 60000, wireType 0 =*/480000).bool(message[".key_field"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 9:
                            message.experimental_map_key = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 60000:
                            message[".key_field"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        if (!$util.isString(message.experimental_map_key))
                            return "experimental_map_key: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".key_field"] != null && message.hasOwnProperty(".key_field"))
                        if (typeof message[".key_field"] !== "boolean")
                            return ".key_field: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.experimental_map_key != null)
                        message.experimental_map_key = String(object.experimental_map_key);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".key_field"] != null)
                        message[".key_field"] = Boolean(object[".key_field"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.experimental_map_key = "";
                        object[".key_field"] = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.experimental_map_key != null && message.hasOwnProperty("experimental_map_key"))
                        object.experimental_map_key = message.experimental_map_key;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".key_field"] != null && message.hasOwnProperty(".key_field"))
                        object[".key_field"] = message[".key_field"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();
    
    $root.CEngineGotvSyncPacket = (function() {
    
        /**
         * Properties of a CEngineGotvSyncPacket.
         * @exports ICEngineGotvSyncPacket
         * @interface ICEngineGotvSyncPacket
         * @property {number|Long|null} [match_id] CEngineGotvSyncPacket match_id
         * @property {number|null} [instance_id] CEngineGotvSyncPacket instance_id
         * @property {number|null} [signupfragment] CEngineGotvSyncPacket signupfragment
         * @property {number|null} [currentfragment] CEngineGotvSyncPacket currentfragment
         * @property {number|null} [tickrate] CEngineGotvSyncPacket tickrate
         * @property {number|null} [tick] CEngineGotvSyncPacket tick
         * @property {number|null} [rtdelay] CEngineGotvSyncPacket rtdelay
         * @property {number|null} [rcvage] CEngineGotvSyncPacket rcvage
         * @property {number|null} [keyframe_interval] CEngineGotvSyncPacket keyframe_interval
         * @property {number|null} [cdndelay] CEngineGotvSyncPacket cdndelay
         */
    
        /**
         * Constructs a new CEngineGotvSyncPacket.
         * @exports CEngineGotvSyncPacket
         * @classdesc Represents a CEngineGotvSyncPacket.
         * @implements ICEngineGotvSyncPacket
         * @constructor
         * @param {ICEngineGotvSyncPacket=} [properties] Properties to set
         */
        function CEngineGotvSyncPacket(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CEngineGotvSyncPacket match_id.
         * @member {number|Long} match_id
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.match_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CEngineGotvSyncPacket instance_id.
         * @member {number} instance_id
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.instance_id = 0;
    
        /**
         * CEngineGotvSyncPacket signupfragment.
         * @member {number} signupfragment
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.signupfragment = 0;
    
        /**
         * CEngineGotvSyncPacket currentfragment.
         * @member {number} currentfragment
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.currentfragment = 0;
    
        /**
         * CEngineGotvSyncPacket tickrate.
         * @member {number} tickrate
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.tickrate = 0;
    
        /**
         * CEngineGotvSyncPacket tick.
         * @member {number} tick
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.tick = 0;
    
        /**
         * CEngineGotvSyncPacket rtdelay.
         * @member {number} rtdelay
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.rtdelay = 0;
    
        /**
         * CEngineGotvSyncPacket rcvage.
         * @member {number} rcvage
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.rcvage = 0;
    
        /**
         * CEngineGotvSyncPacket keyframe_interval.
         * @member {number} keyframe_interval
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.keyframe_interval = 0;
    
        /**
         * CEngineGotvSyncPacket cdndelay.
         * @member {number} cdndelay
         * @memberof CEngineGotvSyncPacket
         * @instance
         */
        CEngineGotvSyncPacket.prototype.cdndelay = 0;
    
        /**
         * Creates a new CEngineGotvSyncPacket instance using the specified properties.
         * @function create
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {ICEngineGotvSyncPacket=} [properties] Properties to set
         * @returns {CEngineGotvSyncPacket} CEngineGotvSyncPacket instance
         */
        CEngineGotvSyncPacket.create = function create(properties) {
            return new CEngineGotvSyncPacket(properties);
        };
    
        /**
         * Encodes the specified CEngineGotvSyncPacket message. Does not implicitly {@link CEngineGotvSyncPacket.verify|verify} messages.
         * @function encode
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {ICEngineGotvSyncPacket} message CEngineGotvSyncPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CEngineGotvSyncPacket.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.match_id);
            if (message.instance_id != null && message.hasOwnProperty("instance_id"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.instance_id);
            if (message.signupfragment != null && message.hasOwnProperty("signupfragment"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.signupfragment);
            if (message.currentfragment != null && message.hasOwnProperty("currentfragment"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.currentfragment);
            if (message.tickrate != null && message.hasOwnProperty("tickrate"))
                writer.uint32(/* id 5, wireType 5 =*/45).float(message.tickrate);
            if (message.tick != null && message.hasOwnProperty("tick"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.tick);
            if (message.rtdelay != null && message.hasOwnProperty("rtdelay"))
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.rtdelay);
            if (message.rcvage != null && message.hasOwnProperty("rcvage"))
                writer.uint32(/* id 9, wireType 5 =*/77).float(message.rcvage);
            if (message.keyframe_interval != null && message.hasOwnProperty("keyframe_interval"))
                writer.uint32(/* id 10, wireType 5 =*/85).float(message.keyframe_interval);
            if (message.cdndelay != null && message.hasOwnProperty("cdndelay"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.cdndelay);
            return writer;
        };
    
        /**
         * Encodes the specified CEngineGotvSyncPacket message, length delimited. Does not implicitly {@link CEngineGotvSyncPacket.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {ICEngineGotvSyncPacket} message CEngineGotvSyncPacket message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CEngineGotvSyncPacket.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CEngineGotvSyncPacket message from the specified reader or buffer.
         * @function decode
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CEngineGotvSyncPacket} CEngineGotvSyncPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CEngineGotvSyncPacket.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CEngineGotvSyncPacket();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.match_id = reader.uint64();
                    break;
                case 2:
                    message.instance_id = reader.uint32();
                    break;
                case 3:
                    message.signupfragment = reader.uint32();
                    break;
                case 4:
                    message.currentfragment = reader.uint32();
                    break;
                case 5:
                    message.tickrate = reader.float();
                    break;
                case 6:
                    message.tick = reader.uint32();
                    break;
                case 8:
                    message.rtdelay = reader.float();
                    break;
                case 9:
                    message.rcvage = reader.float();
                    break;
                case 10:
                    message.keyframe_interval = reader.float();
                    break;
                case 11:
                    message.cdndelay = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CEngineGotvSyncPacket message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CEngineGotvSyncPacket} CEngineGotvSyncPacket
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CEngineGotvSyncPacket.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CEngineGotvSyncPacket message.
         * @function verify
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CEngineGotvSyncPacket.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (!$util.isInteger(message.match_id) && !(message.match_id && $util.isInteger(message.match_id.low) && $util.isInteger(message.match_id.high)))
                    return "match_id: integer|Long expected";
            if (message.instance_id != null && message.hasOwnProperty("instance_id"))
                if (!$util.isInteger(message.instance_id))
                    return "instance_id: integer expected";
            if (message.signupfragment != null && message.hasOwnProperty("signupfragment"))
                if (!$util.isInteger(message.signupfragment))
                    return "signupfragment: integer expected";
            if (message.currentfragment != null && message.hasOwnProperty("currentfragment"))
                if (!$util.isInteger(message.currentfragment))
                    return "currentfragment: integer expected";
            if (message.tickrate != null && message.hasOwnProperty("tickrate"))
                if (typeof message.tickrate !== "number")
                    return "tickrate: number expected";
            if (message.tick != null && message.hasOwnProperty("tick"))
                if (!$util.isInteger(message.tick))
                    return "tick: integer expected";
            if (message.rtdelay != null && message.hasOwnProperty("rtdelay"))
                if (typeof message.rtdelay !== "number")
                    return "rtdelay: number expected";
            if (message.rcvage != null && message.hasOwnProperty("rcvage"))
                if (typeof message.rcvage !== "number")
                    return "rcvage: number expected";
            if (message.keyframe_interval != null && message.hasOwnProperty("keyframe_interval"))
                if (typeof message.keyframe_interval !== "number")
                    return "keyframe_interval: number expected";
            if (message.cdndelay != null && message.hasOwnProperty("cdndelay"))
                if (!$util.isInteger(message.cdndelay))
                    return "cdndelay: integer expected";
            return null;
        };
    
        /**
         * Creates a CEngineGotvSyncPacket message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CEngineGotvSyncPacket} CEngineGotvSyncPacket
         */
        CEngineGotvSyncPacket.fromObject = function fromObject(object) {
            if (object instanceof $root.CEngineGotvSyncPacket)
                return object;
            var message = new $root.CEngineGotvSyncPacket();
            if (object.match_id != null)
                if ($util.Long)
                    (message.match_id = $util.Long.fromValue(object.match_id)).unsigned = true;
                else if (typeof object.match_id === "string")
                    message.match_id = parseInt(object.match_id, 10);
                else if (typeof object.match_id === "number")
                    message.match_id = object.match_id;
                else if (typeof object.match_id === "object")
                    message.match_id = new $util.LongBits(object.match_id.low >>> 0, object.match_id.high >>> 0).toNumber(true);
            if (object.instance_id != null)
                message.instance_id = object.instance_id >>> 0;
            if (object.signupfragment != null)
                message.signupfragment = object.signupfragment >>> 0;
            if (object.currentfragment != null)
                message.currentfragment = object.currentfragment >>> 0;
            if (object.tickrate != null)
                message.tickrate = Number(object.tickrate);
            if (object.tick != null)
                message.tick = object.tick >>> 0;
            if (object.rtdelay != null)
                message.rtdelay = Number(object.rtdelay);
            if (object.rcvage != null)
                message.rcvage = Number(object.rcvage);
            if (object.keyframe_interval != null)
                message.keyframe_interval = Number(object.keyframe_interval);
            if (object.cdndelay != null)
                message.cdndelay = object.cdndelay >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CEngineGotvSyncPacket message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CEngineGotvSyncPacket
         * @static
         * @param {CEngineGotvSyncPacket} message CEngineGotvSyncPacket
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CEngineGotvSyncPacket.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.match_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.match_id = options.longs === String ? "0" : 0;
                object.instance_id = 0;
                object.signupfragment = 0;
                object.currentfragment = 0;
                object.tickrate = 0;
                object.tick = 0;
                object.rtdelay = 0;
                object.rcvage = 0;
                object.keyframe_interval = 0;
                object.cdndelay = 0;
            }
            if (message.match_id != null && message.hasOwnProperty("match_id"))
                if (typeof message.match_id === "number")
                    object.match_id = options.longs === String ? String(message.match_id) : message.match_id;
                else
                    object.match_id = options.longs === String ? $util.Long.prototype.toString.call(message.match_id) : options.longs === Number ? new $util.LongBits(message.match_id.low >>> 0, message.match_id.high >>> 0).toNumber(true) : message.match_id;
            if (message.instance_id != null && message.hasOwnProperty("instance_id"))
                object.instance_id = message.instance_id;
            if (message.signupfragment != null && message.hasOwnProperty("signupfragment"))
                object.signupfragment = message.signupfragment;
            if (message.currentfragment != null && message.hasOwnProperty("currentfragment"))
                object.currentfragment = message.currentfragment;
            if (message.tickrate != null && message.hasOwnProperty("tickrate"))
                object.tickrate = options.json && !isFinite(message.tickrate) ? String(message.tickrate) : message.tickrate;
            if (message.tick != null && message.hasOwnProperty("tick"))
                object.tick = message.tick;
            if (message.rtdelay != null && message.hasOwnProperty("rtdelay"))
                object.rtdelay = options.json && !isFinite(message.rtdelay) ? String(message.rtdelay) : message.rtdelay;
            if (message.rcvage != null && message.hasOwnProperty("rcvage"))
                object.rcvage = options.json && !isFinite(message.rcvage) ? String(message.rcvage) : message.rcvage;
            if (message.keyframe_interval != null && message.hasOwnProperty("keyframe_interval"))
                object.keyframe_interval = options.json && !isFinite(message.keyframe_interval) ? String(message.keyframe_interval) : message.keyframe_interval;
            if (message.cdndelay != null && message.hasOwnProperty("cdndelay"))
                object.cdndelay = message.cdndelay;
            return object;
        };
    
        /**
         * Converts this CEngineGotvSyncPacket to JSON.
         * @function toJSON
         * @memberof CEngineGotvSyncPacket
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CEngineGotvSyncPacket.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        return CEngineGotvSyncPacket;
    })();

    return $root;
});
